/*
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/
/                                         NNNNN         NNN
/                                         NNNNNN        NNN
/                                         NNN NNN       NNN
/                                         NNN  NNN      NNN
/                                         NNN   NNN     NNN
/                                         NNN    NNN    NNN 
/                                         NNN     NNN   NNN
/                                         NNN      NNN  NNN
/                                         NNN       NNN NNN
/                                         NNN        NNNNNN
/                                         NNN         NNNNN
/
/
/												NewCity
/                      	   		____ ______    ____ ___  _    ____ _   _
/				                 |__/ |  | |    |___ |__] |    |__|  \_/
/				                 |  \ |__| |___ |___ |    |___ |  |   |
/
/
/                                 Project: NewCity RolePlay v1.0.0
/
/                                           Dev Team:
/	                        		   Ausil (Main Scripter)
/                                      Nam (Scripter & Design)
/                                      Vityl (Mapper)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
*/

// ---------------------------------------
#pragma dynamic 150616
// ---------------------------------------
#include <a_samp>
#include <BustAim>
#include <weapon-config>
#include <a_http>
#include <a_mysql>
#include <foreach>
#include <sscanf2>
#include <streamer>
#include <selection>
#include <tp>
#include <Pawn.CMD>
#include <SKY>
#include <DialogCenter>
#include <youtube_stream>
#include <YSI\y_hooks>
#include <YSI\y_timers>
#include <YSI\y_dialog>
#include <YSI\y_ini>
#include <YSI\y_inline>
#include <zones>
//#include <discord-connector>
#include <YSF>
#include <samp-plus>
#include <dini>
// --------------------------------------
//#include <dyn_objects>
// ---------------------------------------
#define MYSQL_HOSTNAME  "localhost" // host
#define MYSQL_DATABASE  "nrp" /*"pd"*/
#define MYSQL_USERNAME  "root" //user
#define MYSQL_PASSWORD  "" //no pass
//----------------------------------------
#undef MAX_PLAYERS
#define MAX_PLAYERS 200
// ---------------------------------------
#define SERVER_REVISION  "v1.0.0" // Change this every commit.
#define SERVER_ANTICHEAT "He Thong"
// -----------[ ANTI FLOOD ] ------------
#define MAX_CONNECT 10
new UserMaxConnect[MAX_PLAYERS];
new ipa[30];
#define IsPlayerAndroid(%0)                 GetPVarInt(%0, "NotAndroid") == 0
//#define SERVER_INTRO // Comment this line to disable the intro for unregistered users.
// ---------------------------------------
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_YELLOW    	0xFFD200FF
#define COLOR_YELLOW2       0xF5DEB3FF
#define COLOR_YELLOW3       0xFFFF90FF
#define COLOR_LIGHTORANGE   0xF7A763FF
#define COLOR_AQUA        	0x33CCFFFF
#define COLOR_GREEN         0x32CD32FF
//#define COLOR_GREEN         0x008000FF
#define COLOR_LIMEGREEN     0x06FF00FF
#define COLOR_GREY          0xAFAFAFFF
#define	COLOR_GREY1    		0xE6E6E6FF
#define COLOR_GREY2 		0xC8C8C8FF
#define COLOR_GREY3 		0xAAAAAAFF
#define COLOR_GREY4 		0x8C8C8CFF
#define COLOR_GREY5 		0x6E6E6EFF
#define COLOR_LIGHTRED      0xFF6347FF
#define COLOR_ORANGE        0xFF9900FF
#define COLOR_RED           0xAA3333FF
#define COLOR_PURPLE        0xC2A2DAFF
#define COLOR_NEWBIE        0x7DAEFFFF
#define COLOR_BLUE          0x233EFAFF
#define COLOR_ROYALBLUE     0x9999FFFF
#define COLOR_YELLOWGREEN 	0xADFF2FFF
#define COLOR_DOCTOR        0xFF8282FF
#define COLOR_DARKGREEN     0x00AA00FF
#define COLOR_VIP           0xD909D9FF
#define COLOR_WALKIETALKIE  0xB2EBE0FF
#define COLOR_NAVYBLUE 0x089DCEFF
#define COLOR_LIGHTGREEN    0x9ACD32FF
#define COLOR_GLOBAL        0xFFA500FF
#define COLOR_CHAT     0x089DCEFF
//#define COLOR_FACTIONCHAT   0xBDF38BFF
#define COLOR_FACTIONCHAT   0x01FCFFC8
#define COLOR_SYNTAX        0xAFAFAFFF
#define COLOR_RETIRED       0xFF69B5FF
// ---------------------------------------
#define MAX_LISTED_NUMBERS          50
#define MAX_LISTED_OBJECTS          50
#define MAX_LISTED_STATIONS         50
#define MAX_SPLIT_LENGTH            70
// ---------------------------------------
#define MAX_REPORTS         		50
#define MAX_HOUSES          		1000
#define MAX_GARAGES         		1000
#define MAX_DYNAMIC_OBJECTS   	 	2000
#define MAX_BUSINESSES      		500
#define MAX_ENTRANCES       		500
#define MAX_PLAYER_CLOTHING     	10
#define MAX_SPAWNED_VEHICLES 		3
#define MAX_ANTICHEAT_WARNINGS      8
#define MAX_FACTIONS                10
#define MAX_FACTION_RANKS           20
#define MAX_FACTION_SKINS           10
#define MAX_FACTION_DIVISIONS       5
#define MAX_GANG_CREWS              5
#define MAX_DEPLOYABLES             50
#define MAX_FIRES                   100
#define MAX_LANDS               	50
#define MAX_LOCKERS         		20
#define MAX_GANGS                   15
#define MAX_GANG_SKINS              10
#define MAX_POINTS                  10
#define MAX_TURFS                   30
#define MAX_BANK_ROBBERS            5
#define MAX_LOCATIONS                30
#define MAX_ATMS                    50
#define MAX_GRAFFITI_POINTS         200
#define MAX_WEAPON_RACKS            500
#define MAX_SPEED_CAMERAS           100
// ---------------------------------------
#define MAX_CAN_SA  100
#define MAX_COWS 6
// ---------------------------------------
// --- Function Shortcuts --- //
#define SCM 	SendClientMessage
#define SCMA 	SendClientMessageToAll
#define SCMf 	SendClientMessageFormatted // SendClientMessage with string formats
#define SAM 	SendAdminMessage // with string formats
//-- Iterator for huge/freq arrays-----
new
	Iterator:House<MAX_HOUSES>,
	Iterator:Garage<MAX_GARAGES>,
	Iterator:Entrance<MAX_ENTRANCES>,
	Iterator:Business<MAX_BUSINESSES>,
	//Iterator:Faction<MAX_FACTIONS>,
	//Iterator:Fire<MAX_FIRES>,
	Iterator:Land<MAX_LANDS>,
	//Iterator:Locker<MAX_LOCKERS>,
	//Iterator:Gang<MAX_GANGS>,
	//Iterator:Point<MAX_POINTS>,
	Iterator:Turf<MAX_TURFS>;
	//Iterator:LandObjects<(MAX_LANDS*300)>,
// ---------------------------------------
#define THREAD_LOOKUP_BANS          1
#define THREAD_LOOKUP_ACCOUNT    	2
#define THREAD_ACCOUNT_REGISTER     3
#define THREAD_PROCESS_LOGIN        4
#define THREAD_COUNT_FLAGS          5
#define THREAD_TRACE_IP             6
#define THREAD_LOGIN_UPDATE         7
#define THREAD_LIST_CHANGES         8
#define THREAD_LIST_HELPERS         9
#define THREAD_LOAD_HOUSES          10
#define THREAD_LIST_TENANTS         11
#define THREAD_LOAD_FURNITURE       12
#define THREAD_LOAD_GARAGES         13
#define THREAD_LOAD_BUSINESSES      14
#define THREAD_LOAD_ENTRANCES       15
#define THREAD_LOAD_CLOTHING        16
#define THREAD_LOAD_FACTIONS        17
#define THREAD_LOAD_FACTIONRANKS    18
#define THREAD_LOAD_FACTIONSKINS    19
#define THREAD_LOAD_FACTIONPAY      20
#define THREAD_LOAD_DIVISIONS       21
#define THREAD_LOAD_LANDS           22
#define THREAD_LOAD_LANDOBJECTS     23
#define THREAD_LOAD_GANGS           24
#define THREAD_LOAD_GANGRANKS       25
#define THREAD_LOAD_GANGSKINS       26
#define THREAD_LOAD_POINTS          27
#define THREAD_LOAD_TURFS           28
#define THREAD_LOAD_LOCKERS         29
#define THREAD_HOUSE_INFORMATION    30
#define THREAD_COUNT_FURNITURE      31
#define THREAD_SELL_FURNITURE       32
#define THREAD_CLEAR_FURNITURE      33
#define THREAD_DUPLICATE_FURNITURE  34
#define THREAD_DUPLICATED_FURNITURE 35
#define THREAD_COUNT_TEXTS          36
#define THREAD_VIEW_TEXTS           37
#define THREAD_LIST_VEHICLES        38
#define THREAD_CAR_STORAGE          39
#define THREAD_FACTION_ROSTER       40
#define THREAD_GANG_ROSTER          41
#define THREAD_VIEW_PHONEBOOK       42
#define THREAD_COUNT_LANDOBJECTS    43
#define THREAD_SELL_LANDOBJECT      44
#define THREAD_DUPLICATE_LANDOBJECT 45
#define THREAD_DUPLICATED_OBJECT    46
#define THREAD_CLEAR_LANDOBJECTS    47
#define THREAD_LIST_LANDOBJECTS     48
#define THREAD_LAND_MAINMENU        49
#define THREAD_LAND_INFORMATION     50
#define THREAD_LOAD_VEHICLES        51
#define THREAD_GANG_INFORMATION     52
#define THREAD_OFFLINE_IP           53
#define THREAD_CHECK_REFERRAL       54
#define THREAD_REWARD_REFERRER      55
#define THREAD_LIST_FLAGGED         56
#define THREAD_LIST_ACHIEVEMENTS    57
#define THREAD_LIST_ADMINS          58
#define THREAD_DUPLICATE_LANDOBJ    59
#define THREAD_CHECKDUPE_FURNITURE  60
#define THREAD_LOAD_LOCATIONS       61
#define THREAD_UPDATE_LANDLABELS    62
#define THREAD_LOAD_CREWS           63
#define THREAD_LIST_VIPS            64
#define THREAD_LOAD_ATMS            65
#define THREAD_REMOVE_VIP 	        66
#define THREAD_LOAD_PLAYERBACKPACK  67
// ---------------------------------------
#define MODEL_SELECTION_CLOTHES     1
#define MODEL_SELECTION_FURNITURE   2
#define MODEL_SELECTION_LANDOBJECTS 3
#define MODEL_SELECTION_CLOTHING    4
#define MODEL_SELECTION_COPCLOTHING 5
#define MODEL_SELECTION_VIPCLOTHES  6
// ---------------------------------------
#define RED_TEAM    0
#define BLUE_TEAM   1
// ---------------------------------------
//#define strcpy(%0,%1)   strcat(((%0[0] = 0), %0), %1)
#define percent(%0,%1)  floatround((float((%0)) / 100) * (%1))
#define Random(%0,%1)   (random((%1) - (%0)) + (%0))
// ---------------------------------------
#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

new IsPlayerSteppingInVehicle[MAX_PLAYERS] = -1;
/*new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;
new Text:Textdraw4;
new Text:Textdraw5;
new Text:Textdraw6;
new Text:Textdraw7;
new Text:Textdraw8;*/
// ---------------------------------------
new PlayerText:Custom_Hud[MAX_PLAYERS][31];
new PlayerText:PD_Card[MAX_PLAYERS][7];
new PlayerText:Cz_Text[MAX_PLAYERS][8];
new PlayerText:Loading_Text[MAX_PLAYERS][3];
// ---------------------------------------
#define SERVER_MUSIC_URL "new-city.net"
#define SERVER_FETCH_URL "new-city.net"
#define VIP_MUSIC_URL "new-city.net"
// ---------------------------------------
#undef SSCANF_Join
#undef SSCANF_Leave
// ---------------------------------------

// - DISCORD STUFF
#define AdChannel "596715749993742336"
// -
//new DCC_Channel:BotChannel;

new tsstring[2048]; // faking too many turfs

// Mask System
new Maskara[MAX_PLAYERS];
new MaskaraID[MAX_PLAYERS] = 0;

// NewCity roleplay td login
//new Text:LoginTD[4];

// Elevator Defines
#define ELEVATOR_SPEED      (5.0)   // Movement speed of the elevator.
#define DOORS_SPEED         (5.0)   // Movement speed of the doors.
#define ELEVATOR_WAIT_TIME  (5000)  // Time in ms that the elevator will wait in each floor before continuing with the queue.
#define DIALOG_ID           DIALOG_LSELEVATOR
#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD      (14.511476)
#define ELEVATOR_OFFSET     (0.059523)

new Obj_Elevator, Obj_ElevatorDoors[2],
	Obj_FloorDoors[21][2];

new Text3D:Label_Elevator, Text3D:Label_Floors[21];

#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)
new Text:houseLights;
// giftbox made by Koxie
new mysteryegg;
new Text3D:mysteryegg3DText;
new GiftAllowed;
//////////////welcome back pm /
////////////////////////////
new ElevatorState,
	ElevatorFloor;  // If Idle or Waiting, this is the current floor. If Moving, the floor it's moving to.

#define INVALID_FLOOR           (-1)

new ElevatorQueue[21],  	// Floors in queue.
	FloorRequestedBy[21];   // FloorRequestedBy[floor_id] = playerid; - Points out who requested which floor.

new ElevatorBoostTimer;     // Timer that makes the elevator move faster after players start surfing the object.
// Can sa

// - Pizza Jobs
new VehiclesPizza[MAX_PLAYERS];
new PizzaDuty[MAX_PLAYERS];
// - Courier Jobs
new VehiclesCourier[MAX_PLAYERS];
new CourierDuty[MAX_PLAYERS];
//Nong dan
new FarmerDuty[MAX_PLAYERS];
//Can sa
new CheckCSTimer[MAX_PLAYERS];
new HaiCanSa[MAX_PLAYERS];
new TimerHai[MAX_PLAYERS];

enum CanSaEnum {
	CanSaID,
	CanSaKhaiThac,
	PlayerKhaiThacCS,
	CSObj,
	Float:CSPostion[3],
	CanSaSet,
	CanSaTimeRS,
	CanSaCountRS,
	timeberc,
}
new CSInfo[MAX_CAN_SA][CanSaEnum];
//du lieu tam thoi
new Cgetfood[MAX_PLAYERS];
new FeedingCow[MAX_PLAYERS];
//----------------

enum CowInfo //tao mot kieu du lieu
{
	Float:cPos_X,
	Float:cPos_Y,
	Float:cPos_Z,
	Text3D:cowName
};

new Cows[MAX_COWS][CowInfo] = //mot kieu du lieu
{
	{-43.577941, 27.578924, 1.987187},
	{-42.510791, 30.922767, 1.987187},
	{-41.291625, 34.742908, 1.987187},
	{-52.854862, 30.327772, 1.997186},
	{-51.255889, 34.990421, 1.997186},
	{-49.280281, 40.289936, 1.997186}
};
//==============================================================
// Hooking for youtube links
stock PlayAudioStream_Ex(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
    if(IsValidYoutubeUrl(url))
	{
	    PlayYoutubeStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	}
	else
	{
		PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	}
}
#if defined _ALS_PlayAudioStreamForPlayer
        #undef PlayAudioStreamForPlayer
#else
        #define _ALS_PlayAudioStreamForPlayer
#endif
#define PlayAudioStreamForPlayer PlayAudioStream_Ex


//----------------------------------------
// Dynamic Object Iter
/*stock ffCreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0, Float:drawdistance = 0.0)
{
	new id;
	id = CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worldid, interiorid ,playerid, streamdistanc, drawdistance);
	Iter_Add(DynamicObjects, id);
	return id;
}

#if defined _ALS_CreateDynamicObject
  	#undef CreateDynamicObject
#else
	#define _ALS_CreateDynamicObject
#endif
#define CreateDynamicObject ffCreateDynamicObject

stock ffDestroyDynamicObject(objectid)
{
	if(Iter_Contains(DynamicObjects, objectid))Iter_Remove(DynamicObjects, objectid);
	return DestroyDynamicObject(objectid);
}

#if defined _ALS_DestroyDynamicObject
  	#undef DestroyDynamicObject
#else
	#define _ALS_DestroyDynamicObject
#endif
#define DestroyDynamicObject ffDestroyDynamicObject*/


//----------------------------------------

// Elevator statics

static FloorNames[21][] =
{
	"Ground Floor",
	"First Floor",
	"Second Floor",
	"Third Floor",
	"Fourth Floor",
	"Fifth Floor",
	"Sixth Floor",
	"Seventh Floor",
	"Eighth Floor",
	"Ninth Floor",
	"Tenth Floor",
	"Eleventh Floor",
	"Twelfth Floor",
	"Thirteenth Floor",
	"Fourteenth Floor",
	"Fifteenth Floor",
	"Sixteenth Floor",
	"Seventeenth Floor",
	"Eighteenth Floor",
	"Nineteenth Floor",
	"Penthouse"
};

static Float:FloorZOffsets[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};
//-----------------------------------------

enum
{
	DIALOG_NONE = 1,
	DIALOG_REGISTER,
	DIALOG_CONFIRMPASS,
	DIALOG_LOGIN,
	DIALOG_GENDER,
	DIALOG_RACKWEAPONS,
	DIALOG_AGE,
	DIALOG_REFERRAL,
	DIALOG_INTERIORS,
	DIALOG_GRAFFITICOLOR,
	DIALOG_GRAFFITITEXT,
	DIALOG_BUYFURNITURETYPE,
	DIALOG_BUYFURNITURE1,
	DIALOG_BUYFURNITURE2,
	DIALOG_BUY,
	DIALOG_BUYCLOTHES,
	DIALOG_PICKLOAD,
	DIALOG_UNREADTEXTS,
	DIALOG_ATM,
	DIALOG_GETJOB,
	DIALOG_ATMDEPOSIT,
	DIALOG_ATMWITHDRAW,
	DIALOG_CHANGEPASS,
	DIALOG_BUYCLOTHINGTYPE,
	DIALOG_BUYCLOTHING,
	DIALOG_CLOTHING,
	DIALOG_CLOTHINGMENU,
	DIALOG_CLOTHINGEDIT,
	DIALOG_CLOTHINGBONE,
	DIALOG_BUYVEHICLE,
	DIALOG_BUYVEHICLE2,
	DIALOG_BUYBOAT,
	DIALOG_BUYAIRCRAFT,
	DIALOG_SPAWNCAR,
    DIALOG_DESPAWNCAR,
    DIALOG_CARSTORAGE,
    DIALOG_FINDCAR,
	DIALOG_BIZINTERIOR,
	DIALOG_FACTIONLOCKER,
	DIALOG_FACTIONEQUIPMENT,
	DIALOG_FACTIONSKINS,
	DIALOG_HITMANCLOTHES,
	DIALOG_MDC,
	DIALOG_MDCWANTED,
	DIALOG_MDCPLAYER1,
	DIALOG_MDCPLAYER2,
	DIALOG_MDCCHARGES,
	DIALOG_PLAYERLOOKUP,
	DIALOG_VEHICLELOOKUP1,
 	DIALOG_VEHICLELOOKUP2,
 	DIALOG_FACTIONPAY1,
 	DIALOG_FACTIONPAY2,
 	DIALOG_PHONEBOOK,
 	DIALOG_CREATEZONE,
 	DIALOG_CONFIRMZONE,
 	DIALOG_LANDBUILDTYPE,
 	DIALOG_LANDBUILD1,
 	DIALOG_LANDBUILD2,
 	DIALOG_LANDMENU,
 	DIALOG_LANDUPGRADE,
 	DIALOG_LANDEDITOBJECT,
 	DIALOG_LANDOBJECTMENU,
 	DIALOG_LANDOBJECTS,
 	DIALOG_LANDSELLALL,
 	DIALOG_LANDPERMS,
 	DIALOG_MP3PLAYER,
 	DIALOG_MP3MUSIC,
 	DIALOG_MP3RADIO,
 	DIALOG_MP3URL,
 	DIALOG_MP3RADIOGENRES,
 	DIALOG_MP3RADIOSUBGENRES,
 	DIALOG_MP3RADIORESULTS,
 	DIALOG_MP3RADIOSEARCH,
 	DIALOG_USECOOKIES,
 	DIALOG_COOKIEWEATHER,
 	DIALOG_COOKIENUMBER,
 	DIALOG_COOKIEJOB,
 	DIALOG_GANGSTASH,
 	DIALOG_GANGSTASHVEST,
 	DIALOG_GANGSTASHVESTRANK,
 	DIALOG_GANGSTASHWEAPONS1,
	DIALOG_GANGSTASHWEAPONS2,
	DIALOG_GANGSTASHWEAPONRANK,
	DIALOG_GANGSTASHDRUGS1,
	DIALOG_GANGSTASHDRUGS2,
	DIALOG_GANGSTASHCRAFT,
	DIALOG_GANGSTASHMATS,
	DIALOG_GANGSTASHCASH,
 	DIALOG_GANGDEPOSIT,
 	DIALOG_GANGWITHDRAW,
 	DIALOG_GANGSKINS,
 	DIALOG_GANGFINDCAR,
 	DIALOG_GANGPOINTSHOP,
 	DIALOG_GANGARMSDEALER,
 	DIALOG_GANGARMSWEAPONS,
 	DIALOG_GANGARMSEDIT,
 	DIALOG_GANGARMSPRICES,
 	DIALOG_GANGARMSPRICE,
 	DIALOG_GANGARMSDEPOSITMATS,
	DIALOG_GANGARMSWITHDRAWMATS,
	DIALOG_GANGDRUGDEALER,
	DIALOG_GANGDRUGSHOP,
	DIALOG_GANGDRUGEDIT,
	DIALOG_GANGDRUGPRICES,
	DIALOG_GANGDRUGPRICE,
	DIALOG_GANGDRUGBUY,
	DIALOG_GANGDRUGDEPOSITS,
	DIALOG_GANGDRUGDEPOSIT,
	DIALOG_GANGDRUGWITHDRAWS,
	DIALOG_GANGDRUGWITHDRAW,
	DIALOG_FREENAMECHANGE,
	DIALOG_REMOVEFLAG,
	DIALOG_NEWBIEUNMUTE,
	DIALOG_REPORTUNMUTE,
	DIALOG_GLOBALUNMUTE,
	DIALOG_REMOVEPVEH,
	DIALOG_CRACKTRUNK,
	DIALOG_HOUSEINTERIORS,
	DIALOG_VIPMUSIC,
	DIALOG_NEWBWELCOME,
	DIALOG_HELP,
	DIALOG_STATS,
	DIALOG_LSELEVATOR,
	DIALOG_TUTORIAL,
	DIALOG_USERIMKIT,
	DIALOG_TURFLIST,
	DIALOG_TURFLIST2,
	DIALOG_LOCATE,
	DIALOG_LOCATELIST1,
	DIALOG_LOCATELIST2,
	DIALOG_LOCATELIST3,
	DIALOG_LOCATELISTC,
	DIALOG_LOCATETURFS,
	DIALOG_LOCATEPOINTS,
	DIALOG_RULES,
	DIALOG_PAYCHECK,
	DIALOG_CREATEPOLL,
	DIALOG_POLLANSWER,
	DIALOG_POLLVIEW,
	DIALOG_CREATEQUIZ,
	DIALOG_DELETEOBJECT,
 	DIALOG_PAINTBALL,
	DIALOG_ADDSTATION,
	DIALOG_REFUND,
	DIALOG_REFUND2,
	DIALOG_TRUCKING,
	DIALOG_HALO_FLAG_YES // temp //
}

enum
{
	VEHICLE_ENGINE,
	VEHICLE_LIGHTS,
	VEHICLE_ALARM,
	VEHICLE_DOORS,
	VEHICLE_BONNET,
	VEHICLE_BOOT,
	VEHICLE_OBJECTIVE
};

enum
{
	STASH_CAPACITY_CASH,
	STASH_CAPACITY_MATERIALS,
	STASH_CAPACITY_WEED,
	STASH_CAPACITY_COCAINE,
	STASH_CAPACITY_METH,
 	STASH_CAPACITY_PAINKILLERS,
	STASH_CAPACITY_WEAPONS
};

enum
{
 	E_OBJECT_TYPE,
	E_OBJECT_INDEX_ID,
	E_OBJECT_EXTRA_ID,
	E_OBJECT_3DTEXT_ID,
 	E_OBJECT_OPENED,
 	E_OBJECT_WEAPONID,
 	E_OBJECT_FACTION,
 	E_OBJECT_X,
 	E_OBJECT_Y,
 	E_OBJECT_Z
};

enum
{
	E_OBJECT_FURNITURE,
	E_OBJECT_WEAPON,
	E_OBJECT_LAND
};

enum
{
	EDIT_FURNITURE_PREVIEW = 1,
	EDIT_FURNITURE,
	EDIT_CLOTHING_PREVIEW,
	EDIT_CLOTHING,
	EDIT_LAND_OBJECT_PREVIEW,
	EDIT_LAND_OBJECT,
	EDIT_LAND_GATE_MOVE,
	EDIT_COP_CLOTHING
};

enum
{
	DEPLOY_SPIKESTRIP,
	DEPLOY_CONE,
	DEPLOY_ROADBLOCK,
	DEPLOY_BARREL,
	DEPLOY_FLARE
};

enum
{
 	BUSINESS_STORE,
 	BUSINESS_GUNSHOP,
 	BUSINESS_CLOTHES,
 	BUSINESS_GYM,
 	BUSINESS_RESTAURANT,
 	BUSINESS_AGENCY,
 	BUSINESS_BARCLUB,
  	BUSINESS_TOOLSHOP
};

enum
{
	FACTION_NONE,
	FACTION_POLICE,
	FACTION_MEDIC,
	FACTION_NEWS,
	FACTION_GOVERNMENT,
	FACTION_HITMAN,
	FACTION_FEDERAL,
	FACTION_ARMY,
	FACTION_TERRORIST
};

enum
{
	JOB_NONE = -1,
	JOB_PIZZAMAN,
	JOB_COURIER,
	JOB_FARMER,
	JOB_PILOT,
	JOB_OILGATHER,
	JOB_OILREFINE
};

enum
{
	CHECKPOINT_NONE = 0,
	CHECKPOINT_PIZZA,
	CHECKPOINT_TEST,
	CHECKPOINT_MATS,
	CHECKPOINT_DRUGS,
	CHECKPOINT_HOUSE,
	CHECKPOINT_ROBBERY,
	CHECKPOINT_DROPCAR,
	CHECKPOINT_MISC,
	CHECKPOINT_GARBAGE,
	CHECKPOINT_TRACEBIZ,
	CHECKPOINT_TRACEHOUSE
};

enum
{
	HANGUP_DROPPED,
	HANGUP_USER
};

enum
{
	MUSIC_NONE,
	MUSIC_MP3PLAYER,
	MUSIC_BOOMBOX,
	MUSIC_VEHICLE
};

enum
{
	ITEM_GUNLIC,
	ITEM_CARLIC,
	ITEM_WEAPON,
	ITEM_SELLGUN,
	ITEM_MATERIALS,
	ITEM_WEED,
	ITEM_COCAINE,
	ITEM_METH,
	ITEM_PAINKILLERS,
	ITEM_SEEDS,
	ITEM_EPHEDRINE,
	ITEM_CASH
};

enum
{
	CAPACITY_MATERIALS,
	CAPACITY_WEED,
	CAPACITY_COCAINE,
	CAPACITY_METH,
	CAPACITY_PAINKILLERS,
	CAPACITY_SEEDS,
	CAPACITY_EPHEDRINE,
	CAPACITY_OIL
};

enum
{
	LIMIT_HOUSES,
	LIMIT_BUSINESSES,
	LIMIT_GARAGES,
	LIMIT_VEHICLES
};

enum
{
	POINT_DRUGFACTORY = 1,
	POINT_DRUGDEN,
	POINT_CRACKHOUSE,
	POINT_AUTOEXPORT,
	POINT_FUEL,
};

enum
{
	GANGWEAPON_9MM,
	GANGWEAPON_SDPISTOL,
	GANGWEAPON_DEAGLE,
	GANGWEAPON_SHOTGUN,
	GANGWEAPON_SPAS12,
	GANGWEAPON_TEC9,
	GANGWEAPON_UZI,
	GANGWEAPON_MP5,
	GANGWEAPON_AK47,
	GANGWEAPON_M4,
	GANGWEAPON_RIFLE,
	GANGWEAPON_SNIPER
};

enum
{
	TAG_NONE,
	TAG_ADMIN,
	TAG_HELPER,
	TAG_VIP
};

enum
{
	GRAPHICRANK_NONE = 0,
	GRAPHICRANK_REGULAR,
	GRAPHICRANK_SENIOR,
	GRAPHICRANK_MANAGER
};


enum
{
	ZONETYPE_LAND = 1,
	ZONETYPE_TURF,
	ZONETYPE_POINT
};

enum
{
	DOOR_DRIVER,
	DOOR_PASSENGER
};

enum
{
	HOSPITAL_COUNTY = 1,
	HOSPITAL_ALLSAINTS,
	HOSPITAL_FMDHQ
};

enum pEnum
{
	PlayerText:pText[10],
 	pPassword[129],
	pUsername[MAX_PLAYER_NAME],
	pCzID,
	pID,
	pLogged,
	pKicked,
	pLoginTries,
	pSetup,
	pGender,
	pAge,
	pSkin,
	pAttackMB,
	Float:pCameraX,
	Float:pCameraY,
	Float:pCameraZ,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	Float:pPosHC[3],
	pInterior,
	pWorld,
	pCash,
	pBank,
 	pPaycheck,
 	pvLock,
	pLevel,
	pEXP,
	pGraphic,
	pMinutes,
	pHours,
	pAdmin,
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pEditRack,
	pAdminName[MAX_PLAYER_NAME],
	pHelper,
	Float:pHealth,
	Float:pArmor,
	pHunger,
	pThirsty,
	pUpgradePoints,
	pWarnings,
	pInjured,
	pHospital,
	Float:pSpawnHealth,
	Float:pSpawnArmor,
	pJailType,
	pJailTime,
	pNewbieMuted,
	pHelpMuted,
	pAdMuted,
	pLiveMuted,
	pGlobalMuted,
	pReportMuted,
	pReportWarns,
	pFightStyle,
	pAccent[16],
	pCookies,
	pPhone,
	pJob,
	pSecondJob,
	pCrimes,
	pArrested,
	pWantedLevel,
	pMaterials,
	pWeed,
	pCocaine,
	pMeth,
	pPainkillers,
	pSeeds,
	pEphedrine,
	pMuriaticAcid,
	pBakingSoda,
	pCigars,
	pWalkieTalkie,
	pChannel,
	pRentingHouse,
	pSpraycans,
	pBoombox,
	pMP3Player,
	pPhonebook,
	pFishingRod,
	pFishingBait,
	pFishWeight,
	pComponents,
	pCourierSkill,
	pFishingSkill,
	pGuardSkill,
	pWeaponSkill,
	pLawyerSkill,
	pSmugglerSkill,
	pDealerSkill,
	pToggleTextdraws,
	pToggleTP,
	pToggleOOC,
	pTogglePhone,
	pToggleAdmin,
	pToggleHelper,
	pToggleNewbie,
	pToggleWT,
	pToggleRadio,
	pToggleVIP,
	pToggleMusic,
	pToggleFaction,
	pToggleGang,
	pToggleNews,
	pToggleGlobal,
	pToggleCam,
	pToggleHUD,
	pToggleReports,
	pToggleWhisper,
	pToggleBug,
	pCarLicense,
	pGunLicense,
	pVIPPackage,
	pVIPTime,
	pVIPCooldown,
	pWeapons[13],
	pTempWeapons[13],
	pFaction,
	pFactionRank,
	pFactionLeader,
	pFactionID,
	pGang,
	pWebDev,
	pGangRank,
	pDivision,
	pCrew,
	pContracted,
	pContractBy[MAX_PLAYER_NAME],
	pBombs,
	pCompletedHits,
	pFailedHits,
	pReports,
	pNewbies,
	pHelpRequests,
	pSpeedometer, // (1) KM/H (2) MPH
	pFactionMod,
	pGangMod,
	pBanAppealer,
	pFormerAdmin,
	pDeveloper,
	pAdminPersonnel,
	pDynamicAdmin,
	pHelperManager,
	pHumanResources,
	pComplaintMod,
	pGameAffairs,
	pWeedPlanted,
	pWeedTime,
	pWeedGrams,
	Float:pWeedX,
	Float:pWeedY,
	Float:pWeedZ,
	Float:pWeedA,
	pInventoryUpgrade,
	pAddictUpgrade,
	pTraderUpgrade,
	pAssetUpgrade,
	pLaborUpgrade,
	pDMWarnings,
	pWeaponRestricted,
	pReferralUID,
	pWatch,
	pGPS,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[128],
	pClothes,
    pShowLands,
	pShowTurfs,
	pWatchOn,
	pGPSOn,
	pDoubleXP,
	pCourierCooldown,
 	pPizzaCooldown,
	pDetectiveCooldown,
	pThiefCooldown,
	pCocaineCooldown,
 	pGasCan,
 	pPassport,
	pPassportName[MAX_PLAYER_NAME],
	pPassportLevel,
	pPassportSkin,
	pPassportPhone,
	pNewbieMuteTime,
	pReportMuteTime,
	pGlobalMuteTime,
	pAdminHide,
	pInsurance,
	pRope,
	pTotalPatients,
	pTotalFires,
	pFirstAid,
	pPoliceScanner,
	pBodykits,
	pRimkits,
	pScannerOn,

	pCurrentAmmo,
	pACAmmo,
	pLastReport,
	pLastNewbie,
	pLastRequest,
	pLastPay,
	pLastRepair,
	pLastRefuel,
	pLastDrug,
	pLastDefend,
	pLastSell,
	pLastEnter,
	pLastPress,
	pLastDeath,
	pLastDesync,
	pLastGlobal,
	pLastPizza,
	pLastStuck,
	pLastUpdate,
	pLastLoad,
	pLastBet,
	pLastShot,
	pLastFire,
	pFPS,
	pDrunkLevel,
	pSpectating,
 	pAdminDuty,
	pActiveReport,
	pHospitalTime,
	pHospitalType,
	pListen,
	pJoinedEvent,
	pPaintball,
	pPaintballTeam,
	pDueling,
	pEventTeam,
	pAwaitingClothing,
	pTutorial,
	pTutorialTimer,
	pFreezeTimer,
	pHelpRequest[128],
	pAcceptedHelp,
	pHouseOffer,
	pHouseOffered,
	pHousePrice,
	pGarageOffer,
	pGarageOffered,
	pGaragePrice,
	pBizOffer,
	pBizOffered,
	pBizPrice,
	pVestOffer,
	pVestPrice,
	pCarOffer,
	pCarOffered,
	pCarPrice,
	pFactionOffer,
	pFactionOffered,
	pGangOffer,
	pGangOffered,
	pFriskOffer,
	pTicketOffer,
	pTicketPrice,
	pLiveOffer,
	pLiveBroadcast,
	pShakeOffer,
	pShakeType,
	pLandOffer,
	pLandOffered,
	pLandPrice,
	pSellOffer,
	pAllianceOffer,
	pWarOffer,
	pSellType,
	pSellExtra,
	pSellPrice,
	pDefendOffer,
	pDefendPrice,
	pDiceOffer,
	pDiceBet,
	pDiceRigged,
	pInviteOffer,
	pInviteHouse,
	pRobberyOffer,
	pDuelOffer,
	pFurnitureIndex,
	pFurnitureHouse,
	pObjectLand,
	pClothingIndex,
	pEditType,
	pEditObject,
	pCategory,
	pSelected,
	pFactionEdit,
	pPrice,
	pFurniturePerms,
	pLandPerms,
	pPizzas,
	pPizzaTime,
	Float:pDistance,
	pCP,
	pShipment,
	pFishTime,
	pUsedBait,
	pSmuggleMats,
	pSmuggleDrugs,
	pRefuel,
	pRefuelAmount,
	pCallLine,
	pCallStage,
	Float:pAFKPos[6],
	pAFK,
	pAFKTime,
	pLoopAnim,
	pDrivingTest,
	pTestVehicle,
	pTestCP,
	pMiningTime,
	pMiningRock,
	pSweeping,
	pSweepTime,
	pSweepEarnings,
	Text3D:pSpecialTag,
	pTagType,
	pVIPColor,
	pTaxiFare,
	pTaxiPassenger,
	pTaxiBill,
	pTaxiTime,
	pSkinSelected,
	pDuty,
	pMask,
	pBackup,
	pTazer,
	pTazedTime,
	pCuffed,
	pTied,
	pDraggedBy,
	pReceivingAid,
	pDelivered,
	pPlantedBomb,
	Float:pBombX,
	Float:pBombY,
	Float:pBombZ,
	pBombObject,
	pContractTaken,
	pPage,
	pSpamTime,
	pMuted,
	Text3D:pBoomboxText,
	pBoomboxPlaced, // BOOMBOX
	pBoomboxObject,
	pBoomboxListen,
	pBoomboxURL[128],
	Float:pMinX, // LAND CREATION
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	pZoneType,
	pZonePickups[4],
	pZoneID,
	pZoneCreation, //
	pLandCost,
	pTurfType,
	pTurfName[32],
	pGenre[32],
	pSubgenre[32],
	pSearch,
	pMusicType,
	pStreamType,
	pNameChange[MAX_PLAYER_NAME],
	pFreeNamechange,
	pChosenLevel,
	pChosenSkin,
	pVehicleKeys,
	pCurrentWeapon,
 	pCurrentVehicle,
 	pVehicleCount,
 	pACWarns,
 	pACTime,
 	pACFired,
 	pArmorTime,
 	pWeedObject,
 	pPickPlant,
 	pPickTime,
 	pCookMeth,
 	pCookTime,
 	pCookGrams,
 	pDrugsUsed,
 	pDrugsTime,
 	pBandana,
 	pGangCar,
 	pCapturingPoint,
 	pCaptureTime,
 	Float:pPointX,
 	Float:pPointY,
 	Float:pPointZ,
	pWatchingIntro, // server intro
 	pLoginCamera,
 	pSmuggleTime,
 	pDealerGang,
 	pPoisonTime,
 	pJetpack,
	pTextFrom,
	pWhisperFrom,
	pTaxiCall,
	pEmergencyCall,
	pEmergencyType,
	pEmergency[128],
 	pClip,
 	pReloading,
 	pFindTime,
 	pFindPlayer,
 	pRobCash,
 	pLootTime,
 	pRemoveFrom,
 	pCBug,
 	pMenuType,
 	pSniper,
 	Text3D:pLockText,
 	Float:pLockHealth,
	pLockBreak,
	pLockTimer,
	pAnimation,
	pDropTime,
	pCocaineTime,
	pCocaineFrom,
	pRapidFire,
	pNoDamage,
	pGodmode,
	Float:pGodmodeHP,
	Float:pGodmodeAP,
	pNOPTime,
	pPreviewHouse,
	pPreviewType,
	pPreviewTime,
	pDedication,
	pPasswordChanged,
	pGarbage,
	pDamageTimer,
	pHHCheck,
	pHHTime,
	pHHRounded,
	pHHCount,
	pCustomTitle[64],
	pCustomTColor,
	pGovTimer,
	pGodshand,
	pUndercover[2],
	Float:pUndercoverHP,
	Float:pUndercoverAR,
	pHurt,
	pBugged,
	pSkates,
	pSkateObj,
	bool:pSkating,
	bool:pSkateAct,
	pOil,
	pCreatingPoll,
	pAnsweredPoll,
	pRareTime,
	pAcceptedEMS,
	pHunted,
	pHuntKilled,
	pDiamonds,
	pDeleteMode,
	pAdvertWarnings,
	pNoKnife,
	pExecute,
	pMarriedTo,
	pMarriedName[MAX_PLAYER_NAME],
	pMarriageOffer,
	pStationEdit,
	pRobbingBiz,
	pTrucking,
	pAdminFrozen,
	pParkAssasination,
	// - New Job Systems
	pBasePaycheck,

	// - New Pizza Job
	pHoldingPizza,
	pPizzaHouse,
	pPizzaQueue,
	pPizzasDelivered,

	// - New Courier Job
	pHoldingBox,
	pCourierBiz,
	pCourierQueue,
	pCourierDelivered,
	pBoxes,
};

enum rEnum
{
	rExists,
	rReporter,
	rAccepted,
	rHandledBy,
	rText[128],
	rTime
};

enum eventEnum
{
	eReady,
	eStarted,
	eLocked,
	eType, // (1) DM (2) TDM (3) Race
	eJoinText[128],
	Float:eHealth,
	Float:eArmor,
	Float:ePosX[2],
	Float:ePosY[2],
	Float:ePosZ[2],
	Float:ePosA[2],
	eInterior,
	eWorld,
	eWeapons[5],
	eSkin[2],
	eCS,
	eQS,
	eHeal,
	eNext
};

enum
{
	PARK_ASSASINATION,
	TEST_2
};
enum robberyEnum
{
	rTime,
	rPlanning,
	rStarted,
	rStolen,
	rRobbers[MAX_BANK_ROBBERS],
	rObjects[2],
	Text3D:rText[5]
};

enum mEnum
{
	Float:mPosX,
	Float:mPosY,
	Float:mPosZ,
	Float:mPosA,
	mInterior,
	mWorld
};

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D
};

new SpeedData[MAX_SPEED_CAMERAS][speedData];

enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];


enum rackData {
	rackID,
	rackExists,
	rackHouse,
	Float:rackPos[4],
	rackInterior,
	rackWorld,
	rackWeapons[4],
	rackObjects[5],
	Text3D:rackText3D
};
new RackData[MAX_WEAPON_RACKS][rackData];

enum hEnum
{
	hExists,
	hID,
	hOwnerID,
	hOwner[MAX_PLAYER_NAME],
//	hMapIcon,
	hType,
	hPrice,
	hRentPrice,
	hLevel,
	hLocked,
	hTimestamp,
	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	Float:hPosA,
	Float:hIntX,
	Float:hIntY,
	Float:hIntZ,
	Float:hIntA,
	hInterior,
	hWorld,
	hOutsideInt,
	hOutsideVW,
	hCash,
	hMaterials,
	hWeed,
	hCocaine,
	hMeth,
	hPainkillers,
	hWeapons[10],
	hLabels,
    hPickup,
	Text3D:hText,
	hDelivery,
	hLights
};

enum gEnum
{
	gExists,
	gID,
	gOwnerID,
	gOwner[MAX_PLAYER_NAME],
	gType,
	gPrice,
	gLocked,
	gTimestamp,
	gFreeze,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Float:gPosA,
	Float:gExitX,
	Float:gExitY,
	Float:gExitZ,
	Float:gExitA,
	gWorld,
	gPickup,
	Text3D:gText
};

enum bEnum
{
	bExists,
	bID,
	bOwnerID,
	bOwner[MAX_PLAYER_NAME],
	bType,
	bPrice,
	bEntryFee,
	bLocked,
	bTimestamp,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosA,
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bIntA,
	bInterior,
	bWorld,
	bOutsideInt,
	bOutsideVW,
	bCash,
	bProducts,
	bMaterials,
	bPickup,
	bMapIcon,
	Text3D:bText
};

enum eEnum
{
	eExists,
	eID,
	eOwnerID,
	eOwner[MAX_PLAYER_NAME],
	eName[40],
	eIcon,
	eLocked,
	Float:eRadius,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA,
	eInterior,
	eWorld,
	eOutsideInt,
	eOutsideVW,
	eAdminLevel,
	eFactionType,
	eGang,
	eVIP,
	eVehicles,
	eFreeze,
	ePassword[64],
	eLabel,
	eType,
	eMapIcon,
	ePickup,
	eMapIconID,
	Text3D:eText,
	eColor
};

enum cEnum
{
	cExists,
	cID,
	cName[32],
	cModel,
	cBone,
	cAttached,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Float:cRotX,
	Float:cRotY,
	Float:cRotZ,
	Float:cScaleX,
	Float:cScaleY,
	Float:cScaleZ,
	cAttachedIndex
};

enum vEnum
{
	vID,
	vOwnerID,
	vOwner[MAX_PLAYER_NAME],
	vModel,
	vPrice,
	vTickets,
	vLocked,
	bool:vWindowsOpen,
	vPlate[32],
	Float:vHealth,
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vColor1,
	vColor2,
	vPaintjob,
	vInterior,
	vWorld,
	vNeon,
	vNeonEnabled,
	vTrunk,
	vAlarm,
	vMods[14],
	vCash,
	vMaterials,
	vWeed,
	vCocaine,
	vMeth,
	vPainkillers,
	vWeapons[5],
	vGang,
	vFactionType,
	vVIP,
	vJob,
	vRespawnDelay,
	vObjects[2],
	vTimer,
	vRank,
	vCrates,
	vBoxes,
};

enum fEnum
{
	fName[48],
	fShortName[24],
	fMOTD[128],
	fLeader[MAX_PLAYER_NAME],
	fType,
	fColor,
	fRankCount,
	fFund,
	fSkins[MAX_FACTION_SKINS],
	fPaycheck[MAX_FACTION_RANKS],
	fTurfTokens,
	Text3D:fText,
	fPickup,
};

enum lkEnum
{
	lID,
	lExists,
	lFaction,
	Float:lPosX,
	Float:lPosY,
	Float:lPosZ,
	lInterior,
	lWorld,
	lLabel,
	lIcon,

	locKevlar[2],
    locMedKit[2],
    locNitestick[2],
    locMace[2],
    locDeagle[2],
    locShotgun[2],
    locMP5[2],
    locM4[2],
    locSpas12[2],
    locSniper[2],
    locCamera[2],
    locFireExt[2],
    locPainKillers[2],

	Text3D:lText,
	lPickup
};

enum dEnum
{
	dExists,
	dType,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dPosA,
	dObject
};

enum lEnum
{
	lExists,
	lID,
	lOwnerID,
	lOwner[MAX_PLAYER_NAME],
	lLevel,
	lPrice,
	Float:lMinX,
	Float:lMinY,
	Float:lMaxX,
	Float:lMaxY,
	Float:lHeight,
	lGangZone,
	lArea,
	Text3D:lTextdraw,
	lLabels
};

enum gaEnum
{
	gSetup,
	gName[32],
	gMOTD[128],
	gLeader[MAX_PLAYER_NAME],
	gColor,
	gStrikes,
	gLevel,
	gPoints,
	gTurfTokens,
	Float:gStashX,
	Float:gStashY,
	Float:gStashZ,
	gStashInterior,
	gStashWorld,
	gCash,
	gMaterials,
	gWeed,
	gCocaine,
	gMeth,
	gPainkillers,
	gSkins[MAX_GANG_SKINS],
	gWeapons[14],
	gWeaponRanks[14],
	gVestRank,
	gArmsDealer,
	gDrugDealer,
	Float:gArmsX,
	Float:gArmsY,
	Float:gArmsZ,
	Float:gArmsA,
	Float:gDrugX,
	Float:gDrugY,
	Float:gDrugZ,
	Float:gDrugA,
	gArmsWorld,
	gDrugWorld,
	gDrugWeed,
	gDrugCocaine,
	gDrugMeth,
	gArmsMaterials,
	gArmsPrices[12],
	gDrugPrices[3],
	Text3D:gText[3],
	gPickup,
	gActors[2],
	gAlliance,
	gWar,
	gMatLevel,
	gGunLevel,
	gInvCooldown,
};

enum ptEnum
{
	pExists,
	pName[32],
	pCapturedBy[MAX_PLAYER_NAME],
	pCapturedGang,
	pType,
	pProfits,
	pTime,
	Float:pPointX,
	Float:pPointY,
	Float:pPointZ,
	Float:pMinX,
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	pGangZone,
	pArea,
	pPointInterior,
	pPointWorld,
	pCaptureTime,
	pCapturer,
	Text3D:pText,
	pPickup
};

enum tEnum
{
	tExists,
	tName[32],
	tCapturedBy[MAX_PLAYER_NAME],
	tCapturedGang,
	tType,
	tTime,
	Float:tMinX,
	Float:tMinY,
	Float:tMaxX,
	Float:tMaxY,
	Float:tHeight,
	tGangZone,
	tArea,
	tCaptureTime,
	tCapturer
};

// ---------------------------------------

#if defined SERVER_INTRO
    new Text:introTextdraws[26];
#endif

new connectionID;
new radioConnectionID;
new queryBuffer[1024];
new Text:AnimationTD;
new Text:TimeTD;
new Text:LoginScreen[11];
new enabledOOC;
new enabledNewbie = 1;
new enabledGlobal = 1;
new enabledReports = 1;
new vehiclepizza;
new vehiclecourier;
new testVehicles[4];
new Text3D:TextTV3D[MAX_VEHICLES];
new Text:Tutorial[4];
new Text:Damage[MAX_PLAYERS];
new ExBJck[MAX_PLAYERS];
new gHour, gWorldTime, gWeather = 13;
new gCharity, gCharityHealth, gCharityArmor;
new gPlayerRecord, gRecordDate[24], gServerMOTD[128], gTax, gVault, gNewsVault, gAnticheatBans;
new adminMOTD[128], helperMOTD[128];
new MaxCapCount[2] = {  2 , 1 }; // index: 0 = turfs, 1 = points
new gacooldown;
new gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours;
new gDoubleXP, /*gDisabledVPN = 1, */ antiNT = 1;
new gLastAd;
new gLastMusic;
new gGMX;
new gAnticheat = 1;
new gPaycheck;
new gVIPHealth, gVIPArmor;
new gParachutes[2];
new gSeedsStock = 200, gCocaineStock = 100, gEphedrineStock = 50;
new Text3D:gSeedsStockText, Text3D:gCocaineText, Text3D:gEphedrineStockText;
new gPrisonCells[24], gPDDoors[8], gPDGates[2], gFBIGates[2];
new gFires, gFireObjects[MAX_FIRES] = {INVALID_OBJECT_ID, ...}, Float:gFireHealth[MAX_FIRES];
new gScriptObject[MAX_OBJECTS char];

new zone_paintball[2], area_paintball[2];
new pbNext;

new aimWarnings[MAX_PLAYERS];
new quizQuestion[72];
new quizAnswer[32];
new CreateQuiz = -1;
new pollQuestion[72];
new pollAnswers[2][32];
new pollAnswerCount[2];

//Pickupget car

//new BobTheBuilder[MAX_PLAYERS] = 0;

new EventInfo[eventEnum];
new RobberyInfo[robberyEnum];
new MarkedPositions[MAX_PLAYERS][3][mEnum];
new PlayerInfo[MAX_PLAYERS+1][pEnum];
new ReportInfo[MAX_REPORTS][rEnum];
new HouseInfo[MAX_HOUSES][hEnum];
new GarageInfo[MAX_GARAGES][gEnum];
new BusinessInfo[MAX_BUSINESSES][bEnum];
new EntranceInfo[MAX_ENTRANCES][eEnum];
new ClothingInfo[MAX_PLAYERS][MAX_PLAYER_CLOTHING][cEnum];
new VehicleInfo[MAX_VEHICLES][vEnum];
new FactionInfo[MAX_FACTIONS][fEnum];
new FactionRanks[MAX_FACTIONS][MAX_FACTION_RANKS][32];
new FactionDivisions[MAX_FACTIONS][MAX_FACTION_DIVISIONS][32];
new GangCrews[MAX_GANGS][MAX_GANG_CREWS][32];

/*enum crEnum
{
	cID,
	cName[32],
	cfamID,
	cType,
	cLeader[MAX_PLAYER_NAME],
	cMembers
};
new DivisionInfo[MAX_FACTION_DIVISIONS][crEnum];
new CrewInfo[MAX_FACTION_DIVISIONS][crEnum];*/

new LockerInfo[MAX_LOCKERS][lkEnum];
new DeployInfo[MAX_DEPLOYABLES][dEnum];
new LandInfo[MAX_LANDS][lEnum];
new GangInfo[MAX_GANGS][gaEnum];
new GangRanks[MAX_GANGS][7][32];
new PointInfo[MAX_POINTS][ptEnum];
new TurfInfo[MAX_TURFS][tEnum];

new adminVehicle[MAX_VEHICLES char];
new vehicleFuel[MAX_VEHICLES] = {100, ...};
new vehicleSiren[MAX_VEHICLES] = {INVALID_OBJECT_ID, ...};
new vehicleStream[MAX_VEHICLES][128];
new vehicleColors[MAX_VEHICLES][2];
new bool:chattingWith[MAX_PLAYERS][MAX_PLAYERS char];
new Text3D:vehicleCallsign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

new PayCheckCode[MAX_PLAYERS];

new isPMOff[MAX_PLAYERS] = {0, ...};

// ---------------------------------------

new const vehicleNames[212][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Article Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Article Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Petrol Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Article Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new const weaponSlotIDs[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0,
	0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12,
	9, 9, 9, 11, 11, 11
};

new const weaponModelIDs[] = {
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
	325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
	353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 368, 371
};

new const clothesShopSkins[] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303,
	304, 305, 306, 307, 308, 309, 310, 311
};

enum houseInt
{
	intClass[16],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const houseInteriors[][houseInt] =
{
    {"Apartment",    45000,   1,  244.1997, 305.0676, 999.1484, 270.2194},
	{"Apartment", 	 50000,   2,  1434.0806, -1832.7854, 1313.5573, 270.0000},
	{"Apartment", 	 65000,  10, 2259.7649, -1135.8751, 1050.6328, 270.0000},
	{"Apartment", 	 75000,  8,  2008.8319, -1698.8461, 1165.7001, 90.0000},
	{"Apartment", 	 80000,  5,  2233.6501, -1114.7767, 1050.8828, 0.0000},
	{"Apartment", 	 85000,  1,  2217.9814, -1076.2471, 1050.4844, 90.0000},
	{"Low Class", 	 90000,  9,  1178.3398, -419.0833, 1234.7045, 180.0000},
	{"Low Class", 	 95000,  3,  828.6323, -1014.0038, 799.9664, 270.0000},
	{"Low Class", 	 100000,  5,  1320.1091, -167.6174, 1088.0741, 90.0000},
	{"Medium Class", 105000,  3,  1363.7614, -2145.6965, 1050.5886, 0.0000},
	{"Medium Class", 110000,  5,  2654.4524, -1023.7827, 929.9266, 180.0000},
	{"Medium Class", 140000,  11, 2184.1011, -1130.3905, 1128.7655, 270.0000},
	{"Upper Class",  150000,  10, 2269.9143, -1210.5028, 1047.5625, 90.0000},
	{"Upper Class",  160000,  6,  1749.6356, -1822.4457, 1000.3405, 0.0000},
	{"Upper Class",  165000,  12, 2324.3862, -1148.8784, 1050.7101, 0.0000},
	{"Upper Class",  180000,  4,  1282.0646, -1140.2067, 980.0524, 0.0000}
};

enum garageInt
{
	intName[16],
	intPrice,
	intID,
	Float:intPX,
	Float:intPY,
	Float:intPZ,
	Float:intPA,
	Float:intVX,
	Float:intVY,
	Float:intVZ,
	Float:intVA
};

new const garageInteriors[][garageInt] =
{
    {"Small", 	100000,  1,  1521.2797, -1639.7163, 1124.5045, 180.0000,  1516.8326, -1643.9105, 1124.3364, 180.0000},
	{"Medium", 	125000,  2,  1520.6278, -1639.7173, 1374.5045, 180.0000,  1514.9481, -1644.1083, 1374.3365, 180.0000},
	{"Large", 	250000,  3,  1672.8816, -2363.5818, 1535.4829, 90.0000,   1660.5437, -2362.9001, 1535.2944, 0.0000}
};

enum bizInt
{
	intType[24],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriors[][bizInt] =
{
    {"Sieu thi", 		  600000, 6, -27.4377, -57.6114, 1003.5469, 0.0000},
	{"Cua hang vu khi",    		  800000, 6,  316.2873, -169.6470, 999.6010, 0.0000},
	{"Cua hang quan ao",    	  750000, 14, 204.3860, -168.4586, 1000.5234, 0.0000},
	{"Gym",         		  600000, 7,  773.7802, -78.2581, 1000.6619, 0.0000},
	{"Nha hang",  		  500000, 10, 363.3276, -74.6505, 1001.5078, 315.0000},
	{"To chuc quang cao",  675000, 3,  834.1517, 7.4096, 1004.1870, 90.0000},
	{"Club/Bar",              475000, 11, 501.8694, -68.0046, 998.7578, 179.6117},
	{"Cua hang cong cu",             525000, 6, -2240.6992, 128.3009, 1035.4141, 270.0000}
};

enum furnitureEnum
{
	fCategory[24],
    fName[32],
    fModel,
    fPrice
};

new const furnitureCategories[][] =
{
	{"Appliances"},
	{"Bathroom"},
	{"Bedroom"},
	{"Carpets"},
	{"Kitchen"},
	{"Tables"},
	{"Chairs"},
	{"Posters/Frames"},
	{"Storage"},
	{"Plants"},
	{"Trash"},
	{"Doors & Gates"},
	{"Walls"},
	{"Decor"}
};

new const furnitureArray[][furnitureEnum] =
{
	{"Appliances", 		"Blender", 					 19830,  500},
	{"Appliances", 		"Coffee machine",            11743,  500},
	{"Appliances", 		"Grill",     				 19831,  500},
	{"Appliances", 		"Electrical outlet", 		 19813,  50},
	{"Appliances", 		"Light switch",      		 19829,  50},
	{"Appliances", 		"Keyboard",          		 19808,  50},
	{"Appliances", 		"White telephone",   		 19807,  50},
	{"Appliances", 		"Black telephone",   		 11705,  50},
	{"Appliances", 		"Large LCD television",  	 19786,  1000},
    {"Appliances", 		"Small LCD television",  	 19787,  750},
    {"Appliances", 		"Round gold TV", 			 2224,   1500},
    {"Appliances", 		"TV on wheels",  			 14532,  250},
    {"Appliances", 		"Flat screen TV",        	 1792,   400},
    {"Appliances",      "Wide screen TV",        	 1786,   400},
    {"Appliances",      "Surveillance TV",       	 1749,   400},
    {"Appliances",      "Regular TV",            	 1518,   250},
    {"Appliances",      "Grey sided TV",         	 2322,   200},
    {"Appliances",      "Wood sided TV",         	 1429,   200},
    {"Appliances",      "Microwave",             	 2149,   100},
    {"Appliances",      "Pizza rack",            	 2453,   50},
    {"Appliances",      "Wide sprunk fridge",  		 2452,   100},
    {"Appliances",      "Small sprunk fridge",   	 2533,   50},
    {"Appliances",      "Duality game",        		 2779,   500},
    {"Appliances",      "Bee Bee Gone game",   		 2778,   500},
    {"Appliances",      "Space Monkeys game",    	 2681,   500},
    {"Appliances",      "Sprunk machine",        	 1775,   1000},
    {"Appliances",      "Candy machine",         	 1776,   1000},
    {"Appliances",      "Water machine",         	 1808,   100},
    {"Appliances",      "Radiator",              	 1738,   50},
    {"Appliances",      "Metal fridge",          	 1780,   100},
    {"Appliances",      "Pizza cooker",         	 2426,   50},
    {"Appliances",      "Deep fryer",            	 2415,   100},
    {"Appliances",      "Soda dispenser",        	 2427,   100},
    {"Appliances",      "Aluminum stove",        	 2417,   100},
    {"Appliances",      "Lamp",                  	 2105,   50},
    {"Appliances",      "Diagnostic machine",    	 19903,  4000},
    {"Appliances",      "VHS player",            	 1785,   200},
    {"Appliances",      "Playstation console",   	 2028,   500},
    {"Appliances",      "Retro gaming console",  	 1718,   500},
    {"Appliances",      "Hi-Fi speaker",         	 1839,   250},
    {"Appliances",      "Black subwoofer",       	 2232,   250},
    {"Appliances",      "Subwoofer",             	 1840,   250},
    {"Appliances",      "Small black speaker",   	 2229,   250},
    {"Appliances",      "Speaker on a stand",    	 2233,   100},
    {"Appliances",      "Speaker & stereo system",   2099,   500},
	{"Appliances",      "Surveillance camera",   	 1886,   50},
	{"Appliances",      "Security camera",       	 1622,   50},
	{"Appliances",      "Exercise bike",         	 2630,   500},
	{"Appliances",      "Treadmill",             	 2627,   500},
	{"Appliances",      "Lift bench",            	 2629,   250},
    {"Appliances",		"Pull up machine",       	 2628,   500},
    {"Appliances", 		"White turntable",           1954,   500},
    {"Appliances",      "Open laptop",               19893,  1000},
    {"Appliances",      "Closed laptop",             19894,  500},
    {"Appliances",  	"Drum Kit",      			 19609,  1000},
    {"Appliances",  	"Microphone",          		 19610,  500},
    {"Appliances",  	"Microphone Stand",    	 	 19611,  250},
    {"Appliances",  	"Guitar amp 1",           	 19612,  500},
    {"Appliances",  	"Guitar amp 2",         	 19613,  500},
    {"Appliances",  	"Guitar amp 3",       		 19614,  500},
    {"Appliances",  	"Guitar amp 4",       		 19615,  500},
    {"Appliances",  	"Guitar amp 5",       		 19616,  500},
    {"Bathroom",   		"Toilet",                	 2514,   250},
    {"Bathroom",   		"Bathtub",               	 2519,   500},
    {"Bathroom",   		"Toilet paper",          	 19873,  50},
    {"Bathroom",        "Towel rack",                11707,  100},
    {"Bathroom",   		"Toilet with rug",       	 2528,   500},
	{"Bathroom",   		"Toilet with rolls",     	 2525,   500},
	{"Bathroom",   		"Sink top",              	 2515,   100},
	{"Bathroom",   		"Dual sink top",         	 2150,   200},
	{"Bathroom",   		"Wood sided bathtub",    	 2526,   500},
	{"Bathroom",   		"Sprunk bathtub",        	 2097,   1000},
	{"Bathroom",  		"Shower curtains",       	 14481,  100},
	{"Bathroom",   		"Metal shower cabin",    	 2520,   500},
	{"Bathroom",   		"Glass shower cabin",    	 2517,   500},
	{"Bathroom",   		"Shower with curtains",  	 2527,   500},
	{"Bathroom",   		"Wall sink",             	 2518,   250},
	{"Bathroom",   		"Plain sink",            	 2739,   250},
	{"Bathroom",   		"Sink with extra soap",  	 2524,   250},
	{"Bathroom",   		"Sink with rug",         	 2523,   250},
	{"Bathroom",   		"Industrial sink",       	 11709,  500},
	{"Bedroom",    		"Prison bed",            	 1800,   100},
	{"Bedroom",   		"Folding bed",           	 1812,   100},
	{"Bedroom",    		"Red double bed",        	 11720,  500},
	{"Bedroom",    		"Wood double bed",       	 14866,  500},
	{"Bedroom",   	 	"Double plaid bed",      	 1794,   500},
	{"Bedroom",    		"Brown bed",        		 2299,   500},
	{"Bedroom",    		"Blue striped bed", 		 2302,   500},
	{"Bedroom",    		"Dark blue striped bed", 	 2298,   500},
	{"Bedroom",    		"White striped bed",     	 2090,   500},
	{"Bedroom",    		"Bed with cabinet",      	 2300,   500},
	{"Bedroom",    		"Pink & blue striped bed", 	 2301,   500},
	{"Bedroom",    		"Zebra print bed",       	 14446,  500},
	{"Bedroom",    		"Low striped bed",  		 1795,   500},
	{"Bedroom",    		"Low dark striped bed",      1798,   500},
	{"Bedroom",    		"Single plaid bed",      	 1796,   500},
	{"Bedroom",    		"Plain striped mattress",    1793,   500},
	{"Bedroom",    		"Silk sheeted bed",          1701,   500},
	{"Bedroom",    		"Framed striped bed",        1801,   500},
	{"Bedroom",    		"Framed brown bed",          1802,   500},
	{"Bedroom",    		"Wooden cabinet",            2330,   250},
	{"Bedroom",    		"Cabinet with TV",           2296,   500},
	{"Bedroom",    		"Dresser",               	 1416,   250},
	{"Bedroom",    		"Small dresser",             2095,   250},
	{"Bedroom",    		"Medium dresser",            1743,   250},
	{"Bedroom",    		"Wide dresser",              2087,   250},
	{"Bedroom",    		"Small wardrobe",            2307,   250},
	{"Bedroom",    		"Huge open wardrobe",        14556,  500},
	{"Bedroom",    		"Busted cabinet",            913,    500},
	{"Bedroom",    		"Busted dresser",            911,    250},
	{"Bedroom",    		"Dresser with no drawers",   912,    100},
	{"Carpets",    		"Rockstar carpet",           11737,  250},
    {"Carpets",    		"Plain red carpet",          2631,   250},
    {"Carpets",    		"Plain green carpet",        2632,   250},
    {"Carpets",    		"Patterned carpet",          2842,   250},
    {"Carpets",    		"Zig-zag patterned carpet",  2836,   250},
    {"Carpets",    		"Brown red striped carpet",  2847,   250},
    {"Carpets",    		"Old timer's carpet",        2833,   250},
    {"Carpets",    		"Red checkered carpet",      2818,   250},
    {"Carpets",    		"Green circled carpet",      2817,   250},
    {"Carpets",    		"Plain polkadot carpet",     2834,   250},
    {"Carpets",    		"Tiger rug",                 1828,   1000},
    {"Carpets",    		"Plain round rug",           2835,   250},
    {"Carpets",    		"Round green rug",           2841,   250},
    {"Kitchen",    		"CJ's kitchen",              14384,  3000},
    {"Kitchen",    		"Whole kitchen",             14720,  3000},
    {"Kitchen",    		"White kitchen sink",        2132,   500},
    {"Kitchen",    		"White kitchen counter",  	 2134,   500},
    {"Kitchen",    		"White kitchen fridge",      2131,   500},
    {"Kitchen",    		"White kitchen drawers",     2133,   500},
    {"Kitchen",    		"White kitchen corner",      2341,   500},
    {"Kitchen",    		"White kitchen cupboard",    2141,   500},
    {"Kitchen",    		"Green kitchen sink",        2336,   500},
    {"Kitchen",    		"Green kitchen counter",     2334,   500},
    {"Kitchen",    		"Green kitchen fridge",      2147,   500},
    {"Kitchen",    		"Green kitchen corner",      2338,   500},
    {"Kitchen",    		"Green kitchen washer",      2337,   500},
    {"Kitchen",    		"Green kitchen cupboard",    2158,   500},
    {"Kitchen",    		"Green kitchen stove",       2170,   500},
    {"Kitchen",    		"Red kitchen sink",          2130,   500},
    {"Kitchen",    		"Red kitchen fridge",        2127,   500},
    {"Kitchen",    		"Red kitchen cupboard",      2128,   500},
    {"Kitchen",    		"Red kitchen corner",        2304,   500},
    {"Kitchen",    		"Red kitchen counter",       2129,   500},
    {"Kitchen",    		"Wood kitchen sink",         2136,   500},
    {"Kitchen",    		"Wood kitchen counter",      2139,   500},
    {"Kitchen",    		"Wood kitchen cupboard",     2140,   500},
    {"Kitchen",    		"Wood kitchen washer",       2303,   500},
    {"Kitchen",    		"Wood kitchen unit",         2138,   500},
    {"Kitchen",    		"Wood kitchen corner",       2305,   500},
    {"Kitchen",    		"Wood kitchen stove",        2135,   500},
    {"Kitchen",    		"Modern stove",              19923,  1000},
    {"Kitchen",    		"Old timer's stove",         19915,  1000},
    {"Kitchen",    		"Fork",                      11715,  50},
    {"Kitchen",    		"Butter knife",              11716,  50},
    {"Kitchen",    		"Steak knife",               19583,  50},
    {"Kitchen",    		"Spatula",                   19586,  50},
    {"Kitchen",    		"Double handled pan",        19585,  100},
    {"Kitchen",    		"Single handled pan",        19584,  100},
    {"Kitchen",    		"Frying pan",                19581,  100},
    {"Kitchen",    		"Tall striped saucepan",     11719,  100},
    {"Kitchen",    		"Striped saucepan",          11718,  100},
    {"Kitchen",    		"Cooked steak",              19882,  50},
    {"Kitchen",    		"Raw steak",                 19582,  50},
    {"Kitchen",    		"Green apple",               19576,  50},
    {"Kitchen",    		"Red apple",                 19575,  50},
    {"Kitchen",    		"Orange",                    19574,  50},
    {"Kitchen",    		"Banana",                    19578,  50},
    {"Kitchen",         "Tomato",                    19577,  50},
    {"Tables",     		"Lab table",                 3383,   2000},
    {"Tables",     		"Pool table",                2964,   2000},
    {"Tables",     		"Blackjack table",           2188,   2000},
    {"Tables",     		"Betting table",             1824,   2000},
    {"Tables",     		"Roulette table",            1896,   2000},
    {"Tables",     		"Poker table",               19474,  1000},
    {"Tables",     		"Burger shot table",         2644,   500},
    {"Tables",     		"Cluckin' bell table",       2763,   500},
    {"Tables",     		"Wide cluckin' bell table",  2762,   500},
    {"Tables",     		"Square coffee table",       2370,   500},
    {"Tables",     		"Donut shop table",          2747,   500},
    {"Tables",     		"Pizza table",               2764,   500},
    {"Tables",     		"Wide coffee table",         2319,   500},
    {"Tables",     		"Rectangular green table",   11691,  500},
    {"Tables",     		"Squared green table",       11690,  500},
    {"Tables",     		"Round glass table",         1827,   500},
    {"Tables",     		"Round wooden table",        2111,   500},
    {"Tables",     		"Wide dining table",         2357,   500},
    {"Tables",     		"Plain wooden table",        2115,   500},
    {"Tables",     		"Plain brown wooden table",  1516,   500},
    {"Tables",     		"White polkadot table",      1770,   500},
    {"Tables",     		"Brown dining table",        1737,   500},
    {"Tables",     		"Round stone table",         2030,   500},
    {"Tables",     		"Wooden table with rim",     2699,   500},
    {"Tables",     		"Low coffee table",          1814,   500},
    {"Tables",     		"Low brown wooden table",    1433,   500},
    {"Tables",     		"Bedroom table",             2333,   500},
    {"Tables",     		"Round table with chairs",   1432,   500},
    {"Tables",     		"Table with benches",        1281,   500},
    {"Tables",     		"Checkered table & chairs",  1594,   500},
    {"Tables",     		"Wooden workshop table",     19922,  500},
    {"Tables",     		"Hexagon shaped table",      2725,   500},
    {"Tables",     		"Table with VCR",            2313,   500},
    {"Tables",     		"Low wooden TV stand",       2314,   500},
    {"Tables",     		"Low brown TV stand",        2315,   500},
    {"Tables",     		"Plain brown office desk",   2206,   500},
    {"Tables",     		"Office desk with computer", 2181,   1000},
    {"Tables",     		"Plain wooden office desk",  2185,   1000},
    {"Tables",     		"Computer desk",             2008,   1000},
    {"Chairs",     		"Blue swivel chair",         2356,   250},
    {"Chairs",     		"Brown dining chair",        1811,   250},
    {"Chairs",     		"Red folding chair",         2121,   250},
    {"Chairs",    		"Upholstered chair",         2748,   1000},
    {"Chairs",     		"Folding office chair",      1721,   250},
    {"Chairs",     		"Round black chair",         2776,   250},
    {"Chairs",     		"Black stool",               1716,   250},
    {"Chairs",     		"Brown stool",               2350,   250},
    {"Chairs",     		"Red stool",                 2125,   250},
    {"Chairs",     		"Tall wooden dining chair",  2124,   250},
    {"Chairs",     		"Tall brown dining chair",   1739,   250},
    {"Chairs",     		"Checkered dining chair",    2807,   250},
    {"Chairs",     		"Plain office chair",        1671,   250},
    {"Chairs",     		"Brown folding chair",       19996,  250},
    {"Chairs",     		"Light brown chair",         19994,  250},
    {"Chairs",     		"Black lounge chair",        1704,   500},
    {"Chairs",     		"Beige lounge chair",        1705,   500},
    {"Chairs",     		"Dark blue reclining chair", 1708,   500},
    {"Chairs",     		"Brown corner chair",  		 11682,  500},
    {"Chairs",     		"Old timer's lounge chair",  1711,   500},
    {"Chairs",     		"Old timer's rocking chair", 1735,   500},
    {"Chairs",     		"Two chairs and a table",    2571,   500},
    {"Chairs",     		"Dark brown foot stool",     2293,   500},
    {"Chairs",     		"Rocking chair",             11734,  250},
    {"Chairs",     		"Plaid sofa",                1764,   750},
    {"Chairs",     		"Long black sofa",           1723,   750},
    {"Chairs",     		"Beige sofa",                1702,   750},
    {"Chairs",     		"Brown couch",               1757,   750},
    {"Chairs",     		"Old timer's sofa",          1728,   750},
    {"Chairs",     		"Brown corner couch piece",  2292,   500},
    {"Chairs",     		"White & grey couch",        1761,   750},
    {"Chairs",     		"Patterned couch",           1760,   750},
    {"Chairs",     		"Plaid couch",               1764,   750},
    {"Chairs",     		"Dark blue couch",           1768,   750},
    {"Chairs",     		"Wide brown couch",          2290,   750},
    {"Chairs",     		"Green couch",               1766,   750},
    {"Chairs",     		"Patterned armrest couch",   1763,   750},
    {"Chairs",     		"Red couch",                 11717,  750},
    {"Chairs",     		"Very wide beige couch",     1710,   1500},
    {"Chairs",     		"Ultra wide beige couch",    1709,   2000},
    {"Chairs",     		"Red and white couch",       1707,   750},
    {"Posters/Frames",  "Burger shot poster",        2641,   50},
    {"Posters/Frames",  "Cluckin' bell poster",      2766,   50},
    {"Posters/Frames",  "Wash wands poster",         2685,   50},
    {"Posters/Frames",  "For lease poster",          11289,  50},
    {"Posters/Frames",  "Monkey juice poster",       19328,  50},
    {"Posters/Frames",  "Ring donuts poster",        2715,   50},
    {"Posters/Frames",  "Battered ring posterr",     2716,   50},
	{"Posters/Frames",  "Pizza poster",         	 2668,   50},
    {"Posters/Frames",  "T-Shirt poster",            2729,   50},
    {"Posters/Frames",  "Suburban poster",           2658,   50},
    {"Posters/Frames",  "Zip poster",                2736,   50},
    {"Posters/Frames",  "Binco poster",              2722,   50},
    {"Posters/Frames",  "99c binco poster",          2719,   50},
    {"Posters/Frames",  "Binco sale poster",         2721,   50},
    {"Posters/Frames",  "Heat poster",               2661,   50},
    {"Posters/Frames",  "Eris poster",               2655,   50},
    {"Posters/Frames",  "Bobo poster",               2662,   50},
    {"Posters/Frames",  "Base 5 poster",             2691,   50},
    {"Posters/Frames",  "Base 5 cutout #1",        	 2693,   50},
    {"Posters/Frames",  "Base 5 cutout #2",        	 2692,   50},
    {"Posters/Frames",  "Long base 5 poster #1",   	 2695,   50},
    {"Posters/Frames",  "Long base 5 poster #2",   	 2696, 	 50},
    {"Posters/Frames",  "White prolaps poster",   	 2697,   50},
    {"Posters/Frames",  "Black prolaps poster",   	 2656,   50},
    {"Posters/Frames",  "San Fierro frame",       	 19175,  100},
    {"Posters/Frames",  "Flint County frame",     	 19174,  100},
    {"Posters/Frames",  "Gant Bridge frame",      	 19173,  100},
    {"Posters/Frames",  "Los Santos frame",       	 19172,  100},
    {"Posters/Frames",  "City View frame",    		 2289,   100},
    {"Posters/Frames",  "Los Angeles frame",      	 2258,   100},
	{"Posters/Frames",  "Wooden frame",           	 2288,   100},
	{"Posters/Frames",  "Sail Boat frame",        	 2287,   100},
	{"Posters/Frames",  "Ship frame",             	 2286,   100},
	{"Posters/Frames",  "Water frame",            	 2285,   100},
	{"Posters/Frames",  "Church frame",           	 2284,   100},
    {"Posters/Frames",  "Rural frame",        		 2282,   100},
    {"Posters/Frames",  "Sunset frame",				 2281,   100},
    {"Posters/Frames",  "Coast frame",        		 2280,   100},
    {"Posters/Frames",  "Mount chiliad frame",    	 2279,   100},
    {"Posters/Frames",  "Cargo ship frame",       	 2278,   100},
    {"Posters/Frames",  "Cat frame",          		 2277,   100},
    {"Posters/Frames",  "Bridge frame",          	 2276,   100},
    {"Posters/Frames",  "Fruit Bowl frame",       	 2275,   100},
    {"Posters/Frames",  "Flower frame",          	 2274,   100},
    {"Posters/Frames",  "Bouquet frame",          	 2273,   100},
    {"Posters/Frames",  "Landscape frame",        	 2272,   100},
    {"Posters/Frames",  "Paper frame",         		 2271,   100},
    {"Posters/Frames",  "Leaves frame",         	 2270,   100},
    {"Posters/Frames",  "Lake frame",         		 2269,   100},
    {"Posters/Frames",  "Black cat frame",        	 2268,   100},
    {"Posters/Frames",  "Cruise ship frame",      	 2267,   100},
    {"Posters/Frames",  "Night downtown frame",		 2266,   100},
    {"Posters/Frames",  "Dseert rocks frame",     	 2265,   100},
    {"Posters/Frames",  "Beach frame",         		 2264,   100},
    {"Posters/Frames",  "Dock frame",         		 2263,   100},
    {"Posters/Frames",  "Downtown frame",         	 2262,   100},
    {"Posters/Frames",  "Golden gate frame",      	 2261,   100},
    {"Posters/Frames",  "Old Boat frame",         	 2260,   100},
    {"Posters/Frames",  "Bowling frame",          	 2259,   100},
    {"Posters/Frames",  "Pattern frame",        	 2283,   100},
    {"Posters/Frames",  "Squares frame",          	 2257,   100},
    {"Posters/Frames",  "Palm trees frame",       	 2256,   100},
    {"Posters/Frames",  "Erotic frame",         	 2255,   100},
    {"Posters/Frames",  "Yellow car frame",       	 2254,   10},
    {"Storage",     	"Book shelf",                1742,   500},
	{"Storage",     	"Wardrobe",         	     2307,   400},
	{"Storage",     	"Wooden crate",            	 1217,   150},
	{"Storage",     	"Metal crate",               964,    150},
	{"Storage",     	"Wide office cabinet",       2200,   150},
	{"Storage",    	 	"Yellow cabinet",         	 1730,   150},
	{"Storage",     	"Open gym locker",        	 11730,  250},
	{"Storage",     	"Closed gym locker",      	 11729,  250},
	{"Storage",     	"Toolbox",          		 19921,  500},
	{"Storage",     	"Chest",                     19918,  100},
	{"Storage",     	"Dresser",                   2094,   250},
	{"Storage",     	"Warehouse rack",         	 3761,   150},
	{"Storage",     	"Barrel rack",           	 925,    250},
	{"Storage",     	"Sex toy rack",          	 2581,   250},
	{"Storage",     	"Sex magazine rack #1",      2578,   250},
	{"Storage",     	"Sex magazine rack #2",      2579,   250},
	{"Storage",     	"Rack with no shelves",      2509,   250},
	{"Storage",     	"Rack with 3 shelves",       2482,   250},
	{"Storage",     	"Rack with 4 shelves",       2475,   250},
	{"Storage",     	"Small rack",			 	 2463,   250},
	{"Storage",     	"Wide rack",              	 2462,   250},
	{"Storage",     	"Dresser with drawers",      1743,   250},
	{"Storage",     	"Wide dresser",              2087,   250},
	{"Storage",     	"Tall dresser",              2088,   250},
	{"Storage",     	"Brown dresser",             2089,   250},
	{"Storage",     	"Single dresser",            2095,   250},
	{"Storage",     	"White filing cabinet",   	 2197,   250},
	{"Storage",     	"Green filing cabinet",   	 2610,   250},
	{"Storage",     	"Dual filing cabinets",      2007,   250},
	{"Storage",     	"Black shelf",          	 2078,   250},
	{"Storage",     	"Brown shelf",               2204,   250},
	{"Storage",     	"Tool shelf",                19899,  250},
	{"Storage",    	 	"Tool cabinet",     		 19900,  250},
	{"Storage",     	"Wall mounted shelf",        19940,  250},
	{"Storage",     	"Clothes shelf",          	 2708,   250},
	{"Storage",     	"Gun rack",         		 2046,   250},
	{"Storage",     	"Shop shelf",             	 19640,  250},
	{"Storage",     	"Blue office shelf",         2191,   250},
	{"Storage",     	"Wooden office shelf",       2199,   250},
	{"Storage",     	"Office book shelf",         2161,   250},
	{"Storage",     	"Tall office cabinet",       2167,   100},
	{"Storage",     	"Wide office cabinet",       2163,   100},
	{"Plants",   		"Palm plant #1",          	 625,    100},
    {"Plants",   		"Palm plant #2",          	 626,    100},
    {"Plants",   		"Palm plant #3",          	 627,    100},
    {"Plants",   		"Palm plant #4",          	 628,  	 100},
    {"Plants",   		"Palm plant #5",          	 630,    100},
    {"Plants",   		"Palm plant #6",          	 631,    100},
    {"Plants",   		"Palm plant #7",          	 632,    100},
    {"Plants",   		"Palm plant #8",         	 633,    100},
    {"Plants",  		"Palm plant #9",         	 646,    100},
    {"Plants",   		"Palm plant #10",            644,    100},
    {"Plants",   		"Palm plant #11",         	 2001,   100},
    {"Plants",   		"Palm plant #12",        	 2010,   100},
    {"Plants",   		"Palm plant #13",        	 2011,   150},
    {"Plants",   		"Potted plant #1",           948,    150},
    {"Plants",   		"Potted plant #2",           949,    150},
    {"Plants",   		"Potted plant #3",           950,  	 150},
    {"Plants",   		"Potted plant #4",           2194,   150},
    {"Plants",   		"Potted plant #5",           2195,   150},
    {"Plants",   		"Potted plant #6",           2203,   150},
    {"Plants",   		"Potted plant #7",           2240,   150},
    {"Plants",   		"Potted plant #8",           2241,   150},
    {"Plants",   		"Potted plant #9",           2242, 	 150},
    {"Plants",   		"Potted plant #10",          2244, 	 150},
    {"Plants",   		"Potted plant #11",          2245,   150},
    {"Plants",   		"Potted plant #12",          2246,   150},
    {"Plants",   		"Potted plant #13",          2248,   150},
    {"Plants",   		"Potted plant #14",          2252,   150},
    {"Plants",   		"Potted plant #15",          2253,   150},
    {"Plants",   		"Potted plant #16",          2811,   150},
    {"Plants",   		"Wide plant",      			 638,    250},
    {"Plants",   		"Single bush plant",         1361,   250},
    {"Plants",   		"Wide bush plant",           1360,   250},
    {"Plants",  		"Bush plant and bench",      1364,   500},
    {"Plants",   		"Window plant #1",           3802,   200},
    {"Plants",   		"Window plant #2",           3810,   200},
    {"Trash",           "Wastebin",                  11706,  50},
    {"Trash",           "Blue trashcan on wheels",   1339,   50},
	{"Trash",           "Blue trashcan",     		 1430,   50},
	{"Trash",           "Trashcan with holes",       1359,   50},
	{"Trash",           "Cluckin' bell trashcan", 	 2770,   50},
	{"Trash",           "Burger shot trashcan",   	 2420,   50},
	{"Trash",           "Round bagged trashcan",     1330,   50},
	{"Trash",           "Round white trashcan",      1329,   50},
	{"Trash",           "Metal trashcan",            1328, 	 50},
	{"Trash",           "Full dumpster",          	 1415,   50},
	{"Trash",           "Closed dumpster",           1227,   50},
	{"Trash",           "Bottle disposal unit",      1336,   50},
	{"Trash",           "Blue dumpster",             1334,   50},
	{"Trash",           "Red dumpster",              1333,   50},
	{"Trash",           "Hippo trashcan",            1371,   50},
	{"Trash",           "Poor trashcan",             1347,   50},
	{"Trash",           "Cement trashcan",           1300,   50},
	{"Trash",           "Trashcan filled with wood", 1442,   50},
	{"Trash",           "Two pallets & trash",       1450,   50},
	{"Trash",           "Single pallet",             1448,   50},
	{"Trash",           "Garbage bag",               1265,   50},
	{"Trash",           "Burger shot bag",           2663,   50},
	{"Trash",           "Pile of boxes",             1440,   50},
    {"Trash",     		"Cardboard box",             1221,   50},
    {"Trash",           "Open pizza box",            2860,   50},
    {"Trash",           "Takeaway trash",         	 2866,   50},
    {"Trash",           "Burger shot trash",      	 2840,   50},
	{"Trash",           "Dirty dishes #1",      	 2812,   50},
    {"Trash",           "Dirty dishes #2",   		 2822,   50},
    {"Trash",           "Dirty dishes #3",      	 2829,   50},
    {"Trash",           "Dirty dishes #4",      	 2830,   50},
    {"Trash",           "Dirty dishes #5",      	 2831,   50},
    {"Trash",           "Dirty dishes #6",      	 2832,   50},
    {"Trash",           "Clean dishes #1",   		 2862,   50},
    {"Trash",           "Clean dishes #2",   		 2863,   50},
    {"Trash",           "Clean dishes #3",   		 2864,   50},
    {"Trash",           "Clean dishes #4",   		 2865,   50},
    {"Trash",           "Assorted trash #1",         2672,   50},
    {"Trash",           "Assorted trash #2",         2677,   50},
    {"Trash",           "Assorted trash #3",         2675,   50},
    {"Trash",           "Assorted trash #4",         2676,   50},
    {"Trash",           "Assorted trash #5",         2674,   50},
    {"Trash",           "Assorted trash #6",         2673,   50},
    {"Trash",           "Assorted trash #7",         2670,   50},
    {"Doors & Gates",   "Door with bars",            2930,   100},
    {"Doors & Gates",   "Petrol door",       		 2911,   100},
    {"Doors & Gates",   "Flat door",          		 3061,   100},
    {"Doors & Gates",   "Wardrobe door",         	 1567,   100},
    {"Doors & Gates",   "Green push door",        	 1492,   100},
    {"Doors & Gates",   "Red windowed door",       	 1493,   100},
    {"Doors & Gates",   "Black wooden door",         1494,   100},
    {"Doors & Gates",   "Brown windowed door",       3089,   100},
    {"Doors & Gates",   "Wooden farm door",        	 1497,   100},
    {"Doors & Gates",   "White wooden door",         1498,   100},
    {"Doors & Gates",   "Warehouse door",       	 1499,   100},
    {"Doors & Gates",   "Red door",        			 1504,   100},
    {"Doors & Gates",   "Blue door",        		 1505,   100},
    {"Doors & Gates",   "White door",        		 1506,   100},
    {"Doors & Gates",   "Yellow door",        		 1507,   100},
    {"Doors & Gates",   "Kitchen door",        		 1523,   100},
    {"Doors & Gates",   "Motel door",        		 1535,   100},
    {"Doors & Gates",   "Blue motel door",           2970,   100},
    {"Doors & Gates",   "24/7 door",     			 1560,   100},
    {"Doors & Gates",   "Barred door",          	 3061,   100},
    {"Doors & Gates",   "Red motel door",            3029,   100},
    {"Doors & Gates",   "Security door",       		 2949,   100},
    {"Doors & Gates",   "Tall white door",           2948,   100},
    {"Doors & Gates",   "Bank door",           		 2946,   100},
    {"Doors & Gates",   "Ship door",     			 2944,   100},
    {"Doors & Gates",   "Tower door",        		 977,    100},
    {"Doors & Gates",   "Maintenance doors",         11714,  100},
    {"Doors & Gates",   "Dual office door",          19176,  100},
    {"Doors & Gates",   "Screen door #1",        	 1495,   100},
    {"Doors & Gates",   "Screen door #2",        	 1500,   100},
    {"Doors & Gates",   "Screen door #3",        	 1501,   100},
    {"Doors & Gates",   "Shop door #1",        		 1532,   100},
    {"Doors & Gates",   "Shop door #2",      		 1496,   100},
    {"Doors & Gates",   "Shop door #3",        		 1533,   100},
    {"Doors & Gates",   "Shop door #4",        		 1537,   100},
    {"Doors & Gates",   "Shop door #5",        		 1538,   100},
    {"Doors & Gates",   "Office door #1",          	 1566,   100},
    {"Doors & Gates",   "Office door #2",         	 1569,   100},
    {"Doors & Gates",   "Office door #3",        	 1536,   100},
    {"Doors & Gates",   "Office door #4",        	 1557,   100},
    {"Doors & Gates",   "Office door #5",        	 1556,   100},
    {"Doors & Gates",   "Wooden push door #1",       1491,   100},
    {"Doors & Gates",   "Wooden push door #2",       1502,   100},
    {"Doors & Gates",   "Garage door #1",            8957,   100},
    {"Doors & Gates",   "Garage door #2",            7891,   100},
    {"Doors & Gates",   "Garage door #3",     	 	 3037,   100},
    {"Doors & Gates",   "Garage door #4",            19861,  100},
    {"Doors & Gates",   "Garage door #5",            19864,  100},
    {"Doors & Gates",   "Plain metal bar gate",      19912,  1000},
    {"Doors & Gates",   "Tall metal bar gate",       971,    1000},
    {"Doors & Gates",   "Long metal bar gate",       975,    1000},
    {"Doors & Gates",   "Los Santos Airport gate",   980,    1000},
    {"Doors & Gates",   "Fenced gate",               985,    1000},
    {"Doors & Gates",   "No parking gate",           19870,  1000},
    {"Doors & Gates",   "Fenced gate on wheels",     988,    1000},
    {"Walls",           "wall001",                   19353,  100},
    {"Walls",           "wall002",                   19354,  100},
    {"Walls",           "wall003",                   19355,  100},
    {"Walls",           "wall004",                   19356,  100},
    {"Walls",           "wall005",                   19357,  100},
    {"Walls",           "wall006",                   19358,  100},
    {"Walls",           "wall007",                   19359,  100},
    {"Walls",           "wall008",                   19360,  100},
    {"Walls",           "wall009",                   19361,  100},
    {"Walls",           "wall010",                   19362,  100},
    {"Walls",           "wall011",                   19363,  100},
    {"Walls",           "wall012",                   19364,  100},
    {"Walls",           "wall013",                   19365,  100},
    {"Walls",           "wall014",                   19366,  100},
    {"Walls",           "wall015",                   19367,  100},
    {"Walls",           "wall016",                   19368,  100},
    {"Walls",           "wall017",                   19369,  100},
    {"Walls",           "wall018",                   19370,  100},
    {"Walls",           "wall019",                   19371,  100},
    {"Walls",           "wall020",                   19372,  100},
    {"Walls",           "wall021",                   19373,  100},
    //{"Walls",           "wall022",                   19374,  100},
    {"Walls",           "wall023",                   19375,  100},
    {"Walls",           "wall024",                   19376,  100},
    {"Walls",           "wall025",                   19377,  100},
    {"Walls",           "wall026",                   19378,  100},
    {"Walls",           "wall027",                   19379,  100},
    {"Walls",           "wall028",                   19380,  100},
    {"Walls",           "wall029",                   19381,  100},
    //{"Walls",           "wall030",                   19382,  100},
    {"Walls",           "wall031",                   19383,  100},
    {"Walls",           "wall032",                   19384,  100},
    {"Walls",           "wall033",                   19385,  100},
    {"Walls",           "wall034",                   19386,  100},
    {"Walls",           "wall035",                   19387,  100},
    {"Walls",           "wall036",                   19388,  100},
    {"Walls",           "wall037",                   19389,  100},
    {"Walls",           "wall038",                   19390,  100},
    {"Walls",           "wall039",                   19391,  100},
    {"Walls",           "wall040",                   19392,  100},
    {"Walls",           "wall041",                   19393,  100},
    {"Walls",           "wall042",                   19394,  100},
    {"Walls",           "wall043",                   19395,  100},
    {"Walls",           "wall044",                   19396,  100},
    {"Walls",           "wall045",                   19397,  100},
    {"Walls",           "wall046",                   19398,  100},
    {"Walls",           "wall047",                   19399,  100},
    {"Walls",           "wall048",                   19400,  100},
    {"Walls",           "wall049",                   19401,  100},
    {"Walls",           "wall050",                   19402,  100},
    {"Walls",           "wall051",                   19403,  100},
    {"Walls",           "wall052",                   19404,  100},
    {"Walls",           "wall053",                   19405,  100},
    {"Walls",           "wall054",                   19406,  100},
    {"Walls",           "wall055",                   19407,  100},
    {"Walls",           "wall056",                   19408,  100},
    {"Walls",           "wall057",                   19409,  100},
    {"Walls",           "wall058",                   19410,  100},
    {"Walls",           "wall059",                   19411,  100},
    {"Walls",           "wall060",                   19412,  100},
    {"Walls",           "wall061",                   19413,  100},
    {"Walls",           "wall062",                   19414,  100},
    {"Walls",           "wall063",                   19415,  100},
    {"Walls",           "wall064",                   19416,  100},
    {"Walls",           "wall065",                   19417,  100},
    {"Walls",           "wall066",                   19426,  100},
    {"Walls",           "wall067",                   19427,  100},
    {"Walls",           "wall068",                   19428,  100},
    {"Walls",           "wall069",                   19429,  100},
    {"Walls",           "wall070",                   19430,  100},
    {"Walls",           "wall071",                   19431,  100},
    {"Walls",           "wall072",                   19432,  100},
    {"Walls",           "wall073",                   19433,  100},
    {"Walls",           "wall074",                   19434,  100},
    {"Walls",           "wall075",                   19435,  100},
    {"Walls",           "wall076",                   19436,  100},
    {"Walls",           "wall077",                   19437,  100},
    {"Walls",           "wall078",                   19438,  100},
    {"Walls",           "wall079",                   19439,  100},
    {"Walls",           "wall080",                   19440,  100},
    {"Walls",           "wall081",                   19441,  100},
    {"Walls",           "wall082",                   19442,  100},
    {"Walls",           "wall083",                   19443,  100},
    {"Walls",           "wall084",                   19444,  100},
    {"Walls",           "wall085",                   19445,  100},
    {"Walls",           "wall086",                   19446,  100},
    {"Walls",           "wall087",                   19447,  100},
    {"Walls",           "wall088",                   19448,  100},
    {"Walls",           "wall089",                   19449,  100},
    {"Walls",           "wall090",                   19450,  100},
    {"Walls",           "wall091",                   19451,  100},
    {"Walls",           "wall092",                   19452,  100},
    {"Walls",           "wall093",                   19453,  100},
    {"Walls",           "wall094",                   19454,  100},
    {"Walls",           "wall095",                   19455,  100},
    {"Walls",           "wall096",                   19456,  100},
    {"Walls",           "wall097",                   19457,  100},
    {"Walls",           "wall098",                   19458,  100},
    {"Walls",           "wall099",                   19459,  100},
    {"Walls",           "wall100",                   19460,  100},
    {"Walls",           "wall101",                   19461,  100},
    {"Walls",           "wall102",                   19462,  100},
    {"Walls",           "wall103",                   19463,  100},
    {"Walls",           "wall104",                   19464,  100},
    {"Walls",           "wall105",                   19465,  100},
    {"Decor",           "Guard tower",               3279,   5000},
    {"Decor",           "Dance floor",               19128,  1000},
    {"Decor",           "Tool board",                19815,  50},
    {"Decor",           "Mailbox",                   19867,  50},
    {"Decor",           "Single key",                11746,  50},
    {"Decor",           "Oxygen cylinder",           19816,  50},
    {"Decor",           "Cauldron",                  19527,  50},
    {"Decor",           "Valve",                     2983,   50},
    {"Decor",           "Writing board",             19805,  50},
    {"Decor",           "Punching bag",              1985,   50},
    {"Decor",           "Desk fan",           		 2192,   50},
    {"Decor",           "Satellite dish",            3031,   50},
    {"Decor",           "Shopping cart",             1349,   50},
    {"Decor",           "Fireplace logs",			 19632,  50},
    {"Decor",           "Telescope",                 2600,   50},
    {"Decor",           "Ladder",                    1428,   50},
    {"Decor",           "Plank",                     2937,   50},
    {"Decor",           "Blue curtains",             2558,   50},
    {"Decor",           "Old curtains",              14443,  50},
    {"Decor",           "Blinds",                    18084,  50},
    {"Decor",           "United states flag",        11245,  50},
    {"Decor",           "Double US flag",            2614,   50},
    {"Decor",           "Confederate flag",          2048,   50},
    {"Decor",           "Basketball court",          946,    50},
    {"Decor",           "Basketball",                2114,   50},
    {"Decor",           "Fire exit sign",            11710,  50},
    {"Decor",           "Fire extinguisher",         2690,   50},
    {"Decor",           "Fire extinguisher panel",   11713,  50},
    {"Decor",           "Fire alarm",                11713,  50},
    {"Decor",           "Fire hydrant",              1211,   50},
	{"Decor",           "Cocaine packet",            2891,   50},
    {"Decor",           "Drug bundle",         		 1279,   50},
    {"Decor",           "White package",           	 1575,   50},
    {"Decor",           "Orange package",          	 1576,   50},
    {"Decor",           "Yellow package",          	 1577, 	 50},
    {"Decor",           "Green package",           	 1578, 	 50},
    {"Decor",           "Blue package",            	 1579,   50},
    {"Decor",           "Red package",             	 1580,   50},
    {"Decor",           "Marijuana bundle",     	 2901,   50},
    {"Decor",           "Marijuana plant",           3409,   50},
    {"Decor",           "Ashtray",           		 1510, 	 50},
    {"Decor",           "Ashtray with cigar",        1665,   50},
    {"Decor",           "Pumpkin",                   19320,  50},
    {"Decor",           "Christmas tree",            19076,  50},
    {"Decor",           "Stage",         			 19608,  250},
    {"Decor",           "Gold record",          	 19617,  100},
    {"Decor",           "Moose head",        		 1736,   300},
    {"Decor",           "Cow",                       19833,  500},
    {"Decor",           "Rocking horse",             11733,  50},
    {"Decor",			"Deer",						 19315,  50},
    {"Decor",           "Boot",                      11735,  50},
    {"Decor",           "Old radiator",      		 1738,   50},
    {"Decor",           "Radiator",                  11721,  50},
    {"Decor",           "Round light",               11727,  50},
    {"Decor",           "Mop & pail",          		 1778,   50},
    {"Decor",           "Chambermaid",       		 1789,   50},
    {"Decor",           "Bucket",            		 2713,   50},
    {"Decor",           "Trolley",                   2994,   50},
    {"Decor",           "Body bags",        		 16444,  50},
    {"Decor",           "Beach ball",                1598, 	 50},
    {"Decor",           "Blackboard",        		 3077,   50},
    {"Decor",           "Dumbell",       			 3072,   50},
    {"Decor",           "Sports bag",                11745,  50},
    {"Decor",           "Portable toilet",           2984,   50},
    {"Decor",   		"Round burger shot sign", 	 2643,   50},
    {"Decor",           "Stretcher",          		 1997,   50},
    {"Decor",           "Hospital bed",              2146,   50},
    {"Decor",           "Work lamp",                 2196,   50},
    {"Decor",           "Fire bell",       			 1613,   50},
    {"Decor",           "Sword",                     19590,  50},
    {"Decor",           "Wooden bat",                19914,  50},
    {"Decor",           "Hand fan",                  19591,  50},
    {"Decor",           "Shop basket",               19592,  50},
    {"Decor",           "Safe door",                 19619,  50},
    {"Decor",           "Safe enclosure",            19618,  50},
    {"Decor",           "Bag of money",              1550,   50},
    {"Decor",           "Oil can",                   19621,  50},
    {"Decor",           "Wrench",                    19627,  50},
    {"Decor",           "Engine",                    19917,  50},
    {"Decor",           "Broom",                     19622,  50},
    {"Decor",           "Briefcase",                 19624,  50},
    {"Decor",           "Cigarette",                 19625,  50},
    {"Decor",           "Rolled joint",              3027,   50},
    {"Decor",           "Fire wood",                 19632,  50},
    {"Decor",           "Compacted trash",           19772,  50},
    {"Decor",           "Medic kit",                 11738,  50},
    {"Decor",           "Clip",                      19995,  50},
    {"Decor",           "Dippo lighter",             19998,  50},
    {"Decor",           "Briquettes",                19573,  50},
    {"Decor",           "Meat Sack",                 2805,   50},
    {"Decor",           "Small meat sack",           2803,   50},
    {"Decor",           "Stack of magazines",        2855,   50},
    {"Decor",           "Scattered magazines",       2852,   50},
    {"Decor",           "Scattered books",           2854,   50},
    {"Decor",           "Wooden stairs",             3361,   50},
    {"Decor",           "Long concrete stairs",      14410,  50},
    {"Decor",           "Short concrete stairs",     14416,  50},
    {"Decor",           "Short stairs",              14877,  50},
    {"Decor",           "Big window",      			 19325,  100},
    {"Decor",           "Small window",           	 19466,  50},
    {"Decor",           "Breakable window",       	 1649,   75},
    {"Decor",           "Red neon tube",             18647,  100},
    {"Decor",           "Blue neon tune",            18648,  100},
    {"Decor",           "Green neon tube",           18649,  100},
    {"Decor",           "Yellow neon tube",          18650,  100},
    {"Decor",           "Pink neon tube",            18651,  100},
    {"Decor",           "White neon tube",           18652,  100},
    {"Decor",           "Beer bottle",               1543,   10},
    {"Decor",           "Yellow beer bottle",        1544,   10},
    {"Decor",           "Medicine bottle",           1950,   10},
    {"Decor",           "Green beer bottle",         19818,  10},
    {"Decor",           "Whiskey bottle",            19823,  10},
    {"Decor",           "Wine bottle",               19820,  10},
    {"Decor",           "Red wine bottle",           19822,  10},
    {"Decor",           "Champagne bottle",          19824,  10},
    {"Decor",           "Beer",                      19821,  10},
    {"Decor",           "Target #1",           		 2056,   50},
    {"Decor",           "Target #2",           		 2055,   50},
    {"Decor",           "Target #3",           		 2051,   50},
    {"Decor",           "Target #4",           		 2050,   50},
    {"Decor",           "Target #5",           		 2049,   50},
    {"Decor",           "Clothes pile #1",     		 2819,   50},
    {"Decor",           "Clothes pile #2",      	 2843,   50},
    {"Decor",           "Clothes pile #3",      	 2844,   50},
    {"Decor",           "Clothes pile #4",      	 2845,   50},
    {"Decor",           "Clothes pile #5",      	 2846,   50},
    {"Decor",           "Light #0",             	 3877,   50},
    {"Decor",           "Light #1",             	 3524,   50},
    {"Decor",           "Light #2",             	 3461,   50},
    {"Decor",           "Dragon Head",          	 3528,   150},
    {"Decor",           "Fountain",             	 9833,   150},
    {"Decor",           "Military RPG",            	 3267,   150},
    {"Decor",           "Light",                 	 1231,   150},
    {"Decor",           "Blue Light",             	19122,   150},
    {"Decor",           "Green Light",              19123,   150},
    {"Decor",           "Red Light",           	    19124,   150},
	{"Decor",           "HeliPad",                   3928,   200}
};

enum entranceEnum
{
	eName[32],
	eInterior,
 	eWorld,
 	eMapIcon,
 	eFreeze,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA
};

new const staticEntrances[][entranceEnum] =
{
	{"County General", 	 	 1,  1,  22, true,  2034.2003, -1402.1976, 17.2951, 180.0000, -2330.0376,111.4688,-5.3942, 180.0000},
	{"Red Country Hospital",  1,  2,  22, true,  1241.8763, 326.8313, 19.7555, 270.0000, -2330.0376,111.4688,-5.3942, 180.0000},
	{"Temple Bank", 		 5,  3,  52, true,  1382.1488, -1088.6097, 28.2123, 89.0300, 1667.3536, -995.3700, 683.6913, 0.0000},
	{"City Hall",            3,  4,  0,  true,  1482.6517, -1771.6108, 18.7958, 0.0000,   676.3712, -96.0018, -77.2041, 90.0000},
	{"Sheriff Department",    2,  5,  30, true,  627.5011, -571.7799, 17.6806, 90.0000,  1553.2065,-1674.0422,2110.5356, 270.0000},
	{"Trung tam thi lai xe", 3,  6,  55, false, 854.4573, -604.6368, 18.4219, 180.0000, -2029.7135, -119.2240, 1035.1719, 0.0000},
	{"VIP Lounge",           3,  7,  59, true, 	1218.0033, -1427.9146, 13.3828, 184.8025,   1821.6951, -1309.9364, 1131.7552, 0.0000},
	{"Drug den",             5,  8,  23, false, 2166.1746, -1671.4641, 15.0737, 225.0000, 318.6025, 1114.9443, 1083.8828, 0.0000},
	{"Crack house",          5,  9,  23, false, 2351.9138, -1170.1725, 28.0507, 0.0000,   2352.3337, -1180.9257, 1027.9766, 90.0000},
	{"Heisenberg's trailer", 2,  10, 37, false, -65.0972,  -1574.3820, 2.6107,  180.0000,   1.6362, -3.0563, 999.4284, 90.0000},
	{"FBI headquarters",     1,  11, 30, true,  330.6662,  -1509.9915, 36.0391, 225.0000,  -501.1844, 286.8678, 2001.0950, 0.0000},
	{"Los Santos Casino",    5,  12, 25, true,  1022.5460, -1121.6831, 23.8720, 180.0000, 1095.5776, 33.3495, 1000.6797, 180.0000},
	{"Rodeo Bank",           5,  13, 52, true,  593.5599,  -1250.8365, 18.2484, 20.0000,   1667.3536, -995.3700, 683.6913, 0.0000}
};
enum locEnum
{
	locID,
	locName[32],
	bool:locExists,
	Float:locPosX,
	Float:locPosY,
	Float:locPosZ
};
new LocationInfo[MAX_LOCATIONS][locEnum];

enum aEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new AtmInfo[MAX_ATMS][aEnum];

enum jobEnum
{
	jobName[32],
	Float:jobX,
	Float:jobY,
	Float:jobZ,
	Float:jobR,
	jobActorModel,
	jobActorID
};

new jobLocations[][jobEnum] =
{
	{"Giao thuc an", 		377.6143, -65.8477, 1001.5078, 191.4441, 	155, INVALID_ACTOR_ID},
	{"Giao hang nhanh",     	303.1698, -235.1395, 1.5781, 277.7019, 		147, INVALID_ACTOR_ID},
	{"Nong dan",     	-83.0172, 9.7350, 3.1172, 233.9269, 		158, INVALID_ACTOR_ID}
};

enum atmEnum
{
	Float:atmX,
	Float:atmY,
	Float:atmZ,
	Float:atmA
};

new const atmMachines[][atmEnum] =
{
    {2228.394775, -1714.255126, 13.158315, 270.000000},
    {1928.599975, -1779.941650, 13.136871, 90.000000},
    {1493.294677, -1772.306640, 18.385747, 180.000000},
    {1102.299438, -1438.380981, 15.396868, 90.000000},
    {563.902526, -1293.948730, 16.858232, 180.000000},
    {2233.269042, -1158.040527, 25.540679, 270.000000},
    {827.125183, -1345.751220, 13.182147, 270.000000},
    {827.125183, -1346.811157, 13.182147, 270.000000},
    {1093.036621, 29.262479, 1000.309509, 0.000000},
    {-14.377381, -180.600250, 1003.186889, 180.000000},
    {9.334012, -31.044189, 1003.159179, 270.000000},
    {-24.413511, -91.806381, 1003.126708, 180.000000},
    {-21.125793, -140.438766, 1003.166564, 180.000000},
    {-24.290849, -57.946674, 1003.176574, 180.000000}
};

enum fireEnum
{
 	fireIndex,
 	Float:fireX,
 	Float:fireY,
 	Float:fireZ,
 	Float:fireA,
};

new const randomFireSpawns[][fireEnum] =
{
    {0, 1720.231079, -1740.936889, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 11.432815, 180.922180},
    {0, 1726.050537, -1740.842773, 11.432815, 180.922180},
    {0, 1716.479858, -1740.926757, 11.432815, 180.922180},
    {0, 1713.465332, -1740.676391, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 13.742803, 180.922180},
    {0, 1726.050537, -1740.842773, 14.072817, 180.922180},
    {0, 1720.231079, -1740.936889, 14.142808, 180.922180},
    {0, 1716.479858, -1740.926757, 14.642818, 180.922180},
    {0, 1713.465332, -1740.676391, 14.992820, 180.922180},
    {0, 1729.405151, -1742.339111, 11.432815, 180.922180},
    {0, 1729.405883, -1742.379028, 14.632813, 180.922180},
    {0, 1729.453002, -1745.278564, 11.432815, 180.922180},
    {0, 1729.452514, -1745.258789, 14.632813, 180.922180},
    {0, 1729.500610, -1748.218139, 11.432815, 180.922180},
    {0, 1729.497314, -1748.038085, 14.632813, 180.922180},
    {0, 1729.548095, -1751.127929, 11.432815, 180.922180},
    {0, 1729.547485, -1751.098022, 14.632813, 180.922180},
    {0, 1729.587524, -1753.567871, 11.432815, 180.922180},
    {0, 1729.587280, -1753.588500, 14.632813, 180.922180},
    {0, 1710.109741, -1740.329467, 11.432815, 180.922180},
    {0, 1707.230224, -1740.376220, 11.432815, 180.922180},
    {0, 1704.329956, -1740.422607, 11.432815, 180.922180},
    {0, 1710.109741, -1740.329467, 14.922813, 180.922180},
    {0, 1707.150390, -1740.377075, 14.922813, 180.922180},
    {0, 1704.710327, -1740.416137, 14.922813, 180.922180},
    {1, 1972.983886, -1923.633544, 11.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 11.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 11.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 11.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 11.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 11.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 11.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 11.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 11.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 11.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 14.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 14.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 14.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 14.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 14.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 14.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 14.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 14.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 14.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 14.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 14.286870, 358.727569},
    {1, 1972.983886, -1923.633544, 14.286870, 358.727569},
    {2, 2422.197753, -1963.760864, 11.329407, 270.000000},



































































































    {2, 2422.197753, -1965.961059, 11.329407, 270.000000},
    {2, 2422.538085, -1968.141479, 11.329407, 270.000000},
    {2, 2422.437988, -1970.161865, 11.329407, 270.000000},
    {2, 2422.488037, -1972.322143, 11.329407, 270.000000},
    {2, 2422.488037, -1974.422363, 11.329407, 270.000000},
    {2, 2422.488037, -1976.602905, 11.329407, 270.000000},
    {2, 2422.568115, -1978.533569, 11.329407, 270.000000},
    {2, 2422.678222, -1980.704101, 11.329407, 270.000000},
    {2, 2422.197753, -1963.760864, 13.829407, 270.000000},
    {2, 2422.197753, -1965.961059, 13.829407, 270.000000},
    {2, 2422.538085, -1968.141479, 13.829407, 270.000000},
    {2, 2422.437988, -1970.161865, 13.829407, 270.000000},
    {2, 2422.488037, -1972.322143, 13.829407, 270.000000},
    {2, 2422.488037, -1974.422363, 13.829407, 270.000000},
    {2, 2422.488037, -1976.602905, 13.829407, 270.000000},
    {2, 2422.568115, -1978.533569, 13.829407, 270.000000},
    {2, 2422.678222, -1980.704101, 13.829407, 270.000000},
    {3, 855.264770, -1038.802124, 23.446907, 215.000000},
    {3, 853.698852, -1040.191894, 23.446907, 215.000000},
    {3, 851.837646, -1041.666137, 23.446907, 215.000000},
    {3, 850.262207, -1042.989501, 23.446907, 215.000000},
    {3, 848.620910, -1044.236816, 23.446907, 215.000000},
    {3, 846.878112, -1045.530883, 23.446907, 215.000000},
    {3, 844.986694, -1046.648193, 23.446907, 215.000000},
    {3, 843.184570, -1048.032226, 23.446907, 215.000000},
    {3, 841.548889, -1049.287597, 23.446907, 215.000000},
    {3, 839.740478, -1050.627563, 23.446907, 215.000000},
    {4, 512.298522, -1522.487792, 12.252450, 90.000000},
    {4, 512.298522, -1520.456787, 12.252450, 90.000000},
    {4, 512.298522, -1518.425903, 12.252450, 90.000000},
    {4, 512.298522, -1516.165405, 12.252450, 90.000000},
    {4, 512.298522, -1514.245239, 12.252450, 90.000000},
    {4, 512.068359, -1511.944091, 12.252450, 90.000000},
    {4, 512.068359, -1509.814208, 12.252450, 90.000000},
    {4, 512.298522, -1507.425292, 12.252450, 90.000000},
    {4, 512.298522, -1505.304931, 12.252450, 90.000000},
    {4, 512.298522, -1503.384521, 12.252450, 90.000000},
    {4, 512.298522, -1501.624389, 12.252450, 90.000000},
    {4, 512.298522, -1499.298339, 12.252450, 90.000000},
    {4, 512.298522, -1522.487792, 13.752450, 90.000000},
    {4, 512.298522, -1520.456787, 13.752450, 90.000000},
    {4, 512.298522, -1518.425903, 13.752450, 90.000000},
    {4, 512.298522, -1516.165405, 13.752450, 90.000000},
    {4, 512.298522, -1514.245239, 13.752450, 90.000000},
    {4, 512.068359, -1511.944091, 13.752450, 90.000000},
    {4, 512.068359, -1509.814208, 13.752450, 90.000000},
    {4, 512.298522, -1507.425292, 13.752450, 90.000000},
    {4, 512.298522, -1505.304931, 13.752450, 90.000000},
    {4, 512.298522, -1503.384521, 13.752450, 90.000000},
    {4, 512.298522, -1501.624389, 13.752450, 90.000000},
    {4, 512.298522, -1499.298339, 13.752450, 90.000000},
    {5, 2012.939208, -1282.796264, 21.760301, 179.226959},
    {5, 2010.718627, -1282.766845, 21.760301, 179.226959},
    {5, 2008.219238, -1282.732910, 21.760301, 179.226959},
    {5, 2005.989379, -1282.702880, 21.760301, 179.226959},
    {5, 2003.889770, -1282.674316, 21.760301, 179.226959},
    {5, 2001.719848, -1282.645507, 21.760301, 179.226959},
    {5, 1999.509765, -1282.615966, 21.760301, 179.226959},
    {5, 1997.539794, -1282.589599, 21.760301, 179.226959},
    {5, 1995.449462, -1282.561889, 21.760301, 179.226959},
    {5, 1993.546508, -1282.786621, 21.760301, 179.226959},
    {5, 1991.387695, -1282.647827, 21.760301, 179.226959},
    {5, 1989.187133, -1282.638427, 21.760301, 179.226959},
    {5, 1987.196044, -1282.701660, 21.760301, 179.226959},
    {5, 1985.255126, -1282.785278, 21.760301, 179.226959},
    {5, 1983.203491, -1282.928100, 21.760301, 179.226959},
    {5, 1981.183105, -1282.901489, 21.760301, 179.226959},
    {5, 1979.322875, -1282.876708, 21.760301, 179.226959},
    {5, 1977.321655, -1282.920288, 21.760301, 179.226959},
    {5, 1975.070434, -1282.950805, 21.760301, 179.226959},
    {5, 1973.359741, -1282.997802, 21.760301, 179.226959},
    {6, 2520.653076, -1268.459106, 32.786579, 268.202911},
    {6, 2520.595947, -1270.278076, 32.786579, 268.202911},
    {6, 2520.631347, -1272.040527, 32.786579, 268.202911},
    {6, 2520.779785, -1273.676757, 32.786579, 268.202911},
    {6, 2520.882080, -1275.182128, 32.786579, 268.202911},
    {6, 2520.826904, -1276.951538, 32.786579, 268.202911},
    {6, 2520.767822, -1278.821655, 32.786579, 268.202911},
    {6, 2520.811035, -1280.303833, 32.786579, 268.202911},
    {6, 2520.782958, -1281.844604, 32.786579, 268.202911},
    {6, 2520.734863, -1283.715209, 32.786579, 268.202911},
    {6, 2521.593261, -1265.743408, 32.543724, 178.275573},
    {6, 2520.653076, -1268.459106, 34.286579, 268.202911},
    {6, 2520.595947, -1270.278076, 34.286579, 268.202911},
    {6, 2520.631347, -1272.040527, 34.286579, 268.202911},
    {6, 2520.779785, -1273.676757, 34.286579, 268.202911},
    {6, 2520.882080, -1275.182128, 34.286579, 268.202911},
    {6, 2520.826904, -1276.951538, 34.286579, 268.202911},
    {6, 2520.767822, -1278.821655, 34.286579, 268.202911},
    {6, 2520.811035, -1280.303833, 34.286579, 268.202911},
    {6, 2520.782958, -1281.844604, 34.286579, 268.202911},
    {6, 2520.734863, -1283.715209, 34.286579, 268.202911},
    {6, 2521.593261, -1265.743408, 34.043724, 178.275573},
    {7, 2420.582031, -1510.028320, 22.002197, 87.980613},
    {7, 2420.656494, -1507.899536, 22.002197, 87.980613},
    {7, 2420.729248, -1505.820434, 22.002197, 87.980613},
    {7, 2420.797607, -1503.861328, 22.002197, 87.980613},
    {7, 2420.706298, -1501.856079, 22.002197, 87.980613},
    {7, 2420.772460, -1499.967163, 22.002197, 87.980613},
    {7, 2420.558349, -1498.327880, 22.002197, 87.980613},
    {7, 2420.629638, -1496.288818, 22.002197, 87.980613},
    {7, 2420.637451, -1494.617797, 22.002197, 87.980613},
    {7, 2418.689453, -1511.844482, 21.619995, 0.000000},
    {7, 2416.989501, -1511.844482, 21.619995, 0.000000},
    {7, 2415.138427, -1511.844482, 21.619995, 0.000000},
    {7, 2413.137939, -1511.844482, 21.619995, 0.000000},
    {7, 2411.336914, -1511.844482, 21.619995, 0.000000},
    {7, 2409.695800, -1511.844482, 21.619995, 0.000000},
    {7, 2408.024169, -1511.844482, 21.619995, 0.000000},
    {7, 2406.803466, -1511.844482, 21.619995, 0.000000},
    {7, 2405.712890, -1511.844482, 21.619995, 0.000000},
    {8, 1769.756469, -1721.183105, 11.426870, 0.000000},
    {8, 1771.825805, -1721.219238, 11.426870, 0.000000},
    {8, 1774.065917, -1721.219238, 11.426870, 0.000000},
    {8, 1776.336303, -1721.219238, 11.426870, 0.000000},
    {8, 1778.396972, -1721.219238, 11.426870, 0.000000},
    {8, 1780.507202, -1721.219238, 11.426870, 0.000000},
    {8, 1782.597290, -1721.219238, 11.426870, 0.000000},
    {8, 1784.728027, -1721.219238, 11.426870, 0.000000},
    {8, 1786.797851, -1721.219238, 11.426870, 0.000000},
    {8, 1788.677001, -1721.219238, 11.426870, 0.000000},
    {8, 1790.987304, -1721.219238, 11.426870, 0.000000},
    {8, 1792.916625, -1721.219238, 11.426870, 0.000000},
    {8, 1794.967285, -1721.219238, 11.426870, 0.000000},
    {8, 1796.447021, -1721.219238, 11.426870, 0.000000},
    {8, 1798.347534, -1721.219238, 11.426870, 0.000000},
    {9, 2723.256591, -2020.687255, 11.477196, 0.000000},
    {9, 2723.196289, -2022.766357, 11.477196, 0.000000},
    {9, 2723.316894, -2024.821044, 11.477196, 0.000000},
    {9, 2723.316894, -2026.461547, 11.477196, 0.000000},
    {9, 2723.316894, -2028.431030, 11.477196, 0.000000},
    {9, 2723.316894, -2030.141479, 11.477196, 0.000000},
    {9, 2723.316894, -2031.961547, 11.477196, 0.000000},
    {9, 2723.316894, -2033.631713, 11.477196, 0.000000},
    {9, 2723.316894, -2035.612060, 11.477196, 0.000000},
    {9, 2723.316894, -2037.552978, 11.477196, 0.000000},
    {9, 2723.316894, -2038.973632, 11.477196, 0.000000}
};

new const Float:paintballTSpawns[][] =
{ // TDM Arena
	//   X         Y        Z          R
	{1303.8156, 1.8952, 1001.0244, 146.4729}, // Team 1
	{1260.6339, -66.3295, 1002.4949, 318.4712} // Team 2
};
new const Float:paintballDSpawns[][] =
{ // Deagle Arena
    //   X         Y        Z          R
    {1299.0728, 2103.4670, 11.0234, 10.4824},
	{1298.5331, 2196.3188, 11.0234, 2.9623},
	{1397.0685, 2101.0967, 11.0234, 260.1884},
	{1315.7385, 2206.4363, 16.8045, 205.3078},
	{1388.1871, 2206.5242, 16.7969, 267.3483},
	{1407.4728, 2140.1846, 17.6797, 195.9077},
	{1411.0127, 2107.6167, 12.0156, 172.0940},
	{1399.2078, 2206.6550, 12.0156, 213.8402},
	{1301.0807, 2212.7083, 12.0156, 92.1932}
};
new const Float:paintballSSpawns[][] =
{ // Sniper Arena
    //   X         Y        Z          R
    {-2233.8169, -1743.4373, 480.8561, 37.9961},
	//{-2386.9824, -1841.8787, 441.4585, 356.9490},
	{-2351.9800, -1714.6760, 479.6617, 27.9689},
	{-2344.3889, -1703.7188, 483.6255, 326.3146},
	{-2425.2998, -1623.8129, 524.8774, 212.5245}
};
new const Float:paintballFSpawns[][] =
{// FFA Arena
    //   X         Y        Z          R
	{1291.2968, -0.1334, 1001.0228, 180.0000},
	{1304.6259, -28.7442, 1001.0326, 90.0000},
	{1260.6687, -0.6802, 1001.0234, 180.0000},
	{1251.9862, -26.3548, 1001.0340, 270.0000},
	{1278.8584, -44.1545, 1001.0236, 0.0000},
	{1256.5944, -61.9047, 1002.4999, 0.0000},
	{1297.3204, -61.4144, 1002.4980, 0.0000}
};

new const Float:drivingTestCPs[][] =
{
    {794.1997, -546.9747, 16.1929},
	{734.9894, -528.1755, 16.1865},
	{698.3761, -597.8519, 16.1881},
	{729.7333, -884.8008, 43.2491},
	{792.3920, -1027.0663, 25.6378},
	{664.6743, -1179.0859, 16.2011},
	{489.7124, -1283.6859, 15.5499},
	{272.7009, -1412.0881, 13.6374},
	{156.4718, -1542.4114, 10.7966},
	{-16.4798, -1515.0441, 1.8203},
	{-133.4161, -1445.2574, 2.6953},
	{-140.5356, -1274.0776, 2.6953},
	{-113.1763, -1168.4493, 2.7028},
	{-96.8423, -1016.6091, 24.1147},
	{-77.6051, -901.7794, 16.7137},
	{35.7399, -654.5763, 3.1782},
	{241.6873, -593.1479, 35.0917},
	{406.8048, -586.5869, 37.3639},
	{660.9349, -664.8056, 16.3670},
	{712.8520, -603.0783, 16.1875},
	{722.9360, -538.7714, 16.1797},
	{784.4152, -531.2048, 16.1875},
	{825.1973, -607.1816, 16.3359}
};

new const Float:cellPositions[][] =
{
	{1205.69995117, -1328.09997559, 797.00000000, 1205.699951, -1326.500000, 797.000000},
	{1205.69995117, -1331.30004883, 797.00000000, 1205.699951, -1329.700073, 797.000000},
	{1205.69995117, -1331.30004883, 800.50000000, 1205.699951, -1329.700073, 800.500000},
	{1205.69995117, -1328.09997559, 800.50000000, 1205.699951, -1326.500000, 800.500000},
	{1215.30004883, -1328.09997559, 797.00000000, 1215.300048, -1326.500000, 797.000000},
	{1215.30004883, -1331.30004883, 797.00000000, 1215.300048, -1329.700073, 797.000000},
	{1215.30004883, -1331.30004883, 800.50000000, 1215.300048, -1329.700073, 800.500000},
	{1215.30004883, -1328.09997559, 800.50000000, 1215.300048, -1326.500000, 800.500000},
	{1215.30004883, -1334.50000000, 797.00000000, 1215.300048, -1332.900024, 797.000000},
	{1215.29980469, -1337.69921875, 797.00000000, 1215.299804, -1336.099243, 797.000000},
	{1215.30004883, -1340.90002441, 797.00000000, 1215.300048, -1339.300048, 797.000000},
	{1215.30004883, -1340.90002441, 800.50000000, 1215.300048, -1339.300048, 800.500000},
	{1215.30004883, -1337.69995117, 800.50000000, 1215.300048, -1336.099975, 800.500000},
	{1215.30004883, -1334.50000000, 800.50000000, 1215.300048, -1332.900024, 800.500000},
	{1205.69995117, -1334.50000000, 800.50000000, 1205.699951, -1332.900024, 800.500000},
	{1205.69995117, -1337.69995117, 800.50000000, 1205.699951, -1336.099975, 800.500000},
	{1205.69995117, -1340.90002441, 800.50000000, 1205.699951, -1339.300048, 800.500000},
	{1205.69995117, -1334.50000000, 797.00000000, 1205.699951, -1332.900024, 797.000000},
	{1205.69995117, -1337.69995117, 797.00000000, 1205.699951, -1336.099975, 797.000000},
	{1205.69995117, -1340.90002441, 797.00000000, 1205.699951, -1339.300048, 797.000000},
	{1215.30004883, -1344.09997559, 800.50000000, 1215.300048, -1342.500000, 800.500000},
	{1215.30004883, -1344.09997559, 797.00000000, 1215.300048, -1342.500000, 797.000000},
	{1205.69995117, -1344.09997559, 800.50000000, 1205.699951, -1342.500000, 800.500000},
	{1205.69995117, -1344.09997559, 797.00000000, 1205.699951, -1342.500000, 797.000000}
};

new const Float:cellSpawns[][] =
{
    {1203.1132, -1327.7273, 796.7505, 270.0000},
	{1203.1155, -1327.7273, 800.2859, 270.0000},
	{1203.3879, -1330.7003, 796.7505, 270.0000},
	{1203.6357, -1330.7050, 800.2859, 270.0000},
	{1203.2362, -1333.9489, 796.7505, 270.0000},
	{1203.4561, -1333.9528, 800.2859, 270.0000},
	{1203.6705, -1337.3608, 796.7505, 270.0000},
	{1203.8181, -1337.3634, 800.2859, 270.0000},
	{1203.5663, -1340.5317, 796.7505, 270.0000},
	{1203.6039, -1340.5325, 800.2859, 270.0000},
	{1203.6083, -1343.6737, 796.7505, 270.0000},
	{1204.0961, -1343.5482, 800.2859, 270.0000},
	{1217.6519, -1344.3740, 796.7456, 90.0000},
	{1217.5179, -1344.3721, 800.2859, 90.0000},
	{1217.6549, -1341.3425, 796.7456, 90.0000},
	{1217.5161, -1341.4125, 800.2859, 90.0000},
	{1217.5902, -1338.0251, 796.7456, 90.0000},
	{1217.5662, -1338.0247, 800.2859, 90.0000},
	{1217.5626, -1334.7852, 796.7456, 90.0000},
	{1217.5070, -1334.7842, 800.2859, 90.0000},
	{1217.6984, -1331.5767, 796.7456, 90.0000},
	{1217.4537, -1331.5715, 800.2859, 90.0000},
	{1217.5966, -1328.5653, 796.7456, 90.0000},
	{1217.4222, -1328.5616, 800.2859, 90.0000}
};

new const Float:arrestPoints[][] =
{
    {1581.5818, -1662.9443, 2110.1096}, // PD interior
	{1528.5728, -1677.8324, 5.8906}, // PD garage
	{1564.6931, -1662.1338, 28.3956}, // PD roof
	{310.3752,  -1515.3691, 24.9219}, // FBI garage
	{1382.0898, -1393.6364, -33.7034} // army garage
};

new const factionTypes[][] =
{
	{"Civilian"},
	{"Law enforcement"},
	{"Medical & fire"},
	{"News agency"},
	{"Government"},
	{"Hitman agency"},
	{"Federal police"},
	{"Armed Forces"}
};

new const deployableItems[][] =
{
	{"Spikestrip"},
	{"Traffic cone"},
	{"Roadblock"},
	{"Barrel"},
	{"Smoke flare"}
};

new const clothingTypes[][] =
{
	{"Glasses"},
	{"Bandanas & masks"},
	{"Hats & caps"},
	{"Misc clothing"}
};

enum clothingEnum
{
	clothingType[20],
	clothingName[32],
	clothingModel,
	clothingBone,
	clothingPrice
};

new const clothingArray[][clothingEnum] =
{
    {"Glasses",		        "Red tinted shades",        19006, 2, 500},
    {"Glasses",		        "Brown tinted shades",      19007, 2, 500},
    {"Glasses",		        "Green tinted shades",      19008, 2, 500},
    {"Glasses",		        "Blue tinted shades",       19009, 2, 500},
    {"Glasses",		        "Pink tinted shades",       19010, 2, 500},
    {"Glasses",		        "Spiralled shades",         19011, 2, 500},
    {"Glasses",		        "Black tinted shades",      19012, 2, 500},
    {"Glasses",		        "Gag glasses",       	    19013, 2, 500},
    {"Glasses",		        "Checkered shades",         19014, 2, 500},
    {"Glasses",		        "Reading glasses",    	    19015, 2, 500},
    {"Glasses",		        "X-Ray glasses",            19016, 2, 500},
    {"Glasses",		        "Plastic black shades",     19017, 2, 500},
    {"Glasses",		        "Plastic orange shades",    19018, 2, 500},
    {"Glasses",		        "Plastic red shades",       19019, 2, 500},
    {"Glasses",		        "Plastic blue shades",      19020, 2, 500},
    {"Glasses",		        "Plastic green shades",     19021, 2, 500},
    {"Glasses",		        "Clear sunglasses",         19022, 2, 500},
    {"Glasses",		        "Blue sunglasses",          19023, 2, 500},
    {"Glasses",		        "Purple sunglasses",        19024, 2, 500},
    {"Glasses",		        "Pink sunglasses",          19025, 2, 500},
    {"Glasses",		        "Red sunglasses",           19026, 2, 500},
    {"Glasses",		        "Brown sunglasses",         19027, 2, 500},
    {"Glasses",		        "Yellow sunglasses",        19028, 2, 500},
    {"Glasses",		        "Green sunglasses",         19029, 2, 500},
    {"Glasses",		        "Plain brown shades",       19030, 2, 500},
    {"Glasses",		        "Plain yellow shades",      19031, 2, 500},
    {"Glasses",		        "Plain red shades",         19032, 2, 500},
    {"Glasses",		        "Plain black shades",       19033, 2, 500},
    {"Glasses",		        "Checkered glasses",        19034, 2, 500},
    {"Glasses",		        "Wavy glasses",             19035, 2, 500},
    {"Bandanas & masks",	"Balaclava", 			    19801, 2, 375},
    {"Bandanas & masks",	"Dark blue bandana", 	   	18891, 2, 375},
    {"Bandanas & masks",	"Red bandana", 			   	18892, 2, 375},
    {"Bandanas & masks",	"Red & white bandana", 	   	18893, 2, 375},
    {"Bandanas & masks",	"Orange star bandana", 	   	18894, 2, 375},
    {"Bandanas & masks",	"Skull bandana", 		   	18895, 2, 375},
    {"Bandanas & masks",	"Black bandana", 		   	18896, 2, 375},
    {"Bandanas & masks",	"Blue bandana", 		   	18897, 2, 375},
    {"Bandanas & masks",	"Green bandana", 		   	18898, 2, 375},
    {"Bandanas & masks",	"Pink bandana", 		   	18899, 2, 375},
    {"Bandanas & masks",	"Hippie bandana", 		   	18900, 2, 375},
    {"Bandanas & masks",	"Tiger bandana", 		   	18901, 2, 375},
    {"Bandanas & masks",	"Yellow bandana",		   	18902, 2, 375},
    {"Bandanas & masks",	"Purple bandana", 		   	18903, 2, 375},
    {"Bandanas & masks",	"Cool blue bandana", 	   	18904, 2, 375},
    {"Bandanas & masks",	"Brown bandana", 		   	18905, 2, 375},
    {"Bandanas & masks",	"Skull bandana mask", 	   	18911, 2, 375},
    {"Bandanas & masks",	"Black bandana mask", 	   	18912, 2, 375},
    {"Bandanas & masks",	"Grove bandana mask", 	   	18913, 2, 375},
    {"Bandanas & masks",	"Camo bandana mask", 	   	18914, 2, 375},
    {"Bandanas & masks",	"Hippie bandana mask", 	   	18915, 2, 375},
    {"Bandanas & masks",	"Yellow bandana mask", 	   	18916, 2, 375},
    {"Bandanas & masks",	"Blue bandana mask", 	   	18917, 2, 375},
    {"Bandanas & masks",	"Green bandana mask", 	   	18918, 2, 375},
    {"Bandanas & masks",	"White bandana mask", 	   	18919, 2, 375},
    {"Bandanas & masks",	"Flower bandana mask", 	   	18920, 2, 375},
    {"Bandanas & masks",	"White hockey mask", 	    19036, 2, 375},
	{"Bandanas & masks",	"Red hockey mask", 		    19037, 2, 375},
	{"Bandanas & masks",	"Green hockey mask", 	    19038, 2, 375},
	{"Bandanas & masks",	"Sexy mask", 			    19557, 2, 375},
	{"Bandanas & masks",	"Devil mask", 			   	11704, 2, 375},
	{"Bandanas & masks",	"Gas mask", 			    19472, 2, 375},
	{"Bandanas & masks",	"Zorro mask", 			   	18974, 2, 375},
	{"Bandanas & masks",	"Gimp mask", 			    19163, 2, 375},
	{"Hats & caps",         "Santa hat",                19064, 2, 240},
    {"Hats & caps",			"Dude hat", 			    19160, 2, 240},
	{"Hats & caps",			"Top hat", 				    19352, 2, 240},
    {"Hats & caps",			"Witch hat",                19528, 2, 240},
    {"Hats & caps",			"Yellow fire hat", 		    19330, 2, 240},
	{"Hats & caps",			"Black fire hat", 	  	    19331, 2, 240},
	{"Hats & caps",			"Black beret", 			   	18921, 2, 240},
    {"Hats & caps",			"Brown beret", 			   	18922, 2, 240},
    {"Hats & caps",			"Blue beret", 			   	18923, 2, 240},
    {"Hats & caps",			"Camo beret", 			   	18924, 2, 240},
    {"Hats & caps",			"Red beret", 			   	18925, 2, 240},
    {"Hats & caps",			"Camo cap", 			   	18926, 2, 240},
    {"Hats & caps",			"Wave cap", 			   	18927, 2, 240},
    {"Hats & caps",			"Hippy cap", 			   	18928, 2, 240},
    {"Hats & caps",			"Green cap", 			   	18929, 2, 240},
    {"Hats & caps",			"Red cap", 				   	18930, 2, 240},
    {"Hats & caps",			"Blue cap", 			  	18931, 2, 240},
    {"Hats & caps",			"Orange cap", 			   	18932, 2, 240},
    {"Hats & caps",			"White cap", 			   	18933, 2, 240},
    {"Hats & caps",			"Plain pink cap", 		   	18934, 2, 240},
    {"Hats & caps",			"Plain yellow cap", 	   	18935, 2, 240},
    {"Hats & caps",			"Blue back cap", 		   	18939, 2, 240},
    {"Hats & caps",			"Wave back cap", 		   	18940, 2, 240},
    {"Hats & caps",			"Black back cap", 		   	18941, 2, 240},
    {"Hats & caps",			"White back cap", 		   	18942, 2, 240},
    {"Hats & caps",			"Green back cap", 		   	18943, 2, 240},
    {"Hats & caps",			"Red boater hat", 		   	18944, 2, 240},
    {"Hats & caps",			"Green boater hat", 	   	18945, 2, 240},
    {"Hats & caps",			"Striped boater hat", 	   	18946, 2, 240},
    {"Hats & caps",			"Black bowler hat", 	   	18947, 2, 240},
    {"Hats & caps",			"White bowler hat",		    19488, 2, 240},
    {"Hats & caps",			"Blue bowler hat", 		   	18948, 2, 240},
    {"Hats & caps",			"Green bowler hat", 	   	18949, 2, 240},
    {"Hats & caps",			"Red bowler hat", 		   	18950, 2, 240},
    {"Hats & caps",			"Yellow bowler hat", 	   	18951, 2, 240},
    {"Hats & caps",			"Black knit cap", 		   	18953, 2, 240},
    {"Hats & caps",			"White knit cap", 		   	18954, 2, 240},
    {"Hats & caps",			"Hippie hat", 			   	18960, 2, 240},
    {"Hats & caps",			"Born 2 truck hat", 	   	18961, 2, 240},
    {"Hats & caps",			"Brown cowboy hat", 	    19098, 2, 240},
	{"Hats & caps",			"Black cowboy hat",		    19096, 2, 240},
    {"Hats & caps",			"Skully cap", 			   	18964, 2, 240},
    {"Hats & caps",			"Black bucket hat", 	   	18967, 2, 240},
    {"Hats & caps",			"Plaid bucket hat", 	   	18968, 2, 240},
    {"Hats & caps",			"Zig-Zag bucket hat", 	   	18969, 2, 240},
    {"Hats & caps",			"Camo bucket hat", 		    19106, 2, 240},
    {"Hats & caps",			"Hippy hat", 			    19113, 2, 240},
    {"Hats & caps",			"Don't shoot me hat", 	    19114, 2, 240},
    {"Hats & caps",			"Skull hat", 			    19115, 2, 240},
    {"Hats & caps",			"Tiger hat", 			   	18970, 2, 240},
    {"Hats & caps",			"Hard hat", 			   	18638, 2, 240},
	{"Hats & caps",			"Straw hat", 			    19553, 2, 240},
	{"Hats & caps",			"Pizza hat", 			    19558, 2, 240},
	{"Hats & caps",			"Beanie hat", 			    19554, 2, 240},
    {"Hats & caps",			"Checkered fedora", 	   	18971, 2, 240},
    {"Hats & caps",			"Orange fedora", 		   	18972, 2, 240},
    {"Hats & caps",			"Yellow fedora", 		   	18973, 2, 240},
    {"Hats & caps",			"Camoflauge helmet", 	    19101, 2, 240},
    {"Hats & caps",			"Black helmet", 		    19116, 2, 240},
    {"Hats & caps",			"Red helmet", 			    19117, 2, 240},
    {"Hats & caps",			"Green helmet",	 		    19118, 2, 240},
    {"Hats & caps",			"Blue helmet", 			    19119, 2, 240},
    {"Hats & caps",			"Yellow helmet", 		    19120, 2, 240},
    {"Hats & caps",			"Boxing helmet", 		   	18952, 2, 240},
    {"Hats & caps",			"Motorcycle helmet",   	   	18645, 2, 240},
    {"Misc clothing",	    "Gold watch",	 			19039, 6, 500},
	{"Misc clothing",	    "Silver watch", 			19040, 6, 500},
	{"Misc clothing",	    "Bronze watch", 			19041, 6, 500},
	{"Misc clothing",	    "Yellow watch", 			19042, 6, 500},
	{"Misc clothing",	    "White watch", 			 	19043, 6, 500},
	{"Misc clothing",	    "Purple watch", 			19044, 6, 500},
	{"Misc clothing",	    "Pink watch", 				19045, 6, 500},
	{"Misc clothing",	    "Green watch", 			 	19046, 6, 500},
	{"Misc clothing",	    "Blue watch", 				19047, 6, 500},
	{"Misc clothing",	    "Camo watch", 				19053, 6, 500},
	{"Misc clothing",	    "White headphones", 		19421, 2, 500},
    {"Misc clothing",	    "Black headphones", 		19422, 2, 500},
    {"Misc clothing",	    "Orange headphones", 		19423, 2, 500},
    {"Misc clothing",	    "Blue headphones", 		 	19424, 2, 500},
	{"Misc clothing",	    "Red clown hair", 			19274, 2, 500},
    {"Misc clothing",	    "Grey clown hair", 		 	19518, 2, 500},
    {"Misc clothing",	    "Black hair", 				19077, 2, 500},
    {"Misc clothing",	    "Grey hair", 				19517, 2, 500},
	{"Misc clothing",	    "Bass guitar", 			 	19317, 1, 500},
	{"Misc clothing",	    "White guitar", 		 	19318, 1, 500},
	{"Misc clothing",	    "Black guitar", 			19319, 1, 500},
	{"Misc clothing",	    "Pilot hat", 				19520, 2, 500},
	{"Misc clothing",       "Bag of money",             1550,  1, 500},
	{"Misc clothing",	    "Shop basket", 			 	19592, 6, 500},
	{"Misc clothing",	    "Oil can", 				 	19621, 6, 500},
	{"Misc clothing",	    "Broom", 				 	19622, 1, 500},
	{"Misc clothing",	    "Camera", 					19623, 6, 500},
	{"Misc clothing",	    "Briefcase", 				19624, 6, 500},
	{"Misc clothing",	    "Cigarette", 				19625, 2, 500},
	{"Misc clothing",	    "Spade", 					19626, 1, 500},
	{"Misc clothing",	    "Left boxing glove", 		19555, 5, 500},
	{"Misc clothing",	    "Right boxing glove", 		19556, 6, 500},
	{"Misc clothing",	    "Scarf", 					19469, 2, 500},
	{"Misc clothing",	    "Eye patch", 				19085, 2, 500},
	{"Misc clothing",	    "Hiker backpack", 			19559, 1, 500},
	{"Misc clothing",	    "Construction vest", 		19904, 1, 500},
	{"Misc clothing",	    "Police radio", 			19942, 1, 500},
	{"Misc clothing",	    "Bodybag", 				 	19944, 1, 500},
	{"Misc clothing",	    "Sports bag", 				11745, 1, 500},
	{"Misc clothing",	    "Holster", 				 	19773, 8, 500},
    {"Misc clothing",	    "Fedora", 					18639, 2, 500},
    {"Misc clothing",	    "Afro", 					18640, 2, 500},
    {"Misc clothing",	    "Flashlight",          		18641, 6, 500},
    {"Misc clothing",	    "Hammer",              		18635, 6, 500},
    {"Misc clothing",	    "Wrench",              		18633, 2, 500},
    {"Misc clothing",       "Backpack",                  3026, 2, 500}
};

enum copEnum
{
	cModel,
	cBone,
	cName[24]
};

new const copClothing[][copEnum] =
{
	{18636, 2, "Police cap"},
	{19521, 2, "Police hat"},
	{19099, 2, "Black rim hat"},
	{19100, 2, "Brown rim hat"},
	{19139, 2, "Red shades"},
	{19140, 2, "Blue shades"},
	{19138, 2, "Black shades"},
	{19774, 1, "Badge"},
	{19942, 1, "Radio"},
	{19162, 2, "Blue cap"},
	{19161, 2, "Black cap"},
	{19200, 2, "Bike helmet"},
	{18637, 1, "Riot shield"},
	{19141, 2, "SWAT helmet"},
	{19142, 1, "SWAT armor"},
	{19515, 1, "Grey armor"},
	{19514, 2, "Grey helmet"},
	{19777, 1, "FBI insignia"},
	{19776, 1, "FBI ID card"},
	{18642, 1, "Taser"},
	{18641, 1, "Flashlight"},
	{11749, 1, "Handcuffs"},
	{11750, 1, "Closed cuff"},
	{19783, 1, "Police badge"},
	{19784, 1, "Police badge 2"},
	{19785, 1, "Senior Ld. badge"},
	{19778, 1, "Detective badge"},
	{19779, 1, "Detective badge 2"},
	{19780, 1, "Detective badge 3"},
	{19781, 1, "Sergeant badge"},
	{19782, 1, "Sergeant badge 2"}
};

enum achievementEnum
{
	aName[24],
	aDescription[64]
};

new const achievementInfo[][achievementEnum] =
{
	{"First wheels", 	"Mua xe lan dau tien."},
	{"Working class",   "Kiem $20.000 tren phieu luong."},
	{"Legal driver",    "Nhan bang lai xe cua ban tai DMV."},
	{"Meeting people",  "Bat tay lan dau tien."},
	{"Regular",         "Choi tong cong 20 gio."},
	{"Addicted",        "Choi tong cong 40 gio."},
	{"Five stars",      "Dat duoc cap do 5."},
	{"Top tier",  		"Dat duoc cap do 10."},
	{"Dress up",        "Dinh kem toi da 5 mat hang quan ao cung mot luc."},
	{"Dirty deeds",     "Hoan thanh giao dich mua ban ma tuy voi ai do."},
	{"Dedication",      "Complete an entire matrun onfoot."},
	{"Obamacare",       "Sinh ra tai benh vien khi duoc bao hiem."},
	{"High roller",     "Kiem tong so tien $500.000."},
	{"I'm rich!",    	"Chi tong so tien $500.000."},
	{"Benefits",        "Day du - mot dac quyen lan dau tien."},
	{"Experienced",     "Toi da hoa hoan toan ky nang cua ban cho tat ca cong viec."},
	{"High times",  	"Lan dau tien bi nem da."},
	{"Party hard",      "Mua ruou o quan bar va uong."},
	{"Flash mob",       "Khieu vu voi 5 nguoi cung mot luc."},
	{"Cookies boi!",      "Kiem tong cong 5 cookie."},
	{"Diamond!",			"Khai thac kim cuong."}
};

enum dealerEnum
{
	carCategory[16],
	carModel,
	carPrice
};
/*
===============================================  [START]Backpack Player System by ToiletDuck ===============================================

*/

/* ------------------ Defines ---------------- */
#define 		MAX_BACKPACKS               2000
#define 		MAX_STOREGUN                5  /* Array starts on 0 */
#define         DIALOG_EDITMAINBACKPACK     6000
#define         DIALOG_EDITITEMS            6001
#define         DIALOG_BACKPACKMENU         6005 // For Player Dialog /backpack
#define         DIALOG_ACTIONBACKPACKMENU   6006
#define         DIALOG_PUTAKEITEMS   		6007
	/*     Limit Item Types       */
#define 		LIMIT_CASH 					0
#define 		LIMIT_POT 					1
#define 		LIMIT_CRACK 				2
#define 		LIMIT_MATS 					3
#define 		LIMIT_GUN 					4
#define 		LIMIT_AMMO					5
    /*         Item Types        */
#define 		ITEM_CASH 					1
#define 		ITEM_POT  					2
#define 		ITEM_CRACK					3
#define 		ITEM_MATS 					4
#define 		ITEM_GUNS 					5
	/*         Edit Types        */
#define         TYPE_CASH                   1
#define         TYPE_POT                    2
#define         TYPE_CRACK                  3
#define         TYPE_MATS                   4
#define         TYPE_GUN1                   5
#define         TYPE_GUN2                   6
#define         TYPE_GUN3                   7
#define         TYPE_GUN4                   8
#define         TYPE_GUN5                   9

enum backpackinfo
{
	bBackpackOwner,
	bBackpackSize,
	bHouseStored,
	bVehicleStored,
	bCash,
	bPot,
	bCrack,
	bMats,
	bGun[MAX_STOREGUN]
};



/* ----------------- Variables --------------- */
//new itemtype[][] = {"Nothing", "Cash", "Pot", "Crack", "Material","Weapon"};
new storagetype[][] = { "None", "Small Backpack", "Medium Backpack", "Large Backpack"};
// For Backpack System should move to defines later

//Cash, Pot, Crack, Mats, Weapons
new sbackpacklimit[] = { 3000000, 70, 70, 100000, 3};
new mbackpacklimit[] = { 5000000, 100,  100, 200000, 5};
new lbackpacklimit[] = { 8000000, 150, 150, 300000, 8};

new BackpackInfo[MAX_BACKPACKS][backpackinfo];
new backpackid[MAX_PLAYERS];
/*
===============================================  [END]Backpack Player System by ToiletDuck ===============================================
*/

new const vehicleArray[][dealerEnum] =
{
	{"Bikes",       	481, 5000},
	{"Bikes", 			509, 5000},
	{"Bikes",       	510, 10000},
	{"Bikes",       	462, 15000},
	{"Bikes",       	471, 17500},
	{"Bikes",       	448, 20000},
	{"Bikes",       	468, 30000},
	{"Bikes",       	586, 37500},
	{"Bikes",       	463, 50000},
	{"Bikes",       	521, 75000},
	{"Bikes",       	461, 80000},
	{"Saloons",     	549, 23000},
	{"Saloons",     	542, 24500},
	{"Saloons",     	546, 27500},
	{"Saloons",     	517, 29000},
	{"Saloons",     	419, 30000},
	{"Saloons",     	466, 32500},
	{"Saloons",     	467, 33000},
	{"Saloons",     	475, 34500},
	{"Saloons",     	492, 37500},
	{"Saloons",     	445, 42500},
	{"Saloons",     	529, 45000},
	{"Saloons",     	540, 47500},
	{"Saloons",     	550, 52500},
	{"Saloons",     	421, 55000},
	{"Saloons",     	551, 65000},
	{"Saloons",     	547, 70000},
	{"Saloons",     	426, 87500},
	{"Saloons",         409, 90000},
	{"Saloons",     	580, 125000},
	{"Off-Road",    	500, 57500},
	{"Off-Road",    	400, 65000},
	{"Off-Road",    	489, 67500},
	{"Off-Road",    	495, 75000},
	{"Off-Road",    	579, 80000},
	{"Station wagons",  418, 27500},
	{"Station wagons",  404, 35000},
	{"Station wagons",  479, 37500},
	{"Station wagons",  458, 40000},
	{"Station wagons",  561, 55000},
	{"Sports cars",     496, 40000},
	{"Sports cars",     402, 80000},
	{"Sports cars",     477, 50000},
	{"Sports cars",     565, 55000},
	{"Sports cars",     589, 60000},
	{"Sports cars",     558, 75000},
	{"Sports cars",     559, 80000},
	{"Sports cars",     587, 85000},
	{"Sports cars",     562, 100000},
	{"Sports cars",     603, 125000},
	{"Sports cars",     494, 175000},
	{"Sports cars",     560, 200000},
	{"Sports cars",     429, 325000},
	{"Sports cars",     541, 425000},
	{"Sports cars",     415, 475000},
	{"Sports cars",     451, 575000},
	{"Sports cars",     411, 600000},
	{"Lowriders",       412, 35000},
	{"Lowriders",       576, 40000},
	{"Lowriders",       534, 47500},
	{"Lowriders",       566, 50000},
	{"Lowriders",       535, 52500},
	{"Lowriders",       536, 57500},
	{"Lowriders",       567, 60000},
	{"Lowriders",       575, 75000},
	{"Industrial",      478, 20000},
	{"Industrial",      543, 27500},
	{"Industrial",      600, 30000},
	{"Industrial",      422, 35000},
	{"Industrial",      413, 40000},
	{"Industrial",      440, 45000},
	{"Industrial",      525, 57500},
	{"Industrial",      554, 62500},
	{"Industrial",      482, 65000},
	{"Industrial",      552, 70000},
	{"Industrial",      414, 75000},
	{"Industrial",      498, 80000},
	{"Industrial",      578, 105000},
	{"Public service",  420, 30000},
	{"Public service",  438, 32500},
	{"Public service",  437, 75000},
	{"Public service",  431, 75000},
	{"Boats",			473, 20000},
	{"Boats",			472, 100000},
	{"Boats",			446, 150000},
	{"Boats",			493, 175000},
	{"Boats",			452, 200000},
	{"Boats",			484, 225000},
	{"Boats",			595, 225000},
	{"Boats",			453, 250000},
	{"Boats",			454, 300000},
	{"Aircraft",		487, 250000},
	{"Aircraft",		469, 300000},
	{"Aircraft",		593, 325000},
	{"Aircraft",		512, 350000},
	{"Aircraft",		513, 375000},
	{"Aircraft",		417, 400000},
	{"Aircraft",		460, 425000},
	{"Aircraft",		548, 500000},
	{"Aircraft",		519, 600000},
	{"Aircraft",		511, 750000},
	{"Aircraft",		553, 1000000}
};

enum bizInts
{
	intName[32],
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriorArray[][bizInts] =
{
	{"24/7 (version 1)", 		17, -25.9733, -187.8952, 1003.5468, 0.0000},
    {"24/7 (version 2)", 		10, 6.0159, -31.0345, 1003.5493, 0.0000},
    {"24/7 (version 3)", 		18, -30.9967, -91.4492, 1003.5468, 0.0000},
    {"24/7 (version 4)", 		16, -25.9416, -140.6656, 1003.5468, 0.0000},
    {"24/7 (version 5)", 		4, 	-27.3069, -30.8341, 1003.5573, 0.0000},
    {"24/7 (version 6)", 		6, 	-27.4368, -57.4361, 1003.5468, 0.0000},
    {"Ammunation (version 1)", 	7, 	315.7398, -143.1958, 999.6016, 0.0000},
    {"Ammunation (version 2)", 	1, 	285.3190, -41.1576, 1001.5156, 0.0000},
    {"Ammunation (version 3)", 	4, 	285.7825, -85.9860, 1001.5228, 0.0000},
    {"Ammunation (version 4)", 	6, 	296.7723, -111.6399, 1001.5156, 0.0000},
    {"Ammunation (version 5)", 	6, 	316.2890, -169.7619, 999.6010, 0.0000},
    {"Binco", 					15, 207.6329, -110.7673, 1005.1328, 0.0000},
    {"Pro-Laps", 				3, 	206.9459, -139.5319, 1003.5078, 0.0000},
    {"Didier Sachs", 			14,	204.2969, -168.3488, 1000.5233, 0.0000},
    {"Victim", 					5, 	226.7738, -8.2257, 1002.2108, 90.0000},
    {"Zip", 					18, 161.3670, -96.4953, 1001.8046, 0.0000},
    {"SubUrban", 				1, 	203.7149, -50.2200, 1001.8046, 0.0000},
    {"Betting (version 1)", 	3,  834.1848, 7.3453, 1004.1870, 90.0000},
	{"Betting (version 2)",     1,  -2170.3428, 640.7771, 1052.3817, 0.0000},
	{"Donut Shop", 				17, 377.0733, -193.0574, 1000.6400, 0.0000},
    {"Burger Shot", 			10, 363.1346, -74.8441, 1001.5078, 315.0000},
    {"Pizza Stack", 			5, 	372.3019, -133.1221, 1001.4921, 0.0000},
    {"Cluckin' Bell", 			9, 	364.8536, -11.1400, 1001.8516, 0.0000},
	{"Marco's Bistro",          1,  -795.0334, 489.8574, 1376.1953, 0.0000},
	{"Cafeteria",               4,  459.7685, -88.6637, 999.5547, 90.0000},
    {"Barber Shop", 			3, 	418.5545, -83.9392, 1001.8046, 0.0000},
    {"Tattoo Shop", 			3, 	-204.4362, -43.8119, 1002.2733, 0.0000},
    {"Ganton Gym", 				5, 	772.2800, -4.7154, 1000.7288, 0.0000},
    {"Las Venturas Gym", 		7, 	773.8508, -78.3952, 1000.6621, 0.0000},
    {"San Fierro Gym", 			6, 	774.1206, -49.9538, 1000.5858, 0.0000},
    {"Sex Shop", 				3, 	-100.3628, -24.4456, 1000.7188, 0.0000},
    {"RC Shop", 				6, 	-2240.3610, 128.2816, 1035.4210, 270.0000},
    {"Four Dragons Casino", 	10, 2018.2132, 1017.7788, 996.8750, 90.0000},
    {"Caligulas Casino", 		1, 	2234.0485, 1714.1568, 1012.3596, 180.0000},
    {"Red Sands Casino", 		12, 1133.1075, -15.3114, 1000.6796, 0.0000},
    {"Alhambra", 				17, 493.3728, -23.9953, 1000.6796, 0.0000},
    {"Pig Pen", 				2, 	1204.7922, -13.2587, 1000.9218, 0.0000},
    {"Big Spread Ranch", 		3, 	1212.1400, -26.3005, 1000.9531, 180.0000},
    {"Ten Green Bottles", 		11, 501.9559, -67.9867, 998.7578, 180.0000},
    {"Lil' Probe Inn",          18, -228.7570, 1401.2421, 27.7656, 270.0000},
    {"Warehouse",               18, 1307.0178, 4.1193, 1001.0289, 90.0000}
};

enum intEnum
{
    intName[32],
    intID,
    Float:intX,
    Float:intY,
    Float:intZ,
    Float:intA
}

new const interiorArray[][intEnum] =
{
    {"24/7 (version 1)", 17, -25.7220, -187.8215, 1003.5468, 5.0760},
    {"24/7 (version 2)", 10, 6.0854, -28.8966, 1003.5493, 5.0363},
    {"24/7 (version 3)", 18, -30.9874, -89.6806, 1003.5468, 359.8399},
    {"24/7 (version 4)", 16, -26.1856, -140.9163, 1003.5468, 2.9086},
    {"24/7 (version 5)", 4, -27.8439, -26.6737, 1003.5573, 184.3117},
    {"24/7 (version 6)", 6, -26.8339, -55.5844, 1003.5468, 3.9528},
    {"8-Track Stadium", 7, -1403.0114, -250.4526, 1043.5340, 355.8576},
    {"Abandoned AC Tower", 10, 419.8934, 2537.1154, 10.0000, 67.6537},
    {"Ammunation (version 1)", 7, 315.2438, -140.8858, 999.6016, 7.4225},
    {"Ammunation (version 2)", 1, 285.8359, -39.0166, 1001.5156, 0.7529},
    {"Ammunation (version 3)", 4, 291.7626, -80.1305, 1001.5156, 290.2195},
    {"Ammunation (version 4)", 6, 297.1440, -109.8702, 1001.5156, 20.2254},
    {"Ammunation (version 5)", 6, 316.5025, -167.6271, 999.5938, 10.3030},
    {"Andromada", 9, 315.4544, 976.5972, 1960.8509, 359.6368},
    {"Angel Pine Trailer", 2, 1.1851, -3.2386, 999.4284, 87.5718},
    {"Area 69", 0, 215.1515, 1874.0577, 13.1406, 177.5538},
    {"Atrium", 18, 1727.2851, -1642.9449, 20.2254, 172.4192},
    {"B Dup's Apartment", 3, 1527.0467, -12.0235, 1002.0971, 350.0013},
    {"B Dup's Crack Palace", 2, 1523.5096, -47.8209, 1002.2697, 262.7037},
    {"Bar", 11, 501.9577, -70.5646, 998.7578, 171.5706},
    {"Barbara's Love nest", 5, 322.5014, 303.6906, 999.1483, 8.1745},
    {"Barber Shop (version 1)", 3, 418.4666, -80.4595, 1001.8046, 343.2358},
    {"Barber Shop (version 2)", 12, 411.9707, -51.9216, 1001.8983, 173.3448},
    {"Barber Shop (version 3)", 2, 414.2987, -18.8043, 1001.8046, 41.4263},
    {"Big Smoke's Crack Palace", 2, 2536.5322, -1294.8425, 1044.1250, 254.9548},
    {"Bike School (version 1)", 3, 1494.8587, 1306.4798, 1093.2951, 196.0650},
    {"Bike School (version 2)", 0, 1168.5118, 1360.1145, 10.9293, 196.5933},
    {"Binco", 15, 207.5218, -109.7446, 1005.1328, 358.6199},
    {"Blastin' Fools Records", 3, 1037.8276, 0.3970, 1001.2844, 353.9335},
    {"Blood Bowl Stadium", 15, -1417.8927, 932.4481, 1041.5312, 0.7013},
    {"Blueberry Liquor Store", 0, 255.2082, -59.6753, 1.5701, 1.4644},
    {"Brothel 1", 3, 974.0177, -9.5937, 1001.1483, 22.6044},
    {"Brothel 2", 3, 961.9307, -51.9071, 1001.1171, 95.5381},
    {"Budget Inn Motel Room", 12, 446.3247, 509.9660, 1001.4193, 330.5671},
    {"Burger Shot", 10, 366.0248, -73.3478, 1001.5078, 292.0083},
    {"Burglary House 1", 15, 295.1390, 1473.3719, 1080.2578, 352.9526},
    {"Burglary House 2", 3, 234.6087, 1187.8194, 1080.2578, 349.4844},
    {"Burglary House 3", 5, 227.7559, 1114.3842, 1080.9920, 266.2622},
    {"Burglary House 4", 4, 261.1163, 1287.2197, 1080.2578, 178.9149},
    {"Burglary House 5", 4, 221.6766, 1142.4962, 1082.6092, 184.9618},
    {"Burglary House 6", 10, 24.3768, 1341.1827, 1084.3750, 8.3304},
    {"Burglary House 7", 4, -262.1759, 1456.6158, 1084.3670, 82.4589},
    {"Burglary House 8", 5, 22.8610, 1404.9165, 1084.4295, 349.6158},
    {"Burglary House 9", 5, 140.3679, 1367.8835, 1083.8620, 349.2372},
    {"Burglary House 10", 6, 234.2825, 1065.2290, 1084.2099, 4.3864},
    {"Burglary House 11", 6, -68.5145, 1353.8485, 1080.2109, 3.5741},
    {"Burglary House 12", 2, 225.5706, 1240.0643, 1082.1406, 96.2852},
    {"Burglary House 13", 15, -285.2510, 1471.1970, 1084.3750, 85.6547},
    {"Burglary House 14", 8, -42.5265, 1408.2298, 1084.4295, 172.0679},
    {"Burglary House 15", 9, 84.9244, 1324.2983, 1083.8592, 159.5581},
    {"Burglary House 16", 9, 260.7420, 1238.2259, 1084.2578, 84.3084},
    {"Burglary House 17", 1, 224.2879, 1289.1905, 1082.1406, 359.8680},
    {"Burglary House 18", 5, 239.2819, 1114.1989, 1080.9920, 270.2654},
    {"Burglary House 19", 2, 446.6260, 1397.7380, 1084.3045, 343.9645},
    {"Burning Desire Building", 5, 2350.1596, -1181.0656, 1027.9764, 99.1864},
    {"Caligula's Casino", 1, 2233.9362, 1711.8038, 1011.6312, 184.3890},
    {"Caligula's Roof", 1, 2268.5156, 1647.7680, 1084.2342, 99.7331},
    {"Casino (Redsands West)", 12, 1133.3498, -7.8460, 1000.6796, 165.8482},
    {"Cemetary", 0, 818.7714, -1102.8687, 25.7940, 91.1437},
    {"Club", 17, 493.1441, -24.2607, 1000.6796, 356.9862},
    {"Cluckin' Bell", 9, 366.0002, -9.4336, 1001.8516, 160.5278},
    {"Cobra Gym", 6, 773.8886, -47.7696, 1000.5858, 10.7159},
    {"Colonel Furhberger's", 8, 2807.3603, -1171.7048, 1025.5703, 193.7117},
    {"Crack Den", 5, 227.3921, 1114.6572, 1080.9985, 267.4590},
    {"Denise's Bedroom", 1, 245.2306, 304.7632, 999.1483, 273.4364},
    {"Didier Sachs", 14, 204.1658, -165.7678, 1000.5233, 181.7583},
    {"Dillimore Gas Station", 0, 663.0587, -573.6273, 16.3358, 264.9829},
    {"Diner 1", 5, 454.9851, -107.2546, 999.4376, 309.0195},
    {"Dirtbike Stadium", 4, -1421.5616, -663.8261, 1059.5567, 170.9340},
    {"Driving School", 3, -2031.1196, -115.8285, 1035.1717, 190.1876},
    {"Fanny Batter's Whore House", 6, 748.4622, 1438.2376, 1102.9531, 0.6068},
    {"Four Dragons", 10, 2016.1156, 1017.1541, 996.8750, 88.0055},
    {"Francis International Airport", 14, -1813.2130, -58.0120, 1058.9641, 335.3197},
    {"Ganton Gym", 5, 770.8032, -0.7031, 1000.7266, 22.8598},
    {"Helena's Barn", 3, 290.6228, 309.0621, 999.1483, 89.9162},
    {"Inside Track Betting", 3, 830.6016, 5.9404, 1004.1796, 125.8149},
    {"Jay's Diner", 4, 449.0172, -88.9894, 999.5546, 89.6606},
    {"Jefferson Motel", 15, 2217.2810, -1150.5349, 1025.7967, 273.7326},
    {"Jet Interior", 1, 1.5491, 23.3183, 1199.5937, 359.9053},
    {"K.A.C.C. Military Fuels Depot", 0, 2548.4807, 2823.7429, 10.8203, 270.6003},
    {"Katie's Lovenest", 2, 269.6405, 305.9512, 999.1483, 215.6625},
    {"Kickstart Stadium", 14, -1420.4277, 1616.9221, 1052.5312, 159.1255},
    {"Las Venturas Gym", 7, 773.7318, -74.6957, 1000.6541, 5.2304},
    {"Las Venturas Police Department", 3, 288.4721, 170.0646, 1007.1793, 22.0477},
    {"Las Venturas Tattoo parlor", 3, -201.2236, -43.2463, 1002.2733, 45.8613},
    {"Liberty City", 1, -741.8494, 493.0036, 1371.9764, 71.7780},
    {"Lil' Probe Inn", 18, -227.5702, 1401.5544, 27.7656, 269.2976},
    {"Loco Low Co", 2, 611.3535, -77.5574, 997.9995, 320.9263},
    {"Los Santos Airport", 14, -1864.9433, 55.7323, 1055.5274, 85.8541},
    {"Los Santos Police Department", 6, 246.6694, 65.8039, 1003.6406, 7.9562},
    {"Los Santos Tattoo Parlor", 16, -202.8419, -24.0324, 1002.2733, 252.8153},
    {"Lost San Fierro Tattoo parlor", 17, -202.9380, -6.7006, 1002.2733, 204.2693},
    {"Madd Dogg's Mansion", 5, 1267.8405, -776.9586, 1091.9062, 231.3417},
    {"Michelle's Love Nest", 4, 306.1965, 307.8190, 1003.3046, 203.1354},
    {"Millie's Bedroom", 6, 344.9984, 307.1824, 999.1557, 193.6430},
    {"OG Loc's House", 3, 512.9290, -11.6927, 1001.5653, 198.7669},
    {"Old Venturas Strip Casino", 2, 2236.6997, -1078.9477, 1049.0234, 2.5706},
    {"Otto's Autos", 0, -1658.1656, 1215.0002, 7.2500, 103.9074},
    {"Oval Stadium", 1, -1402.6612, 106.3897, 1032.2734, 105.1354},
    {"Palamino Bank", 0, 2306.3825, -15.2363, 26.7495, 274.4898},
    {"Palamino Diner", 0, 2331.8984, 6.7814, 26.5032, 100.2357},
    {"Pizza Stack", 5, 372.5563, -131.3607, 1001.4921, 354.2283},
    {"Planning Department", 3, 386.5259, 173.6381, 1008.3828, 63.7397},
    {"Pro-Laps", 3, 206.4627, -137.7075, 1003.0938, 10.9347},
    {"RC Battlefield", 10, -1129.8907, 1057.5423, 1346.4139, 274.5267},
    {"Rosenberg's Office", 2, 2182.2016, 1628.5848, 1043.8723, 224.8601},
    {"Rusty Brown's Donuts", 17, 378.0260, -190.5155, 1000.6328, 141.0245},
    {"Ryder's House", 2, 2447.8703, -1704.4509, 1013.5078, 314.5252},
    {"Safe House (version 1)", 5, 2233.6918, -1112.8105, 1050.8828, 8.6483},
    {"Safe House (version 2)", 9, 2319.1271, -1023.9561, 1050.2109, 167.3959},
    {"Safe House (version 3)", 10, 2261.0976, -1137.8833, 1050.6328, 266.8800},
    {"San Fierro Garage", 1, -2041.2332, 178.3968, 28.8465, 156.2153},
    {"San Fierro Police Department", 10, 246.0688, 108.9701, 1003.2188, 0.2921},
    {"Secret Valley Diner", 6, 442.1293, -52.4780, 999.7166, 177.9394},
    {"Sex Shop", 3, -100.2674, -22.9375, 1000.7188, 17.2849},
    {"Sherman Dam", 17, -944.2401, 1886.1534, 5.0050, 179.8547},
    {"Sindacco Abatoir", 1, 963.0584, 2159.7563, 1011.0302, 175.3130},
    {"SubUrban", 1, 204.1174, -46.8045, 1001.8046, 357.5776},
    {"Sweet's House", 1, 2527.0175, -1679.2076, 1015.4984, 260.9707},
    {"The Big Spread Ranch", 3, 1212.1489, -28.5387, 1000.9531, 170.5691},
    {"The Camel's Toe Safehouse", 1, 2216.1281, -1076.3050, 1050.4842, 86.4280},
    {"The Johnson House", 3, 2496.0549, -1695.1749, 1014.7421, 179.2174},
    {"The Pig Pen (strip club 2)", 2, 1204.6689, -13.5429, 1000.9218, 350.0202},
    {"The Pleasure Domes", 3, -2638.8232, 1407.3393, 906.4608, 94.6792},
    {"The Welcome Pump", 1, 681.6215, -451.8933, -25.6172, 166.1660},
    {"Torreno's Ranch", 0, -688.1494, 942.0825, 13.6328, 177.6573},
    {"Transfenders", 1, 621.4528, -23.7289, 1000.9218, 15.6787},
    {"Unused Safe House", 12, 2323.7062, -1147.6507, 1050.7099, 206.5352},
    {"Verdant Bluffs Safehouse", 8, 2365.1088, -1133.0793, 1050.8750, 177.3946},
    {"Vice Stadium", 16, -1401.0670, 1265.3706, 1039.8670, 178.6483},
    {"Victim", 5, 225.0305, -9.1836, 1002.2180, 85.5322},
    {"Wang Cars", 0, -1961.6280, 295.2377, 35.4687, 264.4891},
    {"Wardrobe/Changing room", 14, 256.9046, -41.6537, 1002.0233, 85.8774},
    {"Warehouse 1", 18, 1290.4106, 1.9512, 1001.0200, 179.9418},
    {"Warehouse 2", 1, 1412.1472, -2.2836, 1000.9240, 114.6610},
    {"Warehouse 3", 0, 2135.2004, -2276.2814, 20.6718, 318.5899},
    {"Wheel Arch Angels", 3, 612.2191, -123.9028, 997.9921, 266.5704},
    {"Willowfield Safehouse", 11, 2283.3117, 1139.3070, 1050.8984, 19.7031},
    {"World of Coq", 1, 445.6003, -6.9822, 1000.7343, 172.2104},
    {"Wu-Zi Mu's", 1, -2158.6730, 642.0900, 1052.3750, 86.5401},
    {"Zero's RC Shop", 6, -2240.1027, 136.9730, 1035.4139, 269.0953},
    {"Zip", 18, 161.4048, -94.2416, 1001.8046, 0.7936},
    {"Zombotech", 0, -1916.1268, 714.8615, 46.5625, 152.2839}
};

enum radioEnum
{
	rGenre[32],
	rSubgenre[32]
};

new const radioGenreList[][radioEnum] =
{
    {"Alternative", "Alternative"},
    {"Alternative", "Adult Alternative"},
    {"Alternative", "Britpop"},
    {"Alternative", "Classic Alternative"},
    {"Alternative", "College"},
    {"Alternative", "Dancepunk"},
    {"Alternative", "Dream Pop"},
    {"Alternative", "Emo"},
    {"Alternative", "Goth"},
    {"Alternative", "Grunge"},
    {"Alternative", "Hardcore"},
    {"Alternative", "Indie Pop"},
    {"Alternative", "Indie Rock"},
    {"Alternative", "Industrial"},
    {"Alternative", "LoFi"},
    {"Alternative", "Modern Rock"},
    {"Alternative", "New Wave"},
    {"Alternative", "Noise Pop"},
    {"Alternative", "Post Punk"},
    {"Alternative", "Power Pop"},
    {"Alternative", "Punk"},
    {"Alternative", "Ska"},
    {"Alternative", "Xtreme"},
    {"Blues", "Blues"},
    {"Blues", "Acoustic Blues"},
    {"Blues", "Cajun and Zydeco"},
    {"Blues", "Chicago Blues"},
    {"Blues", "Contemporary Blues"},
    {"Blues", "Country Blues"},
    {"Blues", "Delta Blues"},
    {"Blues", "Electric Blues"},
    {"Classical", "Classical"},
    {"Classical", "Baroque"},
    {"Classical", "Chamber"},
    {"Classical", "Choral"},
    {"Classical", "Classical Period"},
    {"Classical", "Early Classical"},
    {"Classical", "Impressionist"},
    {"Classical", "Modern"},
    {"Classical", "Opera"},
    {"Classical", "Piano"},
    {"Classical", "Romantic"},
    {"Classical", "Symphony"},
    {"Country", "Country"},
    {"Country", "Alt Country"},
    {"Country", "Americana"},
    {"Country", "Bluegrass"},
    {"Country", "Classic Country"},
    {"Country", "Contemporary Country"},
    {"Country", "Honky Tonk"},
    {"Country", "Hot Country Hits"},
    {"Country", "Western"},
    {"Decades", "Decades"},
    {"Decades", "00s"},
    {"Decades", "30s"},
    {"Decades", "40s"},
    {"Decades", "50s"},
    {"Decades", "60s"},
    {"Decades", "70s"},
    {"Decades", "80s"},
    {"Decades", "90s"},
    {"Easy Listening", "Easy Listening"},
    {"Easy Listening", "Exotica"},
    {"Easy Listening", "Light Rock"},
    {"Easy Listening", "Lounge"},
    {"Easy Listening", "Orchestral Pop"},
    {"Easy Listening", "Polka"},
    {"Easy Listening", "Space Age Pop"},
    {"Electronic", "Electronic"},
    {"Electronic", "Acid House"},
    {"Electronic", "Ambient"},
    {"Electronic", "Big Beat"},
    {"Electronic", "Breakbeat"},
    {"Electronic", "Dance"},
    {"Electronic", "Demo"},
    {"Electronic", "Disco"},
    {"Electronic", "Downtempo"},
    {"Electronic", "Drum and Bass"},
    {"Electronic", "Dubstep"},
    {"Electronic", "Electro"},
    {"Electronic", "Garage"},
    {"Electronic", "Hard House"},
    {"Electronic", "House"},
    {"Electronic", "IDM"},
    {"Electronic", "Jungle"},
    {"Electronic", "Progressive"},
    {"Electronic", "Techno"},
    {"Electronic", "Trance"},
    {"Electronic", "Tribal"},
    {"Electronic", "Trip Hop"},
    {"Folk", "Folk"},
    {"Folk", "Alternative Folk"},
    {"Folk", "Contemporary Folk"},
    {"Folk", "Folk Rock"},
    {"Folk", "New Acoustic"},
    {"Folk", "Old Time"},
    {"Folk", "Traditional Folk"},
    {"Folk", "World Folk"},
    {"Inspirational", "Inspirational"},
    {"Inspirational", "Christian"},
    {"Inspirational", "Christian Metal"},
    {"Inspirational", "Christian Rap"},
    {"Inspirational", "Christian Rock"},
    {"Inspirational", "Classic Christian"},
    {"Inspirational", "Contemporary Gospel"},
    {"Inspirational", "Gospel"},
    {"Inspirational", "Praise and Worship"},
    {"Inspirational", "Sermon and Services"},
    {"Inspirational", "Southern Gospel"},
    {"Inspirational", "Traditional Gospel"},
    {"International", "International"},
    {"International", "African"},
    {"International", "Afrikaans"},
    {"International", "Arabian"},
    {"International", "Asian"},
    {"International", "Bollywood"},
    {"International", "Brazilian"},
    {"International", "Caribbean"},
    {"International", "Celtic"},
    {"International", "Chinese"},
    {"International", "Creole"},
    {"International", "European"},
    {"International", "Filipino"},
    {"International", "French"},
    {"International", "German"},
    {"International", "Greek"},
    {"International", "Hawaiian & Pacific"},
    {"International", "Hebrew"},
    {"International", "Hindi"},
    {"International", "Indian"},
    {"International", "Islamic"},
    {"International", "Japanese"},
    {"International", "Korean"},
    {"International", "Mediterranean"},
    {"International", "Middle Eastern"},
    {"International", "North American"},
    {"International", "Russian"},
    {"International", "Soca"},
    {"International", "South American"},
    {"International", "Tamil"},
    {"International", "Turkish"},
    {"International", "Worldbeat"},
    {"International", "Zouk"},
    {"Jazz", "Jazz"},
    {"Jazz", "Acid Jazz"},
    {"Jazz", "Avant Garde"},
    {"Jazz", "Big Band"},
    {"Jazz", "Bop"},
    {"Jazz", "Classic Jazz"},
    {"Jazz", "Cool Jazz"},
    {"Jazz", "Fusion"},
    {"Jazz", "Hard Bop"},
    {"Jazz", "Latin Jazz"},
    {"Jazz", "Smooth Jazz"},
    {"Jazz", "Swing"},
    {"Jazz", "Vocal Jazz"},
    {"Jazz", "World Fusion"},
    {"Latin", "Latin"},
    {"Latin", "Bachata"},
    {"Latin", "Banda"},
    {"Latin", "Bossa Nova"},
    {"Latin", "Cumbia"},
    {"Latin", "Flamenco"},
    {"Latin", "Latin Dance"},
    {"Latin", "Latin Pop"},
    {"Latin", "Latin Rap"},
    {"Latin", "Latin Rock"},
    {"Latin", "Mariachi"},
    {"Latin", "Merengue"},
    {"Latin", "Ranchera"},
    {"Latin", "Reggaeton"},
    {"Latin", "Regional Mexican"},
    {"Latin", "Salsa"},
    {"Latin", "Samba"},
    {"Latin", "Tango"},
    {"Latin", "Tejano"},
    {"Latin", "Tropicalia"},
    {"Metal", "Metal"},
    {"Metal", "Black Metal"},
    {"Metal", "Classic Metal"},
    {"Metal", "Death Metal"},
    {"Metal", "Extreme Metal"},
    {"Metal", "Grindcore"},
    {"Metal", "Hair Metal"},
    {"Metal", "Heavy Metal"},
    {"Metal", "Metalcore"},
    {"Metal", "Power Metal"},
    {"Metal", "Progressive Metal"},
    {"Metal", "Thrash Metal"},
    {"Misc", "Misc"},
    {"New Age", "New Age"},
    {"New Age", "Environmental"},
    {"New Age", "Ethnic Fusion"},
    {"New Age", "Healing"},
    {"New Age", "Meditation"},
    {"New Age", "Spiritual"},
    {"Pop", "Pop"},
    {"Pop", "Adult Contemporary"},
    {"Pop", "Barbershop"},
    {"Pop", "Bubblegum Pop"},
    {"Pop", "Dance Pop"},
    {"Pop", "Idols"},
    {"Pop", "JPOP"},
    {"Pop", "KPOP"},
    {"Pop", "Oldies"},
    {"Pop", "Soft Rock"},
    {"Pop", "Teen Pop"},
    {"Pop", "Top 40"},
    {"Pop", "World Pop"},
    {"Public Radio", "Public Radio"},
    {"Public Radio", "College"},
    {"Public Radio", "News"},
    {"Public Radio", "Sports"},
    {"Public Radio", "Talk"},
    {"Public Radio", "Weather"},
    {"R&B and Urban", "R&B and Urban"},
    {"R&B and Urban", "Classic R&B"},
    {"R&B and Urban", "Contemporary R&B"},
    {"R&B and Urban", "Funk"},
    {"R&B and Urban", "Motown"},
    {"R&B and Urban", "Neo Soul"},
    {"R&B and Urban", "Quiet Storm"},
    {"R&B and Urban", "Soul"},
    {"R&B and Urban", "Urban Contemporary"},
    {"Rap", "Rap"},
    {"Rap", "Alternative Rap"},
    {"Rap", "Dirty South"},
    {"Rap", "East Coast Rap"},
    {"Rap", "Freestyle"},
    {"Rap", "Gangsta Rap"},
    {"Rap", "Hip Hop"},
    {"Rap", "Mixtapes"},
    {"Rap", "Old School"},
    {"Rap", "Turntablism"},
    {"Rap", "Underground Hip Hop"},
    {"Rap", "West Coast Rap"},
    {"Reggae", "Reggae"},
    {"Reggae", "Contemporary Reggae"},
    {"Reggae", "Dancehall"},
    {"Reggae", "Dub"},
    {"Reggae", "Pop Reggae"},
    {"Reggae", "Ragga"},
    {"Reggae", "Reggae Roots"},
    {"Reggae", "Rock Steady"},
    {"Rock", "Rock"},
    {"Rock", "Adult Alternative"},
    {"Rock", "Celtic Rock"},
    {"Rock", "Classic Rock"},
    {"Rock", "Garage Rock"},
    {"Rock", "Glam"},
    {"Rock", "Hard Rock"},
    {"Rock", "Jam Bands"},
    {"Rock", "JROCK"},
    {"Rock", "Progressive Rock"},
    {"Rock", "Psychedelic"},
    {"Rock", "Rock & Roll"},
    {"Rock", "Rockabilly"},
    {"Rock", "Singer & Songwriter"},
    {"Rock", "Surf"},
    {"Seasonal and Holiday", "Seasonal and Holiday"},
    {"Seasonal and Holiday", "Birthday"},
    {"Seasonal and Holiday", "Christmas"},
    {"Seasonal and Holiday", "Halloween"},
    {"Seasonal and Holiday", "Kwanzaa"},
    {"Seasonal and Holiday", "Valentine"},
    {"Seasonal and Holiday", "Winter"},
    {"Soundtracks", "Soundtracks"},
    {"Soundtracks", "Anime"},
    {"Soundtracks", "Kids"},
    {"Soundtracks", "Original Score"},
    {"Soundtracks", "Showtunes"},
    {"Soundtracks", "Video Game Music"},
    {"Talk", "Talk"},
    {"Talk", "BlogTalk"},
    {"Talk", "Comedy"},
    {"Talk", "Community"},
    {"Talk", "Educational"},
    {"Talk", "Government"},
    {"Talk", "News"},
    {"Talk", "Old Time Radio"},
    {"Talk", "Other Talk"},
    {"Talk", "Political"},
    {"Talk", "Scanner"},
    {"Talk", "Spoken Word"},
    {"Talk", "Sports"},
    {"Talk", "Technology"},
    {"Themes", "Themes"},
    {"Themes", "Adult"},
    {"Themes", "Best Of"},
    {"Themes", "Chill"},
    {"Themes", "Eclectic"},
    {"Themes", "Experimental"},
    {"Themes", "Female"},
    {"Themes", "Heartache"},
    {"Themes", "Instrumental"},
    {"Themes", "LGBT"},
    {"Themes", "Love and Romance"},
    {"Themes", "Party Mix"},
    {"Themes", "Patriotic"},
    {"Themes", "Rainy Day Mix"},
    {"Themes", "Reality"},
    {"Themes", "Sexy"},
    {"Themes", "Shuffle"},
    {"Themes", "Travel Mix"},
    {"Themes", "Trippy"},
    {"Themes", "Work Mix"}
};

enum zoneEnum
{
	zoneName[32],
	Float:zoneMinX,
	Float:zoneMinY,
	Float:zoneMinZ,
	Float:zoneMaxX,
	Float:zoneMaxY,
	Float:zoneMaxZ
};

new const zoneArray[][zoneEnum] =
{
	{"The Big Ear", 	              -410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00},
	{"Aldea Malvada",                -1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00},
	{"Angel Pine",                   -2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00},
	{"Arco del Oeste",               -901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00},
	{"Avispa Country Club",          -2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00},
	{"Avispa Country Club",          -2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00},
	{"Avispa Country Club",          -2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00},
	{"Avispa Country Club",          -2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10},
	{"Avispa Country Club",          -2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10},
	{"Avispa Country Club",          -2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70},
	{"Back o Beyond",                -1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00},
	{"Battery Point",                -2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00},
	{"Bayside",                      -2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00},
	{"Bayside Marina",               -2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00},
	{"Beacon Hill",                  -399.60, -1075.50, -1.40, -319.00, -977.50, 198.50},
	{"Blackfield",                   964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90},
	{"Blackfield",                   964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90},
	{"Blackfield Chapel",            1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90},
	{"Blackfield Chapel",            1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90},
	{"Blackfield Intersection",      1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90},
	{"Blackfield Intersection",      1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90},
	{"Blackfield Intersection",      1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90},
	{"Blackfield Intersection",      1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90},
	{"Blueberry",                    104.50, -220.10, 2.30, 349.60, 152.20, 200.00},
	{"Blueberry",                    19.60, -404.10, 3.80, 349.60, -220.10, 200.00},
	{"Blueberry Acres",              -319.60, -220.10, 0.00, 104.50, 293.30, 200.00},
	{"Caligula's Palace",            2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90},
	{"Caligula's Palace",            2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90},
	{"Calton Heights",               -2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00},
	{"Chinatown",                    -2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00},
	{"City Hall",                    -2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00},
	{"Come-A-Lot",                   2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90},
	{"Commerce",                     1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90},
	{"Commerce",                     1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90},
	{"Commerce",                     1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90},
	{"Commerce",                     1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90},
	{"Commerce",                     1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90},
	{"Commerce",                     1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90},
	{"Conference Center",            1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90},
	{"Conference Center",            1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90},
	{"Cranberry Station",            -2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00},
	{"Creek",                        2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90},
	{"Dillimore",                    580.70, -674.80, -9.50, 861.00, -404.70, 200.00},
	{"Doherty",                      -2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00},
	{"Doherty",                      -2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00},
	{"Downtown",                     -1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00},
	{"Downtown",                     -1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00},
	{"Downtown",                     -1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00},
	{"Downtown",                     -1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00},
	{"Downtown",                     -2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00},
	{"Downtown",                     -1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00},
	{"Downtown Los Santos",          1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90},
	{"Downtown Los Santos",          1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90},
	{"Downtown Los Santos",          1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90},
	{"Downtown Los Santos",          1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90},
	{"Downtown Los Santos",          1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90},
	{"East Beach",                   2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90},
	{"East Beach",                   2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90},
	{"East Beach",                   2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90},
	{"East Beach",                   2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90},
	{"East Los Santos",              2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90},
	{"East Los Santos",              2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90},
	{"East Los Santos",              2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90},
	{"East Los Santos",              2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90},
	{"East Los Santos",              2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90},
	{"East Los Santos",              2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90},
	{"East Los Santos",              2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90},
	{"Easter Basin",                 -1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00},
	{"Easter Basin",                 -1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00},
	{"Easter Bay Airport",           -1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00},
	{"Easter Bay Airport",           -1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00},
	{"Easter Bay Airport",           -1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00},
	{"Easter Bay Airport",           -1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1213.90, -50.00, -4.50, -947.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40},
	{"Easter Bay Chemicals",         -1132.80, -768.00, 0.00, -956.40, -578.10, 200.00},
	{"Easter Bay Chemicals",         -1132.80, -787.30, 0.00, -956.40, -768.00, 200.00},
	{"El Castillo del Diablo",       -464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00},
	{"El Castillo del Diablo",       -208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00},
	{"El Castillo del Diablo",       -208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00},
	{"El Corona",                    1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90},
	{"El Corona",                    1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90},
	{"El Quebrados",                 -1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00},
	{"Esplanade East",               -1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00},
	{"Esplanade East",               -1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00},
	{"Esplanade East",               -1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30},
	{"Esplanade North",              -2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00},
	{"Esplanade North",              -1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00},
	{"Esplanade North",              -1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00},
	{"Fallen Tree",                  -792.20, -698.50, -5.30, -452.40, -380.00, 200.00},
	{"Fallow Bridge",                434.30, 366.50, 0.00, 603.00, 555.60, 200.00},
	{"Fern Ridge",                   508.10, -139.20, 0.00, 1306.60, 119.50, 200.00},
	{"Financial",                    -1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00},
	{"Fisher's Lagoon",              1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00},
	{"Flint Intersection",           -187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90},
	{"Flint Range",                  -594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00},
	{"Fort Carson",                  -376.20, 826.30, -3.00, 123.70, 1220.40, 200.00},
	{"Foster Valley",                -2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00},
	{"Foster Valley",                -2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00},
	{"Frederick Bridge",             2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00},
	{"Gant Bridge",                  -2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00},
	{"Gant Bridge",                  -2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00},
	{"Ganton",                       2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90},
	{"Ganton",                       2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90},
	{"Garcia",                       -2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00},
	{"Garcia",                       -2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00},
	{"Garver Bridge",                -1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90},
	{"Garver Bridge",                -1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90},
	{"Garver Bridge",                -1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30},
	{"Glen Park",                    1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90},
	{"Glen Park",                    1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90},
	{"Glen Park",                    1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90},
	{"Green Palms",                  176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00},
	{"Greenglass College",           964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90},
	{"Greenglass College",           964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90},
	{"Hampton Barns",                603.00, 264.30, 0.00, 761.90, 366.50, 200.00},
	{"Hankypanky Point",             2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00},
	{"Harry Gold Parkway",           1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90},
	{"Hashbury",                     -2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00},
	{"Hilltop Farm",                 967.30, -450.30, -3.00, 1176.70, -217.90, 200.00},
	{"Hunter Quarry",                337.20, 710.80, -115.20, 860.50, 1031.70, 203.70},
	{"Idlewood",                     1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90},
	{"Idlewood",                     1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90},
	{"Idlewood",                     1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90},
	{"Idlewood",                     1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90},
	{"Idlewood",                     2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90},
	{"Idlewood",                     1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90},
	{"Jefferson",                    1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90},
	{"Jefferson",                    2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90},
	{"Jefferson",                    2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90},
	{"Jefferson",                    2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90},
	{"Jefferson",                    2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90},
	{"Jefferson",                    2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90},
	{"Julius Thruway East",          2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90},
	{"Julius Thruway East",          2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90},
	{"Julius Thruway East",          2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90},
	{"Julius Thruway East",          2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90},
	{"Julius Thruway North",         2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90},
	{"Julius Thruway North",         2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90},
	{"Julius Thruway North",         2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90},
	{"Julius Thruway North",         1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90},
	{"Julius Thruway North",         1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90},
	{"Julius Thruway North",         1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90},
	{"Julius Thruway North",         1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90},
	{"Julius Thruway North",         1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90},
	{"Julius Thruway South",         1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90},
	{"Julius Thruway South",         2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90},
	{"Julius Thruway West",          1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90},
	{"Julius Thruway West",          1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90},
	{"Juniper Hill",                 -2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00},
	{"Juniper Hollow",               -2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00},
	{"K.A.C.C. Military Fuels",      2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90},
	{"Kincaid Bridge",               -1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90},
	{"Kincaid Bridge",               -1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90},
	{"Kincaid Bridge",               -1087.90, 855.30, -89.00, -961.90, 986.20, 110.90},
	{"King's",                       -2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00},
	{"King's",                       -2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00},
	{"King's",                       -2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00},
	{"LVA Freight Depot",            1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90},
	{"LVA Freight Depot",            1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90},
	{"LVA Freight Depot",            1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90},
	{"LVA Freight Depot",            1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90},
	{"LVA Freight Depot",            1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90},
	{"Las Barrancas",                -926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00},
	{"Las Brujas",                   -365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00},
	{"Las Colinas",                  1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90},
	{"Las Colinas",                  2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90},
	{"Las Colinas",                  2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90},
	{"Las Colinas",                  2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90},
	{"Las Colinas",                  2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90},
	{"Las Colinas",                  2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90},
	{"Las Colinas",                  2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90},
	{"Las Payasadas",                -354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00},
	{"Las Venturas Airport",         1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90},
	{"Las Venturas Airport",         1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90},
	{"Las Venturas Airport",         1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50},
	{"Last Dime Motel",              1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90},
	{"Leafy Hollow",                 -1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00},
	{"Liberty City",                 -1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00},
	{"Lil' Probe Inn",               -90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00},
	{"Linden Side",                  2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90},
	{"Linden Station",               2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90},
	{"Linden Station",               2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40},
	{"Little Mexico",                1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90},
	{"Little Mexico",                1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90},
	{"Los Flores",                   2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90},
	{"Los Flores",                   2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90},
	{"Los Santos International",     1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90},
	{"Los Santos International",     1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90},
	{"Los Santos International",     1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90},
	{"Los Santos International",     1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90},
	{"Los Santos International",     1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90},
	{"Los Santos International",     2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90},
	{"Marina",                       647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90},
	{"Marina",                       647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90},
	{"Marina",                       807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90},
	{"Market",                       787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90},
	{"Market",                       952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90},
	{"Market",                       1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90},
	{"Market",                       926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90},
	{"Market Station",               787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80},
	{"Martin Bridge",                -222.10, 293.30, 0.00, -122.10, 476.40, 200.00},
	{"Missionary Hill",              -2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00},
	{"Montgomery",                   1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00},
	{"Montgomery",                   1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00},
	{"Montgomery Intersection",      1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00},
	{"Montgomery Intersection",      1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00},
	{"Mulholland",                   1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90},
	{"Mulholland",                   1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90},
	{"Mulholland",                   1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90},
	{"Mulholland",                   1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90},
	{"Mulholland",                   1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90},
	{"Mulholland",                   1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90},
	{"Mulholland",                   768.60, -954.60, -89.00, 952.60, -860.60, 110.90},
	{"Mulholland",                   687.80, -860.60, -89.00, 911.80, -768.00, 110.90},
	{"Mulholland",                   737.50, -768.00, -89.00, 1142.20, -674.80, 110.90},
	{"Mulholland",                   1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90},
	{"Mulholland",                   952.60, -937.10, -89.00, 1096.40, -860.60, 110.90},
	{"Mulholland",                   911.80, -860.60, -89.00, 1096.40, -768.00, 110.90},
	{"Mulholland",                   861.00, -674.80, -89.00, 1156.50, -600.80, 110.90},
	{"Mulholland Intersection",      1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90},
	{"North Rock",                   2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00},
	{"Ocean Docks",                  2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90},
	{"Ocean Docks",                  2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90},
	{"Ocean Docks",                  2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90},
	{"Ocean Docks",                  2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90},
	{"Ocean Docks",                  2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90},
	{"Ocean Docks",                  2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90},
	{"Ocean Docks",                  2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90},
	{"Ocean Flats",                  -2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00},
	{"Ocean Flats",                  -2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00},
	{"Ocean Flats",                  -2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00},
	{"Octane Springs",               338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00},
	{"Old Venturas Strip",           2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90},
	{"Palisades",                    -2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00},
	{"Palomino Creek",               2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00},
	{"Paradiso",                     -2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00},
	{"Pershing Square",              1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90},
	{"Pilgrim",                      2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90},
	{"Pilgrim",                      2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90},
	{"Pilson Intersection",          1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90},
	{"Pirates in Men's Pants",       1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90},
	{"Playa del Seville",            2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90},
	{"Prickle Pine",                 1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90},
	{"Prickle Pine",                 1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90},
	{"Prickle Pine",                 1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90},
	{"Prickle Pine",                 1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90},
	{"Queens",                       -2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00},
	{"Queens",                       -2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00},
	{"Queens",                       -2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00},
	{"Randolph Industrial Estate",   1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90},
	{"Redsands East",                1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90},
	{"Redsands East",                1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90},
	{"Redsands East",                1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90},
	{"Redsands West",                1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90},
	{"Redsands West",                1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90},
	{"Redsands West",                1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90},
	{"Redsands West",                1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90},
	{"Regular Tom",                  -405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00},
	{"Richman",                      647.50, -1118.20, -89.00, 787.40, -954.60, 110.90},
	{"Richman",                      647.50, -954.60, -89.00, 768.60, -860.60, 110.90},
	{"Richman",                      225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90},
	{"Richman",                      225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90},
	{"Richman",                      72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90},
	{"Richman",                      72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90},
	{"Richman",                      321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90},
	{"Richman",                      321.30, -1044.00, -89.00, 647.50, -860.60, 110.90},
	{"Richman",                      321.30, -860.60, -89.00, 687.80, -768.00, 110.90},
	{"Richman",                      321.30, -768.00, -89.00, 700.70, -674.80, 110.90},
	{"Robada Intersection",          -1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90},
	{"Roca Escalante",               2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90},
	{"Roca Escalante",               2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90},
	{"Rockshore East",               2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90},
	{"Rockshore West",               1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90},
	{"Rockshore West",               2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90},
	{"Rodeo",                        72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90},
	{"Rodeo",                        72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90},
	{"Rodeo",                        225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90},
	{"Rodeo",                        225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90},
	{"Rodeo",                        334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90},
	{"Rodeo",                        312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90},
	{"Rodeo",                        422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90},
	{"Rodeo",                        558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90},
	{"Rodeo",                        466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90},
	{"Rodeo",                        422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90},
	{"Rodeo",                        466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90},
	{"Rodeo",                        334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90},
	{"Royal Casino",                 2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90},
	{"San Andreas Sound",            2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00},
	{"Santa Flora",                  -2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00},
	{"Santa Maria Beach",            342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90},
	{"Santa Maria Beach",            72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90},
	{"Shady Cabin",                  -1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00},
	{"Shady Creeks",                 -1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00},
	{"Shady Creeks",                 -2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00},
	{"Sobell Rail Yards",            2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90},
	{"Spinybed",                     2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90},
	{"Starfish Casino",              2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90},
	{"Starfish Casino",              2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90},
	{"Starfish Casino",              2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90},
	{"Temple",                       1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90},
	{"Temple",                       1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90},
	{"Temple",                       1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90},
	{"Temple",                       952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90},
	{"Temple",                       1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90},
	{"Temple",                       1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90},
	{"The Camel's Toe",              2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90},
	{"The Clown's Pocket",           2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90},
	{"The Emerald Isle",             2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90},
	{"The Farm",                     -1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90},
	{"The Four Dragons Casino",      1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90},
	{"The High Roller",              1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90},
	{"The Mako Span",                1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00},
	{"The Panopticon",               -947.90, -304.30, -1.10, -319.60, 327.00, 200.00},
	{"The Pink Swan",                1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90},
	{"The Sherman Dam",              -968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00},
	{"The Strip",                    2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90},
	{"The Strip",                    2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90},
	{"The Strip",                    2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90},
	{"The Strip",                    2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90},
	{"The Visage",                   1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90},
	{"The Visage",                   1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90},
	{"Unity Station",                1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50},
	{"Valle Ocultado",               -936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00},
	{"Verdant Bluffs",               930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90},
	{"Verdant Bluffs",               1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90},
	{"Verdant Bluffs",               1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90},
	{"Verdant Meadows",              37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00},
	{"Verona Beach",                 647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90},
	{"Verona Beach",                 930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90},
	{"Verona Beach",                 851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90},
	{"Verona Beach",                 1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90},
	{"Verona Beach",                 1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90},
	{"Vinewood",                     787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90},
	{"Vinewood",                     787.40, -1130.80, -89.00, 952.60, -954.60, 110.90},
	{"Vinewood",                     647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90},
	{"Vinewood",                     647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90},
	{"Whitewood Estates",            883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90},
	{"Whitewood Estates",            1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90},
	{"Willowfield",                  1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90},
	{"Willowfield",                  2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90},
	{"Willowfield",                  2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90},
	{"Willowfield",                  2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90},
	{"Willowfield",                  2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90},
	{"Willowfield",                  2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90},
	{"Willowfield",                  2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90},
	{"Yellow Bell Station",          1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00},
	{"Los Santos",                   44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00},
	{"Las Venturas",                 869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00},
	{"Bone County",                  -480.50, 596.30, -242.90, 869.40, 2993.80, 900.00},
	{"Tierra Robada",                -2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00},
	{"Tierra Robada",                -1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00},
	{"San Fierro",                   -2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00},
	{"Red County",                   -1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00},
	{"Flint County",                 -1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00},
	{"Whetstone",                    -2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}
};

// ---------------------------------------

native WP_Hash(buffer[], len, const str[]);
//native IsValidVehicle(vehicleid);

// ---------------------------------------

main(){}

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
	print("Get shit on by Anti-Brian");
}

GetDate()
{
	new date[5], string[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	format(string, sizeof(string), "%i-%02d-%02d %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return string;
}

GetDateFromTimestamp(timestamp, _form=0)
{
    new year=1970, day=0, month=0, hourt=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    new names_of_month[12][10] = {"Thang 1","Thang 2","Thang 3","Thang 4","Thang 5","Thang 6","Thang 7","Thang 8","Thang 9","Thang 10","Thang 11","Thang 12"};
    new returnstring[32];

    while(timestamp>31622400){
        timestamp -= 31536000;
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
        days_of_month[1] = 29;
    else
        days_of_month[1] = 28;


    while(timestamp>86400){
        timestamp -= 86400, day++;
        if(day==days_of_month[month]) day=0, month++;
    }

    while(timestamp>60){
        timestamp -= 60, mins++;
        if( mins == 60) mins=0, hourt++;
    }

    sec=timestamp;

    switch( _form ){
        case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hourt, mins, sec);
        case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hourt, mins, sec);
        case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hourt,mins);
		case 4: format(returnstring, 31, "%s %02d, %d", names_of_month[month],day+1,year);
        default: format(returnstring, 31, "%02d.%02d.%d-%02d:%02d:%02d", day+1, month+1, year, hourt, mins, sec);
    }

    return returnstring;
}

//Load Tx
LoadTextdraw(playerid)
{
	#include "./inc/textdraws/textdraws.inc"
	#include "./inc/textdraws/idcard.inc"
}
LoadMap()
{
	#include "./inc/mappings/allmap.inc"
	#include "./inc/mappings/farmer.inc"
}
// - FOR PIZZAWTF

FormatNumber(number, money = 1)
{
	new length, value[32];

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	length = strlen(value);

    if(length > 3)
	{
  		for(new l = 0, i = length; --i >= 0; l ++)
		{
		    if((l % 3 == 0) && l > 0)
		    {
				strins(value, ",", i + 1);
			}
		}
	}

	if(money)
		strins(value, "$", 0);
	if(number < 0)
		strins(value, "-", 0);

	return value;
}

FormatNumberText(number, money = 1)
{
	new length, value[32];

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	length = strlen(value);

    if(length > 3)
	{
  		for(new l = 0, i = length; --i >= 0; l ++)
		{
		    if((l % 3 == 0) && l > 0)
		    {
				strins(value, ",", i + 1);
			}
		}
	}

	if(money)
		strins(value, "", 0);
	if(number < 0)
		strins(value, "", 0);

	return value;
}

GetAdminDivision(playerid)
{
	new division[4];
	if(PlayerInfo[playerid][pAdminPersonnel])
	{
		division = "AP";
	}
	else if(PlayerInfo[playerid][pHumanResources])
	{
	    division = "HR";
	}
	else if(PlayerInfo[playerid][pGameAffairs])
	{
	    division = "DGA";
	}
	else if(PlayerInfo[playerid][pWebDev])
	{
		division = "WD";
	}
	else if(PlayerInfo[playerid][pFactionMod])
	{
	    division = "FM";
	}
	else if(PlayerInfo[playerid][pGangMod])
	{
	    division = "GM";
	}
	else if(PlayerInfo[playerid][pBanAppealer])
	{
	    division = "BA";
	}
	else if(PlayerInfo[playerid][pComplaintMod])
	{
	    division = "CM";
	}
	else if(PlayerInfo[playerid][pHelperManager])
	{
	    division = "PR";
	}
	else if(PlayerInfo[playerid][pDynamicAdmin])
	{
		division = "DA";
	}
	else if(PlayerInfo[playerid][pDeveloper])
	{
	    division = "DEV";
	}
	else
	{
	    division = "";
	}
	return division;
}


GetAdminDivisionFull(playerid)
{
    new division[32];
    if(PlayerInfo[playerid][pAdminPersonnel])
	{
		division = "Admin Personnel";
	}
	else if(PlayerInfo[playerid][pHumanResources])
	{
	    division = "Human Resources";
	}
	else if(PlayerInfo[playerid][pGameAffairs])
	{
	    division = "Game Affairs";
	}
	else if(PlayerInfo[playerid][pWebDev])
	{
		division = "Web Developer";
	}
	else if(PlayerInfo[playerid][pFactionMod])
	{
	    division = "Faction Moderator";
	}
	else if(PlayerInfo[playerid][pGangMod])
	{
	    division = "Gang Moderator";
	}
	else if(PlayerInfo[playerid][pBanAppealer])
	{
	    division = "Ban Appealer";
	}
	else if(PlayerInfo[playerid][pComplaintMod])
	{
	    division = "Complaint Mod";
	}
	else if(PlayerInfo[playerid][pHelperManager])
	{
	    division = "Public Relations";
	}
	else if(PlayerInfo[playerid][pDynamicAdmin])
	{
		division = "Refund Manager";
	}
	else if(PlayerInfo[playerid][pDeveloper])
	{
	    division = "Developer";
	}
	else
	{
	    division = "";
	}
    return division;
}
GetStaffRank(playerid)
{
	new string[24];

	if(PlayerInfo[playerid][pAdmin] > 0 && !PlayerInfo[playerid][pAdminHide])
	{
		switch(PlayerInfo[playerid][pAdmin])
		{
            case 1: string = "Trial Admin";
		    case 2: string = "Junior Admin";
		    case 3: string = "General Admin";
		    case 4: string = "Senior Admin";
			case 5: string = "Head Admin";
			case 6: string = "General Manager";
			case 7: string = "Assistant Management";
			case 8: string = "Management";
			case 9: string = "Community Owner";
		}
		return string;
	}
	if(PlayerInfo[playerid][pHelper] > 0)
	{
    	switch(PlayerInfo[playerid][pHelper])
    	{
			case 1: string = "Junior Helper";
			case 2: string = "Senior Helper";
			case 3: string = "Asst.Helper Management";
			case 4: string = "Helper Management";
			case 5: string = "Junior Advisor";
		    case 6: string = "Senior Advisor";
		    case 7: string = "Chief Advisor";
		}
	}
	else if(PlayerInfo[playerid][pFormerAdmin])
	{
	    string = "Former Admin";
	}
	else
	{
	    string = "Undercover Admin";
	}
	return string;
}

GetAdminRank(playerid)
{
	new string[24];

	switch(PlayerInfo[playerid][pAdmin])
	{
	    case 0:
	    {
	        if(PlayerInfo[playerid][pFormerAdmin])
	            string = "Former Admin";
	        else
	            string = "None";
	    }
	    case 1: string = "Junior Mod";
	    case 2: string = "Moderator";
	    case 3: string = "Senior Moderator";
	    case 4: string = "Junior Admin";
		case 5: string = "Administrator";
		case 6: string = "Senior Administrator";
		case 7: string = "Manager";
		case 8: string = "Head Admin";
		case 9: string = "Lead Admin";
	}
	return string;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float:Range)
{
    new Float:Pos[3];
    GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
    return IsPlayerInRangeOfPoint(playerid, Range, Pos[0], Pos[1], Pos[2]);
}
GetAdminRank1(playerid)
{
	new string[24];

	switch(PlayerInfo[playerid][pAdmin])
	{
	    case 0:
	    {
	        if(PlayerInfo[playerid][pFormerAdmin])
	            string = "Former Admin";
            else if(PlayerInfo[playerid][pDeveloper])
				string = "Developer";
	        else
	            string = "None";
	    }
	    case 1: string = "{00FF00}Junior Mod";
	    case 2: string = "{00FF00}Moderator";
	    case 3: string = "{00AA00}Senior Mod";
	    case 4: string = "{FFA500}Junior Admin";
		case 5: string = "{FF0000}Administrator";
		case 6: string = "{00c3ff}Senior Admin";
		case 7: string = "{a30404}Manager";
		case 8: string = "{d400ff}Head Admin";
		case 9: string = "{2dfbf6}Lead Admin";
	}
	return string;
}


GetHelperRank(playerid)
{
	new string[24];

	switch(PlayerInfo[playerid][pHelper])
	{
	    case 0: string = "None";
	    case 1: string = "Junior Helper";
	    case 2: string = "Senior Helper";
	    case 3: string = "Asst.Helper Management";
	    case 4: string = "Helper Management";
	    case 5: string = "Junior Advisor";
	    case 6: string = "Senior Advisor";
	    case 7: string = "Chief Advisor";
	}

	return string;
}
GetPlayerIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPlayerIPRange(playerid, ch = '*')
{
	new string[16], part[2];

	if(!sscanf(GetPlayerIP(playerid), "p<.>ii{ii}", part[0], part[1]))
	{
	    format(string, sizeof(string), "%i.%i.%c.%c", part[0], part[1], ch, ch);
	}

	return string;
}

/*GetBoneName(boneid)
{
	new
	    string[16];

	switch(boneid)
	{
	    case 1: string = "Spine";
	    case 2: string = "Head";
	    case 3: string = "Left upper arm";
	    case 4: string = "Right upper arm";
	    case 5: string = "Left hand";
	    case 6: string = "Right hand";
	    case 7: string = "Left thigh";
	    case 8: string = "Right thigh";
	    case 9: string = "Left foot";
	    case 10: string = "Right foot";
	    case 11: string = "Right calf";
	    case 12: string = "Left calf";
	    case 13: string = "Left forearm";
	    case 14: string = "Right forearm";
	    case 15: string = "Left shoulder";
	    case 16: string = "Right shoulder";
	    case 17: string = "Neck";
	    case 18: string = "Jaw";
	}

	return string;
}*/

GetDeathReason(reason)
{
	new
	    string[24];

	switch(reason)
	{
	    case 0: string = "Fists";
	    case 18: string = "Molotov Cocktail";
	    case 44: string = "Nightvision Goggles";
	    case 45: string = "Infrared Goggles";
	    case 49: string = "Vehicle";
	    case 50: string = "Helicopter Blades";
	    case 51: string = "Explosion";
	    case 53: string = "Drowned";
	    case 54: string = "Splat";
	    default: GetWeaponName(reason, string, sizeof(string));
	}

	return string;
}

GetWeaponNameEx(weaponid)
{
	new
	    weapon[24];

	GetWeaponName(weaponid, weapon, sizeof(weapon));

	switch(weaponid)
	{
	    case 0: weapon = "None";
	    case 18: weapon = "Molotov Cocktail";
	    case 44: weapon = "Nightvision Goggles";
	    case 45: weapon = "Infrared Goggles";
	}

	return weapon;
}

GetVIPRank(level)
{
	new string[16];

	switch(level)
	{
	    case 0: string = "None";
	    case 1: string = "Silver";
	    case 2: string = "Diamond";
	    case 3: string = "Supreme";
	}

	return string;
}


GetJobName(jobid)
{
	new
	    name[32];

	if(jobid == JOB_NONE)
	    name = "Khong";
	else
		strcat(name, jobLocations[jobid][jobName]);

	return name;
}

IncreaseJobSkill(playerid, jobid)
{
	if((gDoubleXP) || PlayerInfo[playerid][pDoubleXP] > 0)
	{
	    GiveJobSkill(playerid, jobid);
	}

	GiveJobSkill(playerid, jobid);
}

GiveJobSkill(playerid, jobid)
{
	new level = GetJobLevel(playerid, jobid);

	switch(jobid)
	{
		case JOB_COURIER:
		{
		    PlayerInfo[playerid][pCourierSkill]++;

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = courierskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Cap do ky nang Courier cua ban hien la %i/5. Ban se cung cap nhieu pham hon va kiem nhieu tien hon.", level + 1);
			}
		}
		/*case JOB_FARMER:
		{
		    PlayerInfo[playerid][pThiefSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thiefskill = thiefskill + 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SendClientMessageEx(playerid, COLOR_GREEN, "Your thief skill level is now %i/5. Your cooldown times are now reduced and it takes less time to crack trunks.", level + 1);
			}
		}*/
	}

	if(GetJobLevel(playerid, jobid) != level && GetJobLevel(playerid, jobid) == 5)
	{
	    AwardAchievement(playerid, "Experienced");
	}
}

GetJobLevel(playerid, jobid)
{
	if(jobid == JOB_COURIER)
	{
	    if(0 <= PlayerInfo[playerid][pCourierSkill] <= 49) {
	        return 1;
		} else if(50 <= PlayerInfo[playerid][pCourierSkill] <= 99) {
			return 2;
		} else if(100 <= PlayerInfo[playerid][pCourierSkill] <= 199) {
			return 3;
		} else if(200 <= PlayerInfo[playerid][pCourierSkill] <= 349) {
			return 4;
		} else if(PlayerInfo[playerid][pCourierSkill] >= 350) {
		    return 5;
		}
	}

	return 0;
}

GetPlayerCapacity(playerid, item)
{
	switch(item)
	{
	    case CAPACITY_MATERIALS:
	    {
	        return 50000 + (PlayerInfo[playerid][pInventoryUpgrade] * 10000);
		}
		case CAPACITY_WEED:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
		    {
		        case 0: return 50;
		        case 1: return 75;
		        case 2: return 100;
		        case 3: return 125;
		        case 4: return 150;
		        case 5: return 200;
			}
		}
		case CAPACITY_COCAINE:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 25;
		        case 1: return 50;
		        case 2: return 75;
		        case 3: return 100;
		        case 4: return 125;
		        case 5: return 150;
			}
		}
		case CAPACITY_METH:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 20;
		        case 1: return 40;
		        case 2: return 60;
		        case 3: return 80;
		        case 4: return 100;
		        case 5: return 150;
			}
		}
        case CAPACITY_PAINKILLERS:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 5;
		        case 1: return 10;
		        case 2: return 15;
		        case 3: return 20;
		        case 4: return 25;
		        case 5: return 30;
			}
		}
		case CAPACITY_SEEDS:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 20;
		        case 2: return 30;
		        case 3: return 40;
		        case 4: return 50;
		        case 5: return 60;
			}
		}
		case CAPACITY_EPHEDRINE:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 10;
		        case 1: return 15;
		        case 2: return 20;
		        case 3: return 25;
		        case 4: return 30;
		        case 5: return 40;
			}
		}
		case CAPACITY_OIL:
		{
		    switch(PlayerInfo[playerid][pInventoryUpgrade])
     		{
		        case 0: return 25;
		        case 1: return 50;
		        case 2: return 75;
		        case 3: return 100;
		        case 4: return 150;
		        case 5: return 200;
			}
		}
	}

	return 0;
}

GetPlayerAssetCount(playerid, type)
{
	new count;

	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        foreach(new i : House)
	        {
	            if(HouseInfo[i][hExists] && PlayerInfo[playerid][pID] == HouseInfo[i][hOwnerID])
	            {
	                count++;
				}
			}
		}
		case LIMIT_BUSINESSES:
	    {
         	foreach(new i : Business)
	        {
	            if(BusinessInfo[i][bExists] && PlayerInfo[playerid][pID] == BusinessInfo[i][bOwnerID])
	            {
	                count++;
				}
			}
		}
		case LIMIT_GARAGES:
	    {
         	foreach(new i : Garage)
	        {
	            if(GarageInfo[i][gExists] && PlayerInfo[playerid][pID] == GarageInfo[i][gOwnerID])
	            {
	                count++;
				}
			}
		}
	}

	return count;
}

GetPlayerAssetLimit(playerid, type)
{
	new vipAdd;
	switch(PlayerInfo[playerid][pVIPPackage])
	{
		case 1: vipAdd = 1;
	    case 2: vipAdd = 2;
	    case 3: vipAdd = 4;
	}
	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1 + vipAdd;
			    case 2, 3: return 2 + vipAdd;
			    case 4: return 3 + vipAdd;
			}
		}
		case LIMIT_BUSINESSES:
	    {
			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1 + vipAdd;
			    case 2, 3: return 2 + vipAdd;
			    case 4: return 3 + vipAdd;
			}
		}
		case LIMIT_GARAGES:
	    {
			switch(PlayerInfo[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1 + vipAdd;
			    case 2, 3: return 2 + vipAdd;
			    case 4: return 3 + vipAdd;
			}
		}
        case LIMIT_VEHICLES:
	    {
	        switch(PlayerInfo[playerid][pAssetUpgrade])
	        {
	            case 0: return 3 + (vipAdd * 2);
	            case 1: return 4 + (vipAdd * 2);
	            case 2: return 5 + (vipAdd * 2);
	            case 3: return 7 + (vipAdd * 2);
	            case 4: return 10 + (vipAdd * 2);
			}
		}
	}

	return 0;
}

DeployObject(type, Float:x, Float:y, Float:z, Float:angle)
{
	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
	    if(!DeployInfo[i][dExists])
	    {
			DeployInfo[i][dExists] = 1;
            DeployInfo[i][dType] = type;
            DeployInfo[i][dPosX] = x;
            DeployInfo[i][dPosY] = y;
            DeployInfo[i][dPosZ] = z;
            DeployInfo[i][dPosA] = angle;

            if(type == DEPLOY_SPIKESTRIP) {
                DeployInfo[i][dObject] = CreateDynamicObject(2899, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.9, 0.0, 0.0, angle + 90.0);
            } else if(type == DEPLOY_CONE) {
                DeployInfo[i][dObject] = CreateDynamicObject(1238, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.7, 0.0, 0.0, angle);
	        } else if(type == DEPLOY_ROADBLOCK) {
	            DeployInfo[i][dObject] = CreateDynamicObject(981, x + 3.0 * floatsin(-angle, degrees), y + 3.0 * floatcos(-angle, degrees), z, 0.0, 0.0, angle);
			} else if(type == DEPLOY_BARREL) {
			    DeployInfo[i][dObject] = CreateDynamicObject(1237, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 1.0, 0.0, 0.0, angle);
			} else if(type == DEPLOY_FLARE) {
			    DeployInfo[i][dObject] = CreateDynamicObject(18728, x, y, z - 1.4, 0.0, 0.0, angle);
			}

			return i;
		}
	}

	return -1;
}

IsFireActive()
{
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    if(IsValidDynamicObject(gFireObjects[i]))
	    {
	        return 1;
		}
	}

	return 0;
}

HandleContract(playerid, killerid)
{
    if(GetFactionType(killerid) == FACTION_HITMAN && PlayerInfo[killerid][pContractTaken] == playerid)
	{
	    new price = PlayerInfo[playerid][pContracted] / 2;

	    SendClientMessageEx(killerid, COLOR_YELLOW, "Ban da hoan thanh hop dong cua minh voi %s va nhan duoc %s.", GetPlayerRPName(playerid), FormatNumber(price));
	    SendClientMessageEx(playerid, COLOR_YELLOW, "Ban da bi giet boi mot sat thu va mat %s.", FormatNumber(price));

	    SendFactionMessage(PlayerInfo[killerid][pFaction], COLOR_YELLOW, "Hop dong: %s da hoan thanh hop dong voi %s thanh cong va dat duoc %s.", GetPlayerRPName(killerid), GetPlayerRPName(playerid), FormatNumber(price));

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerInfo[killerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerInfo[killerid][pCompletedHits]++;
	    PlayerInfo[playerid][pContracted] = 0;
	    PlayerInfo[playerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET completedhits = %i WHERE uid = %i", PlayerInfo[killerid][pCompletedHits], PlayerInfo[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pContractTaken] == playerid)
            {
                PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) da hoan thanh xuat sac cua ho voi %s (uid: %i) voi gia $%i.", GetPlayerRPName(killerid), PlayerInfo[killerid][pID], GetPlayerRPName(playerid), PlayerInfo[playerid][pID], price);
	}
	else if(PlayerInfo[playerid][pContractTaken] == killerid)
	{
	    new price = PlayerInfo[killerid][pContracted];

	    SendClientMessageEx(playerid, COLOR_YELLOW, "Ban da that bai hop dong cua minh voi %s va mat %s.", GetPlayerRPName(playerid), FormatNumber(price));
	    SendClientMessageEx(killerid, COLOR_YELLOW, "Ban da giet duoc mot sat thu dang duoi theo ban va nhan duoc %s. Hop dong tren dau ban da bi xoa bo.", FormatNumber(price));
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "Hop dong: %s da that bai trong hop dong voi %s va mat %s.", GetPlayerRPName(playerid), GetPlayerRPName(killerid), FormatNumber(price));

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][pFailedHits]++;
	    PlayerInfo[killerid][pContracted] = 0;
	    PlayerInfo[killerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", PlayerInfo[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET failedhits = %i WHERE uid = %i", PlayerInfo[playerid][pFailedHits], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(PlayerInfo[i][pContractTaken] == killerid)
            {
                PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) da that bai voi %s (uid: %i) va mat $%i.", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GetPlayerRPName(killerid), PlayerInfo[killerid][pID], price);
	}
}

GetPlayerNameEx(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetPlayerRPName(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));

	for(new i = 0, l = strlen(name); i < l; i ++)
	{
	    if(name[i] == '_')
	    {
	        name[i] = ' ';
		}
	}

	return name;
}

GetPlayerZoneName(playerid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

	if(GetInsideHouse(playerid) >= 0)
	    zone = "House";
	else if(GetInsideBusiness(playerid) >= 0)
	    zone = "Business";
	else if(GetInsideGarage(playerid) >= 0)
	    zone = "Garage";
	else if(GetPlayerInterior(playerid))
	    zone = "Interior";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id;
	if(GetPlayerInterior(playerid))
	{
		if((id = GetInsideHouse(playerid)) >= 0)
		{
		    x = HouseInfo[id][hPosX];
		    y = HouseInfo[id][hPosY];
		    z = HouseInfo[id][hPosZ];
		    return 1;
		}
		else if((id = GetInsideBusiness(playerid)) >= 0)
		{
		    x = BusinessInfo[id][bPosX];
		    y = BusinessInfo[id][bPosY];
		    z = BusinessInfo[id][bPosZ];
		    return 1;
		}
		else if((id = GetInsideGarage(playerid)) >= 0)
		{
		    x = GarageInfo[id][gPosX];
		    y = GarageInfo[id][gPosY];
		    z = GarageInfo[id][gPosZ];
		    return 1;
		}
		else if((id = GetInsideEntrance(playerid)) >= 0)
		{
		    x = EntranceInfo[id][ePosX];
		    y = EntranceInfo[id][ePosY];
		    z = EntranceInfo[id][ePosZ];
		    return 1;
		}
		else if(GetPlayerInterior(playerid))
		{
			for(new i = 0; i < sizeof(staticEntrances); i ++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 100.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]))
			    {
			        x = staticEntrances[i][ePosX];
			        y = staticEntrances[i][ePosY];
			        z = staticEntrances[i][ePosZ];
			        return 1;
				}
			}
		}
	}
 	GetPlayerPos(playerid, x, y, z);
  	return 1;
}

GetVehicleValue(vehicleid)
{
	new
		price = VehicleInfo[vehicleid][vPrice];

	switch(VehicleInfo[vehicleid][vAlarm])
	{
	    case 1: price += 15000;
	    case 2: price += 30000;
	    case 3: price += 60000;
	}

	if(VehicleInfo[vehicleid][vNeon])
	{
	    price += 30000;
	}
	if(VehicleInfo[vehicleid][vTrunk])
	{
	    price += VehicleInfo[vehicleid][vTrunk] * 10000;
	}
	if(strcmp(VehicleInfo[vehicleid][vPlate], "None", true) != 0)
	{
	    price += 20000;
 	}

	return price;
}


GetVehicleLinkedID(id)
{
    foreach(new i: Vehicle)
    {
        if(VehicleInfo[i][vID] == id)
        {
		 	return i;
    	}
    }

    return INVALID_VEHICLE_ID;
}

GetVehicleZoneName(vehicleid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	if(GetVehicleVirtualWorld(vehicleid))
	    zone = "Garage";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetZoneName(Float:x, Float:y, Float:z)
{
	new zone[32];

	for(new i = 0; i < sizeof(zoneArray); i ++)
	{
	    if((zoneArray[i][zoneMinX] <= x <= zoneArray[i][zoneMaxX]) && (zoneArray[i][zoneMinY] <= y <= zoneArray[i][zoneMaxY]) && (zoneArray[i][zoneMinZ] <= z <= zoneArray[i][zoneMaxZ]))
	    {
	        strcpy(zone, zoneArray[i][zoneName]);
	        return zone;
	    }
	}

	return zone;
}

PreviewClothing(playerid, index)
{
    if(PlayerInfo[playerid][pCash] < clothingArray[index][clothingPrice])
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mua cai nay. Ban khong du tien cho no.");
    }
    else
    {
        SetPlayerAttachedObject(playerid, 9, clothingArray[index][clothingModel], clothingArray[index][clothingBone]);

		PlayerInfo[playerid][pEditType] = EDIT_CLOTHING_PREVIEW;
        PlayerInfo[playerid][pSelected] = index;

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban dang xem truoc {FF6347}%s{33CCFF}. Mat hang quan ao nay co gia {00AA00}%s{33CCFF} de mua.", clothingArray[index][clothingName], FormatNumber(clothingArray[index][clothingPrice]));
		SendClientMessageEx(playerid, COLOR_AQUA, "Su dung con tro cua ban de dieu khien giao dien trinh chinh sua. Nhap vao dia mem de luu cac thay doi.");
        EditAttachedObject(playerid, 9);
	}
}

ShowClothingSelectionMenu(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerInfo[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[PlayerInfo[playerid][pCategory]]))
        {
	        if(PlayerInfo[playerid][pClothingIndex] == -1)
	        {
	            PlayerInfo[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING, clothingTypes[PlayerInfo[playerid][pCategory]], models, index);
}

PurchaseLandObject(playerid, landid, index)
{
    if(PlayerInfo[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mua cai nay. Ban khong du tien cho no.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(PlayerInfo[playerid][pEditType] == EDIT_LAND_OBJECT_PREVIEW && IsValidDynamicObject(PlayerInfo[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
            PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		PlayerInfo[playerid][pEditType] = EDIT_LAND_OBJECT_PREVIEW;
		PlayerInfo[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		PlayerInfo[playerid][pObjectLand] = landid;
        PlayerInfo[playerid][pSelected] = index;

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban dang xem truoc {FF6347}%s{33CCFF}. Doi tuong nay co gia {00AA00}%s{33CCFF} de mua.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SendClientMessageEx(playerid, COLOR_AQUA, "Su dung con tro cua ban de dieu khien giao dien trinh chinh sua. Nhap vao dia mem de luu cac thay doi.");
        EditDynamicObject(playerid, PlayerInfo[playerid][pEditObject]);
	}
}

ShowObjectSelectionMenu(playerid, type)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	PlayerInfo[playerid][pFurnitureIndex] = -1;

	for(new i = 0; i < sizeof(furnitureArray); i ++)
	{
	    if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[PlayerInfo[playerid][pCategory]]))
	    {
	        if(PlayerInfo[playerid][pFurnitureIndex] == -1)
	        {
	            PlayerInfo[playerid][pFurnitureIndex] = i;
			}

	        models[index++] = furnitureArray[i][fModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, type, furnitureCategories[PlayerInfo[playerid][pCategory]], models, index);
}

PurchaseFurniture(playerid, index)
{
    if(PlayerInfo[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mua cai nay. Ban khong du tien cho no.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(PlayerInfo[playerid][pEditType] == EDIT_FURNITURE_PREVIEW && IsValidDynamicObject(PlayerInfo[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
            PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		PlayerInfo[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
		PlayerInfo[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        PlayerInfo[playerid][pSelected] = index;

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban dang xem truoc {FF6347}%s{33CCFF}. Mon do noi that nay co gia {00AA00}%s{33CCFF} de mua.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SendClientMessageEx(playerid, COLOR_AQUA, "Su dung con tro cua ban de dieu khien giao dien trinh chinh sua. Nhap vao dia mem de luu cac thay doi.");
        EditDynamicObject(playerid, PlayerInfo[playerid][pEditObject]);
	}
}

ClearChat(playerid)
{
	for(new i = 0; i < 30; i ++)
	{
	    SendClientMessage(playerid, -1, " ");
	}
}

Float:Streamer_GetExtraFloat(objectid, type)
{
	new
	    string[24];

	getproperty(.id = objectid, .value = type, .string = string);
	strunpack(string, string);
	return floatstr(string);
}

Streamer_SetExtraFloat(objectid, type, Float:value)
{
	new
	    string[24];

	format(string, sizeof(string), "%f", value);
	setproperty(.id = objectid, .value = type, .string = string);
	return 1;
}

Streamer_GetExtraInt(objectid, type)
{
	new extra[11];

	if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
	{
		return extra[type];
	}

	return 0;
}

Streamer_SetExtraInt(objectid, type, value)
{
	new extra[11];

    if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
    {
	    extra[type] = value;
		return Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra));
	}

	return 0;
}

SetDoubleXP(enable)
{
	new hostname[128];

	format(hostname, sizeof(hostname), "[VN] New City Roleplay");

	if(enable)
	{
	    if(strfind(hostname, "2XP") == -1)
	    {
		    format(hostname, sizeof(hostname), "hostname %s [BLITZ HOUR]", hostname);
		    SendRconCommand(hostname);
		}
	}
	else
	{
	    new pos = strfind(hostname, " [BLITZ HOUR]");

	    if(pos != -1)
	    {
	        hostname[pos] = 0;
		    format(hostname, sizeof(hostname), "hostname %s", hostname);
		    SendRconCommand(hostname);
		}
	}

	gDoubleXP = enable;
}

GetStaticEntranceWorld(name[])
{
	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
     	if(!strcmp(staticEntrances[i][eName], name))
        {
            return staticEntrances[i][eWorld];
		}
	}

	return 0;
}

Float:DistanceCameraTargetToLocation(Float:cx, Float:cy, Float:cz, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz)
{
	new Float:x, Float:y, Float:z, Float:distance;

    distance = floatround(floatsqroot(((cx - ox) * (cx - ox)) + ((cy - oy) * (cy - oy)) + ((cz - oz) * (cz - oz))));

	x = vx * distance + cx;
	y = vy * distance + cy;
	z = vz * distance + cz;

	return floatsqroot((x - ox) * (x - ox) + (y - oy) * (y - oy) + (z - oz) * (z - oz));
}

GateCheck(playerid)
{
	new id;

    if(IsPlayerInRangeOfPoint(playerid, 10.0, 1544.639892, -1631.008666, 13.252797)) // PD barrier
	{
	    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep mo cong nay.");
		}

		if(!Streamer_GetExtraInt(gPDGates[0], E_OBJECT_OPENED))
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de mo cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gPDGates[0], 1544.689941, -1630.818481, 13.116797, 0.2, 0.000000, 0.000000, 90.000000);
		    Streamer_SetExtraInt(gPDGates[0], E_OBJECT_OPENED, 1);
		}
		else
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de dong cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gPDGates[0], 1544.639892, -1631.008666, 13.252797, 0.2, 0.000000, 90.000000, 90.000000);
		    Streamer_SetExtraInt(gPDGates[0], E_OBJECT_OPENED, 0);
		}

		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, 1588.042602, -1638.079956, 14.602818)) // PD garage gate
	{
	    if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep mo cong nay.");
		}

		if(!Streamer_GetExtraInt(gPDGates[1], E_OBJECT_OPENED))
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de mo cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gPDGates[1], 1597.332763, -1638.079956, 14.602818, 3.0);
		    Streamer_SetExtraInt(gPDGates[1], E_OBJECT_OPENED, 1);
		}
		else
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de dong cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gPDGates[1], 1588.042602, -1638.079956, 14.602818, 3.0);
		    Streamer_SetExtraInt(gPDGates[1], E_OBJECT_OPENED, 0);
		}

		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, 321.255279, -1488.601318, 25.281988)) // FBI garage gate
	{
	    if(GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep mo cong nay.");
		}

		if(!Streamer_GetExtraInt(gFBIGates[0], E_OBJECT_OPENED))
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de mo cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gFBIGates[0], 327.033508, -1492.691650, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[0], E_OBJECT_OPENED, 1);
		}
		else
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de dong cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gFBIGates[0], 321.255279, -1488.601318, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[0], E_OBJECT_OPENED, 0);
		}

		return 1;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 10.0, 283.590423, -1542.835083, 25.281988)) // FBI garage gate
	{
	    if(GetFactionType(playerid) != FACTION_FEDERAL)
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep mo cong nay.");
		}

		if(!Streamer_GetExtraInt(gFBIGates[1], E_OBJECT_OPENED))
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de mo cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gFBIGates[1], 289.593841, -1547.023071, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[1], E_OBJECT_OPENED, 1);
		}
		else
		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa de dong cong.", GetPlayerRPName(playerid));
		    MoveDynamicObject(gFBIGates[1], 283.590423, -1542.835083, 25.281988, 3.0);
		    Streamer_SetExtraInt(gFBIGates[1], E_OBJECT_OPENED, 0);
		}

		return 1;
	}

	if((id = GetNearbyLand(playerid)) >= 0 && (IsLandOwner(playerid, id) || PlayerInfo[playerid][pLandPerms] == id))
	{
		for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
		{
    		if(IsValidDynamicObject(i) && IsGateObject(i) && IsPlayerInRangeOfPoint(playerid, 10.0, Streamer_GetExtraFloat(i, E_OBJECT_X), Streamer_GetExtraFloat(i, E_OBJECT_Y), Streamer_GetExtraFloat(i, E_OBJECT_Z)) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandGate", "ii", playerid, i);
			    return 1;
			}
		}
	}

	return 0;
}

DoorCheck(playerid)
{
    new Float:angle, houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid);

	for(new i = 0; i < sizeof(gPDDoors); i ++)
	{
	    if(IsPlayerInRangeOfDynamicObject(playerid, gPDDoors[i], 3.0))
	    {
	        if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_FEDERAL)
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep mo canh cua nay.");
			}

			Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPDDoors[i], E_STREAMER_R_Z, angle);

			if(!Streamer_GetExtraInt(gPDDoors[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung the cua ho de mo cua.", GetPlayerRPName(playerid));
			    SetDynamicObjectRot(gPDDoors[i], 0.0000, 0.0000, angle + 90.0);
			    Streamer_SetExtraInt(gPDDoors[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung the cua ho de dong cua.", GetPlayerRPName(playerid));
			    SetDynamicObjectRot(gPDDoors[i], 0.0000, 0.0000, angle - 90.0);
			    Streamer_SetExtraInt(gPDDoors[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened, door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened, door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    mysql_tquery(connectionID, queryBuffer, "OnPlayerUseLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

	return 0;
}

EnterCheck(playerid)
{
	new id, string[40];
    /*
	if((gettime() - PlayerInfo[playerid][pLastEnter]) < 3 && PlayerInfo[playerid][pAdminDuty] == 0)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban khong the lam dieu nay ngay bay gio.");
	}*/
    if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(HouseInfo[id][hLocked])
	    {
			GameTextForPlayer(playerid, "~r~Khoa", 5000, 1);
			return 0;
		}

		if(IsHouseOwner(playerid, id))
		{
		    HouseInfo[id][hTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i WHERE id = %i", gettime(), HouseInfo[id][hID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vao nha cua ho.", GetPlayerRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vao nha.", GetPlayerRPName(playerid));
		}

        PlayerInfo[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hIntA]);
		SetPlayerInterior(playerid, HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hWorld]);
		SetCameraBehindPlayer(playerid);
		if(HouseInfo[id][hLights] == 1)
        {
            TextDrawHideForPlayer(playerid, houseLights);
        }
        else
        {
            TextDrawShowForPlayer(playerid, houseLights);
		}
		return 1;
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(GarageInfo[id][gLocked])
	    {
			GameTextForPlayer(playerid, "~r~Khoa", 5000, 1);
			return 0;
		}

		if(IsGarageOwner(playerid, id))
		{
		    GarageInfo[id][gTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i WHERE id = %i", gettime(), GarageInfo[id][gID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vao Garage cua ho.", GetPlayerRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vao Garage.", GetPlayerRPName(playerid));
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    TeleportToCoords(playerid, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ], garageInteriors[GarageInfo[id][gType]][intVA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld]);
		}
		else
		{
		    PlayerInfo[playerid][pLastEnter] = gettime();
			SetFreezePos(playerid, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]);
			SetPlayerFacingAngle(playerid, garageInteriors[GarageInfo[id][gType]][intPA]);
			SetPlayerInterior(playerid, garageInteriors[GarageInfo[id][gType]][intID]);
			SetPlayerVirtualWorld(playerid, GarageInfo[id][gWorld]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(BusinessInfo[id][bLocked])
	    {
			GameTextForPlayer(playerid, "~r~Dong cua", 5000, 1);
			return 0;
		}

		if(IsBusinessOwner(playerid, id))
		{
		    BusinessInfo[id][bTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i WHERE id = %i", gettime(), BusinessInfo[id][bID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da buoc vao doanh nghiep cua ho.", GetPlayerRPName(playerid));
		}
		else
		{
		    if(BusinessInfo[id][bEntryFee] > 0)
			{
				if(PlayerInfo[playerid][pCash] < BusinessInfo[id][bEntryFee])
		    	{
		    	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong du tien de tra phi vao cua. Ban khong the vao.");
		        }

		        format(string, sizeof(string), "~r~-$%i", BusinessInfo[id][bEntryFee]);
		        GameTextForPlayer(playerid, string, 5000, 1);

		        BusinessInfo[id][bCash] += BusinessInfo[id][bEntryFee];
		        GivePlayerCash(playerid, -BusinessInfo[id][bEntryFee]);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[id][bCash], BusinessInfo[id][bID]);
		    	mysql_tquery(connectionID, queryBuffer);
		    }

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vao doanh nghiep.", GetPlayerRPName(playerid));

			switch(BusinessInfo[id][bType])
			{
				case BUSINESS_STORE, BUSINESS_GUNSHOP, BUSINESS_CLOTHES, BUSINESS_RESTAURANT, BUSINESS_BARCLUB:
					SendClientMessageEx(playerid, COLOR_GREEN, "Chao mung ban den %s's %s [%i san pham]. /mua de mua hang tu doanh nghiep nay.", BusinessInfo[id][bOwner], bizInteriors[BusinessInfo[id][bType]][intType], BusinessInfo[id][bProducts]);
				case BUSINESS_GYM:
				    SendClientMessageEx(playerid, COLOR_GREEN, "Chao mung ban den %s's %s. /mua de mua phong cach chien dau.", BusinessInfo[id][bOwner], bizInteriors[BusinessInfo[id][bType]][intType]);
				case BUSINESS_AGENCY:
				    SendClientMessageEx(playerid, COLOR_GREEN, "Chao mung ban den %s's %s. /(ad)vertise de thuc hien mot quang cao.", BusinessInfo[id][bOwner], bizInteriors[BusinessInfo[id][bType]][intType]);
			}
		}

		PlayerInfo[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bIntA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bInterior]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    if(EntranceInfo[id][eLocked])
	    {
			GameTextForPlayer(playerid, "~r~Khoa", 5000, 1);
			return 0;
		}
		if(EntranceInfo[id][eIntX] == 0.0 && EntranceInfo[id][eIntY] == 0.0 && EntranceInfo[id][eIntZ] == 0.0)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Loi vao nay khong co noi that va khong the vao duoc.");
		    return 0;
		}
		if(EntranceInfo[id][eType] == 2)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the vao loi vao nay!");
		    return 0;
		}

		if(!PlayerInfo[playerid][pAdminDuty])
		{
			if(EntranceInfo[id][eAdminLevel] && PlayerInfo[playerid][pAdmin] < EntranceInfo[id][eAdminLevel])
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Cap quan tri vien cua ban qua thap. Ban khong the vao");
		    	return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType])
			{
		    	SendClientMessage(playerid, COLOR_LIGHTRED, "Loi vao nay chi danh co mot to chuc cu the. Ban khong the vao.");
				return 0;
			}
			if(EntranceInfo[id][eGang] >= 0 && EntranceInfo[id][eGang] != PlayerInfo[playerid][pGang])
			{
		    	SendClientMessage(playerid, COLOR_LIGHTRED, "Loi vao nay chi danh cho mot bang nhom cu the. Ban khong the vao.");
				return 0;
			}
			if(EntranceInfo[id][eVIP] && PlayerInfo[playerid][pVIPPackage] < EntranceInfo[id][eVIP])
			{
		    	SendClientMessage(playerid, COLOR_LIGHTRED, "VIP cua ban qua thap. Ban khong the vao.");
		    	return 0;
			}
		}

        PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vao toa nha.", GetPlayerRPName(playerid));

		if(EntranceInfo[id][eType] == 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Loi vao nay co the duoc su dung cho OOC. Su dung /offerduel de bat dau!");
		}
		else if(EntranceInfo[id][eType] == 2)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Loi vao nay su dung sua chua xe co. Su dung /repaircar.");
		}

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true);
		    }
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld]);
			}
		}
		else
		{
			if(EntranceInfo[id][eFreeze])
			{
  				SetFreezePos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
  			}

	  		SetPlayerFacingAngle(playerid, EntranceInfo[id][eIntA]);
	    	SetPlayerInterior(playerid, EntranceInfo[id][eInterior]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eWorld]);
			SetCameraBehindPlayer(playerid);
		}

		if(!EntranceInfo[id][eFreeze])
		{
			format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		    GameTextForPlayer(playerid, string, 5000, 1);
		}

		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]))
	        {
	            if(!strcmp(staticEntrances[i][eName], "VIP Lounge") && PlayerInfo[playerid][pVIPPackage] == 0)
	            {
	                SendClientMessage(playerid, COLOR_LIGHTRED, "Phong cho nay chi danh co nguoi dang ky VIP.");
	                return 0;
	            }

	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);
				}
				else
				{
				    SetPlayerPos(playerid, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]);

   					format(string, sizeof(string), "~w~%s", staticEntrances[i][eName]);
	            	GameTextForPlayer(playerid, string, 5000, 1);
				}

                PlayerInfo[playerid][pLastEnter] = gettime();
	            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vao toa nha.", GetPlayerRPName(playerid));
	            SetPlayerFacingAngle(playerid, staticEntrances[i][eIntA]);
	            SetPlayerInterior(playerid, staticEntrances[i][eInterior]);
				SetPlayerVirtualWorld(playerid, staticEntrances[i][eWorld]);
				SetCameraBehindPlayer(playerid);
	            return 1;
			}
		}
	}

	return 0;
}

ExitCheck(playerid)
{
	new id;
	/*if((gettime() - PlayerInfo[playerid][pLastEnter]) < 3 && PlayerInfo[playerid][pAdminDuty] == 0)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban khong the lam dieu nay ngay bay gio.");
	}*/
    if((id = GetInsideHouse(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da ra khoi nha.", GetPlayerRPName(playerid));
		SetFreezePos(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hPosA]);
		SetPlayerInterior(playerid, HouseInfo[id][hOutsideInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hOutsideVW]);
		SetCameraBehindPlayer(playerid);
		TextDrawHideForPlayer(playerid, houseLights);
		return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    if(
			(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 6.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ])) ||
			((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (IsPlayerInRangeOfPoint(playerid, 2.0, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]) || IsPlayerInRangeOfPoint(playerid, 4.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ]))))
		{
	    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da ra khoi Garage.", GetPlayerRPName(playerid));

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TeleportToCoords(playerid, GarageInfo[id][gExitX], GarageInfo[id][gExitY], GarageInfo[id][gExitZ], GarageInfo[id][gExitA], 0, 0);
			}
			else
			{
		    	SetPlayerPos(playerid, GarageInfo[id][gPosX], GarageInfo[id][gPosY], GarageInfo[id][gPosZ]);
				SetPlayerFacingAngle(playerid, GarageInfo[id][gPosA]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}

        PlayerInfo[playerid][pLastEnter] = gettime();
		return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]))
	{
	    PlayerInfo[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da ra khoi doanh nghiep.", GetPlayerRPName(playerid));
		SetPlayerPos(playerid, BusinessInfo[id][bPosX], BusinessInfo[id][bPosY], BusinessInfo[id][bPosZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bPosA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bOutsideInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? (7.0) : (3.0), EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]))
	{
	    if(EntranceInfo[id][eType] == 1)
	    {
	        SetPlayerWeapons(playerid);
     	}

	    PlayerInfo[playerid][pLastEnter] = gettime();
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da ra khoi toa nha.", GetPlayerRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		    	TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true);
			}
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW]);
			}
		}
		else
		{
		    if(EntranceInfo[id][eFreeze])
		    {
				SetFreezePos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}

			SetPlayerFacingAngle(playerid, EntranceInfo[id][ePosA]);
			SetPlayerInterior(playerid, EntranceInfo[id][eOutsideInt]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eOutsideVW]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else
	{
	    for(new i = 0; i < sizeof(staticEntrances); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]) && GetPlayerVirtualWorld(playerid) == staticEntrances[i][eWorld])
			{
	            if(staticEntrances[i][eFreeze])
				{
				    SetFreezePos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}
				else
				{
                    SetPlayerPos(playerid, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
				}

                PlayerInfo[playerid][pLastEnter] = gettime();
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da ra khoi toa nha.", GetPlayerRPName(playerid));
	            SetPlayerFacingAngle(playerid, staticEntrances[i][ePosA]);
	            SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
				return 1;
			}
		}
	}

	return 0;
}

AddReportToQueue(playerid, text[])
{
    for(new x = 0, msg[128]; x < MAX_REPORTS; x ++)
	{
	    if(!ReportInfo[x][rExists])
	    {
	        strcpy(ReportInfo[x][rText], text, 128);

	        ReportInfo[x][rExists] = 1;
			ReportInfo[x][rAccepted] = 0;
			ReportInfo[x][rReporter] = playerid;
			ReportInfo[x][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[x][rTime] = 5;

	        PlayerInfo[playerid][pLastReport] = gettime();

	        format(msg, sizeof(msg), "Bao cao tu [%i]%s (RID: %i): %s", playerid, GetPlayerRPName(playerid), x, text);

	        foreach(new i : Player)
	        {
	            if(PlayerInfo[i][pAdmin] > 0 && !PlayerInfo[i][pToggleReports])
				{
	        		SendClientMessageEx(i, COLOR_YELLOW2, msg);
				}
			}
			format(msg, sizeof(msg), "```%s```", msg);
//			DCC_SendChannelMessage(DCC_FindChannelById(returnReportChatID()), msg);

	        return 1;
		}
	}

	return 0;
}

AddBan(username[], ip[], from[], reason[], permanent = 0)
{
	if(!isnull(username) && !isnull(ip))
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE username = '%s' OR ip = '%s'", username, ip);
		mysql_tquery(connectionID, queryBuffer, "OnBanAttempt", "ssssi", username, ip, from, reason, permanent);
	}
}

UpdateLandText(landid)
{
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_UPDATE_LANDLABELS, landid);
}

BanPlayer(playerid, from[], reason[], permanent = 0)
{
	if(IsPlayerConnected(playerid))
	{
		if(!strcmp(from, SERVER_ANTICHEAT))
		{
		    gAnticheatBans++;
	    	SaveServerInfo();
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) da bi cam boi %s, Ly do: %e')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
		mysql_tquery(connectionID, queryBuffer);

		AddBan(GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason, permanent);
		KickIP(GetPlayerIP(playerid));
	}
}

Rangeban(playerid, from[], reason[])
{
    if(IsPlayerConnected(playerid))
	{
		AddBan(GetPlayerNameEx(playerid), GetPlayerIPRange(playerid), from, reason);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) duoc gioi han boi %s, Ly do: %e')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
		mysql_tquery(connectionID, queryBuffer);

		KickIP(GetPlayerIP(playerid));
	}
}

KickIP(ip[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerIP(i), ip))
	    {
	        KickPlayer(i);
		}
	}
}

GetPlayerHealthEx(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return floatround(health);
}

GetPlayerArmourEx(playerid)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	return floatround(armor);
}

GivePlayerHealth(playerid, Float:amount)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, (health + amount > 100.0) ? (100.0) : (health + amount));
}

GivePlayerArmour(playerid, Float:amount)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	SetScriptArmour(playerid, (armor + amount > 100.0) ? (100.0) : (armor + amount));
}

// ---------------------------------------
// These functions are forwarded so they can be called by filterscripts using CallRemoteFunction.
forward HideWanted(playerid);
public HideWanted(playerid)
{
	PlayerTextDrawHide(playerid, Custom_Hud[playerid][14]);
	PlayerTextDrawHide(playerid, Custom_Hud[playerid][15]);
	PlayerTextDrawHide(playerid, Custom_Hud[playerid][16]);
	PlayerTextDrawHide(playerid, Custom_Hud[playerid][17]);
	PlayerTextDrawHide(playerid, Custom_Hud[playerid][18]);
	PlayerTextDrawHide(playerid, Custom_Hud[playerid][19]);	
	return 1;
}
forward WantedTextdraw(playerid);
public WantedTextdraw(playerid)
{
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][13]);
	if(PlayerInfo[playerid][pWantedLevel] == 1)
	{
        HideWanted(playerid);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][14]);
	}
	if(PlayerInfo[playerid][pWantedLevel] == 2)
	{
        HideWanted(playerid);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][14]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][15]);
	}
	if(PlayerInfo[playerid][pWantedLevel] == 3)
	{
        HideWanted(playerid);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][14]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][15]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][16]);
	}
	if(PlayerInfo[playerid][pWantedLevel] == 4)
	{
        HideWanted(playerid);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][14]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][15]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][16]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][17]);
	}
	if(PlayerInfo[playerid][pWantedLevel] == 5)
	{
        HideWanted(playerid);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][14]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][15]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][16]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][17]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][18]);
	}
	if(PlayerInfo[playerid][pWantedLevel] == 6)
	{

		HideWanted(playerid);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][14]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][15]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][16]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][17]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][18]);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][19]);
	}
	else if(PlayerInfo[playerid][pWantedLevel] == 0)
	{
        HideWanted(playerid);
	}
}


forward Show_Weapon(playerid);
public Show_Weapon(playerid)
{
	new stringtd[2000], ammotd[120];
	new weaponid = GetPlayerWeapon(playerid);
	if(weaponid == 22)
	{
		stringtd = "weapon:weapon_colt45";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 23)
	{
		stringtd = "weapon:weapon_silenced";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 24)
	{
		stringtd = "weapon:weapon_deagle";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 25)
	{
		stringtd = "weapon:weapon_shogun";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 29)
	{
		stringtd = "weapon:weapon_mp5";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 30)
	{
		stringtd = "weapon:weapon_ak47";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 31)
	{
		stringtd = "weapon:weapon_m4";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 33)
	{
		stringtd = "weapon:weapon_rifle";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 34)
	{
		stringtd = "weapon:weapon_sniper";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][2], 0.000000, 0.000000);
        PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][2], 37.000000, 54.000000);
	}
	else if(weaponid == 0)
	{
		stringtd = "weapon:fist";
		PlayerTextDrawSetString(playerid, Custom_Hud[playerid][2], stringtd);
		PlayerTextDrawShow(playerid, Custom_Hud[playerid][2]);
		PlayerTextDrawLetterSize(playerid, Custom_Hud[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][1], 55.000000, 5.000000);
	}
	format(ammotd, sizeof ammotd, "%i", GetPlayerAmmo(playerid));
	PlayerTextDrawSetString(playerid, Custom_Hud[playerid][30], ammotd);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][30]);
	return 1;
}

forward TextdrawCus(playerid);
public TextdrawCus(playerid)
{
	new stringtd[200];
	format(stringtd, sizeof(stringtd), "%s", FormatNumberText(PlayerInfo[playerid][pCash]));
	PlayerTextDrawSetString(playerid, Custom_Hud[playerid][12], stringtd);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][12]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][11]);
	return 1;
}
forward progress_bar_show(playerid);
public progress_bar_show(playerid)
{
	new Float:health, Float:armour, Float:add1, Float:add2;
	health = PlayerInfo[playerid][pHealth] * 55.0 / 100;
	armour = PlayerInfo[playerid][pArmor] * 55.0 / 100;

	add1 = PlayerInfo[playerid][pHunger] * 55.0 / 100;
	add2 = PlayerInfo[playerid][pThirsty] * 55.0 / 100;

	PlayerTextDrawShow(playerid, Custom_Hud[playerid][0]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][1]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][3]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][4]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][5]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][6]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][7]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][8]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][9]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][10]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][20]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][21]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][22]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][23]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][24]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][25]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][26]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][27]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][28]);
	PlayerTextDrawShow(playerid, Custom_Hud[playerid][29]);
	PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][1], health, 5.000000);
	PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][4], armour, 5.000000);
	PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][21], add1, 5.000000);
	PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][25], add2, 5.000000);
	if(PlayerInfo[playerid][pHealth] > 100)
	{
		PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][1], 55.000000, 5.000000);
	}
	if(PlayerInfo[playerid][pHealth] > 100)
	{
		PlayerTextDrawTextSize(playerid, Custom_Hud[playerid][4], 55.000000, 5.000000);
	}
	return 1;
}
//Update Level
forward UpdateLevel(playerid);
public UpdateLevel(playerid)
{
	new hours = (PlayerInfo[playerid][pLevel] * 5);
	if(PlayerInfo[playerid][pHours] == (PlayerInfo[playerid][pLevel] * 5))
	{
		new getcash = (PlayerInfo[playerid][pLevel] * 50);
		PlayerInfo[playerid][pLevel]++;
		PlayerInfo[playerid][pCash] += getcash;
		SendClientMessageEx(playerid, -1, "{ff5050}[Chuc mung]{ffffff} Ban da len cap %i khi da hoat dong du %i/%i gio.", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pHours], hours);
		SendClientMessageEx(playerid, -1, "{ff5050}[Phan thuong]{ffffff} Ban nhan duoc $%i khi da len duoc cap do %i.", getcash, PlayerInfo[playerid][pLevel]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, cash = %i WHERE uid = %i", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pCash], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

//-Can sa


forward HaiXong(playerid,i);
public HaiXong(playerid,i) {
    printf("%d",i);
    KillTimer(CheckCSTimer[playerid]);
    SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF}Ban da thu hoach can sa thanh cong.");
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    CSInfo[i][CanSaID] = 0;
    DestroyObject(CSInfo[i][CSObj]);
    DeletePVar(playerid, "DangHaiCan");
    new string[129],rdcs;
    rdcs = 1 + random(4);
    format(string, sizeof string, "[Can sa] {ffffff}Ban da nhan duoc %d grams can sa.", rdcs);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);
    PlayerInfo[playerid][pWeed] += rdcs;  
    CSInfo[i][CanSaKhaiThac] = 0;
    CSInfo[i][CanSaSet] = 2;
    CSInfo[i][CanSaTimeRS] = 60;
    CSInfo[i][timeberc] = SetTimerEx("RespawnCS", 60000, true, "d", i);
    DeletePVar(playerid, "CS_Hai");
    TogglePlayerControllable(playerid,1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
    return 1;
}

forward RespawnCS(i);
public RespawnCS(i) {
    CSInfo[i][CanSaTimeRS] -= 1;
    // CSInfo[i][timeberc] = SetTimer("RespawnCS", 10000, 0);
    printf("[Can sa] So phut con lai %d",CSInfo[i][CanSaTimeRS]);
    if(CSInfo[i][CanSaTimeRS] <= 0) {
        print("rs");
        CSInfo[i][CanSaID] = i;
        CSInfo[i][CanSaSet] = 1;
        CSInfo[i][CanSaCountRS] += 1;
        CSInfo[i][CSObj] = CreateObject(19473, CSInfo[i][CSPostion][0] ,CSInfo[i][CSPostion][1] ,CSInfo[i][CSPostion][2]-1.5, 0,0,0, 5);
        KillTimer(CSInfo[i][timeberc]);
    }
}


//ANTI FLOOD
forward CheckIfFlood(playerid);
public CheckIfFlood(playerid)
{
  new ips[MAX_PLAYERS];
  for(new i = 0; i < MAX_PLAYERS; i++)
  {
     GetPlayerIp(playerid, ips, sizeof(ips));
     if(!strcmp(ipa, ips, false))
     {
         UserMaxConnect[playerid]++;
     }
  }
/*  if(UserMaxConnect[playerid] > MAX_CONNECT)
  {
         Ban(playerid);
  }*/
  return 1;
}
//LS ELEVATOR
// Public:
forward CallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);
//----------------------------------------
forward SetScriptPos(playerid, Float:x, Float:y, Float:z);
public SetScriptPos(playerid, Float:x, Float:y, Float:z)
{
	SetPlayerPos(playerid, x, y, z);
}

forward SetScriptArmour(playerid, Float:amount);
public SetScriptArmour(playerid, Float:amount)
{
    PlayerInfo[playerid][pACTime] = gettime() + 5;
	PlayerInfo[playerid][pArmorTime] = gettime() + 5;
	PlayerInfo[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

forward SetScriptSkin(playerid, skinid);
public SetScriptSkin(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    PlayerInfo[playerid][pSkin] = skinid;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

forward DestroyDamageTD(playerid);
public DestroyDamageTD(playerid)
{
	if(PlayerInfo[playerid][pDamageTimer] >= 0)
	{
	    TextDrawHideForPlayer(playerid, Damage[playerid]);
	    PlayerInfo[playerid][pDamageTimer] = -1;
	}
}

forward AddToPaycheck(playerid, amount);
public AddToPaycheck(playerid, amount)
{
	if(PlayerInfo[playerid][pLogged])
	{
		PlayerInfo[playerid][pPaycheck] = PlayerInfo[playerid][pPaycheck] + amount;

		if(PlayerInfo[playerid][pPaycheck] >= 20000)
		{
		    AwardAchievement(playerid, "Cham chi");
		}

		if(!PlayerInfo[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = paycheck + %i WHERE uid = %i", amount, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
stock GetPlayerSQLId(playerid)
{
	if(PlayerInfo[playerid][pLogged])
	{
		return PlayerInfo[playerid][pID];
	}
	return -1;
}
forward GetPlayerCash(playerid);
public GetPlayerCash(playerid)
{
	return PlayerInfo[playerid][pCash];
}


stock CheckServerAd(szInput[]) {

	new
		iCount,
		iPeriod,
		iDash,
		iPos,
		iChar,
		iColon;

	while((iChar = szInput[iPos++])) {
		if('0' <= iChar <= '9') iCount++;
		else if(iChar == '.') iPeriod++;
		else if(iChar == '-') iDash++;
		else if(iChar == ':') iColon++;
	}
	if(iCount >= 7 && iPeriod >= 3 && iColon >= 1 || strfind(szInput, "samp.") > -1 || strfind(szInput, ":7777") > -1) {
		return 1;
	}

	return 0;
}
forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(connectionID);
	Graffiti_Save(id);

	return 1;
}


forward GivePlayerCash(playerid, amount);
public GivePlayerCash(playerid, amount)
{
	if(PlayerInfo[playerid][pLogged])
	{
		PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] + amount;
		if(amount < 0)
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET money_spent = money_spent + %i WHERE uid = %i", -amount, PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE uid = %i AND money_spent >= 200", PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer, "OnPlayerCheckMoney", "is", playerid, "I'm rich!");
		}
		else if(amount > 0)
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET money_earned = money_earned + %i WHERE uid = %i", amount, PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE uid = %i AND money_earned >= 200", PlayerInfo[playerid][pID]);
		    mysql_tquery(connectionID, queryBuffer, "OnPlayerCheckMoney", "is", playerid, "High roller");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash + %i WHERE uid = %i", amount, PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

forward GiveWeaponToPlayer(playerid, weaponid, bool:temp);
public GiveWeaponToPlayer(playerid, weaponid, bool:temp)
{
	GivePlayerWeaponEx(playerid, weaponid, temp);
}

forward AddBanForPlayer(playerid, from[], reason[], permanent);
public AddBanForPlayer(playerid, from[], reason[], permanent)
{
	BanPlayer(playerid, from, reason, permanent);
}

forward IsPlayerLoggedIn(playerid);
public IsPlayerLoggedIn(playerid)
{
	return PlayerInfo[playerid][pLogged];
}

forward IsPlayerScripter(playerid);
public IsPlayerScripter(playerid)
{
	return PlayerInfo[playerid][pDeveloper];
}

forward IsPlayerFormerAdmin(playerid);
public IsPlayerFormerAdmin(playerid)
{
	return PlayerInfo[playerid][pFormerAdmin];
}

forward IsPlayerAdminLevel(playerid, level);
public IsPlayerAdminLevel(playerid, level)
{
	return PlayerInfo[playerid][pAdmin] >= level;
}

forward IsPlayerInFaction(playerid, type);
public IsPlayerInFaction(playerid, type)
{
	return GetFactionType(playerid) == type;
}

forward GetPlayerInfo(playerid, pEnum:var);
public GetPlayerInfo(playerid, pEnum:var)
{
	return PlayerInfo[playerid][var];
}

forward SetPlayerInfo(playerid, pEnum:var, amount);
public SetPlayerInfo(playerid, pEnum:var, amount)
{
	PlayerInfo[playerid][var] = amount;
}

forward GetPlayerUID(playerid);
public GetPlayerUID(playerid)
{
	return PlayerInfo[playerid][pID];
}

forward mysql_connection_handle(type);
public mysql_connection_handle(type)
{
	if(type == 0)
		return connectionID;
	else if(type == 1)
		return radioConnectionID;

	return 0;
}

// ---------------------------------------

#include "./inc/core/timer.inc"


// ---------------------------------------

FriskPlayer(playerid, targetid)
{
	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s's Items _____", GetPlayerRPName(targetid));

	if(PlayerInfo[targetid][pCash] < 5000)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i", PlayerInfo[targetid][pCash]);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Cash: $5000+");
	}

	if(PlayerInfo[targetid][pPhone])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Dien thoai di dong");
	}
	if(PlayerInfo[targetid][pWalkieTalkie])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Bo dam");
	}
    if(PlayerInfo[targetid][pSpraycans])
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Spraycans (%i)", PlayerInfo[targetid][pSpraycans]);
	}
	if(PlayerInfo[targetid][pBoombox])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Boombox");
	}
	if(PlayerInfo[targetid][pMP3Player])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "MP3 player");
	}
	if(PlayerInfo[targetid][pPhonebook])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "Danh ba dien thoai");
	}
	if(PlayerInfo[targetid][pPoliceScanner])
	{
	    SendClientMessage(playerid, COLOR_GREY2, "May quet canh sat");
	}
	if(PlayerInfo[targetid][pMaterials] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Vat lieu (%i)", PlayerInfo[targetid][pMaterials]);
	}
	if(PlayerInfo[targetid][pFirstAid] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "First aid (%i)", PlayerInfo[targetid][pFirstAid]);
	}
	if(PlayerInfo[targetid][pBodykits] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Bodywork kits (%i)", PlayerInfo[targetid][pBodykits]);
	}
	if(PlayerInfo[targetid][pRimkits] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Rimkits (%i)", PlayerInfo[targetid][pRimkits]);
	}
    if(PlayerInfo[targetid][pWeed])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Weed (%ig)", PlayerInfo[targetid][pWeed]);
	}
	if(PlayerInfo[targetid][pCocaine])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Cocaine (%ig)", PlayerInfo[targetid][pCocaine]);
	}
	if(PlayerInfo[targetid][pMeth])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Meth (%ig)", PlayerInfo[targetid][pMeth]);
	}
	if(PlayerInfo[targetid][pPainkillers])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Painkillers (%i)", PlayerInfo[targetid][pPainkillers]);
	}
	if(PlayerInfo[targetid][pSeeds])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Hat can sa (%i)", PlayerInfo[targetid][pSeeds]);
	}
	if(PlayerInfo[targetid][pEphedrine])
	{
	    SendClientMessageEx(playerid, COLOR_RED, "Raw ephedrine (%i)", PlayerInfo[targetid][pEphedrine]);
	}
	switch(PlayerInfo[targetid][pSmuggleDrugs])
	{
	    case 1: SendClientMessageEx(playerid, COLOR_RED, "Seeds package");
	    case 2: SendClientMessageEx(playerid, COLOR_RED, "Cocaine package");
	    case 3: SendClientMessageEx(playerid, COLOR_RED, "Raw ephedrine package");
	}

	for(new i = 0; i < 13; i ++)
	{
	    if(PlayerInfo[targetid][pWeapons][i] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_RED, "%s", GetWeaponNameEx(PlayerInfo[targetid][pWeapons][i]));
		}
	}

    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da tim kiem cac vat pham bat hop phap tren %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
}

Show_CZ(playerid)
{
	new czid[200], name[200], age[200];

	format(name, sizeof(name), "%s", GetPlayerRPName(playerid));
	format(czid, sizeof(czid), "%i", PlayerInfo[playerid][pCzID]);
	format(age, sizeof(age), "%i", PlayerInfo[playerid][pAge]);

	PlayerTextDrawSetPreviewModel(playerid, Cz_Text[playerid][7], GetPlayerSkin(playerid));
	PlayerTextDrawSetString(playerid, Cz_Text[playerid][2], czid);
	PlayerTextDrawSetString(playerid, Cz_Text[playerid][3], name);
	PlayerTextDrawSetString(playerid, Cz_Text[playerid][4], age);

	for(new i=0;i<8;i++)
	{
		PlayerTextDrawShow(playerid, Cz_Text[playerid][i]);
	}
	SelectTextDraw(playerid, 0xFF4040AA);
}

Show_PDC(playerid)
{
	new czid[200], name[200], age[200];

	format(name, sizeof(name), "%s", GetPlayerRPName(playerid));
	format(czid, sizeof(czid), "%i", PlayerInfo[playerid][pFactionID]);
	format(age, sizeof(age), "%i", PlayerInfo[playerid][pAge]);

	PlayerTextDrawSetPreviewModel(playerid, PD_Card[playerid][6], GetPlayerSkin(playerid));
	PlayerTextDrawSetString(playerid, PD_Card[playerid][2], czid);
	PlayerTextDrawSetString(playerid, PD_Card[playerid][3], name);
	PlayerTextDrawSetString(playerid, PD_Card[playerid][4], age);

	for(new i=0;i<7;i++)
	{
		PlayerTextDrawShow(playerid, PD_Card[playerid][i]);
	}
	SelectTextDraw(playerid, 0xFF4040AA);
}

DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

	//SendClientMessage(targetid, COLOR_GREEN, "______________________________________________________________________");
	SendClientMessageEx(targetid, 0x7514F6FF, "____________________ %s [%s] ____________________", GetPlayerNameEx(playerid), GetDate());
	SendClientMessageEx(targetid, COLOR_WHITE, "Weed: %i/%ig - Cocaine: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i - Seeds: %i/%i", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED),
		PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE), PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH), PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS), PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Vat lieu: %s/%s - Ephedrine: %i/%ig - Muriatic acid: %i/10 - Baking soda: %i/3", FormatNumber(PlayerInfo[playerid][pMaterials], 0), FormatNumber(GetPlayerCapacity(playerid, CAPACITY_MATERIALS), 0),
		PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE), PlayerInfo[playerid][pMuriaticAcid], PlayerInfo[playerid][pBakingSoda]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Can cau: %s - Moi cau: %i/20 - Boombox: %s - MP3 player: %s - Danh ba: %s", (PlayerInfo[playerid][pFishingRod]) ? ("Co") : ("Khong"), PlayerInfo[playerid][pFishingBait], (PlayerInfo[playerid][pBoombox]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pMP3Player]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pPhonebook]) ? ("Yes") : ("No"));
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Bang lai xe: %s - Components: %s - Cigars: %s - Spraycans: %i/20 - Bom: %i/3", (PlayerInfo[playerid][pCarLicense]) ? ("Co") : ("Khong"), FormatNumber(PlayerInfo[playerid][pComponents], 0), FormatNumber(PlayerInfo[playerid][pCigars], 0), PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pBombs]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Bo dam: %s - Dien thoai: %s - Bo so cuu: %i/20 - May quet canh sat: %s", (PlayerInfo[playerid][pWalkieTalkie]) ? ("Co") : ("Khong"), (PlayerInfo[playerid][pPhone]) ? ("Yes") : ("No"), PlayerInfo[playerid][pFirstAid], (PlayerInfo[playerid][pPoliceScanner]) ? ("Yes") : ("No"));
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Xang: %i/20L - Bodykits: %i/10 - Rimkits: %i/5 - Rope: %i/10 - Dong ho: %s - GPS: %s", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pBodykits], PlayerInfo[playerid][pRimkits], PlayerInfo[playerid][pRope], (PlayerInfo[playerid][pWatch]) ? ("Yes") : ("No"), (PlayerInfo[playerid][pGPS]) ? ("Yes") : ("No"));
    SendClientMessageEx(targetid, COLOR_WHITE, "Kim cuong: %s - Dau: %i/%iL - Skates: %s", FormatNumber(PlayerInfo[playerid][pDiamonds], 0), PlayerInfo[playerid][pOil],  GetPlayerCapacity(playerid, CAPACITY_OIL), (PlayerInfo[playerid][pSkates]) ? ("Yes") : ("No"));
}

DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

    new name[24], gender[10], faction[48], facrank[32], gang[32], gangrank[32], gangcrew[32], division[32], insurance[24], Float:health, Float:armor;
    new job[32], secondjob[32], jailtype[32];

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, PlayerInfo[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetPlayerRPName(playerid));
	}

	if(PlayerInfo[playerid][pGender] == 1) gender = "Nam";
	else if(PlayerInfo[playerid][pGender] == 2) gender = "Nu";
	else if(PlayerInfo[playerid][pGender] == 3) gender = "Dong tinh";

	switch(PlayerInfo[playerid][pInsurance])
	{
	    case HOSPITAL_COUNTY: insurance = "Country General";
	    case HOSPITAL_ALLSAINTS: insurance = "Red Country";
	    default: insurance = "Khong";
	}

	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    if(!strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], "Khong", true))
	    {
		    strcpy(faction, FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
		}
		else
		{
		    strcpy(faction, FactionInfo[PlayerInfo[playerid][pFaction]][fShortName]);
		}

	    format(facrank, sizeof(facrank), "%s (%i)", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);

	    if(PlayerInfo[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]]);
		}
		else
		{
		    division = "Khong";
		}
	}
	else
	{
	    faction = "Khong";
	    facrank = "N/A (0)";
	    division = "Khong";
	}

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[PlayerInfo[playerid][pGang]][gName]);
	    format(gangrank, sizeof(gangrank), "%s (%i)", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);
	    if(PlayerInfo[playerid][pCrew] >= 0)
	    {
	        strcpy(gangcrew, GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]]);
	    }
	}
	else
	{
	    gang = "Khong";
	    gangrank = "N/A (0)";
	    gangcrew = "Khong";
	}

	/*switch(PlayerInfo[playerid][pVIPPackage])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}*/

	if(playerid == MAX_PLAYERS)
	{
	    health = PlayerInfo[playerid][pHealth];
	    armor = PlayerInfo[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}

	if(PlayerInfo[playerid][pJob] != JOB_NONE)
	{
	    format(job, sizeof(job), "%s", GetJobName(PlayerInfo[playerid][pJob]));
	}
	else
	{
	    job = "Khong";
	}

	if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
	{
	    format(secondjob, sizeof(secondjob), "%s", GetJobName(PlayerInfo[playerid][pSecondJob]));
	}
	else
	{
	    secondjob = "Khong";
	}
	new totalwealth = PlayerInfo[playerid][pCash] + PlayerInfo[playerid][pBank];

    foreach(new i : House)
    {
        if(HouseInfo[i][hExists] && PlayerInfo[playerid][pID] == HouseInfo[i][hOwnerID])
        {
            totalwealth += HouseInfo[i][hCash];
		}
	}

 	foreach(new i : Business)
    {
        if(BusinessInfo[i][bExists] && PlayerInfo[playerid][pID] == BusinessInfo[i][bOwnerID])
        {
            totalwealth += BusinessInfo[i][bCash];
		}
	}

	switch(PlayerInfo[playerid][pJailType])
	{
	    case 0: jailtype = "Khong";
	    case 1: jailtype = "OOC jail";
	    case 2: jailtype = "OOC prison";
	    case 3: jailtype = "IC prison";
	}

	SendClientMessageEx(targetid, 0x7514F6FF, "____________________ %s [%s] ____________________", name, GetDate());
	SendClientMessageEx(targetid, COLOR_WHITE, "Cap do: %i - Gioi tinh: %s - Tuoi: %i - Tien: %s - Ngan hang: %s - Gio: %s - Dien thoai: %i", PlayerInfo[playerid][pLevel], gender, PlayerInfo[playerid][pAge], FormatNumber(PlayerInfo[playerid][pCash]), FormatNumber(PlayerInfo[playerid][pBank]), FormatNumber(PlayerInfo[playerid][pHours], 0), PlayerInfo[playerid][pPhone]);
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Tong so tien: %s - Gio choi: %s/%s - Diem nang cap: %i", FormatNumber(totalwealth), FormatNumber(PlayerInfo[playerid][pHours], 0), FormatNumber((PlayerInfo[playerid][pLevel] * 5), 0), PlayerInfo[playerid][pUpgradePoints]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Inventory Skill: %i/5 - Addict Skill: %i/3 - Trader Skill: %i/3 - Asset Skill: %i/4 - Labor Skill: %i/5", PlayerInfo[playerid][pInventoryUpgrade], PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pLaborUpgrade]);
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Cong viec: %s - Pham toi: %s - Bi bat: %s - Truy na: %i", job, FormatNumber(PlayerInfo[playerid][pCrimes], 0), FormatNumber(PlayerInfo[playerid][pArrested], 0), PlayerInfo[playerid][pWantedLevel]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Canh cao: %i - DM Warnings: %i/3 - Report Warnings: %i/3 - Han che vu khi: %i gio", PlayerInfo[playerid][pWarnings], PlayerInfo[playerid][pDMWarnings], PlayerInfo[playerid][pReportWarns], PlayerInfo[playerid][pWeaponRestricted]);
    SendClientMessageEx(targetid, COLOR_NAVYBLUE, "To chuc: %s - Cap bac: %s - Don vi: %s - Bang dang: %s - Cap bac: %s - Nhom: %s", faction, facrank, division, gang, gangrank, gangcrew);
	SendClientMessageEx(targetid, COLOR_WHITE, "Lanh luong: %s - Bao hiem: %s - Kenh: %i - Cookies: %s - Goi VIP: %s", FormatNumber(PlayerInfo[playerid][pPaycheck]), insurance, PlayerInfo[playerid][pChannel], FormatNumber(PlayerInfo[playerid][pCookies], 0), GetVIPRank(PlayerInfo[playerid][pVIPPackage]));
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Thoi gian choi: %i - Jail Type: %s - Jail Time: %s giay - Double XP: %i gio", PlayerInfo[playerid][pMinutes], jailtype, FormatNumber(PlayerInfo[playerid][pJailTime], 0), PlayerInfo[playerid][pDoubleXP]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Ket hon: %s", PlayerInfo[playerid][pMarriedName]);
	//PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnArmor], maxarmor, insurance);

	/*SendClientMessageEx(targetid, COLOR_WHITE, "Level: %i - Gender: %s - Age: %i - Cash: %s - Bank: %s - Hours: %i - Ph: %i", PlayerInfo[playerid][pLevel], gender, PlayerInfo[playerid][pAge], FormatNumber(PlayerInfo[playerid][pCash]), FormatNumber(PlayerInfo[playerid][pBank]), PlayerInfo[playerid][pHours], PlayerInfo[playerid][pPhone]);
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Total Wealth: %s - Experience: %i/%i - Next Level: %s - Upgrade Points: %i", FormatNumber(PlayerInfo[playerid][pCash] + PlayerInfo[playerid][pBank]), PlayerInfo[playerid][pEXP], (PlayerInfo[playerid][pLevel] * 4), FormatNumber((PlayerInfo[playerid][pLevel] + 1) * 5000), PlayerInfo[playerid][pUpgradePoints]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Inventory Skill: %i/5 - Addict Skill: %i/3 - Trader Skill: %i/3 - Asset Skill: %i/4 - Labor Skill: %i/5", PlayerInfo[playerid][pInventoryUpgrade], PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pLaborUpgrade]);
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Job: %s - Job Level: %i - Crimes Commited: %i - Times Arrested: %i - Wanted Level: %i", GetJobName(PlayerInfo[playerid][pJob]), GetJobLevel(playerid, PlayerInfo[playerid][pJob]), PlayerInfo[playerid][pCrimes], PlayerInfo[playerid][pArrested], PlayerInfo[playerid][pWantedLevel]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Warnings: %i - Spawn Health: %.1f/100.0 - Spawn Armor: %.1f/%.1f - Insurance: %s", PlayerInfo[playerid][pWarnings], PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnArmor], maxarmor, insurance);
    SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Faction: %s - Rank: %s - Division: %s - Gang: %s - Rank: %s", faction, facrank, division, gang, gangrank);
	SendClientMessageEx(targetid, COLOR_WHITE, "Paycheck: %s - Minutes Played: %i/25 - Channel: %i - Cookies: %i - VIP Package: %s", FormatNumber(PlayerInfo[playerid][pPaycheck]), PlayerInfo[playerid][pMinutes], PlayerInfo[playerid][pChannel], PlayerInfo[playerid][pCookies], GetVIPRank(PlayerInfo[playerid][pVIPPackage]));
	SendClientMessageEx(targetid, COLOR_NAVYBLUE, "Second Job: %s - DM Warnings: %i/5 - Report Warnings: %i/3 - Weapon Restriction: %i hours", GetJobName(PlayerInfo[playerid][pSecondJob]), PlayerInfo[playerid][pDMWarnings], PlayerInfo[playerid][pReportWarns], PlayerInfo[playerid][pWeaponRestricted]);*/

	if(PlayerInfo[targetid][pAdmin] > 0)
	{
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "Interior: %i - Virtual: %i - FPS: %i - AFK: %s - Reports: %s - Help Requests: %s - Newbie Replies: %s", (playerid == MAX_PLAYERS) ? (PlayerInfo[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (PlayerInfo[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)), (playerid == MAX_PLAYERS) ? (0) : (PlayerInfo[playerid][pFPS]), (playerid == MAX_PLAYERS) ? ("No") : ((PlayerInfo[playerid][pAFK]) ? ("Yes") : ("No")),
			FormatNumber(PlayerInfo[playerid][pReports], 0), FormatNumber(PlayerInfo[playerid][pHelpRequests], 0), FormatNumber(PlayerInfo[playerid][pNewbies], 0));
	}

	/*if(playerid == targetid) {
	    SendClientMessage(targetid, COLOR_LIGHTORANGE, "** For a list of items and their capacities in your inventory, use /(inv)entory.");
	} else if(playerid != MAX_PLAYERS) {
	    SendClientMessageEx(targetid, COLOR_LIGHTORANGE, "** For a list of items and their capacities in their inventory, use /checkinv %i.", playerid);
	}*/
}


ShowDialogToPlayer(playerid, dialogid)
{
	new string[2048];

	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
        	format(string, sizeof(string), "{FFFFFF}Chao mung toi {F53F3F}}NewCity Roleplay, {FFFFFF}%s.\nCac luu y can biet khi tham gia may chu:\n- May chu theo the loai RP, nen ban can nam ro ve luat RP.\n\
        	- Hay co y thuc khi tham gia may chi New City.\n\
        	- Neu cac thac mac gi hay lien he den quan tri vien.\n\
        	- Trang chu: New-City.Net\n\
        	{F53F3F}Vui long nhap mat khau cua ban duoi day de tien hanh dang ky.", GetPlayerNameEx(playerid));
       		ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "{F53F3F}NewCity Roleplay | Dang Ky", string, "Dang ky", "Thoat");
			/*TextDrawShowForPlayer(playerid, LoginTD[0]);
     		TextDrawShowForPlayer(playerid, LoginTD[1]);
     		TextDrawShowForPlayer(playerid, LoginTD[2]);
     		TextDrawShowForPlayer(playerid, LoginTD[3]);*/
			PlayerInfo[playerid][pLevel] = 1;

}		case DIALOG_LOGIN:
		{
		    format(string, sizeof(string), "{FFFFFF}Chao mung tro lai {F53F3F}New City Roleplay, {FFFFFF}%s.\nBan co: %i lan thu\nHay nhap mat khau cua ban ben duoi de dang nhap:", GetPlayerNameEx(playerid), 3 - PlayerInfo[playerid][pLoginTries]);
     		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "{F53F3F}New City Roleplay | Dang Nhap", string, "Dang Nhap", "Thoat");
			/*TextDrawShowForPlayer(playerid, LoginTD[0]);
     		TextDrawShowForPlayer(playerid, LoginTD[1]);
     		TextDrawShowForPlayer(playerid, LoginTD[2]);
     		TextDrawShowForPlayer(playerid, LoginTD[3]);*/
		}
		case DIALOG_GENDER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, "Gioi tinh nhan vat cua ban la gi?", "Nam\nNu", "Chon", "");
		}
		case DIALOG_AGE:
		{
	   		ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Nhan vat cua ban bao nhieu tuoi?", "Vui long nhap do tuoi cua nhan vat ban (10-99):", "Gui", "Tro lai");
		}
		case DIALOG_REFERRAL:
		{
		    ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, "Ban da duoc ai gioi thieu den day?", "Vui long nhap ten nguoi da gioi thieu ban den day:\n(Ban co the nhap 'Bo Qua' neu khong co ai.)", "Gui", "Bo qua");
		}
		case DIALOG_BUYFURNITURETYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYFURNITURETYPE, DIALOG_STYLE_LIST, "Chon phuong phap duyet Web.", "Duyet theo mo hinh\nDuyet theo danh sach", "Chon", "Huy bo");
		}
		case DIALOG_BUYFURNITURE1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }

		    ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE1, DIALOG_STYLE_LIST, "Chon mot danh muc de duyet.", string, "Chon", "Tro lai");
		}
		case DIALOG_BUYFURNITURE2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[PlayerInfo[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s (%s)", string, furnitureArray[i][fName], FormatNumber(furnitureArray[i][fPrice]));
                }
            }

            PlayerInfo[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE2, DIALOG_STYLE_LIST, "Chon mot muc de xem truoc no.", string, "Chon", "Tro lai");
		}
		case DIALOG_ATM:
		{
		    format(string, sizeof(string), "Ban muon lam gi hom nay? (So du tai khoan la %s.)", FormatNumber(PlayerInfo[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, string, "Gui tien\nRut tien", "Chon", "Huy bo");
		}
		case DIALOG_ATMDEPOSIT:
		{
		    format(string, sizeof(string), "Ban muon gui bao nhieu? (So du tai khoan la %s.)", FormatNumber(PlayerInfo[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMDEPOSIT, DIALOG_STYLE_INPUT, "ATM | Gui tien", string, "Chon", "Huy bo");
		}
		case DIALOG_ATMWITHDRAW:
		{
		    format(string, sizeof(string), "Ban muon rut bao nhieu? (So du tai khoan la %s.)", FormatNumber(PlayerInfo[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMWITHDRAW, DIALOG_STYLE_INPUT, "ATM | Rut tien", string, "Chon", "Huy bo");
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGTYPE, DIALOG_STYLE_LIST, "Chon mot phuong phap duyet.", "Duyet theo mo hinh\nDuyet theo danh sach", "Chon", "Tro lai");
		}
		case DIALOG_BUYCLOTHING:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(clothingArray); i ++)
            {
                if(!strcmp(clothingArray[i][clothingType], clothingTypes[PlayerInfo[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s", string, clothingArray[i][clothingName]);
                }
            }

            PlayerInfo[playerid][pClothingIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYCLOTHING, DIALOG_STYLE_LIST, "Chon mot muc de xem truoc no.", string, "Chon", "Tro lai");
		}
		case DIALOG_BUYCLOTHES:
		{
			new businessid = GetInsideBusiness(playerid);

			if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
			{
			    format(string, sizeof(string), "%s's %s [%i san pham]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				if(PlayerInfo[playerid][pVIPPackage] > 0) {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "GHI CHU: Quan ao moi mien phi cho thanh vien VIP.\n\nVui long nhap ID skin ban muon.\n(( Danh sach: http://wiki.sa-mp.com/wiki/Skins:All ))", "Gui", "Huy bo");
				} else {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "GHI CHU: Quan ao moi voi gia $70.\n\nVui long nhap ID skin ban muon.\n(( Danh sach: http:/sampwiki.blast.hk/wiki/Skins:All ))", "Gui", "Huy bo");
				}
			}
		}
		case DIALOG_BUYVEHICLE:
		{
		    string = "The loai\tPhuong tien\tGia";

			for(new i = 0; i < sizeof(vehicleArray); i ++)
	  		{
	  		    if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0)
	  		    {
		    		format(string, sizeof(string), "%s\n%s\t%s\t{00AA00}%s{FFFFFF}", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
				}
			}

			PlayerInfo[playerid][pGangCar] = 0;
			ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Mua", "Huy bo");
		}
		case DIALOG_BUYBOAT:
		{
		    string = "Phuong tien\tGia";

		    for(new i = 0; i < sizeof(vehicleArray); i ++)
	  		{
	  		    if(!strcmp(vehicleArray[i][carCategory], "Boats"))
	  		    {
		    		format(string, sizeof(string), "%s\n%s\t{00AA00}%s{FFFFFF}", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
				}
			}

			ShowPlayerDialog(playerid, DIALOG_BUYBOAT, DIALOG_STYLE_TABLIST_HEADERS, "Boat Dealership", string, "Mua", "Huy bo");
		}
		case DIALOG_BUYAIRCRAFT:
		{
		    string = "Phuong tien\tGia";

		    for(new i = 0; i < sizeof(vehicleArray); i ++)
	  		{
	  		    if(!strcmp(vehicleArray[i][carCategory], "Aircraft"))
	  		    {
		    		format(string, sizeof(string), "%s\n%s\t{00AA00}%s{FFFFFF}", string, vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][carPrice]));
				}
			}

			ShowPlayerDialog(playerid, DIALOG_BUYAIRCRAFT, DIALOG_STYLE_TABLIST_HEADERS, "Aircraft Dealership", string, "Mua", "Huy bo");
		}
		case DIALOG_FACTIONPAY1:
		{
		    string = "#\tRank\tPaycheck";

		    for(new i = 0; i < FactionInfo[PlayerInfo[playerid][pFactionEdit]][fRankCount]; i ++)
		    {
		        format(string, sizeof(string), "%s\n%i\t%s\t{00AA00}%s{FFFFFF}", string, i, FactionRanks[PlayerInfo[playerid][pFactionEdit]][i], FormatNumber(FactionInfo[PlayerInfo[playerid][pFactionEdit]][fPaycheck][i]));
			}
			new header[128];
			format(header, sizeof(header), "%s - {FFD700}$%i kha dung/$%i ngan sach", FactionInfo[PlayerInfo[playerid][pFactionEdit]][fName], FormatNumber(FactionInfo[PlayerInfo[playerid][pFactionEdit]][fFund] - GetTotalFactionPay(PlayerInfo[playerid][pFactionEdit])), FormatNumber(FactionInfo[PlayerInfo[playerid][pFactionEdit]][fFund]));
			ShowPlayerDialog(playerid, DIALOG_FACTIONPAY1, DIALOG_STYLE_TABLIST_HEADERS, header, string, "Thay doi", "Huy bo");
		}
		case DIALOG_PHONEBOOK:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phonebook ORDER BY name ASC LIMIT %i, %i", (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_NUMBERS, MAX_LISTED_NUMBERS);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_PHONEBOOK, playerid);
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LANDBUILDTYPE, DIALOG_STYLE_LIST, "Chon phuong phap duyet web cua ban.", "Duyet theo mo hinh\nDuyet theo danh sach", "Chon", "Tro lai");
		}
  		case DIALOG_LANDBUILD1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }

		    ShowPlayerDialog(playerid, DIALOG_LANDBUILD1, DIALOG_STYLE_LIST, "Chon mot danh muc de duyet.", string, "Chon", "Tro lai");
		}
		case DIALOG_LANDBUILD2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[PlayerInfo[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s (%s)", string, furnitureArray[i][fName], FormatNumber(furnitureArray[i][fPrice]));
                }
            }

            PlayerInfo[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_LANDBUILD2, DIALOG_STYLE_LIST, "Chon mot danh muc de duyet.", string, "Chon", "Tro lai");
		}
		case DIALOG_LANDMENU:
		{
		    new
		        landid = GetNearbyLand(playerid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_MAINMENU, playerid);
		}
		case DIALOG_LANDOBJECTMENU:
		{
	        if(IsGateObject(PlayerInfo[playerid][pSelected]))
	        {
		        ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Chon cach ban muon chinh sua doi tuong nay.", "Chinh sua doi tuong\nChinh sua diem den\nBan sao doi tuong\nBan doi tuong", "Chon", "Tro lai");
	        }
			else
			{
                ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Chon cach ban muon chinh sua doi tuong nay.", "Chinh sua doi tuong\nBan sao doi tuong\nBan duoi tuong", "Chon", "Tro lai");
	        }
		}
		case DIALOG_LANDOBJECTS:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid >= 0 && HasLandPerms(playerid, landid))
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i ORDER BY id DESC LIMIT %i, %i", LandInfo[landid][lID], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_OBJECTS, MAX_LISTED_OBJECTS);
   				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_LANDOBJECTS, playerid);
			}
		}
		case DIALOG_MP3PLAYER:
		{
 	 		 ShowPlayerDialog(playerid, DIALOG_MP3PLAYER, DIALOG_STYLE_LIST, "MP3 player", "Tuy chinh URL\nNhac da tai len\nDai phat thanh\nDung nhac\nNhac VIP", "Chon", "Huy bo");
  		}
		case DIALOG_MP3RADIO:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIO, DIALOG_STYLE_LIST, "Radio Stations", "Duyet qua cac the loai\nTim kiem ten", "Chon", "Tro lai");
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    new genre[32] = "n/a";

		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(strcmp(radioGenreList[i][rGenre], genre) != 0)
		        {
		            strcpy(genre, radioGenreList[i][rGenre]);
		            strcat(string, genre);
		            strcat(string, "\n");
		        }
		    }

		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOGENRES, DIALOG_STYLE_LIST, "Chon mot the loai de duyet cac dai trong.", string, "Chon", "Tro lai");
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(!strcmp(radioGenreList[i][rGenre], PlayerInfo[playerid][pGenre]))
		        {
		            format(string, sizeof(string), "%s\n%s", string, radioGenreList[i][rSubgenre]);
		        }
			}

			ShowPlayerDialog(playerid, DIALOG_MP3RADIOSUBGENRES, DIALOG_STYLE_LIST, "Chon mot nhanh con de duyet cac dai trong.", string, "Chon", "Tro lai");
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(PlayerInfo[playerid][pSearch])
		    {
		        mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE name LIKE '%%%e%%' OR subgenre LIKE '%%%e%%' ORDER BY name LIMIT %i, %i", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pGenre], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(radioConnectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}
			else
			{
			    mysql_format(radioConnectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM radiostations WHERE genre = '%e' AND subgenre = '%e' ORDER BY name LIMIT %i, %i", PlayerInfo[playerid][pGenre], PlayerInfo[playerid][pSubgenre], (PlayerInfo[playerid][pPage] - 1) * MAX_LISTED_STATIONS, MAX_LISTED_STATIONS);
				mysql_tquery(radioConnectionID, queryBuffer, "Radio_ListStations", "i", playerid);
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOSEARCH, DIALOG_STYLE_INPUT, "Tim kiem ten", "Nhap ten day du hoac mot phan cua dai phat thanh:", "Gui", "Tro lai");
		}
		/*case DIALOG_MP3APISEARCH:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3APISEARCH, DIALOG_STYLE_INPUT, "Search by Name", "Enter the full or partial name of the radio station:", "Gui", "Tro lai");
		}*/
		case DIALOG_GANGSTASH:
		{
		    format(string, sizeof(string), "Gang stash ($%i/$%i)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASH, DIALOG_STYLE_LIST, string, "Vu khi\nThuoc\nQuan ao\nTien", "Chon", "Huy bo");
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
		    format(string, sizeof(string), "[%i] 9mm (R%i+)\n[%i] Sdpistol (R%i+)\n[%i] Deagle (R%i+)\n[%i] Shotgun (R%i+)\n[%i] SPAS-12 (R%i+)\n[%i] Tec-9 (R%i+)\n[%i] Micro Uzi (R%i+)\n[%i] MP5 (R%i+)\n[%i] AK-47 (R%i+)\n[%i] M4 (R%i+)\n[%i] Rifle (R%i+)\n[%i] Sniper (R%i+)",
		        GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_9MM], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_9MM],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_SDPISTOL],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_DEAGLE],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_SHOTGUN],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_SPAS12],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_TEC9], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_TEC9],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_UZI], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_UZI],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_MP5], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_MP5],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_AK47], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_AK47],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_M4], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_M4],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_RIFLE],
				GangInfo[PlayerInfo[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER], GangInfo[PlayerInfo[playerid][pGang]][gWeaponRanks][GANGWEAPON_SNIPER]);
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS1, DIALOG_STYLE_LIST, "Gang stash | Weapons", string, "Chon", "Tro lai");
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    format(string, sizeof(string), "Weed (%i/%ig)\nCocaine (%i/%ig)\nMeth (%i/%ig)\nPainkillers (%i/%i)",
				GangInfo[PlayerInfo[playerid][pGang]][gWeed], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerInfo[playerid][pGang]][gCocaine], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH), GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS1, DIALOG_STYLE_LIST, "Gang stash | Thuoc", string, "Chon", "Tro lai");
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Weed", "Lay\nCat", "Chon", "Tro lai");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Cocaine", "Lay\nCat", "Chon", "Tro lai");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Meth", "Lay\nCat", "Chon", "Tro lai");
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang stash | Painkillers", "Lay\nCat", "Chon", "Tro lai");
			}
		}
		case DIALOG_GANGSTASHCASH:
		{
		    format(string, sizeof(string), "Rut tien ($%i/$%i)\nCat tien", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
  			ShowPlayerDialog(playerid, DIALOG_GANGSTASHCASH, DIALOG_STYLE_LIST, "Gang stash | Tien", string, "Chon", "Tro lai");
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "Ban muon lay bao nhieu Weeds? (Ket sat chua %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gWeed], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "Ban muon lay bao nhieu Cocaine? (Ket sat chua %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gCocaine], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "Ban muon lay bao nhieu Meth? (Ket sat chua %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "Ban muon lay bao nhieu Painkillers? (Ket sat chua %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "Ban muon lay bao nhieu tien? (Ket sat chua $%i/$%i.)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
			}
			ShowPlayerDialog(playerid, DIALOG_GANGWITHDRAW, DIALOG_STYLE_INPUT, "Gang stash | Lay", string, "Gui", "Tro lai");
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "Ban muon cat bao nhieu Weeds? (Ket sat chua %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gWeed], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "Ban muon cat bao nhieu Cocaine? (Ket sat chua %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gCocaine], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "Ban muon cat bao nhieu Meth? (Ket sat chua %i/%i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_METH));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "Ban muon cat bao nhieu Painkillers? (Ket sat chua %i/%i.)", GangInfo[PlayerInfo[playerid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(PlayerInfo[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "Ban muon cat bao nhieu tien? (Ket sat chua $%i/$%i.)", GangInfo[PlayerInfo[playerid][pGang]][gCash], GetGangStashCapacity(PlayerInfo[playerid][pGang], STASH_CAPACITY_CASH));
		    }
			ShowPlayerDialog(playerid, DIALOG_GANGDEPOSIT, DIALOG_STYLE_INPUT, "Gang stash | Cat", string, "Gui", "Tro lai");
		}
		case DIALOG_GANGARMSPRICES:
		{

			format(string, sizeof(string), "#\tWeapons\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 vat lieu\n2\tTec-9\t$%i\t500 vat lieu\n3\tMP5\t$%i\t1000 vat lieu\n4\tDesert Eagle\t$%i\t2000 vat lieu\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 vat lieu\n7\tM4\t$%i\t4000 vat lieu\n8\tSniper\t$%i\t6500 vat lieu\n9\tSawnoff Shotgun\t$%i\t3000 vat lieu",
   			GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][0], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][1], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][2], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][3], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][4], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][5], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][6], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][7], GangInfo[PlayerInfo[playerid][pGang]][gArmsPrices][8]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Chon gia vu khi de chinh sua.", string, "Thay doi", "Tro lai");
		}
		case DIALOG_GANGARMSDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGARMSDEALER, DIALOG_STYLE_LIST, "Buon ban vu khi", "Mua Vu khi\nChinh sua", "Chon", "Huy bo");
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    new
		        title[48];

		    format(title, sizeof(title), "Vu khi bang dang (Vat lieu co san: %i.)", GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsMaterials]);

		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 vat lieu\n2\tTec-9\t$%i\t500 vat lieu\n3\tMP5\t$%i\t1000 vat lieu\n4\tDesert Eagle\t$%i\t2000 vat lieu\n5\tMolotov\t$%i\t5000 vat lieu\n6\tAK-47\t$%i\t3000 vat lieu\n7\tM4\t$%i\t4000 vat lieu\n8\tSniper\t$%i\t6500 vat lieu\n9\tSawnoff Shotgun\t$%i\t3000 vat lieu",
		        GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][0], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][1], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][2], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][3], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][4], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][5], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][6], GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][7],
				GangInfo[PlayerInfo[playerid][pDealerGang]][gArmsPrices][8]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWEAPONS, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Mua", "Tro lai");
		}
		case DIALOG_GANGARMSEDIT:
		{
			format(string, sizeof(string), "Dai ly vu khi (Vat lieu co san %i.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSEDIT, DIALOG_STYLE_LIST, string, "Chinh sua gia\nGui vat lieu\nRut vat lieu", "Chon", "Tro lai");
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
			format(string, sizeof(string), "Ban muon gui bao nhieu vat lieu? (Dai ly vu khi nay chua %i vat lieu.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSDEPOSITMATS, DIALOG_STYLE_INPUT, "Arms dealer | Gui", string, "Gui", "Tro lai");
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
			format(string, sizeof(string), "Ban muon rut bao nhieu vat lieu? (Dai ly vu khi nay chua %i vat lieu.)", GangInfo[PlayerInfo[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWITHDRAWMATS, DIALOG_STYLE_INPUT, "Arms dealer | Rut", string, "Gui", "Tro lai");
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nWeed\t$%i\t%i grams\nCocaine\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugWeed], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCocaine], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGSHOP, DIALOG_STYLE_TABLIST_HEADERS, "Drug dealer", string, "Mua", "Tro lai");
		}
		case DIALOG_GANGDRUGBUY:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Bao muon mua bao nhieu Weeds? (%s moi gram. %i grams co san.)", FormatNumber(GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][0]), GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugWeed]);
			} else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Ban muon mua bao nhieu Cocaine? (%s moi gram. %i grams co san.)", FormatNumber(GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][1]), GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugCocaine]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Ban muon mua bao nhieu Meth? (%s moi gram. %i grams co san.)", FormatNumber(GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugPrices][2]), GangInfo[PlayerInfo[playerid][pDealerGang]][gDrugMeth]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGBUY, DIALOG_STYLE_INPUT, "Drug dealer | Mua", string, "Gui", "Tro lai");
		}
		case DIALOG_GANGDRUGEDIT:
		{
			format(string, sizeof(string), "Drug dealer (Weed: %i) (Cocaine: %i) (Meth: %i)", GangInfo[PlayerInfo[playerid][pGang]][gDrugWeed], GangInfo[PlayerInfo[playerid][pGang]][gDrugCocaine], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGEDIT, DIALOG_STYLE_LIST, string, "Chinh sua gia\nGui thuoc\nLay thuoc", "Chon", "Tro lai");
		}
		case DIALOG_GANGDRUGPRICES:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nWeed\t$%i\t%i grams\nCocaine\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][0], GangInfo[PlayerInfo[playerid][pGang]][gDrugWeed], GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][1], GangInfo[PlayerInfo[playerid][pGang]][gDrugCocaine], GangInfo[PlayerInfo[playerid][pGang]][gDrugPrices][2], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Chon gia thuoc de chinh sua.", string, "Thay doi", "Tro lai");
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    format(string, sizeof(string), "Weed (%ig)\nCocaine (%ig)\nMeth (%ig)", GangInfo[PlayerInfo[playerid][pGang]][gDrugWeed], GangInfo[PlayerInfo[playerid][pGang]][gDrugCocaine], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSITS, DIALOG_STYLE_LIST, "Drug dealer | Gui", string, "Chon", "Tro lai");
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Ban muon gui bao nhieu Weeds? (Chua %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugWeed]);
		    } else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Ban muon gui bao nhieu Cocaine? (Chua %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugCocaine]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Ban muon gui bao nhieu Meth? (Chua %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSIT, DIALOG_STYLE_INPUT, "Drug dealer | Gui", string, "Gui", "Tro lai");
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    format(string, sizeof(string), "Weed (%ig)\nCocaine (%ig)\nMeth (%ig)", GangInfo[PlayerInfo[playerid][pGang]][gDrugWeed], GangInfo[PlayerInfo[playerid][pGang]][gDrugCocaine], GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAWS, DIALOG_STYLE_LIST, "Drug dealer | Lay", string, "Chon", "Tro lai");
		}
        case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(PlayerInfo[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "Ban muon lay bao nhieu Weeds? (Chua %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugWeed]);
		    } else if(PlayerInfo[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "Ban muon lay bao nhieu Cocaine? (Chua %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugCocaine]);
			} else if(PlayerInfo[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "Ban muon lay bao nhieu Meth? (Chua %i grams.)", GangInfo[PlayerInfo[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAW, DIALOG_STYLE_INPUT, "Drug dealer | Lay", string, "Gui", "Tro lai");
		}
		case DIALOG_CRACKTRUNK:
		{
		    if(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vWeed]/20 > 0) format(string, sizeof(string), "%s\nWeed (%ig)", string, VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vWeed]/20);
            if(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vCocaine]/20 > 0) format(string, sizeof(string), "%s\nCocaine (%ig)", string, VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vCocaine]/20);
            if(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vMeth]/20 > 0) format(string, sizeof(string), "%s\nMeth (%ig)", string, VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vMeth]/20);
            if(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vPainkillers]/20 > 0) format(string, sizeof(string), "%s\nPainkillers (%ig)", string, VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vPainkillers]/20);
            if(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vMaterials]/20 > 0) format(string, sizeof(string), "%s\nMaterials (%i)", string, VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vMaterials]/20);
            if(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vCash]/20 > 0) format(string, sizeof(string), "%s\nCash ($%i)", string, VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vCash]/20);

            for(new x = 0; x < 5; x ++)
			{
			    if(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vWeapons][x] != 0)
        		{
        		    format(string, sizeof(string), "%s\n%s", string, GetWeaponNameEx(VehicleInfo[PlayerInfo[playerid][pCocaineFrom]][vWeapons][x]));
                }
            }

            ShowPlayerDialog(playerid, DIALOG_CRACKTRUNK, DIALOG_STYLE_LIST, "Chon mot muc de lay tu cop xe.", string, "Lay", "Huy bo");
		}
		case DIALOG_RULES:
		{
		    ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_LIST, "Danh sach quy tac may chu", "Khong sua doi phan mem thu ba, chang han nhu gian lan\nKhong khai thac\nKhong co quang cao khong RP\nKhong death-match\nKhong spawn-killing\nKhong revenge-killing\nKhong non-RP car raming.\nKhong heli-blading\nKhong meta-gaming\nKhong money farming\nKhong noi doi quan tri vien\nChinh sach an cuop\nChinh sach lua dao\nDanh sach tat ca quy tac tai NewCity.com", "Dong", "");
		}
		case DIALOG_LOCATE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LOCATE, DIALOG_STYLE_LIST, "GPS - Chon diem den", "Vi tri Cong viec\nDoanh nghiep\nVi tri Chung\nTim dia ban\nTim diem\nVi tri khac\nXoa diem danh dau", "Chon", "Dong");
		}
		case DIALOG_FACTIONEQUIPMENT:
		{
			new lockerid = GetNearbyLocker(playerid);
	 		string = "Weapon\tPrice\n";
            if(LockerInfo[lockerid][locKevlar][0]) { format(string, sizeof(string), "%sKevlar Vest\t$%i\n", string, LockerInfo[lockerid][locKevlar][1]); }
            if(LockerInfo[lockerid][locMedKit][0]) { format(string, sizeof(string), "%sMedkit\t$%i\n", string, LockerInfo[lockerid][locMedKit][1]); }
            if(LockerInfo[lockerid][locNitestick][0]) { format(string, sizeof(string), "%sNitestick\t$%i\n", string, LockerInfo[lockerid][locNitestick][1]); }
            if(LockerInfo[lockerid][locMace][0]) { format(string, sizeof(string), "%sMace\t$%i\n", string, LockerInfo[lockerid][locMace][1]); }
            if(LockerInfo[lockerid][locDeagle][0]) { format(string, sizeof(string), "%sDeagle\t$%i\n", string, LockerInfo[lockerid][locDeagle][1]); }
            if(LockerInfo[lockerid][locShotgun][0]) { format(string, sizeof(string), "%sShotgun\t$%i\n", string, LockerInfo[lockerid][locShotgun][1]); }
            if(LockerInfo[lockerid][locMP5][0]) { format(string, sizeof(string), "%sMP5\t$%i\n", string, LockerInfo[lockerid][locMP5][1]); }
            if(LockerInfo[lockerid][locM4][0]) { format(string, sizeof(string), "%sM4\t$%i\n", string, LockerInfo[lockerid][locM4][1]); }
            if(LockerInfo[lockerid][locSpas12][0]) { format(string, sizeof(string), "%sSPAS-12\t$%i\n", string, LockerInfo[lockerid][locSpas12][1]); }
            if(LockerInfo[lockerid][locSniper][0]) { format(string, sizeof(string), "%sSniper\t$%i\n", string, LockerInfo[lockerid][locSniper][1]); }
            if(LockerInfo[lockerid][locCamera][0]) { format(string, sizeof(string), "%sCamera\t$%i\n", string, LockerInfo[lockerid][locCamera][1]); }
            if(LockerInfo[lockerid][locFireExt][0]) { format(string, sizeof(string), "%sFire Extinguisher\t$%i\n", string, LockerInfo[lockerid][locFireExt][1]); }
            if(LockerInfo[lockerid][locPainKillers][0]) { format(string, sizeof(string), "%sPainkillers\t$%i\n", string, LockerInfo[lockerid][locPainKillers][1]); }
			ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_TABLIST_HEADERS, "Locker", string, "Chon", "Huy bo");
		}
		case DIALOG_CREATEQUIZ:
		{
		    if(CreateQuiz == -1)
		    {
		        CreateQuiz = 0;
		    	ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Tao cua do - Nhap cau do", "Cau do nen la gi? (hien thi tren toan cau)", "Gui", "Tro lai");
			}
			if(CreateQuiz == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Tao cau do - Nhap cau tra loi", "Cau tra loi nen la gi? (hien thi khi da tra loi)", "Gui", "Tro lai");
			}
		}
		case DIALOG_DELETEOBJECT:
		{
			format(string, sizeof(string), "Doi tuong %i da duoc chon\n{FFFFFF}Ban co thuc su muon {FF0000}Xoa{FFFFFF} no?", PlayerInfo[playerid][pSelected]);
  			ShowPlayerDialog(playerid, DIALOG_DELETEOBJECT, DIALOG_STYLE_MSGBOX, "Delete Mode - Dynamic Object Selected", string, "Co", "Khong");
		}
		case DIALOG_PAINTBALL:
		{
		    string =  "Name\tType\tCurrent Players\n";
		    format(string, sizeof(string), "%sDeathmatch Arena\tFFA\t%i\n", string, GetArenaPlayers(1));
		    format(string, sizeof(string), "%sTeam Deathmatch Arena\tTDM\t%i\n", string, GetArenaPlayers(2));
		    format(string, sizeof(string), "%sDeagle Arena\t1Shot\t%i\n", string, GetArenaPlayers(3));
		    format(string, sizeof(string), "%sSniper Arena\t1Shot\t%i\n", string, GetArenaPlayers(4));
		    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Paintball", string, "Chon", "Huy bo");
		}
		case DIALOG_ADDSTATION:
		{
		    ShowPlayerDialog(playerid, DIALOG_ADDSTATION, DIALOG_STYLE_INPUT, "Quan ly dai phat thanh", "Nhap lien ket cua dai ban muon them", "Them", "Huy bo");
		}
		case DIALOG_REFUND:{
			ShowPlayerDialog(playerid, DIALOG_REFUND, DIALOG_STYLE_LIST, "Lua Chon Refund", "+3 EXP\n$15,000", "Ok", "");
		}
		case DIALOG_REFUND2:{
			ShowPlayerDialog(playerid, DIALOG_REFUND2, DIALOG_STYLE_LIST, "Lua Chon Refund", "PCJ\nPremier", "Ok", "");
		}
	}

	return 1;
}


GetArenaPlayers(arena)
{
	new players;
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPaintball] == arena)
	    {
	        players++;
	    }
	}
	return players;
}


SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SetSpawnInfo(playerid, NO_TEAM, PlayerInfo[playerid][pSkin], 820.5590, -1342.6283, 13.5216, 90.0000, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }

		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_NONE, PLAYER_STATE_WASTED:
		    {
			    SpawnPlayer(playerid);
			}
			default:
			{
			    OnPlayerSpawn(playerid);
			}
      	}
	}

	PlayerInfo[playerid][pACTime] = gettime() + 2;
}

SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:px,
	    Float:py,
	    Float:pz,
	    Float:tx,
	    Float:ty,
	    Float:tz;

	GetPlayerPos(targetid, tx, ty, tz);
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerFacingAngle(playerid, 180.0 - atan2(px - tx, py - ty));
}

forward SavePlayerVariables(playerid);
public SavePlayerVariables(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[playerid][pUndercover][0])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0) && !PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && !PlayerInfo[playerid][pAcceptedHelp] && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && PlayerInfo[playerid][pPreviewHouse] == -1)
		{
		    SavePlayerWeapons(playerid);

            GetPlayerCameraPos(playerid, PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY], PlayerInfo[playerid][pCameraZ]);
			GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);

			if(!PlayerInfo[playerid][pHHCheck])
			{
		        GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
		        GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
			}

	        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET camera_x = '%f', camera_y = '%f', camera_z = '%f', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f', armor = '%f', hunger = %i, thirsty = %i, minutes = %i, warnings = %i, injured = %i, hospital = %i, upgradepoints = %i, spawnhealth = '%f', spawnarmor = '%f', jailtype = %i, jailtime = %i WHERE uid = %i", PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY],
			PlayerInfo[playerid][pCameraZ], PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pWorld], PlayerInfo[playerid][pHealth], PlayerInfo[playerid][pArmor], PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pThirsty], PlayerInfo[playerid][pMinutes], PlayerInfo[playerid][pWarnings], PlayerInfo[playerid][pInjured], PlayerInfo[playerid][pHospital], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pSpawnHealth],
			PlayerInfo[playerid][pSpawnArmor], PlayerInfo[playerid][pJailType], PlayerInfo[playerid][pJailTime], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbiemuted = %i, helpmuted = %i, admuted = %i, livemuted = %i, globalmuted = %i, reportmuted = %i, reportwarns = %i, fightstyle = %i, cookies = %i, toggletextdraws = %i, toggleooc = %i, togglephone = %i, toggleadmin = %i, togglehelper = %i, togglenewbie = %i, togglewt = %i, togglevip = %i WHERE uid = %i", PlayerInfo[playerid][pNewbieMuted], PlayerInfo[playerid][pHelpMuted], PlayerInfo[playerid][pAdMuted],
			PlayerInfo[playerid][pLiveMuted], PlayerInfo[playerid][pGlobalMuted], PlayerInfo[playerid][pReportMuted], PlayerInfo[playerid][pReportWarns], PlayerInfo[playerid][pFightStyle], PlayerInfo[playerid][pCookies], PlayerInfo[playerid][pToggleTextdraws], PlayerInfo[playerid][pToggleOOC], PlayerInfo[playerid][pTogglePhone], PlayerInfo[playerid][pToggleAdmin], PlayerInfo[playerid][pToggleHelper], PlayerInfo[playerid][pToggleNewbie], PlayerInfo[playerid][pToggleWT],
			PlayerInfo[playerid][pToggleVIP], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toggleradio = %i, togglemusic = %i, togglefaction = %i, togglenews = %i, toggleglobal = %i, togglecam = %i, togglehud = %i, weedtime = %i, weedgrams = %i, showturfs = %i, showlands = %i, watchon = %i, gpson = %i, couriercooldown = %i, pizzacooldown = %i, detectivecooldown = %i, thiefcooldown = %i, crackcooldown = %i, duty = %i, bandana = %i WHERE uid = %i", PlayerInfo[playerid][pToggleRadio],
			PlayerInfo[playerid][pToggleMusic], PlayerInfo[playerid][pToggleFaction], PlayerInfo[playerid][pToggleNews], PlayerInfo[playerid][pToggleGlobal], PlayerInfo[playerid][pToggleCam], PlayerInfo[playerid][pToggleHUD], PlayerInfo[playerid][pWeedTime], PlayerInfo[playerid][pWeedGrams], PlayerInfo[playerid][pShowTurfs], PlayerInfo[playerid][pShowLands], PlayerInfo[playerid][pWatchOn], PlayerInfo[playerid][pGPSOn], PlayerInfo[playerid][pCourierCooldown], PlayerInfo[playerid][pPizzaCooldown],
			PlayerInfo[playerid][pDetectiveCooldown], PlayerInfo[playerid][pThiefCooldown], PlayerInfo[playerid][pCocaineCooldown], PlayerInfo[playerid][pDuty], PlayerInfo[playerid][pBandana], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET togglereports = %i, togglewhisper = %i, togglebug = %i, newbiemutetime = %i, reportmutetime = %i, globalmutetime = %i, adminhide = %i, totalpatients = %i, totalfires = %i, scanneron = %i, rarecooldown = %i WHERE uid = %i",
		    PlayerInfo[playerid][pToggleReports], PlayerInfo[playerid][pToggleWhisper], PlayerInfo[playerid][pToggleBug], PlayerInfo[playerid][pNewbieMuteTime], PlayerInfo[playerid][pReportMuteTime], PlayerInfo[playerid][pGlobalMuteTime], PlayerInfo[playerid][pAdminHide], PlayerInfo[playerid][pTotalPatients], PlayerInfo[playerid][pTotalFires], PlayerInfo[playerid][pScannerOn], PlayerInfo[playerid][pRareTime], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

SavePlayerWeapons(playerid)
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
	{
		// Saving weapons.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weapon_0 = %i, weapon_1 = %i, weapon_2 = %i, weapon_3 = %i, weapon_4 = %i, weapon_5 = %i, weapon_6 = %i, weapon_7 = %i, weapon_8 = %i, weapon_9 = %i, weapon_10 = %i, weapon_11 = %i, weapon_12 = %i WHERE uid = %i",
	        PlayerInfo[playerid][pWeapons][0], PlayerInfo[playerid][pWeapons][1], PlayerInfo[playerid][pWeapons][2], PlayerInfo[playerid][pWeapons][3], PlayerInfo[playerid][pWeapons][4], PlayerInfo[playerid][pWeapons][5], PlayerInfo[playerid][pWeapons][6], PlayerInfo[playerid][pWeapons][7], PlayerInfo[playerid][pWeapons][8], PlayerInfo[playerid][pWeapons][9], PlayerInfo[playerid][pWeapons][10], PlayerInfo[playerid][pWeapons][11], PlayerInfo[playerid][pWeapons][12], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

SendPaycheck(playerid)
{
    // Paycheck amounts are temporary until a job system is put in place.

	PlayerInfo[playerid][pPaycheck] += min(PlayerInfo[playerid][pLevel], 21) * 10;

    new paycheck = PlayerInfo[playerid][pPaycheck];
    new interest, rate;
    new tax = (paycheck / 100) * gTax; // gTax = tax
    new rent = 0, renting = -1; // temp
    new total = paycheck - tax;

    // If the player is a VIP, adjust his interest rate accordingly.
   	if(PlayerInfo[playerid][pVIPPackage] == 0)
	{
		rate = 1;
	}
	if(PlayerInfo[playerid][pVIPPackage] == 1)
	{
		rate = 3;
	}
	if(PlayerInfo[playerid][pVIPPackage] == 2)
	{
		rate = 6;
	}
	if(PlayerInfo[playerid][pVIPPackage] == 3)
	{
		rate = 8;
	}

	//Calculate the interest due.
	interest = (PlayerInfo[playerid][pBank] / 1000) * rate;

	if(PlayerInfo[playerid][pBasePaycheck] == 1) {
		PlayerInfo[playerid][pPizzasDelivered] = 0;
		PlayerInfo[playerid][pCourierDelivered] = 0;
		PlayerInfo[playerid][pBasePaycheck] = 0;
	}
	//If the calculated interest is above $25000, then we need to shut that shit down and set the interest to $25,000 to avoid the previous exploit.
	if(interest > 25000)
	{
	    interest = 25000;
	}

	total += interest;

 	if(PlayerInfo[playerid][pRentingHouse])
	{
		foreach(new i : House)
		{
		    if(HouseInfo[i][hExists] && HouseInfo[i][hID] == PlayerInfo[playerid][pRentingHouse] && HouseInfo[i][hRentPrice] > 0)
		    {
		        rent = HouseInfo[i][hRentPrice];
		        renting = i;
			}
		}
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____________ Lanh Luong _______________");
	SendClientMessageEx(playerid, COLOR_GREY2, "Lanh luong: {33CC33}+%s", FormatNumber(paycheck));

	if(PlayerInfo[playerid][pFaction] >= 0 && FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Luong to chuc: {33CC33}+%s", FormatNumber(FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]]));
	    total += FactionInfo[PlayerInfo[playerid][pFaction]][fPaycheck][PlayerInfo[playerid][pFactionRank]];
	}

	SendClientMessageEx(playerid, COLOR_GREY2, "Tien lai: {33CC33}+%s {C8C8C8}(ty le: %.1f) (toi da: $25,000)", FormatNumber(interest), floatdiv(float(rate), 10));
	SendClientMessageEx(playerid, COLOR_GREY2, "Thue: {FF6347}-%s {C8C8C8}(%i phan tram)", FormatNumber(tax), gTax);

	if(renting != -1)
	{
		if(total >= rent || PlayerInfo[playerid][pBank] >= rent)
		{
		    if(total >= rent)
	    	{
	        	total -= rent;
			}
			else
			{
		    	PlayerInfo[playerid][pBank] -= rent;
			}

			SendClientMessageEx(playerid, COLOR_GREY2, "Tra tien thue: {FF6347}-%s", FormatNumber(rent));
			HouseInfo[renting][hCash] += rent;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[renting][hCash], HouseInfo[renting][hID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    rent = -1;
		}
	}

	SendClientMessageEx(playerid, COLOR_GREY2, "Tai khoan cu: %s", FormatNumber(PlayerInfo[playerid][pBank]));
	SendClientMessage(playerid, COLOR_NAVYBLUE, "______________________________________");
	SendClientMessageEx(playerid, COLOR_GREY2, "Tai khoan moi: %s", FormatNumber(PlayerInfo[playerid][pBank] + total));
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da choi %i phut trong gio nay va kiem duoc tien luong cua minh.", PlayerInfo[playerid][pMinutes]);
    GiftAllowed = 1;
	if(rent == -1)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRentingHouse] = 0;
	    SendClientMessage(playerid, COLOR_RED, "Ban khong du kha nang tra tien thue nha	va ket qua la ban da bi duoi khoi nha.");
	}

	AddToTaxVault(tax);

	if((gDoubleXP) || PlayerInfo[playerid][pDoubleXP] > 0)
		PlayerInfo[playerid][pEXP] += 2;
	else
	    PlayerInfo[playerid][pEXP]++;

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    GiveGangPoints(PlayerInfo[playerid][pGang], 1);
	}

    PlayerInfo[playerid][pHours]++;
    PlayerInfo[playerid][pBank] += total;
    PlayerInfo[playerid][pMinutes] = 0;
    PlayerInfo[playerid][pPaycheck] = 0;


	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
	{
		PlayerInfo[playerid][pWeaponRestricted]--;
	}
	if((!gDoubleXP) && PlayerInfo[playerid][pDoubleXP] > 0)
	{
	    PlayerInfo[playerid][pDoubleXP]--;

	    if(PlayerInfo[playerid][pDoubleXP] > 0)
	        SendClientMessageEx(playerid, COLOR_YELLOW, "Double XP cua ban sap het han sau %i gio nua.", PlayerInfo[playerid][pDoubleXP]);
		else
		    SendClientMessage(playerid, COLOR_YELLOW, "Double XP cua ban da het han.");
	}

	if(PlayerInfo[playerid][pHours] >= 20)
	{
		AwardAchievement(playerid, "Regular");
	}
	if(PlayerInfo[playerid][pHours] >= 40)
	{
	    AwardAchievement(playerid, "Addicted");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET minutes = 0, hours = hours + 1, exp = %i, bank = %i, paycheck = 0, weaponrestricted = %i, doublexp = %i WHERE uid = %i", PlayerInfo[playerid][pEXP], PlayerInfo[playerid][pBank], PlayerInfo[playerid][pWeaponRestricted], PlayerInfo[playerid][pDoubleXP], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
    
    gTotalHours++;
    SaveServerInfo();
}

HangupCall(playerid, reason)
{
	new callerid = PlayerInfo[playerid][pCallLine];

	if(reason == HANGUP_DROPPED)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Cuoc goi da bi ngat...");
	}
	else
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhan mot nut va cup dien thoai cua ho.", GetPlayerRPName(playerid));
    	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da cup dien thoai va ket thuc cuoc goi.");

		if(callerid != playerid)
		{
			SendClientMessage(callerid, COLOR_LIGHTRED, "Ho cup may va ket thuc cuoc goi.");
		}
	}

	if(callerid != playerid)
	{
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE)
		{
		    SetPlayerSpecialAction(callerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}

		PlayerInfo[callerid][pCallStage] = 0;
		PlayerInfo[callerid][pCallLine] = INVALID_PLAYER_ID;
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	PlayerInfo[playerid][pCallStage] = 0;
	PlayerInfo[playerid][pCallLine] = INVALID_PLAYER_ID;
}

AddToTaxVault(amount)
{
	gVault += amount;
	SaveServerInfo();
}

SaveServerInfo()
{
    new File:file = fopen("server_info.ini", io_write);

    if(file)
    {
        new
			string[255];
        format(string, sizeof(string), "%i|%i|%i|%s|%s|%i|%i|%i|%i|%i|%i|%i|%i|%s|%s|%i|%i|%i|%i", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, gDoubleXP, RobberyInfo[rTime], adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gacooldown, gNewsVault);
        fwrite(file, string);
        fclose(file);
	}
}

LoadServerInfo()
{
	new File:file = fopen("server_info.ini", io_read);

	if(file)
	{
	    new string[255];

	    fread(file, string);
	    sscanf(string, "p<|>iiis[24]s[128]iiiiiiiis[128]s[128]iiii", gTax, gVault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, gDoubleXP, RobberyInfo[rTime], adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gacooldown, gNewsVault);
	    fclose(file);
	}

	if(gTax == 0)
	{
	    gTax = 10;
	}

	//SetDoubleXP(gDoubleXP);
}
/*
RefreshLoginScreen()
{
	new
	    string[80];

	mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LOGIN_UPDATE, 1);
	mysql_tquery(connectionID, "SELECT username, hours FROM users WHERE hours > 0 ORDER BY hours DESC LIMIT 10", "OnQueryFinished", "ii", THREAD_LOGIN_UPDATE, 2);

	if(gPlayerRecord)
	{
		format(string, sizeof(string), "So ky luc cua nguoi choi la %i, dat duoc tren %s.", gPlayerRecord, gRecordDate);
 		TextDrawSetString(LoginScreen[8], string);
	}
	else
	{
	    TextDrawSetString(LoginScreen[8], "Khong co so luong nguoi choi nao da duoc ghi lai.");
	}
}

RefreshTime()
{
	new hour, minute, string[12];

	gettime(hour, minute);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(TimeTD, string);
}
*/
GetBankRobbers()
{
	new count;

    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[rRobbers][i] = playerid;
	        PlayerInfo[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == playerid)
	    {
	        RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBankRobbers())
	{
	  	ResetRobbery();
	}
	else if(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BANK_ROBBERS; i ++)
	    {
	        if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[rRobbers][0] = RobberyInfo[rRobbers][i];
	            RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	            SendClientMessageEx(RobberyInfo[rRobbers][0], COLOR_AQUA, "Ban hien la lanh dao cua vu trom ngan hang nay!");
	            break;
			}
		}
	}

	PlayerInfo[playerid][pRobCash] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}


IsPlayerInBankRobbery(playerid)
{
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
	    	if(RobberyInfo[rRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

ResetEditing(playerid)
{
 	PlayerInfo[playerid][pEditRack] = -1;
	return 1;
}

ResetRobbery()
{
    if(RobberyInfo[rStarted])
	{
		SendClientMessageToAllEx(COLOR_AQUA, "Tin Nong: Vu cuop ngan hang da ket thuc. %s da bi danh cap tu ngan hang.", FormatNumber(RobberyInfo[rStolen]));
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo[rText][i]);
	    RobberyInfo[rText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
	    RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	}

    RobberyInfo[rTime] = 8;
    RobberyInfo[rPlanning] = 0;
    RobberyInfo[rStarted] = 0;
    RobberyInfo[rStolen] = 0;
    RobberyInfo[rObjects][0] = CreateDynamicObject(19799, 1678.248901, -988.194702, 671.695007, 0.000000, 0.000000, 0.000000);
    RobberyInfo[rObjects][1] = INVALID_OBJECT_ID;
}

ResetEvent()
{
	if(EventInfo[eReady] || EventInfo[eStarted])
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pJoinedEvent])
	        {
	            PlayerInfo[i][pJoinedEvent] = 0;
	            SetPlayerToSpawn(i);
			}
		}
	}

	for(new i = 0; i < 5; i ++)
	{
	    EventInfo[eWeapons][i] = 0;
	}

    EventInfo[eReady] = 0;
    EventInfo[eStarted] = 0;
    EventInfo[eLocked] = 0;
    EventInfo[eType] = 0;
    EventInfo[eJoinText] = 0;
    EventInfo[eHealth] = 100.0;
    EventInfo[eArmor] = 0.0;
    EventInfo[eInterior] = 0;
    EventInfo[eWorld] = 0;
    EventInfo[eNext] = 0;
    EventInfo[eCS] = 0;
    EventInfo[eQS] = 0;
    EventInfo[eHeal] = 0;

	for(new i = 0; i < 2; i ++)
	{
	    EventInfo[ePosX][i] = 0.0;
	    EventInfo[ePosY][i] = 0.0;
	    EventInfo[ePosZ][i] = 0.0;
	    EventInfo[ePosA][i] = 0.0;
	    EventInfo[eSkin][i] = 0;
	}
}

PreloadPlayerAnims(playerid)
{
    static const animLibraries[][] =
	{
		!"AIRPORT",    !"ATTRACTORS",   !"BAR", 		 !"BASEBALL",
		!"BD_FIRE",    !"BEACH",      	!"BENCHPRESS",   !"BF_INJECTION",
		!"BIKED", 	   !"BIKEH", 	    !"BIKELEAP", 	 !"BIKES",
		!"BIKEV", 	   !"BIKE_DBZ",     !"BMX", 		 !"BOMBER",
		!"BOX", 	   !"BSKTBALL",     !"BUDDY", 		 !"BUS",
		!"CAMERA", 	   !"CAR",          !"CARRY", 		 !"CAR_CHAT",
		!"CASINO",	   !"CHAINSAW",     !"CHOPPA", 		 !"CLOTHES",
		!"COACH", 	   !"COLT45",       !"COP_AMBIENT",  !"COP_DVBYZ",
		!"CRACK", 	   !"CRIB",         !"DAM_JUMP", 	 !"DANCING",
		!"DEALER", 	   !"DILDO",        !"DODGE", 	 	 !"DOZER",
		!"DRIVEBYS",   !"FAT",          !"FIGHT_B", 	 !"FIGHT_C",
		!"FIGHT_D",    !"FIGHT_E",      !"FINALE", 		 !"FINALE2",
		!"FLAME",      !"FLOWERS",      !"FOOD", 	 	 !"FREEWEIGHTS",
		!"GANGS",      !"GHANDS",       !"GHETTO_DB", 	 !"GOGGLES",
		!"GRAFFITI",   !"GRAVEYARD",    !"GRENADE", 	 !"GYMNASIUM",
		!"HAIRCUTS",   !"HEIST9",       !"INT_HOUSE", 	 !"INT_OFFICE",
		!"INT_SHOP",   !"JST_BUISNESS", !"KART", 		 !"KISSING",
		!"KNIFE",      !"LAPDAN1", 		!"LAPDAN2", 	 !"LAPDAN3",
		!"LOWRIDER",   !"MD_CHASE", 	!"MD_END", 	 	 !"MEDIC",
		!"MISC",       !"MTB", 			!"MUSCULAR", 	 !"NEVADA",
		!"ON_LOOKERS", !"OTB", 			!"PARACHUTE", 	 !"PARK",
		!"PAULNMAC",   !"PED", 			!"PLAYER_DVBYS", !"PLAYIDLES",
		!"POLICE",     !"POOL", 		!"POOR", 		 !"PYTHON",
		!"QUAD",       !"QUAD_DBZ", 	!"RAPPING", 	 !"RIFLE",
		!"RIOT",       !"ROB_BANK", 	!"ROCKET",	 	 !"RUSTLER",
		!"RYDER",      !"SCRATCHING", 	!"SHAMAL", 		 !"SHOP",
		!"SHOTGUN",    !"SILENCED", 	!"SKATE", 		 !"SMOKING",
		!"SNIPER",     !"SPRAYCAN", 	!"STRIP", 		 !"SUNBATHE",
		!"SWAT",       !"SWEET", 		!"SWIM", 		 !"SWORD",
		!"TANK",       !"TATTOOS",	 	!"TEC", 		 !"TRAIN",
		!"TRUCK",      !"UZI", 			!"VAN", 		 !"VENDING",
		!"VORTEX",     !"WAYFARER", 	!"WEAPONS", 	 !"WUZI",
		!"WOP",        !"GFUNK", 		!"RUNNINGMAN",   !"BLOWJOBZ",
		!"SAMP"
	};

	for(new i = 0; i < sizeof(animLibraries); i ++)
	{
	    ApplyAnimation(playerid, animLibraries[i], "null", 0.0, 0, 0, 0, 0, 0, 1);
	}
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);

	if(loop > 0 || freeze > 0)
	{
		PlayerInfo[playerid][pLoopAnim] = 1;

		if(!PlayerInfo[playerid][pToggleTextdraws])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
	}
}

PlayerUseAnims(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pLootTime] > 0)
	{
	    return 0;
	}

	return 1;
}

GetAvailableAttachedSlot(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        return i;
		}
	}

	return -1;
}


SetFreezePos(playerid, Float:x, Float:y, Float:z)
{
    if(PlayerInfo[playerid][pFreezeTimer] >= 0)
	{
		KillTimer(PlayerInfo[playerid][pFreezeTimer]);
	}

    PlayerInfo[playerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z);

    TogglePlayerControllable(playerid, false);
    GameTextForPlayer(playerid, "~w~Tai noi that...", 3000, 3);
}

IsPlayerChatActive(playerid)
{
	foreach(new i : Player)
	{
	    if(chattingWith[playerid]{i})
	    {
	        return 1;
		}
	}

	return 0;
}


PlayerHasJob(playerid, job)
{
    return (PlayerInfo[playerid][pJob] == job || PlayerInfo[playerid][pSecondJob] == job);
}

GetWeaponClipSize(weaponid)
{
    switch(weaponid)
    {
        case 22, 23:
			return 17;
        case 26:
            return 2;
        case 24, 27:
			return 7;
        case 28, 31, 32:
			return 50;
        case 29, 30:
			return 30;
    }

    return 0;
}

ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i < 13; i ++)
	{
	    PlayerInfo[playerid][pWeapons][i] = 0;
	    PlayerInfo[playerid][pTempWeapons][i] = 0;
	}

	PlayerInfo[playerid][pACTime] = gettime() + 2;
}

RemovePlayerWeapon(playerid, weaponid)
{
	// Reset the player's weapons.
	ResetPlayerWeapons(playerid);
	// Set the armed slot to zero.
	SetPlayerArmedWeapon(playerid, 0);
	// Set the weapon in the slot to zero.
	PlayerInfo[playerid][pACTime] = gettime() + 2;
	PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = 0;
	PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = 0;
	// Set the player's weapons.
	SetPlayerWeapons(playerid);
	// Save them to prevent rollbacks.
	SavePlayerWeapons(playerid);
}

GivePlayerWeaponEx(playerid, weaponid, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 29999);
	    }
		else
		{
			PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 23, 25, 28..34:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		PlayerInfo[playerid][pACTime] = gettime() + 2;
	}
}

GetScriptWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(PlayerHasWeapon(playerid, weaponid))
	{
	    return weaponid;
	}

	return 0;
}

PlayerHasWeapon(playerid, weaponid, bool:temp = false)
{
	switch(weaponid)
	{
	    case 0, 2, 40, 46:
	    {
	        return 1;
		}
	}

	if(weaponid == 23 && (PlayerInfo[playerid][pTazer] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT)))
	{
	    return 1;
	}

	if((temp) && PlayerInfo[playerid][pTempWeapons][weaponSlotIDs[weaponid]] == weaponid)
	{
	    return 1;
	}

	return PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] == weaponid;
}

SetPlayerWeapons(playerid)
{
	if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pJailType] && !PlayerInfo[playerid][pWeaponRestricted])
	{
		new weaponid = GetPlayerWeapon(playerid);

		ResetPlayerWeapons(playerid);

		for(new i = 0; i < 13; i ++)
		{
		    if(PlayerInfo[playerid][pWeapons][i] > 0)
		    {
		        if(i == 2 && PlayerInfo[playerid][pTazer])
		        {
		            GivePlayerWeaponEx(playerid, 23, true);
		            continue;
   	      	}

				if(16 <= PlayerInfo[playerid][pWeapons][i] <= 18)
			        GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 1);
			    else
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], 29999);
			}
		}

		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_DRIVER:
		    {
		        SetPlayerArmedWeapon(playerid, 0);
			}
			case PLAYER_STATE_PASSENGER:
			{
			    switch(weaponid)
			    {
			        case 22, 23, 25, 28..34:
			        {
			            SetPlayerArmedWeapon(playerid, weaponid);
					}
					default:
					{
					    SetPlayerArmedWeapon(playerid, 0);
					}
				}
			}
			default:
			{
			    SetPlayerArmedWeapon(playerid, weaponid);
		    }
		}
	}
}

SetPlayerClothing(playerid)
{
	// Reset any clothing that the player has on them.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}

	// Now, we reapply the clothing to the player.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
		{
		    if(ClothingInfo[playerid][i][cAttachedIndex] == -1)
		    {
			    ClothingInfo[playerid][i][cAttachedIndex] = GetAvailableAttachedSlot(playerid);
			}

		    if(ClothingInfo[playerid][i][cAttachedIndex] >= 0)
		    {
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex], ClothingInfo[playerid][i][cModel], ClothingInfo[playerid][i][cBone], ClothingInfo[playerid][i][cPosX], ClothingInfo[playerid][i][cPosY], ClothingInfo[playerid][i][cPosZ], ClothingInfo[playerid][i][cRotX], ClothingInfo[playerid][i][cRotY], ClothingInfo[playerid][i][cRotZ], ClothingInfo[playerid][i][cScaleX], ClothingInfo[playerid][i][cScaleY], ClothingInfo[playerid][i][cScaleZ]);
			}
			else
			{
			    // Clothing wasn't attached... slots are probably all full.
			    ClothingInfo[playerid][i][cAttached] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][i][cID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
	}

	PlayerInfo[playerid][pAwaitingClothing] = 0;
}

SetPlayerInPaintball(playerid, type)
{
    if(PlayerInfo[playerid][pPaintball] == 0)
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}
	if(type == 1)
	{
		new rand = random(sizeof(paintballFSpawns));
		SetPlayerPos(playerid, paintballFSpawns[rand][0], paintballFSpawns[rand][1], paintballFSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballFSpawns[rand][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 1;
	}
	else if(type == 2)
	{
		SetPlayerPos(playerid, paintballTSpawns[pbNext][0], paintballTSpawns[pbNext][1], paintballTSpawns[pbNext][2]);
		SetPlayerFacingAngle(playerid, paintballTSpawns[pbNext][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

	    SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 2;
		PlayerInfo[playerid][pPaintballTeam] = pbNext;
		if(!pbNext)
		{
		    pbNext = 1;
		}
		else
		{
		    pbNext = 0;
		}
	}
	else if(type == 3)
	{
	    new rand = random(sizeof(paintballDSpawns));
		SetPlayerPos(playerid, paintballDSpawns[rand][0], paintballDSpawns[rand][1], paintballDSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballDSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[0], 0xFFFF0096);

	    SetPlayerHealth(playerid, 25.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 24, true);

		PlayerInfo[playerid][pPaintball] = 3;
	}
	else if(type == 4)
	{
		new rand = random(sizeof(paintballSSpawns));
		SetPlayerPos(playerid, paintballSSpawns[rand][0], paintballSSpawns[rand][1], paintballSSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballSSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[1], 0xFFFF0096);

	    SetPlayerHealth(playerid, 38.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 34, true);

		PlayerInfo[playerid][pPaintball] = 4;
	}
}

SetPlayerInEvent(playerid)
{
    SavePlayerVariables(playerid);
	ResetPlayerWeapons(playerid);

	PlayerInfo[playerid][pJoinedEvent] = 1;
	PlayerInfo[playerid][pBandana] = 0;
	PlayerInfo[playerid][pDuty] = 0;

	if(EventInfo[eType] == 2)
	{
		PlayerInfo[playerid][pEventTeam] = EventInfo[eNext];

		if(EventInfo[eNext] == RED_TEAM) {
			EventInfo[eNext] = BLUE_TEAM;
		} else {
	    	EventInfo[eNext] = RED_TEAM;
		}

		if(PlayerInfo[playerid][pEventTeam] == RED_TEAM) {
		    GameTextForPlayer(playerid, "~w~Ban o trong~n~~r~Red Team", 3000, 4);
		} else if(PlayerInfo[playerid][pEventTeam] == BLUE_TEAM) {
		    GameTextForPlayer(playerid, "~w~Ban o trong~n~~b~Blue Team", 3000, 6);
		}
	}
	else
	{
	    PlayerInfo[playerid][pEventTeam] = 0;
	}

	for(new x = 0; x < 5; x ++)
    {
        if(EventInfo[eWeapons][x])
        {
            GivePlayerWeaponEx(playerid, EventInfo[eWeapons][x], true);
        }
    }

	SetPlayerPos(playerid, EventInfo[ePosX][PlayerInfo[playerid][pEventTeam]], EventInfo[ePosY][PlayerInfo[playerid][pEventTeam]], EventInfo[ePosZ][PlayerInfo[playerid][pEventTeam]]);
	SetPlayerFacingAngle(playerid, EventInfo[ePosA][PlayerInfo[playerid][pEventTeam]]);
	SetPlayerInterior(playerid, EventInfo[eInterior]);
	SetPlayerVirtualWorld(playerid, EventInfo[eWorld]);
	SetPlayerHealth(playerid, EventInfo[eHealth]);
	SetPlayerArmour(playerid, EventInfo[eArmor]);
	SetCameraBehindPlayer(playerid);

    if(EventInfo[eSkin][PlayerInfo[playerid][pEventTeam]])
	{
		SetPlayerSkin(playerid, EventInfo[eSkin][PlayerInfo[playerid][pEventTeam]]);
	}

	if(!isnull(EventInfo[eJoinText]))
	{
		GameTextForPlayer(playerid, EventInfo[eJoinText], 6000, 3);
	}

	if(EventInfo[eType] == 1 || EventInfo[eType] == 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "** Quy tac Su kien: Crackshooting %s, Quickswapping %s, Healing %s.", (EventInfo[eCS]) ? ("{FFD700}Duoc phep{FFFFFF}") : ("{FF6347}Khong duoc phep{FFFFFF}"), (EventInfo[eQS]) ? ("{FFD700}Duoc phep{FFFFFF}") : ("{FF6347}Khong duoc phep{FFFFFF}"), (EventInfo[eHeal]) ? ("{FFD700}Duoc phep{FFFFFF}") : ("{FF6347}Khong duoc phep{FFFFFF}"));
	}

	return 1;
}

SetPlayerInHospital(playerid, time = 15, type = -1)
{
    PlayerInfo[playerid][pHospitalType] = (type == -1) ? (random(2) + 1) : (type);
    PlayerInfo[playerid][pHospitalTime] = time;
    PlayerInfo[playerid][pHospital] = 1;

    TogglePlayerControllable(playerid, 0);
    SetPlayerDrunkLevel(playerid, 50000);
 	GameTextForPlayer(playerid, "~w~Phuc hoi...", 1500, 3);

    SetPlayerPos(playerid, -2276.3699, 102.5945, -3.8589);
    SetPlayerCameraPos(playerid, -2280.1226, 105.9459, -3.6012);
	SetPlayerCameraLookAt(playerid, -2279.2388, 105.4819, -3.9212);
    //SetPlayerCameraLookAt(playerid, -830.8118, -1360.3612, 87.0289);
	SetPlayerInterior(playerid, 0);
}

SetPlayerInJail(playerid)
{
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(PlayerInfo[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(PlayerInfo[playerid][pJailType] == 1) // OOC jail
	{
	    switch(random(4))
        {
            case 0:
			{
				SetFreezePos(playerid, 1602.0450, -1658.8871, 2107.7771);
			}
			case 1:
			{
				SetFreezePos(playerid, 1599.9978, -1658.8199, 2107.8081);
			}
			case 2:
			{
				SetFreezePos(playerid, 1604.1892, -1659.2753, 2107.6372);
			}
			case 3:
			{
				SetFreezePos(playerid, 1606.2102, -1659.5299, 2107.6372);
			}
		}

		SetPlayerFacingAngle(playerid, 0.0000);
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 99999);
		SetCameraBehindPlayer(playerid);
	}
	else if(PlayerInfo[playerid][pJailType] == 2) // OOC prison
	{
	    SetFreezePos(playerid, 1606.2102, -1659.5299, 2107.6372);
		SetPlayerFacingAngle(playerid, 36.0000);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 99999);
		SetCameraBehindPlayer(playerid);
	}
	else if(PlayerInfo[playerid][pJailType] == 3) // IC prison
	{
	    new index = random(sizeof(cellSpawns));

		SetFreezePos(playerid, cellSpawns[index][0], cellSpawns[index][1], cellSpawns[index][2]);
		SetPlayerFacingAngle(playerid, cellSpawns[index][3]);
		SetPlayerInterior(playerid, 2);
		SetPlayerVirtualWorld(playerid, GetStaticEntranceWorld("Police Department"));
		SetCameraBehindPlayer(playerid);
	}
}

NOPCheck(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && gettime() - PlayerInfo[playerid][pLastUpdate] < 3 && PlayerInfo[playerid][pAdmin] < 2)
	{
		if((testVehicles[0] <= vehicleid <= testVehicles[3]) && !PlayerInfo[playerid][pDrivingTest])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerInfo[playerid][pNOPTime]++;
	    }
	    else if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerInfo[playerid][pNOPTime]++;
	    }
	    else if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerInfo[playerid][pNOPTime]++;
	    }
	    else if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        RemovePlayerFromVehicle(playerid);
	        PlayerInfo[playerid][pNOPTime]++;
	    }
	    else if(PlayerInfo[playerid][pNOPTime] > 0)
	    {
            PlayerInfo[playerid][pNOPTime]--;
	    }

	    if(PlayerInfo[playerid][pNOPTime] >= 15)
	    {
	        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da bi kick vi nghi ngo NOP hacks.", GetPlayerRPName(playerid));
	        Log_Write("log_cheat", "%s (uid: %i) da bi kick vi nghi ngo NOP hacks.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
         	KickPlayer(playerid);
	    }
	}
}

AFKCheck(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:cx,
	    Float:cy,
	    Float:cz;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerCameraPos(playerid, cx, cy, cz);

	if(PlayerInfo[playerid][pAFKPos][0] == x && PlayerInfo[playerid][pAFKPos][1] == y && PlayerInfo[playerid][pAFKPos][2] == z && PlayerInfo[playerid][pAFKPos][3] == cx && PlayerInfo[playerid][pAFKPos][4] == cy && PlayerInfo[playerid][pAFKPos][5] == cz)
	{
		PlayerInfo[playerid][pAFKTime]++;

	    if(!PlayerInfo[playerid][pAFK] && PlayerInfo[playerid][pAFKTime] >= 60)
	    {
		    //SendClientMessage(playerid, COLOR_LIGHTORANGE, "** You are now marked as {00AA00}Away from keyboard{F7A763} as you haven't moved in one minute.");
			SendClientMessage(playerid, COLOR_LIGHTRED, "[AFK] Ban da duoc danh da la AFK vi ban da khong di chuyen trong mot phut.");
		    PlayerInfo[playerid][pAFK] = 1;
		}
	}
	else
	{
		if(PlayerInfo[playerid][pAFK])
		{
		    if(PlayerInfo[playerid][pAFKTime] < 120) {
		    	//SendClientMessageEx(playerid, COLOR_LIGHTORANGE, "** You are no longer marked as Away from Keyboard after %i seconds.", PlayerInfo[playerid][pAFKTime]);
		    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[AFK] Ban duoc danh dau da AFK trong %i giay.", PlayerInfo[playerid][pAFKTime]);
			} else {
			    //SendClientMessageEx(playerid, COLOR_LIGHTORANGE, "** You are no longer marked as Away from Keyboard after %i minutes.", PlayerInfo[playerid][pAFKTime] / 60);
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "[AFK] Ban duoc danh dau da AFK trong %i phut.", PlayerInfo[playerid][pAFKTime] / 60);
			}

			PlayerInfo[playerid][pAFK] = 0;
		}

		PlayerInfo[playerid][pAFKTime] = 0;
	}

	PlayerInfo[playerid][pAFKPos][0] = x;
	PlayerInfo[playerid][pAFKPos][1] = y;
	PlayerInfo[playerid][pAFKPos][2] = z;
	PlayerInfo[playerid][pAFKPos][3] = cx;
	PlayerInfo[playerid][pAFKPos][4] = cy;
	PlayerInfo[playerid][pAFKPos][5] = cz;
}

TeleportToVehicle(playerid, vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a,
		interior,
		garageid;

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	if((garageid = GetVehicleGarage(vehicleid)) >= 0)
	{
 		interior = garageInteriors[GarageInfo[garageid][gType]][intID];
	}

	TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
}

TeleportToPlayer(playerid, targetid, bool:vehicle = true)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	TeleportToCoords(playerid, x + 1, y + 1, z, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), .vehicle = vehicle);
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        GameTextForPlayer(playerid, "~w~Dang tai doi tuong...", 3000, 3);
        TogglePlayerControllable(playerid, 0);
	}
	new houseid;
	if((houseid = GetInsideHouse(playerid)) >= 0)
	{
		if(HouseInfo[houseid][hLights] == 1)
        {
            TextDrawHideForPlayer(playerid, houseLights);
        }
        else
        {
            TextDrawShowForPlayer(playerid, houseLights);
		}
	}
}

ShowLandsOnMap(playerid, enable)
{
	foreach(new i : Land)
	{
	    if(LandInfo[i][lExists])
	    {
		    if(enable) {
 				GangZoneShowForPlayer(playerid, LandInfo[i][lGangZone], (LandInfo[i][lOwnerID] > 0) ? (0xFF6347AA) : (0x33CC33AA));
			} else {
		    	GangZoneHideForPlayer(playerid, LandInfo[i][lGangZone]);
			}
		}
	}

	PlayerInfo[playerid][pShowLands] = enable;
}
ShowTurfsOnMap(playerid, enable)
{
 	foreach(new i : Turf)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(IsLawEnforcement(TurfInfo[i][tCapturer]))
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x8D8DFF00);
					else if(PlayerInfo[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[PlayerInfo[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	PlayerInfo[playerid][pShowTurfs] = enable;
}
/*ShowTurfsOnMap(playerid, enable)
{
 	foreach(new i : Turf)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(PlayerInfo[TurfInfo[i][tCapturer]][pGang] == -1 && IsLawEnforcement(TurfInfo[i][tCapturer]))
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x000000AA);
					else if(PlayerInfo[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[PlayerInfo[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	PlayerInfo[playerid][pShowTurfs] = enable;
}*/

CancelZoneCreation(playerid)
{
    for(new i = 0; i < 4; i ++)
    {
        DestroyDynamicPickup(PlayerInfo[playerid][pZonePickups][i]);
        PlayerInfo[playerid][pZonePickups][i] = -1;
	}

	GangZoneDestroy(PlayerInfo[playerid][pZoneID]);

	PlayerInfo[playerid][pZoneID] = -1;
	PlayerInfo[playerid][pZoneCreation] = 0;
    PlayerInfo[playerid][pMinX] = 0.0;
    PlayerInfo[playerid][pMinY] = 0.0;
    PlayerInfo[playerid][pMaxX] = 0.0;
    PlayerInfo[playerid][pMaxY] = 0.0;
}

ResetCooking(playerid)
{
    PlayerInfo[playerid][pCookMeth] = 0;
	PlayerInfo[playerid][pCookGrams] = 0;
	PlayerInfo[playerid][pCookTime] = 0;
}

ResetPlayer(playerid)
{
    if(PlayerInfo[playerid][pJoinedEvent])
	{
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pJoinedEvent] = 0;
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pPaintball] = 0;
		PlayerInfo[playerid][pPaintballTeam] = -1;
	}
	if(PlayerInfo[playerid][pHospital])
	{
	    GameTextForPlayer(playerid, " ", 100, 3);

	    PlayerInfo[playerid][pHospital] = 0;
	    PlayerInfo[playerid][pHospitalTime] = 0;
	}
	if(PlayerInfo[playerid][pTazedTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	    TogglePlayerControllable(playerid, 1);
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    PlayerInfo[PlayerInfo[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	}
	if(PlayerInfo[playerid][pPlantedBomb])
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);
	    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	    PlayerInfo[playerid][pPlantedBomb] = 0;
	}
	if(PlayerInfo[playerid][pFreezeTimer] >= 0)
	{
	    KillTimer(PlayerInfo[playerid][pFreezeTimer]);
	    TogglePlayerControllable(playerid, 1);
		PlayerInfo[playerid][pFreezeTimer] = -1;
	}
	if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
		PlayerInfo[PlayerInfo[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
		PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pDraggedBy] == playerid)
	    {
	        PlayerInfo[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
	}

	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pAcceptedHelp] = 0;
	PlayerInfo[playerid][pMiningTime] = 0;
	PlayerInfo[playerid][pMiningRock] = 0;
	PlayerInfo[playerid][pSweeping] = 0;
	PlayerInfo[playerid][pGraffiti] = -1;
	PlayerInfo[playerid][pGraffitiTime] = 0;
	PlayerInfo[playerid][pSweepTime] = 0;
	PlayerInfo[playerid][pSweepEarnings] = 0;
	PlayerInfo[playerid][pTazer] = 0;
	PlayerInfo[playerid][pTazedTime] = 0;
	PlayerInfo[playerid][pCuffed] = 0;
	PlayerInfo[playerid][pTied] = 0;
	PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDelivered] = 0;
	PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pPoisonTime] = 0;
    PlayerInfo[playerid][pCapturingPoint] = -1;
    PlayerInfo[playerid][pCaptureTime] = 0;
    PlayerInfo[playerid][pPreviewHouse] = -1;
    PlayerInfo[playerid][pPreviewType] = 0;
    PlayerInfo[playerid][pPreviewTime] = 0;
    PlayerInfo[playerid][pHHCheck] = 0;

 	CancelActiveCheckpoint(playerid);
 	CancelBreakIn(playerid);

 	RemovePlayerAttachedObject(playerid, 9);
}

CancelBreakIn(playerid)
{
	if(PlayerInfo[playerid][pLockBreak] != INVALID_VEHICLE_ID)
	{
	    new
	        damage[4];

		SetVehicleParams(PlayerInfo[playerid][pLockBreak], VEHICLE_ALARM, false);
		GetVehicleDamageStatus(PlayerInfo[playerid][pLockBreak], damage[0], damage[1], damage[2], damage[3]);
		UpdateVehicleDamageStatus(PlayerInfo[playerid][pLockBreak], damage[0], 0, damage[2], damage[3]);

    	DestroyDynamic3DTextLabel(PlayerInfo[playerid][pLockText]);
		KillTimer(PlayerInfo[playerid][pLockTimer]);

		PlayerInfo[playerid][pLockText] = Text3D:INVALID_3DTEXT_ID;
		PlayerInfo[playerid][pLockBreak] = INVALID_VEHICLE_ID;
	}
}

forward garbagewait(playerid);
public garbagewait(playerid)
{
	GameTextForPlayer(playerid, "Rac da tai....~n~Tiep tuc de danh dau tiep theo.", 5000, 3);
    TogglePlayerControllable(playerid, 1);
}

CancelActiveCheckpoint(playerid)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 9);
    }

    DisablePlayerCheckpoint(playerid);

	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	PlayerInfo[playerid][pPizzaHouse] = -1;
	PlayerInfo[playerid][pCourierBiz] = -1;
	PlayerInfo[playerid][pSmuggleMats] = 0;
	PlayerInfo[playerid][pSmuggleDrugs] = 0;
	PlayerInfo[playerid][pDrivingTest] = 0;
	PlayerInfo[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pTestCP] = 0;
    PlayerInfo[playerid][pMiningRock] = 0;
    PlayerInfo[playerid][pShipment] = -1;
    PlayerInfo[playerid][pGarbage] = 0;
    PlayerInfo[playerid][pTrucking] = 0;
}

ReferralCheck(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE uid = %i", PlayerInfo[playerid][pReferralUID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_REWARD_REFERRER, playerid);
}

PlayLoginMusic(playerid)
{
	new
	    File:file = fopen("login.txt", io_read);

	if(file)
	{
	    new
	        url[250];

		fread(file, url);
		fclose(file);

		PlayAudioStreamForPlayer(playerid, url);
	}
}

AwardAchievement(playerid, const name[])
{
	for(new i = 0; i < sizeof(achievementInfo); i ++)
	{
	    if(!strcmp(achievementInfo[i][aName], name))
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT IGNORE INTO achievements VALUES(%i, '%e')", PlayerInfo[playerid][pID], name);
			mysql_tquery(connectionID, queryBuffer, "OnPlayerAchievementCheck", "is", playerid, name);
			return 1;
		}
	}

	return 0;
}

SetPlayerSpecialTag(playerid, type)
{
	new
	    string[128];

	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]))
	{
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]);
        PlayerInfo[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	}

    foreach(new i : Player)
	{
	    if(type == TAG_NONE)
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
		else
		    ShowPlayerNameTagForPlayer(i, playerid, 0);
	}

	switch(type)
    {
        case TAG_ADMIN:
        {
            if(!strcmp(PlayerInfo[playerid][pAdminName], "None", true))
	            format(string, sizeof(string), "%s\n{089DCE}NewCity Administrator\n{FF6347}%s", GetPlayerNameEx(playerid), GetAdminRank(playerid));
			else
			    format(string, sizeof(string), "%s\n{089DCE}NewCity Administrator\n{FF6347}%s", PlayerInfo[playerid][pAdminName], GetAdminRank(playerid));

			if(strlen(GetAdminDivisionFull(playerid)) > 0)
			{
				format(string, sizeof(string), "%s\n{00C2E0}%s", string, GetAdminDivisionFull(playerid));
			}
			PlayerInfo[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_HELPER:
		{
		    format(string, sizeof(string), "%s\n{089DCE}NewCity Helper ON-DUTY\n{00FF00}%s", GetPlayerRPName(playerid), GetHelperRank(playerid));
    		PlayerInfo[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
  		}
		case TAG_VIP:
		{
		    format(string, sizeof(string), "%s\n{D909D9}Nguoi Choi Quan Trong\n{33CC33}%s VIP", GetPlayerRPName(playerid), GetVIPRank(PlayerInfo[playerid][pVIPPackage]));
			PlayerInfo[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
        }
	}

	PlayerInfo[playerid][pTagType] = type;
}

SendNewbieChatMessage(playerid, text[])
{
	new string[64];
	if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0) && PlayerInfo[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{7DAEFF} %s", color >>> 8, PlayerInfo[playerid][pCustomTitle], GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0) {
	    format(string, sizeof(string), "{FF6347}%s{7DAEFF} %s", GetAdminRank(playerid), GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetPlayerRPName(playerid));
    } else if(PlayerInfo[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "{FF69B5}Former Admin{7DAEFF} %s", GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pVIPPackage] > 0) {
		format(string, sizeof(string), "{D909D9}%s VIP{7DAEFF} %s", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pLevel] > 1) {
	    format(string, sizeof(string), "Player %s", GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pHours] > 250) {
	    format(string, sizeof(string), "NewCity Veteran: %s", GetPlayerRPName(playerid));
	} else {
	    format(string, sizeof(string), "Newbie %s", GetPlayerRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleNewbie])
	    {
	        if(strlen(text) > MAX_SPLIT_LENGTH)
	        {
				SendClientMessageEx(i, COLOR_NEWBIE, "** %s: %.*s...", string, MAX_SPLIT_LENGTH, text);
				SendClientMessageEx(i, COLOR_NEWBIE, "** %s: ...%s", string, text[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_NEWBIE, "** %s: %s", string, text);
			}
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] == 0)
	{
 		PlayerInfo[playerid][pLastNewbie] = gettime();
	}
}

ShowCopClothingMenu(playerid)
{
	new models[sizeof(copClothing)];

	for(new i = 0; i < sizeof(copClothing); i ++) {
	    models[i] = copClothing[i][cModel];
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_COPCLOTHING, "LEO Clothing", models, sizeof(models));
}

#if defined SERVER_INTRO

ShowServerIntro(playerid)
{
    if(!PlayerInfo[playerid][pWatchingIntro])
	{
		TogglePlayerSpectating(playerid, 1);
		TogglePlayerControllable(playerid, 0);
		PlayAudioStreamForPlayer(playerid, "https://dl.dropbox.com/s/xl5leq5z6dbq845/IMRAN%20KAHN%20-%20SATISFYA%20INSTRUMENTAL%20%20LYRICS%20%28Remake%20by%20z7beats%29.mp3?dl=0");
		SetPlayerVirtualWorld(playerid, playerid);

		SetPlayerPos(playerid, 155.3337, -1776.4384, 14.8978+5.0);
		SetPlayerCameraPos(playerid, 155.3337, -1776.4384, 14.8978);
		SetPlayerCameraLookAt(playerid, 156.2734, -1776.0850, 14.2128);
		InterpolateCameraLookAt(playerid, 156.2734, -1776.0850, 14.2128, 156.2713, -1776.0797, 14.7078, 5000, CAMERA_MOVE);

	    TextDrawShowForPlayer(playerid, introTextdraws[0]);
		TextDrawShowForPlayer(playerid, introTextdraws[1]);
		TextDrawShowForPlayer(playerid, introTextdraws[2]);

		SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 0);
		SetTimerEx("ShowLoginScreenTextdraw", 2400, false, "ii", playerid, 1);

		PlayerInfo[playerid][pWatchingIntro] = 1;
	}
}
#endif
/*ShowTutorialTextDraws(playerid)
{
		TextDrawShowForPlayer(playerid, Tutorial[0]);
		TextDrawShowForPlayer(playerid, Tutorial[1]);
		TextDrawShowForPlayer(playerid, Tutorial[2]);
}*/
HideTutorialTextDraws(playerid)
{
		TextDrawHideForPlayer(playerid, Tutorial[0]);
		TextDrawHideForPlayer(playerid, Tutorial[1]);
		TextDrawHideForPlayer(playerid, Tutorial[2]);
}

Namechange(playerid, oldname[], newname[])
{
	if(!PlayerInfo[playerid][pUndercover][0])
	{
	    foreach(new i : House)
	    {
	        if(HouseInfo[i][hExists] && !strcmp(HouseInfo[i][hOwner], oldname, false))
	        {
	            strcpy(HouseInfo[i][hOwner], newname, MAX_PLAYER_NAME);
	            ReloadHouse(i);
	        }
	    }

		foreach(new i : Garage)
	    {
	        if(GarageInfo[i][gExists] && !strcmp(GarageInfo[i][gOwner], oldname, false))
	        {
	            strcpy(GarageInfo[i][gOwner], newname, MAX_PLAYER_NAME);
	            ReloadGarage(i);
	        }
	    }

     	foreach(new i : Business)
	    {
	        if(BusinessInfo[i][bExists] && !strcmp(BusinessInfo[i][bOwner], oldname, false))
	        {
	            strcpy(BusinessInfo[i][bOwner], newname, MAX_PLAYER_NAME);
	            ReloadBusiness(i);
	        }
	    }

	    foreach(new i : Land)
	    {
	        if(LandInfo[i][lExists] && !strcmp(LandInfo[i][lOwner], oldname, false))
	        {
	            strcpy(LandInfo[i][lOwner], newname, MAX_PLAYER_NAME);
	            ReloadLand(i);
	        }
	    }

	    foreach(new i: Vehicle)
	    {
	        if(VehicleInfo[i][vID] && !strcmp(VehicleInfo[i][vOwner], oldname, false))
	        {
	            strcpy(VehicleInfo[i][vOwner], newname, MAX_PLAYER_NAME);
	        }
	    }

		// Updating queries.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET owner = '%s' WHERE owner = '%s'", newname, oldname);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET username = '%s' WHERE uid = %i", newname, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pUsername], newname, MAX_PLAYER_NAME);

	    SetPlayerName(playerid, newname);
	    SavePlayerVariables(playerid);
	}
}

IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460, 464, 476, 511..513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }

    return 0;
}

IsABoat(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 430, 446, 452..454, 472, 473, 484, 493, 595: return 1;
    }

    return 0;
}

IsSurfVehicle(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 406, 408, 422, 430, 432, 433, 441, 444, 446, 452..455, 460, 464, 470, 472, 473, 476, 478, 481, 484, 490, 493, 509..513, 519, 520, 528, 537, 538, 543, 553, 554, 556, 557, 569, 570, 577, 578, 590, 592..595, 600, 605, 607, 608: return 1;
	}

    return 0;
}

VehicleHasDoors(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475, 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536, 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

IsEmergencyFaction(playerid)
{
	switch(GetFactionType(playerid))
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_MEDIC, FACTION_ARMY:
	        return 1;
	}

	return 0;
}

IsLawEnforcement(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_FEDERAL || GetFactionType(playerid) == FACTION_ARMY;
}

IsPlayerBeingFound(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFindPlayer] == playerid && PlayerInfo[i][pFindTime] > 0)
	    {
	        return 1;
		}
	}

	return 0;
}

IsGateModel(modelid)
{
    switch(modelid)
    {
        case 8957, 7891, 3037, 19861, 19864, 19912, 971, 975, 980, 985, 19870, 988:
        {
            return 1;
        }
    }

	return 0;
}

IsGateObject(objectid)
{
    new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && IsGateModel(modelid))
	{
	    return 1;
	}

	return 0;
}

IsDoorObject(objectid)
{
	new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && !IsGateObject(objectid))
	{
		for(new i = 0; i < sizeof(furnitureArray); i ++)
		{
	    	if(!strcmp(furnitureArray[i][fCategory], "Doors & Gates") && furnitureArray[i][fModel] == modelid)
	    	{
		        return 1;
			}
		}
	}

	return 0;
}

RemoveFaction(factionid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == factionid)
	    {
			SetPlayerFaction(i, -1);
	        SendClientMessageEx(i, COLOR_LIGHTRED, "To chuc ma ban tach ra da bi quan tri vien xoa.");
	    }
	}

	DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

    FactionInfo[factionid][fName] = 0;
    FactionInfo[factionid][fLeader] = 0;
	FactionInfo[factionid][fType] = FACTION_NONE;
	FactionInfo[factionid][fColor] = 0;
	FactionInfo[factionid][fRankCount] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}

	for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	{
	    FactionDivisions[factionid][i][0] = 0;
	}


	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
		{
		    DestroyDynamic3DTextLabel(LockerInfo[i][lText]);
		    DestroyDynamicPickup(LockerInfo[i][lPickup]);
		    LockerInfo[i][lExists] = 0;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionranks WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionskins WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionpay WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE factionid = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, factionleader = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
}

GetFactionSkinCount(factionid)
{
	new count;

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    if(FactionInfo[factionid][fSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}
GetTotalFactionPay(factionid)
{
	new amount;

    for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
    {
        amount += FactionInfo[factionid][fPaycheck][i];
	}

	return amount;
}
GetFactionType(playerid)
{
	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    return FactionInfo[PlayerInfo[playerid][pFaction]][fType];
	}

	return FACTION_NONE;
}

SetPlayerFaction(playerid, factionid, rank = 0, leader = 0)
{
	// This needed its own function because I got fed up of having to put "[pFaction] = -1" everywhere.

	if(factionid == -1)
	{
	    if(PlayerInfo[playerid][pFaction] >= 0)
	    {
	        SetScriptSkin(playerid, 230);
	        ResetPlayerWeaponsEx(playerid);
	    }

	    PlayerInfo[playerid][pFaction] = -1;
	    PlayerInfo[playerid][pFactionRank] = 0;
	    PlayerInfo[playerid][pFactionLeader] = 0;
	    PlayerInfo[playerid][pDivision] = -1;
	    PlayerInfo[playerid][pDuty] = 0;
	    PlayerInfo[playerid][pTazer] = 0;
	}
	else if((0 <= factionid < MAX_FACTIONS) && FactionInfo[factionid][fType] != FACTION_NONE)
	{
	    if(PlayerInfo[playerid][pFaction] >= 0 && factionid != PlayerInfo[playerid][pFaction])
	    {
	        PlayerInfo[playerid][pDivision] = -1;
	    }

	    PlayerInfo[playerid][pFaction] = factionid;
	    PlayerInfo[playerid][pFactionRank] = rank;
	    PlayerInfo[playerid][pFactionLeader] = leader;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = %i, division = %i, factionleader = %i WHERE uid = %i", PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pFactionRank], PlayerInfo[playerid][pDivision], PlayerInfo[playerid][pFactionLeader], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
}

SetupFaction(factionid, name[], type)
{
    strcpy(FactionInfo[factionid][fName], name, 48);
    strcpy(FactionInfo[factionid][fShortName], "None", 24);
    strcpy(FactionInfo[factionid][fMOTD], "None", 128);
	strcpy(FactionInfo[factionid][fLeader], "No-one", MAX_PLAYER_NAME);

    FactionInfo[factionid][fType] = type;
    FactionInfo[factionid][fColor] = 0xFFFFFF00;
    FactionInfo[factionid][fRankCount] = 6;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;
    FactionInfo[factionid][fFund] = 0;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}
	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factions (id, name, type) VALUES(%i, '%e', %i)", factionid, name, type);
	mysql_tquery(connectionID, queryBuffer);
}

IsPlayerInRangeOfLocker(playerid, factionid)
{
	new lockerid;

	if((lockerid = GetNearbyLocker(playerid)) >= 0 && LockerInfo[lockerid][lFaction] == factionid)
	{
	    return 1;
	}

	return 0;
}

GetNearbyLocation(playerid, Float:radii)
{
	for(new i = 0; i < MAX_LOCATIONS; i ++)
	{
	    if(LocationInfo[i][locExists] && IsPlayerInRangeOfPoint(playerid, radii, LocationInfo[i][locPosX], LocationInfo[i][locPosY], LocationInfo[i][locPosZ]) && GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	    {
	        return i;
		}
	}

	return -1;
}
GetNearbyAtm(playerid)
{
	for(new i = 0; i < MAX_ATMS; i ++)
	{
	    if(AtmInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, AtmInfo[i][aPosX], AtmInfo[i][aPosY], AtmInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

GetNearbyLocker(playerid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && IsPlayerInRangeOfPoint(playerid, 3.0, LockerInfo[i][lPosX], LockerInfo[i][lPosY], LockerInfo[i][lPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

ReloadLockers(factionid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
	    {
	        ReloadLocker(i);
		}
	}
}

ReloadLocker(lockerid)
{
	if(LockerInfo[lockerid][lExists])
	{
	    DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	    DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);
	    if(LockerInfo[lockerid][lLabel])
	    {
	        new string[128];
	    	format(string, sizeof(string), "%s\nTu do\n/locker de mo tu do.", FactionInfo[LockerInfo[lockerid][lFaction]][fName]);
     		LockerInfo[lockerid][lText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], 10.0, .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
		}
		LockerInfo[lockerid][lPickup] = CreateDynamicPickup(LockerInfo[lockerid][lIcon], 1, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
	}
}
ReloadAtm(atmid)
{
	if(AtmInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(AtmInfo[atmid][aText]);
	    DestroyDynamicObject(AtmInfo[atmid][aObject]);

		AtmInfo[atmid][aText] = CreateDynamic3DTextLabel("ATM\n/atm de su dung.", COLOR_YELLOW, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ] + 0.4, 10.0);
        AtmInfo[atmid][aObject] = CreateDynamicObject(19324, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ], 0.0, 0.0, AtmInfo[atmid][aPosA]);
	}
}
SetupGang(gangid, name[])
{
	strcpy(GangInfo[gangid][gName], name, 32);
	strcpy(GangInfo[gangid][gMOTD], "None", 128);
	strcpy(GangInfo[gangid][gLeader], "No-one", MAX_PLAYER_NAME);

	GangInfo[gangid][gSetup] = 1;
	GangInfo[gangid][gColor] = 0xFFFFFF00;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 1;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gWeed] = 0;
	GangInfo[gangid][gCocaine] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
    GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugWeed] = 0;
    GangInfo[gangid][gDrugCocaine] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gWar] = -1;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

    GangInfo[gangid][gWeaponRanks][GANGWEAPON_9MM] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SDPISTOL] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_DEAGLE] = 2;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SHOTGUN] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SPAS12] = 4;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_TEC9] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_UZI] = 1;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_MP5] = 2;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_AK47] = 3;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_M4] = 4;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_RIFLE] = 2;
	GangInfo[gangid][gWeaponRanks][GANGWEAPON_SNIPER] = 5;

	for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 12; i ++)
	{
	    if(i < 3)
	    {
	        GangInfo[gangid][gDrugPrices][i] = 0;
		}

		GangInfo[gangid][gArmsPrices][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
        GangInfo[gangid][gSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangs (id, name) VALUES(%i, '%e')", gangid, name);
	mysql_tquery(connectionID, queryBuffer);
}

GetNearbyPoint(playerid, Float:radius = 3.0)
{
    for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, radius, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
		    return i;
		}
	}

	return -1;
}

AddPointMoney(type, amount)
{
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pType] == type)
	    {
	        if(PointInfo[i][pCapturedGang] >= 0)
	        {
	            amount /= 2;
	            GangInfo[PointInfo[i][pCapturedGang]][gCash] += amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
	        	mysql_tquery(connectionID, queryBuffer);
	        }

			PointInfo[i][pProfits] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[i][pProfits], i);
	 		mysql_tquery(connectionID, queryBuffer);
	    }
    }
}

ReloadPoint(pointid)
{
    if(PointInfo[pointid][pExists])
    {
        new string[128], name[32] = "None";

        DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
        DestroyDynamicPickup(PointInfo[pointid][pPickup]);

        if(PointInfo[pointid][pCapturedGang] >= 0)
        {
            strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
        }

        if(PointInfo[pointid][pTime] > 0)
        	format(string, sizeof(string), "%s\nSo huu: %s\nCo san sau %i gio.", PointInfo[pointid][pName], name, PointInfo[pointid][pTime]);
		else
		    format(string, sizeof(string), "%s\nSo huu: %s\nCo san de chiem!", PointInfo[pointid][pName], name);

		PointInfo[pointid][pText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 10.0, .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
        PointInfo[pointid][pPickup] = CreateDynamicPickup(1239, 1, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
	}
}

ReloadGang(gangid)
{
	if(GangInfo[gangid][gSetup])
	{
	    new string[128], color;

	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
	    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
	    DestroyActor(GangInfo[gangid][gActors][0]);
	    DestroyActor(GangInfo[gangid][gActors][1]);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}
	    if(GangInfo[gangid][gStashX] != 0.0 && GangInfo[gangid][gStashY] != 0.0 && GangInfo[gangid][gStashZ] != 0.0)
	    {
	        format(string, sizeof(string), "Cap do %i Gang Safe\n{%06x}%s{C8C8C8}", GangInfo[gangid][gLevel], color >>> 8, GangInfo[gangid][gName]);

            GangInfo[gangid][gText][0] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], 10.0, .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
            GangInfo[gangid][gPickup] = CreateDynamicPickup(1210, 1, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
	    }
	    if(GangInfo[gangid][gArmsDealer] && GangInfo[gangid][gArmsX] != 0.0 && GangInfo[gangid][gArmsY] != 0.0 && GangInfo[gangid][gArmsZ] != 0.0)
	    {
	        format(string, sizeof(string), "%s\nBuon Vu Khi\n/armsdealer de biet them.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][0] = CreateActor(179, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ], GangInfo[gangid][gArmsA]);
			GangInfo[gangid][gText][1] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gArmsWorld]);

		    SetActorVirtualWorld(GangInfo[gangid][gActors][0], GangInfo[gangid][gArmsWorld]);
		}
		if(GangInfo[gangid][gDrugDealer] && GangInfo[gangid][gDrugX] != 0.0 && GangInfo[gangid][gDrugY] != 0.0 && GangInfo[gangid][gDrugZ] != 0.0)
	    {
	        format(string, sizeof(string), "%s\nBuon Ma Tuy\n/drugdealer de biet them.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][1] = CreateActor(28, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ], GangInfo[gangid][gDrugA]);
            GangInfo[gangid][gText][2] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gDrugWorld]);

	        SetActorVirtualWorld(GangInfo[gangid][gActors][1], GangInfo[gangid][gDrugWorld]);
		}
	}
}
GiveGangPoints(gangid, amount)
{
	if(GangInfo[gangid][gSetup])
	{
        GangInfo[gangid][gPoints] = GangInfo[gangid][gPoints] + amount;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
        mysql_tquery(connectionID, queryBuffer);
	}
}

RemoveGang(gangid)
{
	if(GangInfo[gangid][gAlliance] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
	}
	if(GangInfo[gangid][gWar] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = -1 WHERE id = %i", GangInfo[gangid][gWar]);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gWar]][gWar] = -1;
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pGang] == gangid)
	    {
	        SendClientMessageEx(i, COLOR_LIGHTRED, "Bang nhom ma ban tach ra da bi quan tri vien xoa.");
	        PlayerInfo[i][pGang] = -1;
	        PlayerInfo[i][pGangRank] = 0;
	    }
	}
	for(new i = 0; i < MAX_GANG_CREWS; i ++)
	{
		GangCrews[gangid][i][0] = 0;
	}

	DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
    DestroyActor(GangInfo[gangid][gActors][0]);
    DestroyActor(GangInfo[gangid][gActors][1]);

    GangInfo[gangid][gSetup] = 0;
    GangInfo[gangid][gName] = 0;
    GangInfo[gangid][gMOTD] = 0;
    GangInfo[gangid][gLeader] = 0;
	GangInfo[gangid][gColor] = 0;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 0;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gWeed] = 0;
	GangInfo[gangid][gCocaine] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugWeed] = 0;
    GangInfo[gangid][gDrugCocaine] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
	GangInfo[gangid][gAlliance] = -1;
	GangInfo[gangid][gWar] = -1;

    for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 14; i ++)
	{
		GangInfo[gangid][gWeapons][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    GangInfo[gangid][gSkins][i] = 0;
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists] && PointInfo[i][pCapturedGang] == gangid)
		{
		    PointInfo[i][pCapturedGang] = -1;
		}
	}

 	foreach(new i : Turf)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		{
		    TurfInfo[i][tCapturedGang] = -1;
		}
	}
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
			DespawnVehicle(i, false);
	    }
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE gangid = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangs WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangranks WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangskins WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM crews WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE gang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);
}

GetGangVehicles(gangid)
{
	new count;

	foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        count++;
		}
	}

	return count;
}

GetGangVehicleLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 6;
	    case 2: return 8;
	    case 3: return 12;
	}

	return 0;
}

GetGangMemberLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 30;
	    case 2: return 60;
	    case 3: return 80;
	}

	return 0;
}

GetGangSkinCount(gangid)
{
	new count;

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    if(GangInfo[gangid][gSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetSpawnedVehicles(playerid)
{
	new count;

    foreach(new i: Vehicle)
	{
	    if(IsVehicleOwner(playerid, i))
	    {
	        count++;
		}
	}

	return count;
}

GetVehicleGarage(vehicleid)
{
 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gWorld] == GetVehicleVirtualWorld(vehicleid))
	    {
	        return i;
		}
	}

	return -1;
}

ResetVehicleObjects(vehicleid)
{
    if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
 	if(VehicleInfo[vehicleid][vNeonEnabled])
	{
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][1]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		}
 	}

 	adminVehicle{vehicleid} = false;

 	return 1;
}


DestroyVehicleEx(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		ResetVehicleObjects(vehicleid);
	}

	DestroyVehicle(vehicleid);
	return 1;
}

GetNearbyVehicle(playerid)
{
	new Float:x, Float:y, Float:z;

	foreach(new i: Vehicle)
	{
	    if(IsVehicleStreamedIn(i, playerid))
	    {
	        GetVehiclePos(i, x, y, z);

	        if(IsPlayerInRangeOfPoint(playerid, 3.5, x, y, z))
	        {
	            return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff= 0.0, Float:yoff= 0.0, Float:zoff= 0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
    y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
    z = zoff + z;
}

IsPlayerAtVehicleDoor(playerid, vehicleid, type)
{
 	new
	    Float:vx,
	    Float:vy,
	    Float:vz,
	    Float:va,
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, z);

	if(type == DOOR_DRIVER) {
		GetVehicleRelativePos(vehicleid, vx, vy, vz, -x * 2, y, z);
	} else {
	    GetVehicleRelativePos(vehicleid, vx, vy, vz, x * 2, y, z);
	}

    GetPlayerFacingAngle(playerid, a);
    GetVehicleZAngle(vehicleid, va);

    if(IsPlayerInRangeOfPoint(playerid, 1.0, vx, vy, vz))
    {
        return 1;
	}

	return 0;
}

GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(IsValidVehicle(vehicleid))
	{
		new
			Float:pos[7];

		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
		GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
		GetVehicleZAngle(vehicleid, pos[6]);

		x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
		y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 		z = pos[5];
		return 1;
	}

	x = 0.0;
	y = 0.0;
	z = 0.0;

	return 0;
}

IsPlayerInRangeOfBoot(playerid, vehicleid)
{
	new
		Float:x,
		Float:y,
		Float:z;

	GetVehicleBoot(vehicleid, x, y, z);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z);
}

IsVehicleBeingPicked(vehicleid)
{
    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLockBreak] == vehicleid)
	    {
	        return 1;
		}
	}

	return 0;
}

IsVehicleOwner(playerid, vehicleid)
{
	return (VehicleInfo[vehicleid][vOwnerID] == PlayerInfo[playerid][pID]);
}

SetVehicleNeon(vehicleid, modelid)
{
	if(18647 <= modelid <= 18652)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
			DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

	    VehicleInfo[vehicleid][vNeon] = modelid;
	    VehicleInfo[vehicleid][vNeonEnabled] = (modelid > 0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = %i, neonenabled = 1 WHERE id = %i", VehicleInfo[vehicleid][vNeon], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
}

ReloadVehicleNeon(vehicleid)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);

	    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        new
				Float:x,
				Float:y,
				Float:z;

			GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			VehicleInfo[vehicleid][vObjects][1] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
		}
	}
}

ResyncVehicle(vehicleid)
{
	new
		worldid = GetVehicleVirtualWorld(vehicleid);
	SetVehicleVirtualWorld(vehicleid, cellmax);
	SetVehicleVirtualWorld(vehicleid, worldid);
}

SaveVehicleModifications(vehicleid)
{
	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = GetVehicleComponentInSlot(vehicleid, i);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vMods][i], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vPaintjob] >= 0)
    {
        ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	{
		ReloadVehicleNeon(vehicleid);
    }

	for(new i = 0; i < 14; i ++)
	{
	    if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	    {
	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
		}
	}

	if(strcmp(VehicleInfo[vehicleid][vPlate], "None") != 0)
	{
	    SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
	    ResyncVehicle(vehicleid);
	}
	else
	{
	    SetVehicleNumberPlate(vehicleid, "_");
	    ResyncVehicle(vehicleid);
	}

    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
}

DespawnVehicle(vehicleid, bool:save = true)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

		if(save) {
		    new
				Float:health;

		    GetVehicleHealth(vehicleid, health);
		    SaveVehicleModifications(vehicleid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fuel = %i, health = '%f' WHERE id = %i", vehicleFuel[vehicleid], health, VehicleInfo[vehicleid][vID]);
	    	mysql_tquery(connectionID, queryBuffer);
	    }

		DestroyVehicleEx(vehicleid);
		resetVehicleVars(vehicleid);
	}
	return 1;
}

resetVehicleVars(vehicleid){

	strcpy(VehicleInfo[vehicleid][vPlate], "Khong", 32);
	strcpy(VehicleInfo[vehicleid][vOwner], "Khong co", MAX_PLAYER_NAME);

	if(VehicleInfo[vehicleid][vTimer] >= 0)
	{
	    KillTimer(VehicleInfo[vehicleid][vTimer]);
	}

    VehicleInfo[vehicleid][vID] = 0;
	VehicleInfo[vehicleid][vOwnerID] = 0;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vPrice] = 0;
	VehicleInfo[vehicleid][vTickets] = 0;
	VehicleInfo[vehicleid][vLocked] = 0;
	VehicleInfo[vehicleid][vWindowsOpen] = true;
	VehicleInfo[vehicleid][vHealth] = 1000.0;
	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;
	VehicleInfo[vehicleid][vPosA] = 0.0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = -1;
	VehicleInfo[vehicleid][vInterior] = 0;
	VehicleInfo[vehicleid][vWorld] = 0;
	VehicleInfo[vehicleid][vCash] = 0;
	VehicleInfo[vehicleid][vMaterials] = 0;
	VehicleInfo[vehicleid][vWeed] = 0;
	VehicleInfo[vehicleid][vCocaine] = 0;
	VehicleInfo[vehicleid][vMeth] = 0;
	VehicleInfo[vehicleid][vPainkillers] = 0;
	VehicleInfo[vehicleid][vWeapons][0] = 0;
	VehicleInfo[vehicleid][vWeapons][1] = 0;
	VehicleInfo[vehicleid][vWeapons][2] = 0;
	VehicleInfo[vehicleid][vWeapons][3] = 0;
	VehicleInfo[vehicleid][vWeapons][4] = 0;
    VehicleInfo[vehicleid][vGang] = -1;
	VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	VehicleInfo[vehicleid][vVIP] = 0;
	VehicleInfo[vehicleid][vJob] = JOB_NONE;
	VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vTimer] = -1;
	VehicleInfo[vehicleid][vRank] = 0;
	VehicleInfo[vehicleid][vBoxes] = 0;

	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = 0;
	}

	return 1;
}

ResetVehicle(vehicleid)
{
	resetVehicleVars(vehicleid);

	return ResetVehicleObjects(vehicleid);
}

IsPointInLand(landid, Float:x, Float:y)
{
	if((LandInfo[landid][lMinX] <= x <= LandInfo[landid][lMaxX]) && (LandInfo[landid][lMinY] <= y <= LandInfo[landid][lMaxY]))
	{
	    return 1;
	}

	return 0;
}

GangZoneCreateEx(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	return GangZoneCreate((minx > maxx) ? (maxx) : (minx), (miny > maxy) ? (maxy) : (miny), (minx > maxx) ? (minx) : (maxx), (miny > maxy) ? (miny) : (maxy));
}

HasLandPerms(playerid, landid)
{
	return IsLandOwner(playerid, landid) || PlayerInfo[playerid][pLandPerms] == landid;
}

IsLandOwner(playerid, landid)
{
	return (LandInfo[landid][lOwnerID] == PlayerInfo[playerid][pID]);
}

SetLandOwner(landid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(LandInfo[landid][lOwner], "Khong co", MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, LandInfo[landid][lOwner], MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = PlayerInfo[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET ownerid = %i, owner = '%s' WHERE id = %i", LandInfo[landid][lOwnerID], LandInfo[landid][lOwner], LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadLand(landid);
}

GetLandObjectID(sql_id)
{
    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
    {
        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == sql_id)
        {
            return i;
		}
	}

	return INVALID_OBJECT_ID;
}

GetLandObjectCapacity(level)
{
	switch(level)
	{
	    case 1: return 150;
	    case 2: return 200;
	    case 3: return 300;
	    case 4: return 500;
	    case 5: return 1000;
	}

	return 0;
}

RemoveLandObject(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteLandObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }
        DestroyDynamicObject(objectid);
	}
}

RemoveAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

stock IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerInfo[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}
stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, connectionID);
	return entry;
}
stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(connectionID, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(connectionID, query);
}

stock Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(connectionID, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}


stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "[Camera %d]\n{FFFFFF}Gioi han: %.0f mph", speedid, SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_AQUA, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(connectionID, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(connectionID, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(connectionID, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}


forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], connectionID, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_content_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_content_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_content_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_content_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_content_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_content_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

Rack_Save(rackid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d' WHERE `rackID` = '%d'",
	    RackData[rackid][rackHouse],
	    RackData[rackid][rackPos][0],
	    RackData[rackid][rackPos][1],
	    RackData[rackid][rackPos][2],
	    RackData[rackid][rackPos][3],
	    RackData[rackid][rackInterior],
	    RackData[rackid][rackWorld],
	    RackData[rackid][rackWeapons][0],
	    RackData[rackid][rackWeapons][1],
	    RackData[rackid][rackWeapons][2],
	    RackData[rackid][rackWeapons][3],
	    RackData[rackid][rackID]
	);
	return mysql_tquery(connectionID, query);
}

Rack_Nearest(playerid)
{
	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
	{
		if (GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
		    return i;
	}
	return -1;
}

Rack_Count(houseid)
{
	new count;

	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && RackData[i][rackHouse] == HouseInfo[houseid][hID]) {
	    count++;
	}
	return count;
}

Rack_ShowGuns(playerid, rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    new
	        string[128];

		for (new i = 0; i < 4; i ++)
		{
		    if (!RackData[rackid][rackWeapons][i])
		        format(string, sizeof(string), "%s%d: Cho trong\n", string, i + 1);

			else format(string, sizeof(string), "%s%d: \n", string, i + 1, ReturnWeaponName(RackData[rackid][rackWeapons][i]));
		}
		ShowPlayerDialog(playerid, DIALOG_RACKWEAPONS, DIALOG_STYLE_LIST, "Weapon Rack", string, "Chon", "Huy bo");
	}
	return 1;
}

Rack_Delete(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        string[64];

	    format(string, sizeof(string), "DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]);
	    mysql_tquery(connectionID, string);

        for (new i = 0; i < 5; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		RackData[rackid][rackExists] = false;
		RackData[rackid][rackID] = 0;
		RackData[rackid][rackHouse] = 0;
	}
	return 1;
}

Rack_Create(playerid, houseid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (!RackData[i][rackExists])
		{
		    x += 1.5 * floatsin(-angle, degrees);
		    y += 1.5 * floatcos(-angle, degrees);

		    RackData[i][rackExists] = true;
		    RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseInfo[houseid][hID]);

		    RackData[i][rackPos][0] = x;
		    RackData[i][rackPos][1] = y;
		    RackData[i][rackPos][2] = z;
		    RackData[i][rackPos][3] = angle;
		    RackData[i][rackInterior] = GetPlayerInterior(playerid);
		    RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

		    Rack_Refresh(i);
		    mysql_tquery(connectionID, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", "OnRackCreated", "d", i);

		    return i;
		}
	}
	return -1;
}

Rack_RefreshGuns(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
    	new
			Float:x,
	        Float:y,
			Float:z;

		z = RackData[rackid][rackPos][2] + 2.19;

		for (new i = 0; i < 4; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][i]);

			RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
		}
		for (new i = 0; i < 4; i ++)
		{
		    if (RackData[rackid][rackWeapons][i])
			{
				x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
				y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

		        RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
			}
			else
			{
			    RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
			}
			z = z - 0.69;
		}
	}
	return 1;
}

Rack_Refresh(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        str[64];

		if (IsValidDynamicObject(RackData[rackid][rackObjects][4])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][4]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		format(str, sizeof(str), "[Rack %d]\n{FFFFFF}/gunrack su dung gia do nay.", rackid);
		RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(str, COLOR_AQUA, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

		Rack_RefreshGuns(rackid);
        RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
	}
	return 1;
}

forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_content_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_content_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_content_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_content_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_content_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_content_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_content_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

forward Rack_Load();
public Rack_Load()
{
    static
	    rows,
	    fields,
		str[24];

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_WEAPON_RACKS)
	{
	    RackData[i][rackExists] = true;
	    RackData[i][rackID] = cache_get_field_content_int(i, "rackID");
	    RackData[i][rackHouse] = cache_get_field_content_int(i, "rackHouse");
     	RackData[i][rackPos][0] = cache_get_field_content_float(i, "rackX");
        RackData[i][rackPos][1] = cache_get_field_content_float(i, "rackY");
        RackData[i][rackPos][2] = cache_get_field_content_float(i, "rackZ");
        RackData[i][rackPos][3] = cache_get_field_content_float(i, "rackA");
        RackData[i][rackInterior] = cache_get_field_content_int(i, "rackInterior");
		RackData[i][rackWorld] = cache_get_field_content_int(i, "rackWorld");

		for (new j = 0; j < 4; j ++) {
		    format(str, 24, "rackWeapon%d", j + 1);
		    RackData[i][rackWeapons][j] = cache_get_field_content_int(i, str);
		}
		Rack_Refresh(i);
	}
	return 1;
}


ReloadLandObject(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, labels);
	}
}

ReloadAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
	}
}

ReloadLand(landid)
{
	if(LandInfo[landid][lExists])
	{
	    DestroyDynamicArea(LandInfo[landid][lArea]);
	    GangZoneDestroy(LandInfo[landid][lGangZone]);
	    DestroyDynamic3DTextLabel(LandInfo[landid][lTextdraw]);

	    LandInfo[landid][lArea] = CreateDynamicRectangle(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	    LandInfo[landid][lGangZone] = GangZoneCreateEx(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	    LandInfo[landid][lTextdraw] = CreateDynamic3DTextLabel("Land", COLOR_LIGHTRED, LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight], 10.0);
		UpdateLandText(landid);
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pShowLands])
	        {
	            GangZoneShowForPlayer(i, LandInfo[landid][lGangZone], (LandInfo[landid][lOwnerID] > 0) ? (0xFF6347AA) : (0x33CC33AA));
			}
		}
	}
}

GetNearbyLand(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		foreach(new i : Land)
		{
			if(LandInfo[i][lExists] && IsPlayerInDynamicArea(playerid, LandInfo[i][lArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}

TurfTaxCheck(playerid, amount)
{
	new turfid = GetNearbyTurf(playerid);

	if(turfid >= 0 && TurfInfo[turfid][tType] == 7 && TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    if(!(PlayerInfo[playerid][pGang] >= 0 && PlayerInfo[playerid][pGang] == TurfInfo[turfid][tCapturedGang]))
	    {
		    amount = percent(amount, 10);

		    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da bi danh thue 10 phan tram phi {FF6347}$%i{33CCFF} khi ban o %s's 	.", amount, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
		    GivePlayerCash(playerid, -amount);

		    GangInfo[TurfInfo[turfid][tCapturedGang]][gCash] += amount;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[TurfInfo[turfid][tCapturedGang]][gCash], TurfInfo[turfid][tCapturedGang]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
}

GetNearbyTurf(playerid)
{
	if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
  		foreach(new i : Turf)
		{
			if(TurfInfo[i][tExists] && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}

GetTurfColor(turfid)
{
	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    return (GangInfo[TurfInfo[turfid][tCapturedGang]][gColor] & ~0xff) + 0xAA;
	}
	else if(TurfInfo[turfid][tCapturedGang] == -5)
	{
		return 0x8D8DFFAA;
	}

	return 0x000000AA;
}

ReloadTurf(turfid)
{
	if(TurfInfo[turfid][tExists])
	{
	    DestroyDynamicArea(TurfInfo[turfid][tArea]);
	    GangZoneDestroy(TurfInfo[turfid][tGangZone]);

	    TurfInfo[turfid][tArea] = CreateDynamicRectangle(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);
	    TurfInfo[turfid][tGangZone] = GangZoneCreateEx(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);

     	foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pShowTurfs])
	        {
	            ShowTurfsOnMap(i, true);
			}
		}
	}
}

GetNearbyEntranceEx(playerid)
{
	return GetNearbyEntrance(playerid) == -1 ? GetInsideEntrance(playerid) : GetNearbyEntrance(playerid);
}

GetNearbyEntrance(playerid)
{
	foreach(new i : Entrance)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, EntranceInfo[i][eRadius], EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eOutsideInt] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideEntrance(playerid)
{
	foreach(new i : Entrance)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eInterior] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetEntranceOwner(entranceid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(EntranceInfo[entranceid][eOwner], "Khong co", MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, EntranceInfo[entranceid][eOwner], MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = PlayerInfo[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET ownerid = %i, owner = '%s' WHERE id = %i", EntranceInfo[entranceid][eOwnerID], EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
}

ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);
		DestroyDynamicMapIcon(EntranceInfo[entranceid][eMapIconID]);

		if(EntranceInfo[entranceid][eLabel])
		{
			if(EntranceInfo[entranceid][eOwnerID])
			{
			    format(string, sizeof(string), "%s\nSo huu: %s\n{AFAFAF}Nhan F de vao.", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eOwner]);
			}
			else
			{
			    if(EntranceInfo[entranceid][eType] == 1)
			        format(string, sizeof(string), "%s\n{AFAFAF}/offerduel dau tay doi.", EntranceInfo[entranceid][eName]);
			    else if(EntranceInfo[entranceid][eType] == 2)
			        format(string, sizeof(string), "%s\n{AFAFAF}/repaircar de sua chua xe.", EntranceInfo[entranceid][eName]);
			    else
		        	format(string, sizeof(string), "%s\n{AFAFAF}Nhan F de vao.", EntranceInfo[entranceid][eName]);
			}
			new color = COLOR_GREY1;
			if(EntranceInfo[entranceid][eColor] != -256)
			{
				color = EntranceInfo[entranceid][eColor];
			}
			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, color, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

		if(EntranceInfo[entranceid][eMapIcon])
		{
		    EntranceInfo[entranceid][eMapIconID] = CreateDynamicMapIcon(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][eMapIcon], 0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
		}
	}
}

IsEntranceOwner(playerid, entranceid)
{
	return (EntranceInfo[entranceid][eOwnerID] == PlayerInfo[playerid][pID]);
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

    foreach(new i : Business)
	{
		if((BusinessInfo[i][bExists] && BusinessInfo[i][bType] == type) && (BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}

	return index;
}

GetNearbyBusinessEx(playerid)
{
	return GetNearbyBusiness(playerid) == -1 ? GetInsideBusiness(playerid) : GetNearbyBusiness(playerid);
}

GetNearbyBusiness(playerid, Float:radius = 2.0)
{
    foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bOutsideInt] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideBusiness(playerid)
{
 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetBusinessOwner(businessid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(BusinessInfo[businessid][bOwner], "Khong co", MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = 0;
	}
	else
	{
     	GetPlayerName(playerid, BusinessInfo[businessid][bOwner], MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = PlayerInfo[playerid][pID];
	}

	BusinessInfo[businessid][bTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
}

ReloadBusiness(businessid)
{
	if(BusinessInfo[businessid][bExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
		DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
        DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

        if(BusinessInfo[businessid][bOwnerID] == 0)
        {
	        format(string, sizeof(string), "[Doanh Nghiep - %i]\nGia: %s\nLoai: %s\nPhi vao: $%i\nTrang thai: %s", businessid, FormatNumber(BusinessInfo[businessid][bPrice]), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bEntryFee], (BusinessInfo[businessid][bLocked]) ? ("{ffff00}Dong") : ("{00AA00}Mo"));
		}
		else
		{
		    format(string, sizeof(string), "[Doanh Nghiep - %i]\nSo huu: %s\nLoai: %s\nPhi vao: $%i\nTrang thai: %s", businessid, BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bEntryFee], (BusinessInfo[businessid][bLocked]) ? ("{FFFF00}Dong") : ("{00AA00}Mo"));
		}

		BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, COLOR_GREY1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 10.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
        BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1272, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);

		switch(BusinessInfo[businessid][bType])
		{
		    case BUSINESS_STORE: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 17, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GUNSHOP: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_CLOTHES: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 45, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_RESTAURANT: 	BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GYM: 			BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 54, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_AGENCY: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 58, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_BARCLUB: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 49, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_TOOLSHOP:     BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 11, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		}
	}
}

IsBusinessOwner(playerid, businessid)
{
	return (BusinessInfo[businessid][bOwnerID] == PlayerInfo[playerid][pID]);
}

IsGarageOwner(playerid, garageid)
{
	return (GarageInfo[garageid][gOwnerID] == PlayerInfo[playerid][pID]);
}

GetNearbyGarageEx(playerid)
{
	return GetNearbyGarage(playerid) == -1 ? GetInsideGarage(playerid) : GetNearbyGarage(playerid);
}

GetNearbyGarage(playerid)
{
 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 4.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideGarage(playerid)
{
 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 50.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]) && GetPlayerInterior(playerid) == garageInteriors[GarageInfo[i][gType]][intID] && GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    {
	        return i;
		}
	}

	return -1;
}

ReloadGarage(garageid)
{
	if(GarageInfo[garageid][gExists])
	{
	    new string[128];

		DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
		DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

        if(GarageInfo[garageid][gOwnerID] == 0)
        {
	        format(string, sizeof(string), "[{ADADAD}Garage{54878D}]\nGia: {00AA00}%s{54878D}\nKich thuoc: %s\nSuc chua: %i xe", FormatNumber(GarageInfo[garageid][gPrice]), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gType] + 1);
		}
		else
		{
		    format(string, sizeof(string), "[{ADADAD}Garage{54878D}]\nSo huu: %s\nKich thuoc: %s\nSuc chua: %i xe", GarageInfo[garageid][gOwner], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gType] + 1);
		}

		GarageInfo[garageid][gText] = CreateDynamic3DTextLabel(string, 0x54878DFF, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ] + 0.1, 10.0);
        GarageInfo[garageid][gPickup] = CreateDynamicPickup(1318, 1, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	}
}

SetGarageOwner(garageid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(GarageInfo[garageid][gOwner], "Khong co", MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, GarageInfo[garageid][gOwner], MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = PlayerInfo[playerid][pID];
	}

	GarageInfo[garageid][gTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", GarageInfo[garageid][gTimestamp], GarageInfo[garageid][gOwnerID], GarageInfo[garageid][gOwner], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
}

HasFurniturePerms(playerid, houseid)
{
	return IsHouseOwner(playerid, houseid) || PlayerInfo[playerid][pFurniturePerms] == houseid;
}

IsHouseOwner(playerid, houseid)
{
	return (HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID]);
}

GetVehicleStashCapacity(vehicleid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P   W
	    {25000,   5000,   25,   25,  10,  5,  3}, // level 1
	    {50000,   10000,  50,   50,  25,  10, 4}, // level 2
	    {100000,  25000,  100,  75,  50,  20, 5} // level 3
	};

	if(VehicleInfo[vehicleid][vTrunk] > 0)
	{
		return stashCapacities[VehicleInfo[vehicleid][vTrunk] - 1][item];
	}

	return 0;
}

GetGangStashCapacity(gangid, item)
{
	static const stashCapacities[][] = {
		{1000000, 100000, 500,  500,  250,  50},
		{2000000, 200000, 1000, 1000, 500,  100},
		{3000000, 300000, 1500, 1500, 1000, 250}
	};

	return stashCapacities[GangInfo[gangid][gLevel] - 1][item];
}

GetHouseStashCapacity(houseid, item)
{
	static const stashCapacities[][] = {
		// Cash   Mats    W     C    M    P    W
	    {100000,  50000,  100,  50,  25,  20,  2}, // level 1
	    {250000,  75000,  250,  100, 50,  40,  4}, // level 2
	    {500000,  100000, 500,  250, 100, 60,  6}, // level 3
	    {750000,  250000, 750,  500, 200, 80,  8}, // level 4
	    {1000000, 500000, 1000, 750, 250, 100, 10}, // level 5
	    {1000000, 500000, 1000, 750, 250, 100, 10} // level 6
	};

	return stashCapacities[HouseInfo[houseid][hLevel] - 1][item];
}

GetHouseTenantCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 5;
	    case 1: return 10;
	    case 2: return 15;
	    case 3: return 20;
	    case 4: return 25;
	    case 5, 6: return 30;
	}

	return 0;
}

GetHouseFurnitureCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 50;
	    case 1: return 100;
	    case 2: return 150;
	    case 3: return 250;
	    case 4: return 400;
	    case 5: return 500;
	    case 6: return 9999;
	}

	return 0;
}

GetNearbyHouseEx(playerid)
{
	return GetNearbyHouse(playerid) == -1 ? GetInsideHouse(playerid) : GetNearbyHouse(playerid);
}

GetNearbyHouse(playerid)
{
	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideHouse(playerid)
{
	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetHouseOwner(houseid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(HouseInfo[houseid][hOwner], "Khong co", MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, HouseInfo[houseid][hOwner], MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = PlayerInfo[playerid][pID];
	}

	HouseInfo[houseid][hTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", HouseInfo[houseid][hTimestamp], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
}

RemoveFurniture(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteFurnitureObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadFurniture(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, labels);
	}
}

ReloadAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);
	}
}

ReloadHouse(houseid)
{
	if(HouseInfo[houseid][hExists])
	{
	    new
	        string[128],
			type[16];

		DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
        DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

		if(HouseInfo[houseid][hType] == -1)
		{
		    type = "Khac";
		}
		else
		{
		    strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
		}

        if(HouseInfo[houseid][hOwnerID] == 0)
        {
	        format(string, sizeof(string), "[For Sale - %i]\nGia: %s\nLoai: %s\nCap do: %i", houseid, FormatNumber(HouseInfo[houseid][hPrice]), type, HouseInfo[houseid][hLevel]);
		}
		else
		{
		    if(HouseInfo[houseid][hRentPrice] > 0)
		    {
		        format(string, sizeof(string), "[House - %i]\nSo huu: %s\nLoai: %s\nThue: $%i\nCap do: %i", houseid, HouseInfo[houseid][hOwner], type, HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hLevel]);
		    }
		    else
		    {
			    format(string, sizeof(string), "[House - %i]\nSo huu: %s\nLoai: %s\nCap do: %i", houseid, HouseInfo[houseid][hOwner], type, HouseInfo[houseid][hLevel]);
			}
		}

		HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(string, COLOR_AQUA, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
        HouseInfo[houseid][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
	//	HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 31, 1, -1, -1, -1, 100.0);
	}
}

IsNumeric(const string[])
{
	new
		len = strlen(string),
		i;

	if(string[0] == '-') i = 1;

	while(i < len)
	{
	    if(!('0' <= string[i++] <= '9'))
	        return 0;
	}

	return 1;
}

GetVehicleParams(vehicleid, param)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
	return params[param] == VEHICLE_PARAMS_ON;
}

SetVehicleParams(vehicleid, param, status)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);

	params[param] = status;

	return SetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
}
/*
Float:GetVehicleSpeedMPH(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 100;
	}

	return 0.0;
}
*/
Float:GetVehicleSpeed(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 181.5;
	}

	return 0.0;
}

VehicleHasWindows(vehicleid)
{
    static const vehicleWindows[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    model = GetVehicleModel(vehicleid);

	if(400 <= model <= 611)
	{
	    return vehicleWindows[model - 400];
	}

	return 0;
}

VehicleHasEngine(vehicleid)
{
	static const vehicleEngines[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleEngines[modelid - 400];
	}

	return 0;
}

GetVehicleSeatCount(vehicleid)
{
    static const vehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleSeats[modelid - 400];
	}

	return 0;
}

IsSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seatid)
	    {
	        return 1;
		}
	}

	return 0;
}

GetVehicleName(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, vehicleNames[modelid - 400]);
	else
	    name = "Unknown";

	return name;
}

GetVehicleModelByName(const string[])
{
	new
	    modelid = strval(string);

	if(400 <= modelid <= 611)
	{
	    return modelid;
	}

	for(new i = 0; i < sizeof(vehicleNames); i ++)
	{
		if(strfind(vehicleNames[i], string, true) != -1)
  		{
			return i + 400;
		}
	}

	return 0;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return 1;
		}
	}

	return 0;
}

AnticheatCheck(playerid)
{
	if(gettime() > PlayerInfo[playerid][pACTime] && !PlayerInfo[playerid][pKicked])
	{
	    // Speedhacking
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 350 && PlayerInfo[playerid][pAdmin] < 2 && !IsAPlane(GetPlayerVehicleID(playerid)) && !IsAHelicopter(GetPlayerVehicleID(playerid)))
		{
			SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co dang the dang SpeedHack, Toc do: %.1f km/h.", GetPlayerRPName(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
   			Log_Write("log_cheat", "%s (uid: %i) dang co the SpeedHack, Toc do: %.1f km/h", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		}

		// Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pJetpack])
		{
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da bi tu dong cam boi %s, Ly do: Jetpack", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
	    	BanPlayer(playerid, SERVER_ANTICHEAT, "Jetpack");
		}

		// Flying hacks
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
			    case 958, 1538..1544:
			    {
			        new
			            Float:z,
			            Float:vx,
			            Float:vy,
			            Float:vz;

					GetPlayerPos(playerid, z, z, z);
                    GetPlayerVelocity(playerid, vx, vy, vz);

                    if((z > 30.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && PlayerInfo[playerid][pAdmin] < 2)
                    {
                        SendClientMessageToAllEx(COLOR_YELLOW, "AdmCmd: %s da bi kick boi %s, Ly do: Flying hacks", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
	    				KickPlayer(playerid);
					}
				}
			}
		}

		// Armor hacks
		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
		{
		    new
   				Float:armor;

			GetPlayerArmour(playerid, armor);

  			if(floatround(armor) > floatround(PlayerInfo[playerid][pArmor]) && gettime() > PlayerInfo[playerid][pACTime] && gettime() > PlayerInfo[playerid][pArmorTime] && PlayerInfo[playerid][pAdmin] < 2)
			{
	            PlayerInfo[playerid][pACWarns]++;
    	        PlayerInfo[playerid][pArmorTime] = gettime() + 10;

			    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			    {
			        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co the dang ArmorHack. (Ban dau: %.2f, Sau: %.2f)", GetPlayerRPName(playerid), playerid, PlayerInfo[playerid][pArmor], armor);
			        Log_Write("log_cheat", "%s (uid: %i) co the dang ArmorHack. (Ban dau: %.2f, Sau: %.2f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], PlayerInfo[playerid][pArmor], armor);
				}
				else
				{
				    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da bi tu dong cam boi %s, Ly do: Armor hacking", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
				    BanPlayer(playerid, SERVER_ANTICHEAT, "Armor hacking");
				}

				PlayerInfo[playerid][pArmor] = armor;
			}
		}
	}

	// Ammo hacks
	if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !(PlayerInfo[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
	{
	    new
			weapon,
			ammo;

		GetPlayerWeaponData(playerid, 8, weapon, ammo);

		if((16 <= weapon <= 18) && ammo <= 0)
		{
			RemovePlayerWeapon(playerid, weapon);
		}
	}

	// Warping into vehicles while locked
	/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_DOORS) && (!IsVehicleOwner(playerid, GetPlayerVehicleID(playerid)) && PlayerInfo[playerid][pVehicleKeys] != GetPlayerVehicleID(playerid)))
    {
        new
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1.0);
        GameTextForPlayer(playerid, "~r~This vehicle is locked!", 3000, 3);
    }*/
}

IsAnIP(ip[])
{
	new part[4];

	if(!sscanf(ip, "p<.>iiii", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (0 <= part[2] <= 255) && (0 <= part[3] <= 255);
	}
	else if(!sscanf(ip, "p<.>iicc", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (part[2] == '*' && part[3] == '*');
	}

	return 0;
}

IsValidName(name[])
{
	for(new i = 0, j = strlen(name); i < j; i ++)
	{
	    if(!(3 <= j <= MAX_PLAYER_NAME))
	        return 0;

	    switch(name[i])
	    {
	        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '[', ']', '(', ')', '=', '@', '$':
	        {
	            continue;
			}
			default:
			{
			    return 0;
			}
		}
	}

	return 1;
}

IsValidModel(modelid)
{
    static modeldat[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};

	if((modelid >= 0) && ((modelid / 32) < sizeof (modeldat)) && (modeldat[modelid / 32] & (1 << (modelid % 32))))
  	{
   	    return 1;
	}

	if((18632 <= modelid <= 19999) || (11682 <= modelid <= 11753))
	{
	    return 1;
	}

 	return 0;
}

IsPlayerOnline(const name[], &id = INVALID_PLAYER_ID)
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerNameEx(i), name, true) && PlayerInfo[i][pLogged])
	    {
	        id = i;
	        return 1;
		}
	}

	id = INVALID_PLAYER_ID;
	return 0;
}

/*IsPlayerSpawned(playerid)
{
	switch(GetPlayerState(playerid))
	{
	    case PLAYER_STATE_NONE, PLAYER_STATE_WASTED, PLAYER_STATE_SPECTATING:
	    {
	        return 0;
		}
	}

	return 1;
}*/

IsPlayerAiming(playerid)
{
    new
		keys,
		ud,
		lr;

	GetPlayerKeys(playerid, keys, ud, lr);

	if((keys & KEY_HANDBRAKE) & KEY_HANDBRAKE && (22 <= GetPlayerWeapon(playerid) <= 38))
	{
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1160..1167, 360..363, 220, 640, 1189, 1331, 1365, 1453, 1449, 1643:
			{
			    return 1;
			}
		}
	}

	return 0;
}

stock GetDistanceFromPlayerToTrailer(playerid,carid)
{

	if(GetVehicleModel(carid) == 435)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
			new Float:tmpdis;
			GetPlayerPos(playerid,x1,y1,z1);
			GetVehiclePos(carid,x2,y2,z2);
			tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
			return floatround(tmpdis);
		}
	}
	return 200;
}

stock GetPlayerNearestTrailer(playerid)
{
	for(new i = 0; i<MAX_VEHICLES; i++)
	{
		if(GetDistanceFromPlayerToTrailer(playerid, i) <=15)
		return i;
	}
	return -1;
}

IsPointInRangeOfPoint(Float:x1, Float:y1, Float:z1, Float:radius, Float:x2, Float:y2, Float:z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;

	return ((x1 * x1) + (y1 * y1) + (z1 * z1)) < (radius * radius);
}

IsVehicleInGarage(vehicleid, garageid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	return IsPointInRangeOfPoint(x, y, z, 50.0, garageInteriors[GarageInfo[garageid][gType]][intVX], garageInteriors[GarageInfo[garageid][gType]][intVY], garageInteriors[GarageInfo[garageid][gType]][intVZ]) && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld];
}


IsPlayerAtFuelStation(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 1004.0070, -939.3102, 42.1797) || IsPlayerInRangeOfPoint(playerid, 12.0, 1944.3260, -1772.9254, 13.3906) || IsPlayerInRangeOfPoint(playerid, 12.0, -90.5515, -1169.4578, 2.4079) || IsPlayerInRangeOfPoint(playerid, 12.0, -1609.7958, -2718.2048, 48.5391)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, -2029.4968, 156.4366, 28.9498) || IsPlayerInRangeOfPoint(playerid, 12.0, -2408.7590, 976.0934, 45.4175) || IsPlayerInRangeOfPoint(playerid, 12.0, -2243.9629, -2560.6477, 31.8841) || IsPlayerInRangeOfPoint(playerid, 12.0, -1676.6323, 414.0262, 6.9484)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2202.2349, 2474.3494, 10.5258) || IsPlayerInRangeOfPoint(playerid, 12.0, 614.9333, 1689.7418, 6.6968) || IsPlayerInRangeOfPoint(playerid, 12.0, -1328.8250, 2677.2173, 49.7665) || IsPlayerInRangeOfPoint(playerid, 12.0, 70.3882, 1218.6783, 18.5165)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 654.9641, -559.7485, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 654.9617, -570.4176, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 1382.9899, 461.9903, 20.1245) || IsPlayerInRangeOfPoint(playerid, 12.0, 1380.9395, 457.2494, 19.9260)) {
	    return 1;
	} else if((IsAPlane(GetPlayerVehicleID(playerid)) || IsAHelicopter(GetPlayerVehicleID(playerid))) && IsPlayerInRangeOfPoint(playerid, 20.0, 1439.7886, -2445.6777, 13.5547)) {
	    return 1;
	} else if((IsABoat(GetPlayerVehicleID(playerid))) && IsPlayerInRangeOfPoint(playerid, 10.0, 133.461380, -1815.096557, 3.989328) || IsPlayerInRangeOfPoint(playerid, 10.0, 138.547210, -1815.308593, 3.989328) || IsPlayerInRangeOfPoint(playerid, 10.0, 144.042800, -1815.534912, 3.989328)) {
	    return 1;
	}

	return 0;
}


IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

IsPlayerInRangeOfPlayer(playerid, targetid, Float:radius)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    return 1;
	}

	return 0;
}

SetMusicStream(type, extraid, url[])
{
	switch(type)
	{
	    case MUSIC_MP3PLAYER:
	    {
	        if(isnull(url) && PlayerInfo[extraid][pStreamType] == type)
	        {
	            StopAudioStreamForPlayer(extraid);
	            PlayerInfo[extraid][pStreamType] = MUSIC_NONE;
	        }
	        else
	        {
	            PlayAudioStreamForPlayer(extraid, url);
	            PlayerInfo[extraid][pStreamType] = type;
	        }
		}
		case MUSIC_BOOMBOX:
		{
		    foreach(new i : Player)
		    {
		        if(PlayerInfo[i][pBoomboxListen] == extraid)
		        {
				    if(isnull(url) && PlayerInfo[i][pStreamType] == type)
				    {
				        StopAudioStreamForPlayer(i);
			            PlayerInfo[i][pStreamType] = MUSIC_NONE;
			        }
			        else if(PlayerInfo[i][pStreamType] == MUSIC_NONE || PlayerInfo[i][pStreamType] == MUSIC_BOOMBOX)
			        {
			            PlayAudioStreamForPlayer(i, url);
			            PlayerInfo[i][pStreamType] = type;
			        }
				}
			}

			strcpy(PlayerInfo[extraid][pBoomboxURL], url, 128);
		}
		case MUSIC_VEHICLE:
		{
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, extraid))
		        {
				    if(isnull(url) && PlayerInfo[i][pStreamType] == type)
				    {
		        		StopAudioStreamForPlayer(i);
	            		PlayerInfo[i][pStreamType] = MUSIC_NONE;
			        }
	    		    else if(PlayerInfo[i][pStreamType] == MUSIC_NONE || PlayerInfo[i][pStreamType] == MUSIC_VEHICLE)
			        {
	    		        PlayAudioStreamForPlayer(i, url);
	           		 	PlayerInfo[i][pStreamType] = type;
					}
				}
			}

			strcpy(vehicleStream[extraid], url, 128);
		}
	}
}

DestroyWeedPlant(playerid)
{
	if(PlayerInfo[playerid][pWeedPlanted])
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weedplanted = 0, weedtime = 0, weedgrams = 0, weed_x = 0.0, weed_y = 0.0, weed_z = 0.0, weed_a = 0.0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[playerid][pWeedPlanted] = 0;
	    PlayerInfo[playerid][pWeedTime] = 0;
	    PlayerInfo[playerid][pWeedGrams] = 0;
	    PlayerInfo[playerid][pWeedX] = 0.0;
	    PlayerInfo[playerid][pWeedY] = 0.0;
	    PlayerInfo[playerid][pWeedZ] = 0.0;
	    PlayerInfo[playerid][pWeedA] = 0.0;
	}
}

DestroyBoombox(playerid)
{
	if(PlayerInfo[playerid][pBoomboxPlaced])
	{
    	DestroyDynamicObject(PlayerInfo[playerid][pBoomboxObject]);
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pBoomboxText]);

		PlayerInfo[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
		PlayerInfo[playerid][pBoomboxText] = Text3D:INVALID_3DTEXT_ID;
        PlayerInfo[playerid][pBoomboxPlaced] = 0;
        PlayerInfo[playerid][pBoomboxURL] = 0;
	}
}

GetNearbyBoombox(playerid)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pBoomboxPlaced] && IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[i][pBoomboxObject], 30.0))
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

SendClientMessageEx(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageToAllEx(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged])
	        {
			    SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged])
	        {
			    SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

Log_Write(table[], const text[], {Float,_}:...)
{
	static
  	    args,
	    str[1024];

	if((args = numargs()) <= 2)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, text);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, str);
	    mysql_tquery(connectionID, queryBuffer);

		#emit RETN
	}
	return 1;
}

SendFactionMessage(factionid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pFaction] == factionid)
	        {
	    		SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pFaction] == factionid)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGangMessage(gangid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	        {
	    		SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGraphicMessage(color, string2[])
{
	foreach(new i:Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pGraphic] >= 1 || PlayerInfo[i][pAdmin] >= 5)
			{
				SendClientMessage(i, color, string2);
			}
        }
	}
}

SendFMMessage(color, string2[])
{
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pFactionMod] >= 1 || PlayerInfo[i][pGameAffairs] || PlayerInfo[i][pAdmin] >= 7)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}

SendGMMessage(color, string2[])
{
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pGangMod] >= 1 || PlayerInfo[i][pGameAffairs] || PlayerInfo[i][pAdmin] >= 7)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}


SendAPMessage(color, string2[])
{
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pAdminPersonnel] >= 1 || PlayerInfo[i][pAdmin] >= 8)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}

SendWDMessage(color, string2[])
{
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pWebDev] >= 1 || PlayerInfo[i][pAdmin] >= 8)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}

SendDGAMessage(color, string2[])
{
	foreach(new i: Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pGameAffairs] >= 1 || PlayerInfo[i][pAdmin] >= 8)
			{
				SendClientMessage(i, color, string2);
			}
		}
	}
}

SendAdminMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAdmin] > 0)
	        {
	    		SendClientMessage(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAdmin] > 0)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SendHelperMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
			if(PlayerInfo[i][pLogged] && PlayerInfo[i][pHelper] > 0)
	        {
	    		SendClientMessage(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pHelper] > 0)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SendTurfMessage(turfid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendStaffMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && (PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0))
	        {
	    		SendClientMessage(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && (PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pHelper] > 0))
	        {
	    		SendClientMessage(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SetPlayerBubbleText(playerid, Float:drawdistance, color, text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    SetPlayerChatBubble(playerid, text, color, drawdistance, 8000);
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SetPlayerChatBubble(playerid, str, color, drawdistance, 8000);

		#emit RETN
	}
	return 1;
}

SendProximityMessage(playerid, Float:radius, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerInfo[i][pListen])
	        {
	            SendClientMessage(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || PlayerInfo[i][pListen])
	        {
	            SendClientMessage(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendProximityFadeMessage(playerid, Float:radius, const text[], color1, color2, color3, color4, color5)
{
    foreach(new i : Player)
    {
    	if(!IsPlayerInAnyVehicle(playerid) ||
    		(IsPlayerInAnyVehicle(playerid) && VehicleInfo[GetPlayerVehicleID(playerid)][vWindowsOpen])){

		    if(IsPlayerInRangeOfPlayer(i, playerid, radius / 16))
			{
	            SendClientMessage(i, color1, text);
	        }
			else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 8))
			{
	            SendClientMessage(i, color2, text);
	        }
			else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 4))
			{
	            SendClientMessage(i, color3, text);
	        }
			else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 2))
			{
	            SendClientMessage(i, color4, text);
	        }
			else if(IsPlayerInRangeOfPlayer(i, playerid, radius))
			{
	            SendClientMessage(i, color5, text);
	        }
    	}
    	else if(IsPlayerInAnyVehicle(playerid) && !VehicleInfo[GetPlayerVehicleID(i)][vWindowsOpen]){
    		new vehID = GetPlayerVehicleID(playerid);
    		if(IsPlayerInVehicle(i, vehID))
    			SendClientMessage(i, color5, text);
    		else if(PlayerInfo[i][pSpectating] != INVALID_PLAYER_ID){
    			if(IsPlayerInVehicle(PlayerInfo[i][pSpectating], vehID))
    				SendClientMessage(i, color5, text);
    		}
    	}

        if(PlayerInfo[i][pListen])
        {
            SendClientMessage(i, color5, text);
        }
	}
	return 1;
}


// ---------------------------------------

forward TutorialTimer(playerid, stage);
public TutorialTimer(playerid, stage)
{
	//new string[2048];
	if(PlayerInfo[playerid][pLogged] && PlayerInfo[playerid][pTutorial])
	{
		switch(stage)
		{
		    /*case 1://Newcity
		    {
		        ClearChat(playerid);
		        ShowTutorialTextDraws(playerid);
                InterpolateCameraPos(playerid,1299.5972, 320.3192, 71.7217, 2407.7202, -216.3407, 169.8205, 15000);
				InterpolateCameraLookAt(playerid, 1349.5016, 288.6782, 43.9138, 2421.4690, -9.3365, 91.1036, 15000);

				format(string, sizeof(string), "Chao mung den voi NewCity Roleplay! Chung toi hy vong ban se tim duoc niem vui tai may chu!");
				strcat(string, "~n~Chung toi tu hao may chu la mot moi truong Roleplay sach se nhat va mang lai cho ban nhung trai nghiem tot nhat!");
				strcat(string, "~n~Quy tac tai may chu se cuc ky nghiem ngat, vi may chu theo the loai RolePlay Hard.");
                strcat(string, "~n~Duoc roi, hay kien nhan xem phuong huong dan nay nhe.");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 16000, false, "ii", playerid, 2);
		    }
		    case 2://Thi bang lai
		    {
		        ClearChat(playerid);
                ShowTutorialTextDraws(playerid);
	            InterpolateCameraPos(playerid, 2407.7202, -216.3407, 169.8205, 822.9133, -542.4017, 43.3411, 10000);
				InterpolateCameraLookAt(playerid, 2421.4690, -9.3365, 91.1036, 850.7822, -583.7292, 24.3269, 10000);
				SetPlayerPos(playerid, 1223.7166,-1851.4952,8.3894);


				format(string, sizeof(string), "Ban dang duoc thay la mot diem thi bang lai xe cua chung toi.");
				strcat(string, "~n~Mac du ban co the lai xe khong can giay phep, nhung hay co gang thi de lay giay phep nhe!");
				strcat(string, "~n~Khi lay duoc giay phep lai xe, da den luc ban co the de lam viec tai thi tran.");
                strcat(string, "~n~Neu muon tim viec, hay thu voi cong viec Giao hang nhanh hoac Giao thuc an nhe!");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 3);
		    }
		    case 3:
		    {
		        PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", playerid, 4);
		    }
		    case 4://Trung tam
		    {
		        ClearChat(playerid);
		        ShowTutorialTextDraws(playerid);

				InterpolateCameraPos(playerid, 822.9133, -542.4017, 43.3411, 1127.9771, 227.5445, 137.0264, 5000);
				InterpolateCameraLookAt(playerid, 850.7822, -583.7292, 24.3269, 1213.4462, 261.5673, 106.163, 5000);
				SetPlayerPos(playerid, 1310.9757,-1445.2444,-27.2783);


				format(string, sizeof(string), "Montgomery la thi tran trung tam cua Red Country");
				strcat(string, "~n~Montgomery la noi duoc cong dan Red Country tap trung dong nhat.");
				strcat(string, "~n~Ban cung co the lam viec Giao thuc an tai noi day.");
                strcat(string, "~n~Noi day co tru so cua Benh vien Montgomery thuoc to chuc San Andreas Medic Department.");
                strcat(string, "~n~De biet them thong tin, hay truy cap: forum.new-city.net");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 5);
		    }
		    case 5: //Mot thi tran ke ben
		    {
		        ClearChat(playerid);
		        ShowTutorialTextDraws(playerid);

				InterpolateCameraPos(playerid, 1127.9771, 227.5445, 137.0264, 372.5904, -7.8266, 152.2337, 5000);
				InterpolateCameraLookAt(playerid, 1213.4462, 261.5673, 106.163, 278.2493, -89.9985, 78.1909, 5000);

				SetPlayerPos(playerid, 1493.3798,-1668.6997,-15.7351);

				format(string, sizeof(string), "Mot thi tran ke ben Red Country.");
				strcat(string, "~n~Thi tran Blueberry la mot thi tran kha lon.");
				strcat(string, "~n~Day cung chinh la noi co trang trai lon nhat New City.");
                strcat(string, "~n~Ban cung co the lay cac mat hang hoa tai noi nay,");
                strcat(string, "~n~Whether it be enforcing the law, saving lives, or reporting the news.");
                strcat(string, "~n~You can apply to become a faction member on our forum at Https://forums.new-city.net");
                strcat(string, "~n~Being in a faction is quite fun and can lead to some good cash and perks for you!");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 6);
		    }
		    case 6://RCPD
		    {
		        ClearChat(playerid);
		        ShowTutorialTextDraws(playerid);

				InterpolateCameraPos(playerid, 1127.9771, 227.5445, 137.0264, 706.9855, -536.1505, 71.5178, 7000);
				InterpolateCameraLookAt(playerid, 1213.4462, 261.5673, 106.163, 643.1876, -569.4476, 24.4560, 7000);

				SetPlayerPos(playerid, 2467.3708,-1666.0961,7.8903);

				format(string, sizeof(string), "Tru so San Andreas Sheriff Department.");
				strcat(string, "~n~San Andreas Sheriff Department la to chuc thi hanh phap luat co tru so tai khap cac bien gioi mien tay San Andreas!");
				strcat(string, "~n~Ho dam nhiem trat tu tai cac khu vuc bien gioi va nong thon ngoai ra ho con");
				strcat(string, "~n~can thiep cac van de ve cac thanh pho tren khap ban do.");
                strcat(string, "~n~Lam viec mot cach chuyen nghiep va co hieu qua cao.");
                strcat(string, "~n~Ngan can cac te nan xa hoi, bao dam trat tu tai cac vung nong thon va San Andreas.");
                strcat(string, "~n~De biet them thong tin, hay truy cap: forum.new-city.net");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 7);
		    }
		    case 7://House
			{
			    ClearChat(playerid);

			    ShowTutorialTextDraws(playerid);

				InterpolateCameraPos(playerid, 706.9855, -536.1505, 71.5178, 2366.1958, 2.3510, 75.7181, 7000);
				InterpolateCameraLookAt(playerid, 643.1876, -569.4476, 24.4560, 2465.8384, 58.0560, 36.7476, 7000);

				SetPlayerPos(playerid, 2093.6177,-1302.5441,4.6590);

				format(string, sizeof(string), "Dillimore la mot thi tran thuoc Red Country!");
				strcat(string, "~n~Dillimore la mot khu dan cu dong nhat Red Country.");
				strcat(string, "~n~Tai day ban co the lua chon cho minh mot ngoi nha hoac thue nha tai day!");
                strcat(string, "~n~Noi day cung la noi quan trong cua thi truong Bat dong san!");
                strcat(string, "~n~De biet them thong tin, hay truy cap: forum.new-city.net");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 8);
		    }
		    case 8:
		    {
				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", playerid, 9);
		    }
		    case 9:
		    {
		        ClearChat(playerid);
		        ShowTutorialTextDraws(playerid);

				InterpolateCameraPos(playerid, 2366.1958, 2.3510, 75.7181, 1127.9771, 227.5445, 137.0264, 7000);
				InterpolateCameraLookAt(playerid, 2465.8384, 58.0560, 36.7476, 1213.4462, 261.5673, 106.163, 7000);

				SetPlayerPos(playerid, 2216.8718,-1122.6305,4.1262);

				format(string, sizeof(string), "May chu theo the loai RolePlay, nen ban can biet luat RP truoc khi choi!");
				strcat(string, "~n~1.) Khong giet nguoi khong co ly do (DM), khong tuong tac voi nhau, giet nguoi Non-RP.");
				strcat(string, "~n~2.) Khong su dung cac thong tin OOC dua vao IC (MG).");
                strcat(string, "~n~3.) Khong su dung cac hanh dong phi thuc te hay cuong buc nguoi khac.");
                strcat(string, "~n~4.) Khong su dung cac phan mem thu 3/cleo vao tro choi.");
                strcat(string, "~n~5.) Khong khai thac loi. Neu phat hien bat ky loi nao hay bao cao den quan tri vien.");
                strcat(string, "~n~Hay ghe tham trang chu cua chung toi - new-city.net de xem cac quy tac.!");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 10);
			}
			case 10:
			{
			    ClearChat(playerid);
                ShowTutorialTextDraws(playerid);

				format(string, sizeof(string), "Cam on ban da kien nhan xem het phan huong dan nay.");
				strcat(string, "~n~Neu khong biet lenh tai may chu hay su dung /trogiup.");
				strcat(string, "~n~Neu co thac mac nao hay su dung /n hoac /newbie!");
                strcat(string, "~n~Trang chu: new-city.net");
                strcat(string, "~n~Discord: discord.io/ncrp22");
                strcat(string, "~n~Dien dan: forum.new-city.net");
 				TextDrawSetString(Tutorial[2], string);

				PlayerInfo[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 15000, false, "ii", playerid, 11);
			}
			case 11:
			{
				HideTutorialTextDraws(playerid);
				SetPlayerPos(playerid, 1357.3593, 252.4489, 19.5669, 68.4006); //noi nguoi choi chon skin
				SetPlayerVirtualWorld(playerid, 50); //vw khi nguoi choi chon skin
				SetPlayerCameraPos(playerid, 1352.9169, 255.6082, 18.7); //Cameara pos
				SetPlayerCameraLookAt(playerid, 1357.3593, 252.4489, 19.5669, 68.4006); 
				switch(PlayerInfo[playerid][pGender])
				{
					case 1: SetPlayerSkin(playerid, 2);
					case 2: SetPlayerSkin(playerid, 9);

				}   
				for(new i;i<6;i++)TextDrawShowForPlayer(playerid,SelectSkin[i]);
				SelectTextDraw(playerid, 0xFF4040AA);
			}
			*/case 11:
			{
				ClearChat(playerid);
			    PlayerInfo[playerid][pTutorial] = 0;
			   	PlayerInfo[playerid][pSetup] = 0;
			   	PlayerInfo[playerid][pCash] = 300;
			   	PlayerInfo[playerid][pMaterials] = 0;
			   	PlayerInfo[playerid][pBank] = 100;
			   	PlayerInfo[playerid][pHours] = 0;
			   	PlayerInfo[playerid][pHunger] = 100;
			   	PlayerInfo[playerid][pThirsty] = 100;
			    PlayerInfo[playerid][pCzID] = random(799999) + 199999;
			   	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                HideTutorialTextDraws(playerid);
                SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			    SetPlayerPos(playerid, 1357.3593, 252.4489, 19.5669);
			    SetPlayerFacingAngle(playerid, 25.0000);
			    SetPlayerVirtualWorld(playerid, 0);
			    SetCameraBehindPlayer(playerid);
			    StopAudioStreamForPlayer(playerid);
			    TogglePlayerControllable(playerid, 1);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET setup = 0, czid = %i, hours = %i, materials = %i, cash = %i, bank = %i,  gender = %i, age = %i, skin = %i, hunger = %i, thirsty = %i WHERE uid = %i", PlayerInfo[playerid][pCzID], PlayerInfo[playerid][pHours], PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pCash], PlayerInfo[playerid][pBank], PlayerInfo[playerid][pGender], PlayerInfo[playerid][pAge], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pHunger], PlayerInfo[playerid][pThirsty], PlayerInfo[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_WHITE, "Chao mung toi {6FD497}NewCity Roleplay{FFFFFF}. Truy cap www.new-city.net de xem cap nhat moi nhat. - tham gia Discord. discord.io/ncrp22");
				SendClientMessage(playerid, COLOR_WHITE, "Su dung {FFFF90}/locate{FFFFFF} de tim vi tri cong viec, doanh nghiep va cac vi tri khac.");
                SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Thanh pho] {FFFFFF}Ma so can cuoc cong dan cua ban la: {df3a3a}%i", PlayerInfo[playerid][pCzID]);

				SendStaffMessage(COLOR_YELLOW, "OnPlayerSpawn: %s[%d] vua tham gia NewCity Roleplay lan dau tien!", GetPlayerRPName(playerid), playerid);
				ShowPlayerDialog(playerid, DIALOG_NEWBWELCOME, DIALOG_STYLE_MSGBOX, "{FFFFFF}Chao mung toi {6FD497}NewCity Roleplay", "Ban co can mot nguoi tro giup ban khong?", "Co", "Khong");
			}
		}
	}
	return 1;
}

forward Countdown(playerid, count);
public Countdown(playerid, count)
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
                    GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
                    GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
                    GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("Countdown", 1000, false, "ii", playerid, count);
	}
}

#if defined SERVER_INTRO

forward ShowLoginScreenTextdraw(playerid, type);
public ShowLoginScreenTextdraw(playerid, type)
{
	if(PlayerInfo[playerid][pWatchingIntro])
	{
		if(type == 1) {
		    TextDrawShowForPlayer(playerid, introTextdraws[3]);
		} else if(type == 2) {
	    	TextDrawShowForPlayer(playerid, introTextdraws[5]);
		} else if(type == 3) {
	    	TextDrawShowForPlayer(playerid, introTextdraws[19]);
		} else if(type == 4) {
		    TextDrawShowForPlayer(playerid, introTextdraws[21]);
		} else if(type == 5) {
		    TextDrawShowForPlayer(playerid, introTextdraws[24]);
		} else if(type == 6) {
	    	TextDrawShowForPlayer(playerid, introTextdraws[25]);
		}
	}
}

forward StreamNextStep(playerid, type);
public StreamNextStep(playerid, type)
{
	if(!PlayerInfo[playerid][pWatchingIntro])
	{
	    return 0;
	}

	switch(type)
	{
		case 0:
		{
			InterpolateCameraPos(playerid, 187.600982, -1791.727050, 119.087432, 193.731567, -1789.235473, 118.845245, 5000);
			InterpolateCameraLookAt(playerid, 189.006942, -1790.279785, 114.512641, 195.057144, -1788.512817, 114.078620, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 1);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[2]);
            TextDrawHideForPlayer(playerid, introTextdraws[3]);
            TextDrawShowForPlayer(playerid, introTextdraws[4]);
            SetTimerEx("ShowLoginScreenTextdraw", 2000, false, "ii", playerid, 2);
		}
		case 1:
		{
			InterpolateCameraPos(playerid, 300.803771, -1753.841796, 59.482250, 332.887237, -1753.466674, 60.534908, 4000);
			InterpolateCameraLookAt(playerid, 302.467315, -1749.504394, 57.633026, 334.005126, -1748.907470, 58.813385, 4000);
			SetTimerEx("StreamNextStep", 4000-600, false, "ii", playerid, 2);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[4]);
            TextDrawHideForPlayer(playerid, introTextdraws[5]);
            TextDrawShowForPlayer(playerid, introTextdraws[6]);
            TextDrawShowForPlayer(playerid, introTextdraws[7]);
		}
		case 2:
		{
			InterpolateCameraPos(playerid, 350.840972, -1794.716308, 13.146982, 346.193756, -1800.415649, 10.697548, 8000);
			InterpolateCameraLookAt(playerid, 348.053558, -1790.653564, 12.295993, 342.141357, -1797.657592, 9.712170, 8000);
			SetTimerEx("StreamNextStep", 8000-600, false, "ii", playerid, 3);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[6]);
            TextDrawHideForPlayer(playerid, introTextdraws[7]);
            TextDrawShowForPlayer(playerid, introTextdraws[8]);
            TextDrawShowForPlayer(playerid, introTextdraws[9]);
            TextDrawShowForPlayer(playerid, introTextdraws[10]);
            TextDrawShowForPlayer(playerid, introTextdraws[11]);
		}
		case 3:
		{
			InterpolateCameraPos(playerid, 169.602859, -1775.647705, 6.933395, 169.617141, -1776.156250, 12.790164, 5000);
			InterpolateCameraLookAt(playerid, 169.547332, -1770.651367, 7.117267, 169.588928, -1771.159301, 12.618641, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 4);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[8]);
            TextDrawHideForPlayer(playerid, introTextdraws[9]);
            TextDrawHideForPlayer(playerid, introTextdraws[10]);
            TextDrawHideForPlayer(playerid, introTextdraws[11]);
            TextDrawShowForPlayer(playerid, introTextdraws[12]);
            TextDrawShowForPlayer(playerid, introTextdraws[13]);
		}
		case 4:
		{
			InterpolateCameraPos(playerid, 386.273284, -2030.129516, 59.993469, 395.822113, -2044.595703, 59.993469, 5000);
			InterpolateCameraLookAt(playerid, 386.591949, -2029.832275, 55.012496, 396.252319, -2044.526245, 55.012496, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 5);
			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[12]);
            TextDrawHideForPlayer(playerid, introTextdraws[13]);
            TextDrawShowForPlayer(playerid, introTextdraws[14]);
            TextDrawShowForPlayer(playerid, introTextdraws[15]);
		}
		case 5:
		{
			InterpolateCameraPos(playerid, 341.018402, -2095.904052, 6.937077, 342.805603, -2096.498535, 6.648118, 5000);
			InterpolateCameraLookAt(playerid, 345.258972, -2093.501220, 5.821543, 347.304443, -2094.563964, 5.639461, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 6);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[14]);
            TextDrawHideForPlayer(playerid, introTextdraws[15]);
            TextDrawShowForPlayer(playerid, introTextdraws[16]);
            TextDrawShowForPlayer(playerid, introTextdraws[17]);
		}
		case 6:
		{
			InterpolateCameraPos(playerid, 481.641052, -1804.006835, 6.803627, 484.250549, -1802.375244, 6.660738, 5000);
			InterpolateCameraLookAt(playerid, 485.734344, -1801.318481, 5.794973, 488.679290, -1800.236572, 5.759444, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 7);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[16]);
            TextDrawHideForPlayer(playerid, introTextdraws[17]);
            TextDrawShowForPlayer(playerid, introTextdraws[18]);

            SetTimerEx("ShowLoginScreenTextdraw", 2000, false, "ii", playerid, 3);
            //TextDrawShowForPlayer(playerid, introTextdraws[19]);
		}
		case 7:
		{
			InterpolateCameraPos(playerid, 662.689147, -1868.981201, 6.513285, 665.048583, -1870.174438, 6.864079, 5000);
			InterpolateCameraLookAt(playerid, 658.142028, -1867.027709, 5.800874, 661.006286, -1867.294311, 6.260089, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 8);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[18]);
            TextDrawHideForPlayer(playerid, introTextdraws[19]);
            TextDrawShowForPlayer(playerid, introTextdraws[20]);

            SetTimerEx("ShowLoginScreenTextdraw", 2000, false, "ii", playerid, 4);
            //TextDrawShowForPlayer(playerid, introTextdraws[21]);
		}
		case 8:
		{
			InterpolateCameraPos(playerid, 542.343933, -1901.457519, 2.008791, 544.523376, -1901.883666, 2.085470, 5000);
			InterpolateCameraLookAt(playerid, 544.995666, -1897.256958, 2.577868, 546.892395, -1897.521118, 2.681705, 5000);
			SetTimerEx("StreamNextStep", 4500, false, "ii", playerid, 9);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[20]);
            TextDrawHideForPlayer(playerid, introTextdraws[21]);
            TextDrawShowForPlayer(playerid, introTextdraws[22]);
		}
		case 9:
		{
			InterpolateCameraPos(playerid, 542.945800, -1863.699707, 4.435829, 539.996215, -1863.695556, 4.304386, 7000);
			InterpolateCameraLookAt(playerid, 537.950744, -1863.694213, 4.213245, 535.009887, -1863.990478, 4.081802, 7000);
			SetTimerEx("StreamNextStep", 6500, false, "ii", playerid, 10);

			ClearChat(playerid);

			TextDrawHideForPlayer(playerid, introTextdraws[22]);
			TextDrawShowForPlayer(playerid, introTextdraws[23]);

            SetTimerEx("ShowLoginScreenTextdraw", 1000, false, "ii", playerid, 5);
			SetTimerEx("ShowLoginScreenTextdraw", 3000, false, "ii", playerid, 6);
		}
		case 10:
		{
		    for(new i = 0; i < 26; i ++)
			{
			    TextDrawHideForPlayer(playerid, introTextdraws[i]);
			}

            SetPlayerVirtualWorld(playerid, 0);
            ShowMainMenuCamera(playerid, 0);
		    ShowDialogToPlayer(playerid, DIALOG_REGISTER);
		}
	}

	return 1;
}

#endif

forward GrandTheftAutoV(playerid, step, Float:x, Float:y, Float:z, Float:angle, Float:cx, Float:cy, Float:cz);
public GrandTheftAutoV(playerid, step, Float:x, Float:y, Float:z, Float:angle, Float:cx, Float:cy, Float:cz)
{
	if(PlayerInfo[playerid][pLogged])
	{
		SetPlayerCameraLookAt(playerid, x, y, z);

		switch(step)
		{
		    case 1:
		    {
    			SetPlayerCameraPos(playerid, x, y, z + 100.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
				SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 2, x, y, z, angle, cx, cy, cz);
			}
			case 2:
			{
				SetPlayerCameraPos(playerid, x, y, z + 50.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
				SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 3, x, y, z, angle, cx, cy, cz);
			}
			case 3:
			{
				SetPlayerCameraPos(playerid, x, y, z + 25.0);
				PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);
		  		SetTimerEx("GrandTheftAutoV", 1000, false, "iifffffff", playerid, 4, x, y, z, angle, cx, cy, cz);
			}
			case 4:
			{
				InterpolateCameraPos(playerid, cx, cy, cz + 25.0, cx, cy, cz, 1000);
				InterpolateCameraLookAt(playerid, x + 4.0 * floatsin(-angle, degrees), y + 4.0 * floatcos(-angle, degrees), z, x, y, z + 0.6, 1000);
				SetTimerEx("GrandTheftAutoV", 1500, false, "iifffffff", playerid, 5, x, y, z, angle, cx, cy, cz);
			}
			case 5:
			{
			    SetCameraBehindPlayer(playerid);
			    TogglePlayerControllable(playerid, 1);
			    PlayerInfo[playerid][pLoginCamera] = 0;
			}
		}
	}
}

forward DestroyLockText(playerid);
public DestroyLockText(playerid)
{
	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pLockText]))
	{
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][pLockText]);
		PlayerInfo[playerid][pLockText] = Text3D:INVALID_3DTEXT_ID;
	}
}

forward HideAchievementTextdraw(playerid);
public HideAchievementTextdraw(playerid)
{
	for(new i = 6; i < 10; i ++)
	{
	    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][i]);
	}
}

forward SpectateUpdate(playerid, targetid);
public SpectateUpdate(playerid, targetid)
{
	if(PlayerInfo[playerid][pSpectating] == targetid)
	{
		SetPlayerInterior(playerid, GetPlayerInterior(targetid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

		if(IsPlayerInAnyVehicle(targetid))
		{
		    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
		}
		else
		{
		    PlayerSpectatePlayer(playerid, targetid);
		}
	}
}

forward StreamedCheck(playerid, Float:x, Float:y, Float:z, interior, world);
public StreamedCheck(playerid, Float:x, Float:y, Float:z, interior, world)
{
	foreach(new i : Entrance)
	{
    	if(EntranceInfo[i][eExists] && EntranceInfo[i][eFreeze] && IsPointInRangeOfPoint(x, y, z, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && interior == EntranceInfo[i][eInterior] && world == EntranceInfo[i][eWorld])
		{
			SetFreezePos(playerid, x, y, z);
			return 1;
		}
	}

	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
	    if(staticEntrances[i][eFreeze] && IsPointInRangeOfPoint(x, y, z, 100.0, staticEntrances[i][eIntX], staticEntrances[i][eIntY], staticEntrances[i][eIntZ]) && world == staticEntrances[i][eWorld])
		{
            SetFreezePos(playerid, x, y, z);
			return 1;
		}
	}

	return 0;
}

forward UnfreezeNewbie(playerid);
public UnfreezeNewbie(playerid)
{
    TogglePlayerControllable(playerid, 1);
}

forward VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
	{
		SetVehiclePos(vehicleid, x, y, z);
	}

	TogglePlayerControllable(playerid, 1);
}

forward UnfreezePlayer(playerid, Float:x, Float:y, Float:z);
public UnfreezePlayer(playerid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
	{
	    SetPlayerPos(playerid, x, y, z);
	    TogglePlayerControllable(playerid, 1);
		PlayerInfo[playerid][pFreezeTimer] = -1;
	}
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	DestroyDynamicObject(objectid);
}

forward SecondTimer();
public SecondTimer()
{
	new hour, minute, boomboxid, string[128];

	gettime(hour, minute);

	if((gGMX) && mysql_unprocessed_queries(connectionID) == 0)
	{
	    SendRconCommand("gmx");
	}

	foreach(new i : Player)
	{
		//SetPlayerTime(i, hour, minute);
		if(PlayerInfo[i][pLogged] && !PlayerInfo[i][pKicked])
		{
      		AFKCheck(i);
			NOPCheck(i);

		    if(PlayerInfo[i][pLoopAnim] && !PlayerInfo[i][pToggleTextdraws]) {
				TextDrawShowForPlayer(i, AnimationTD);
		    } else {
		        TextDrawHideForPlayer(i, AnimationTD);
		    }

		    if(GetPlayerSurfingVehicleID(i) != INVALID_PLAYER_ID && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !IsSurfVehicle(GetPlayerSurfingVehicleID(i)) && !PlayerInfo[i][pAdminDuty] && GetVehicleSpeed(GetPlayerSurfingVehicleID(i)) > 40)
		    {
		        new
		            Float:x,
		            Float:y,
		            Float:z;

		        SendProximityMessage(i, 20.0, COLOR_PURPLE, "** %s truoc khoi dau xe.", GetPlayerRPName(i));
		        GetPlayerPos(i, x, y, z);
		        SetPlayerPos(i, x + 1, y, z + 3.0);
		        ApplyAnimation(i, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 0, 0);
			}
		    if(PlayerInfo[i][pShipment] >= 0)
			{
				if((GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetVehicleModel(GetPlayerVehicleID(i)) != 414 && GetVehicleModel(GetPlayerVehicleID(i)) != 498))
				{
			    	PlayerInfo[i][pShipment] = -1;
			    	SendClientMessage(i, COLOR_LIGHTRED, "Lo hang da bi huy. Ban da di vao mot chiec xe khac.");
				}
		    }
   			if(Maskara[i] && !PlayerInfo[i][pAdminDuty])
	    	{
	        	format(string, sizeof(string), "Stranger_%d", MaskaraID[i]);
				SetPlayerName(i, string);
	    	}
	    	if(!Maskara[i] && !PlayerInfo[i][pAdminDuty])
	    	{
				SetPlayerName(i, PlayerInfo[i][pUsername]);
	    	}
		    if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_DRINK_BEER || GetPlayerSpecialAction(i) == SPECIAL_ACTION_DRINK_WINE)
		    {
		        if(GetPlayerDrunkLevel(i) > 7000)
		        {
		            AwardAchievement(i, "Party hard");
		        }
		    }
		    if(PlayerInfo[i][pPizzas] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 448)
				{
				    if(PlayerInfo[i][pPizzaTime] < 90)
					{
						PlayerInfo[i][pPizzaTime]++;
					}
				}
				else
				{
				    PlayerInfo[i][pPizzas] = 0;
				    PlayerInfo[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SendClientMessage(i, COLOR_LIGHTRED, "Da huy giao Pizza. Ban da di vao mot chiec xe khac.");
				}
			}
			else if (PlayerInfo[i][pGraffiti] != -1 && PlayerInfo[i][pGraffitiTime] > 0)
			{
				if (Graffiti_Nearest(i) != PlayerInfo[i][pGraffiti])
				{
				    PlayerInfo[i][pGraffiti] = -1;
            	    PlayerInfo[i][pGraffitiTime] = 0;
				}
				else
				{
	    	        PlayerInfo[i][pGraffitiTime]--;

		            if (PlayerInfo[i][pGraffitiTime] < 1)
					{
                        new str[500];
					    strunpack(str, PlayerInfo[i][pGraffitiText]);
	        	        format(GraffitiData[PlayerInfo[i][pGraffiti]][graffitiText], 64, str);

					    GraffitiData[PlayerInfo[i][pGraffiti]][graffitiColor] = PlayerInfo[i][pGraffitiColor];

						Graffiti_Refresh(PlayerInfo[i][pGraffiti]);
					    Graffiti_Save(PlayerInfo[i][pGraffiti]);

					    ClearAnimations(i, 1);
						SendProximityMessage(i, 30.0, COLOR_PURPLE, "** %s cat hop son cua ho.", GetPlayerRPName(i));

		   	            PlayerInfo[i][pGraffiti] = -1;
		   	            PlayerInfo[i][pGraffitiTime] = 0;
					}
				}
			}
		    if(!PlayerInfo[i][pToggleTextdraws])
		    {
			    if(PlayerInfo[i][pGPSOn])
				{
				    PlayerTextDrawSetString(i, PlayerInfo[i][pText][0], GetPlayerZoneName(i));
				}
			}

		    /*if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - PlayerInfo[i][pLastDesync] > 120)
	        {
	            GameTextForPlayer(i, "You are desynced. Please relog once you see this message.", 10000, 6);
	            PlayerInfo[i][pLastDesync] = gettime();
	        }*/
		    if(PlayerInfo[i][pSpectating] != INVALID_PLAYER_ID)
		    {
		        if(GetPlayerInterior(i) != GetPlayerInterior(PlayerInfo[i][pSpectating])) SetPlayerInterior(i, GetPlayerInterior(PlayerInfo[i][pSpectating]));
		        if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(PlayerInfo[i][pSpectating])) SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(PlayerInfo[i][pSpectating]));
		    }
		    if(PlayerInfo[i][pTutorial])
		    {
		        TogglePlayerControllable(i, 0);
		    }
			if(PlayerInfo[i][pAwaitingClothing])
			{
			    SetPlayerClothing(i);
			}
			if(PlayerInfo[i][pDraggedBy] != INVALID_PLAYER_ID)
			{
	    		TeleportToPlayer(i, PlayerInfo[i][pDraggedBy]);
			}
			if(PlayerInfo[i][pVIPPackage] > 0 && gettime() > PlayerInfo[i][pVIPTime])
			{
			    PlayerInfo[i][pVIPPackage] = 0;
			    PlayerInfo[i][pVIPTime] = 0;
			    PlayerInfo[i][pSecondJob] = -1;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0, secondjob = -1 WHERE uid = %i", PlayerInfo[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessage(i, COLOR_LIGHTRED, "Dang ky VIP cua ban da het han. Ban khong con la VIP nua.");
			}
			if(PlayerInfo[i][pVIPPackage] < 2 && PlayerInfo[i][pSecondJob] != JOB_NONE)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", PlayerInfo[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    PlayerInfo[i][pSecondJob] = JOB_NONE;
			    SendClientMessage(i, COLOR_LIGHTRED, "Cong viec thu hai cua ban da xoa vi ban khong phai la Gold+ VIP.");
			}
			if(PlayerInfo[i][pHHCheck])
			{
			    if(PlayerInfo[i][pHHTime] > 0)
			    {
			        new health = GetPlayerHealthEx(i);

			        if(health == PlayerInfo[i][pHHRounded])
			        {
			            PlayerInfo[i][pHHCount]++;
			        }

				    SetPlayerHealth(i, random(100) + 1);

				    PlayerInfo[i][pHHTime]--;
				    PlayerInfo[i][pHHRounded] = health;
				}
				else
				{
				    if(gettime() - PlayerInfo[i][pLastUpdate] >= 3)
					{
					    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] da that ban trong qua trinh kiem tra tinh trang hack khi ho gan the.", GetPlayerRPName(i), i);
					}
				    else if(PlayerInfo[i][pHHCount] > 0)
				    {
					    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co the Hack Health voi co hoi %i phan tram.", GetPlayerRPName(i), i, PlayerInfo[i][pHHCount] * 20);
				    }
				    else
				    {
				        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] duong nhu khong phai la hanh vi Hack Health.", GetPlayerRPName(i), i);
				    }

				    if(NetStats_PacketLossPercent(i) > 10.0)
				    {
				        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] da bi huy dong bo hoa va mat goi %.1f phan tram.", GetPlayerRPName(i), i, NetStats_PacketLossPercent(i));
					}

				    SetPlayerHealth(i, PlayerInfo[i][pHealth]);
				    PlayerInfo[i][pHHCheck] = 0;
				}
			}
			if(PlayerInfo[i][pReceivingAid] && !PlayerInfo[i][pHHCheck])
			{
				new
				    Float:health;

				GetPlayerHealth(i, health);

				if((health + 1.0) > 100.0)
				{
				    SetPlayerHealth(i, 100.0);
				    PlayerInfo[i][pReceivingAid] = 0;
				}
				else
				{
				    SetPlayerHealth(i, health + 1.0);
				}
			}
			if(PlayerInfo[i][pInjured] && IsPlayerInAnyVehicle(i) && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
			{
			    new
			        Float:x,
			        Float:y,
			        Float:z;
			    GetPlayerPos(i, x, y, z);
			    SetPlayerPos(i, x, y, z + 0.5);
			    ClearAnimations(i);
			}
			if(PlayerInfo[i][pTazedTime] > 0)
			{
			    PlayerInfo[i][pTazedTime]--;

			    if(!PlayerInfo[i][pTazedTime])
			    {
			        ClearAnimations(i, 1);

			        if(!PlayerInfo[i][pCuffed])
			        {
				        TogglePlayerControllable(i, 1);
					}
			    }
			}
			if(PlayerInfo[i][pJailType] > 0 && !PlayerInfo[i][pAcceptedHelp])
			{
			    PlayerInfo[i][pJailTime]--;

			    if(PlayerInfo[i][pJailTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SendClientMessage(i, COLOR_GREY2, "An tu cua ban da het han.");
			        SetPlayerPos(i, 1544.4407, -1675.5522, 13.5584);
					SetPlayerFacingAngle(i, 90.0000);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);
					SetCameraBehindPlayer(i);

					PlayerInfo[i][pJailType] = 0;
			        PlayerInfo[i][pJailTime] = 0;
				}
			}
			if(PlayerInfo[i][pEditType] > 0 && IsValidDynamicObject(PlayerInfo[i][pEditObject]) && !IsPlayerInRangeOfDynamicObject(i, PlayerInfo[i][pEditObject], 50.0))
			{
				if(PlayerInfo[i][pEditType] == EDIT_FURNITURE_PREVIEW)
				{
	   				SendClientMessage(i, COLOR_GREY2, "Ban da roi khu vuc chinh sua. Da huy xem truoc noi that.");
	   				DestroyDynamicObject(PlayerInfo[i][pEditObject]);
				}
				else if(PlayerInfo[i][pEditType] == EDIT_FURNITURE)
				{
	   				ReloadFurniture(PlayerInfo[i][pEditObject], HouseInfo[PlayerInfo[i][pFurnitureHouse]][hLabels]);
	   				SendClientMessage(i, COLOR_GREY2, "Ban da roi khu vuc chinh sua. Che do chinh sua da bi tat.");
				}
				else if(PlayerInfo[i][pEditType] == EDIT_LAND_OBJECT)
				{
	   				ReloadLandObject(PlayerInfo[i][pEditObject], LandInfo[PlayerInfo[i][pObjectLand]][lLabels]);
	   				SendClientMessage(i, COLOR_GREY2, "Ban da roi khu vuc chinh sua. Che do chinh sua da bi tat.");
				}
				else if(PlayerInfo[i][pEditType] == EDIT_LAND_OBJECT_PREVIEW)
				{
	   				SendClientMessage(i, COLOR_GREY2, "Ban da roi khu vuc chinh sua. Da huy xem truoc noi that.");
	   				DestroyDynamicObject(PlayerInfo[i][pEditObject]);
				}

				CancelEdit(i);

				PlayerInfo[i][pEditType] = 0;
			   	PlayerInfo[i][pEditObject] = INVALID_OBJECT_ID;
			}
			if(PlayerInfo[i][pHospital] && PlayerInfo[i][pHospitalTime])
			{
				PlayerInfo[i][pHospitalTime]--;

				if(PlayerInfo[i][pHospitalTime] == 0)
				{
				    if(PlayerInfo[i][pInsurance] > 0)
				    {
				        AwardAchievement(i, "Obamacare");
				    }

				    SetPlayerPos(i, -2276.3699, 102.5945, -3.8589);
					SetPlayerFacingAngle(i, 180.0000);
					SetPlayerInterior(i, 1);
					SetPlayerVirtualWorld(i, PlayerInfo[i][pHospitalType]);
					SetCameraBehindPlayer(i);

					if(!(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC))
					{
						GivePlayerCash(i, -500);
						GameTextForPlayer(i, "~w~Xuat vien~n~~r~-$500", 5000, 1);
					}

					TogglePlayerControllable(i, 1);
					SetPlayerDrunkLevel(i, 0);

					if(PlayerInfo[i][pDelivered])
					{
					    if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC)
					        SendClientMessage(i, COLOR_DOCTOR, "Ban da khong duoc lap hoa don cho ban. Ban cung giu tat ca vu khi cua minh!");
					    else
							SendClientMessage(i, COLOR_DOCTOR, "Ban da lap hoa don $500 cho minh. Ban cung giu tat ca vu khi cua minh!");

						PlayerInfo[i][pDelivered] = 0;
					}
					else
					{
                        if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC)
                            SendClientMessage(i, COLOR_DOCTOR, "Ban khong duoc lap hoa don cho ban. Vu khi cua ban da bi tich thu boi nhan vien.");
						else
							SendClientMessage(i, COLOR_DOCTOR, "Ban da lap hoa don $500 cho minh. Vu khi cua ban da bi tich thu boi nhan vien.");

						SendClientMessage(i, COLOR_LIGHTRED, "(( Ban da mat 30 phut tri nho cua minh. ))");
					}
					new hospital[32];
					switch(PlayerInfo[i][pHospitalType])
					{
					    case HOSPITAL_COUNTY: strcat(hospital, "Red Country");
					    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
					    case HOSPITAL_FMDHQ: strcat(hospital, "FMD HQ");
					}
					if(PlayerInfo[i][pWantedLevel] > 0){
						foreach(new x : Player)
						{
							if(IsLawEnforcement(x))
							{
							    SendClientMessageEx(x, COLOR_YELLOW, "LSFMD: Nghi pham bi truy na %s[%i] duoc phat hien lan cuoi tai benh vien %s!", GetPlayerRPName(i), i, hospital);
							}
						}
					}
					SetPlayerHealth(i, PlayerInfo[i][pSpawnHealth]);
					SetScriptArmour(i, PlayerInfo[i][pSpawnArmor]);

					PlayerInfo[i][pHospital] = 0;
		            PlayerInfo[i][pHospitalTime] = 0;
		        }
		        else
		        {
		            GameTextForPlayer(i, "~w~Phuc hoi...", 1500, 3);
		            SetPlayerDrunkLevel(i, 50000);
				}
			}
			if(PlayerInfo[i][pRefuel] != INVALID_VEHICLE_ID)
			{
			    PlayerInfo[i][pRefuelAmount] += 2;
			    vehicleFuel[PlayerInfo[i][pRefuel]]++;

			    if(vehicleFuel[PlayerInfo[i][pRefuel]] >= 100 || PlayerInfo[i][pCash] < PlayerInfo[i][pRefuelAmount])
			    {
			        AddPointMoney(POINT_FUEL, PlayerInfo[i][pRefuelAmount]);
			        GivePlayerCash(i, -PlayerInfo[i][pRefuelAmount]);
			        SendClientMessageEx(i, COLOR_AQUA, "Ban da do day xang cho xe cua minh voi gia {FF6347}$%i{33CCFF}.", PlayerInfo[i][pRefuelAmount]);

			        PlayerInfo[i][pRefuel] = INVALID_VEHICLE_ID;
			        PlayerInfo[i][pRefuelAmount] = 0;
			    }
			}
			if(PlayerInfo[i][pMuted] > 0)
			{
			    PlayerInfo[i][pMuted]--;

			    if(PlayerInfo[i][pMuted] <= 0)
			    {
			        SendClientMessage(i, COLOR_LIGHTRED, "Ban khong con bi Mute nua.");
				}
			}
			if(PlayerInfo[i][pSpamTime] > 0)
			{
			    PlayerInfo[i][pSpamTime]--;
			}
			if(PlayerInfo[i][pVehicleCount] > 0)
			{
			    PlayerInfo[i][pVehicleCount]--;
			}
			if(PlayerInfo[i][pTaxiCall] > 0)
			{
			    PlayerInfo[i][pTaxiCall]--;
			}
			if(PlayerInfo[i][pEmergencyCall] > 0)
			{
			    PlayerInfo[i][pEmergencyCall]--;
			}
			if(PlayerInfo[i][pCourierCooldown] > 0)
			{
			    PlayerInfo[i][pCourierCooldown]--;
			}
   			if(PlayerInfo[i][pPizzaCooldown] > 0)
			{
       			PlayerInfo[i][pPizzaCooldown]--;
			}
			if(PlayerInfo[i][pDetectiveCooldown] > 0)
			{
       			PlayerInfo[i][pDetectiveCooldown]--;
			}
            if(PlayerInfo[i][pThiefCooldown] > 0)
			{
       			PlayerInfo[i][pThiefCooldown]--;
			}
			if(PlayerInfo[i][pCocaineCooldown] > 0)
			{
       			PlayerInfo[i][pCocaineCooldown]--;
			}
			if(PlayerInfo[i][pACFired] > 0)
			{
        		PlayerInfo[i][pACFired]--;
			}
			if(PlayerInfo[i][pRapidFire] > 0)
			{
        		PlayerInfo[i][pRapidFire]--;
			}
			if(PlayerInfo[i][pGodmode] > 0)
			{
        		PlayerInfo[i][pGodmode]--;
			}
			if(PlayerInfo[i][pPreviewHouse] >= 0)
			{
			    PlayerInfo[i][pPreviewTime]--;

			    if(PlayerInfo[i][pPreviewTime] <= 0 && GetPlayerInterior(i) == houseInteriors[PlayerInfo[i][pPreviewType]][intID])
			    {
                    SetPlayerPos(i, HouseInfo[PlayerInfo[i][pPreviewHouse]][hIntX], HouseInfo[PlayerInfo[i][pPreviewHouse]][hIntY], HouseInfo[PlayerInfo[i][pPreviewHouse]][hIntZ]);
					SetPlayerFacingAngle(i, HouseInfo[PlayerInfo[i][pPreviewHouse]][hIntA]);
					SetPlayerInterior(i, HouseInfo[PlayerInfo[i][pPreviewHouse]][hInterior]);
					SetPlayerVirtualWorld(i, HouseInfo[PlayerInfo[i][pPreviewHouse]][hWorld]);
					SetCameraBehindPlayer(i);

					PlayerInfo[i][pPreviewHouse] = -1;
				    PlayerInfo[i][pPreviewType] = 0;
				    PlayerInfo[i][pPreviewTime] = 0;

			        SendClientMessage(i, COLOR_WHITE, "Ban khong con xem truoc noi that khi het khoang thoi gian.");
			    }
			}
			if(PlayerInfo[i][pLootTime] > 0)
			{
			    PlayerInfo[i][pLootTime]--;

			    if(IsPlayerInBankRobbery(i) && PlayerInfo[i][pLootTime] <= 0)
			    {
			        new amount = random(500) + 500;

			        ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += amount;
			        PlayerInfo[i][pCP] = CHECKPOINT_ROBBERY;
			        PlayerInfo[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SendClientMessageEx(i, COLOR_AQUA, "Ban da cuop duoc {00AA00}$%i{33CCFF} va bay gio co $%i. Ban co the tiep tuc di cuop hoac giao tien mat den {FF6347}diem danh dau{33CCFF}.", amount, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, 1429.9939, 1066.9581, 9.8938, 3.0);
			    }
			    else if((PlayerInfo[i][pRobbingBiz] >= 0 && PlayerInfo[i][pRobbingBiz] == GetInsideBusiness(i)) && PlayerInfo[i][pLootTime] <= 0)
			    {
			        new amount = random(300) + 100;

			        ClearAnimations(i, 1);

			        PlayerInfo[i][pRobCash] += amount;
			        PlayerInfo[i][pCP] = CHECKPOINT_ROBBERY;
			        PlayerInfo[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SendClientMessageEx(i, COLOR_AQUA, "Ban da cuop duoc {00AA00}$%i{33CCFF} va bay gio co $%i. Ban co the tiep tuc di cuop hoac giao tien mat den {FF6347}diem danh dau{33CCFF} (/stoprobbery).", amount, PlayerInfo[i][pRobCash]);
					SetPlayerCheckpoint(i, 1429.9939, 1066.9581, 9.8938, 3.0);
					if(PlayerInfo[i][pRobCash] < 10000)
					{
					    ApplyAnimation(i, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
						GameTextForPlayer(i, "~w~Cuop kho tien...", 5000, 3);
					    PlayerInfo[i][pLootTime] = 5;
					}
					else
					{
					    callcmd::stoprobbery(i, "/1");
					}
			    }
			}
			if(PlayerInfo[i][pHunted] > 0)
			{
			    foreach(new x : Player)
			    {
			    	if(PlayerInfo[x][pLogged] && GetPlayerInterior(x) == GetPlayerInterior(i) && PlayerInfo[i][pHunted] > 0)
        			{
    					SetPlayerMarkerForPlayer(x, i, COLOR_RETIRED);
					}
				}
			}
			if(PlayerInfo[i][pFindTime] > 0)
			{
			    PlayerInfo[i][pFindTime]--;

			    if(PlayerInfo[i][pFindTime] == 0)
			    {
			        SetPlayerMarkerForPlayer(i, PlayerInfo[i][pFindPlayer], GetPlayerColor(PlayerInfo[i][pFindPlayer]));
					PlayerInfo[i][pFindPlayer] = INVALID_PLAYER_ID;
				}
			}
			if((PlayerInfo[i][pToggleMusic]) || (PlayerInfo[i][pBoomboxListen] != INVALID_PLAYER_ID && GetNearbyBoombox(i) != PlayerInfo[i][pBoomboxListen]))
			{
				PlayerInfo[i][pBoomboxListen] = INVALID_PLAYER_ID;

				if(PlayerInfo[i][pStreamType] == MUSIC_BOOMBOX)
				{
				    StopAudioStreamForPlayer(i);
				    PlayerInfo[i][pStreamType] = MUSIC_NONE;
				}
			}
			if((!PlayerInfo[i][pToggleMusic]) && ((boomboxid = GetNearbyBoombox(i)) != INVALID_PLAYER_ID && PlayerInfo[i][pBoomboxListen] != boomboxid))
			{
			    PlayerInfo[i][pBoomboxListen] = boomboxid;

			    if(PlayerInfo[i][pStreamType] == MUSIC_NONE)
			    {
			        PlayAudioStreamForPlayer(i, PlayerInfo[boomboxid][pBoomboxURL]);
			        PlayerInfo[i][pStreamType] = MUSIC_BOOMBOX;
			    }
			}
            if(PlayerInfo[i][pPickPlant] != INVALID_PLAYER_ID)
            {
                PlayerInfo[i][pPickTime]--;

                if(PlayerInfo[i][pPickTime] <= 0)
                {
                    new planterid = PlayerInfo[i][pPickPlant];

                    if(!IsPlayerConnected(planterid) || !PlayerInfo[planterid][pLogged] || !PlayerInfo[planterid][pWeedPlanted])
                    {
                        SendClientMessage(i, COLOR_LIGHTRED, "Cay nay khong con san de hai.");
					}
					else if(!IsPlayerInRangeOfPoint(i, 3.0, PlayerInfo[planterid][pWeedX], PlayerInfo[planterid][pWeedY], PlayerInfo[planterid][pWeedZ]))
					{
					    SendClientMessage(i, COLOR_LIGHTRED, "Hai that bai. Ban da roi khu vuc hai.");
					}
					else if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
					{
					    SendClientMessage(i, COLOR_LIGHTRED, "Hai that bai. Ban phai ngoi xuong khi hai.");
					}
					else
					{
					    PlayerInfo[i][pWeed] += PlayerInfo[planterid][pWeedGrams];

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[i][pWeed], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessageEx(i, COLOR_AQUA, "Da thu hoach duoc %i grams Weed tu cay nay.", PlayerInfo[planterid][pWeedGrams]);
					    DestroyWeedPlant(planterid);
					}

					PlayerInfo[i][pPickPlant] = INVALID_PLAYER_ID;
					PlayerInfo[i][pPickTime] = 0;
				}
			}
			if(PlayerInfo[i][pCookMeth] > 0)
			{
                PlayerInfo[i][pCookTime]--;

                if(PlayerInfo[i][pCookTime] <= 0)
                {
                    if(!IsPlayerInRangeOfPoint(i, 5.0, 1.2179, 2.8095, 999.4284))
                    {
                        SendClientMessage(i, COLOR_LIGHTRED, "Che bien khong thanh cong. Ban da roi khoi noi che bien.");
                        ResetCooking(i);
                    }
                    else if(PlayerInfo[i][pEphedrine] <= 0)
                    {
                        SendClientMessage(i, COLOR_LIGHTRED, "Che bien khong thanh cong. Ban da het ephedrine.");
                        ResetCooking(i);
					}
					else if(PlayerInfo[i][pMeth] + 2 > GetPlayerCapacity(i, CAPACITY_METH))
                    {
                        SendClientMessage(i, COLOR_LIGHTRED, "Che bien khong thanh cong. Ban da het dung luong hang ton kho cho Meth.");
                        ResetCooking(i);
					}
					else
					{
						GameTextForPlayer(i, "~g~+2~w~ grams meth", 3000, 3);

						PlayerInfo[i][pEphedrine] -= 1;
						PlayerInfo[i][pMeth] += 2;
						PlayerInfo[i][pCookGrams] += 2;

						if((PlayerInfo[i][pCookGrams] % 4) == 0)
						{
						    PlayerInfo[i][pMuriaticAcid]--;
						}

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i, meth = %i, muriaticacid = %i WHERE uid = %i", PlayerInfo[i][pEphedrine], PlayerInfo[i][pMeth], PlayerInfo[i][pMuriaticAcid], PlayerInfo[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						if(!PlayerInfo[i][pEphedrine])
						{
						    SendClientMessageEx(i, COLOR_LIGHTRED, "Ban da het ephedrine, do do ban ket thuc viec che bien cua minh. Ban da tao ra %i grams meth tu %i grams ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(!PlayerInfo[i][pMuriaticAcid])
						{
						    SendClientMessageEx(i, COLOR_LIGHTRED, "Do do ban da het axit muriatic. Ban da tao ra %i grams meth tu %i grams ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(PlayerInfo[i][pMeth] >= GetPlayerCapacity(i, CAPACITY_METH))
	                    {
	                        SendClientMessageEx(i, COLOR_LIGHTRED, "Ban da het khong gian kho cho Meth, do do ban se ket thuc viec che bien cua minh. Ban da tao ra %i grams meth tu %i grams ephedrine.", PlayerInfo[i][pCookGrams], PlayerInfo[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else
					    {
					        PlayerInfo[i][pCookTime] = 15;
						}
                    }
                }
			}
			if(PlayerInfo[i][pDrugsUsed] >= 4)
			{
			    PlayerInfo[i][pDrugsTime]--;

			    if(PlayerInfo[i][pDrugsTime] <= 0)
			    {
			        SendClientMessage(i, COLOR_LIGHTRED, "Ban khong con bi phe thuoc nua.");
			        SetPlayerWeather(i, gWeather);

					SetPlayerTime(i, gWorldTime, 0);
			        SetPlayerDrunkLevel(i, 500);

			        PlayerInfo[i][pDrugsUsed] = 0;
			        PlayerInfo[i][pDrugsTime] = 0;
			    }
			    else
			    {
			        SetPlayerWeather(i, -66);
			        SetPlayerTime(i, 12, 0);
			        SetPlayerDrunkLevel(i, 40000);
				}
			}
            if(PlayerInfo[i][pCapturingPoint] >= 0)
            {
                PlayerInfo[i][pCaptureTime]--;

                if(PlayerInfo[i][pCaptureTime] <= 0)
                {
                    new Float:x, Float:y, Float:z;

                    GetPlayerPos(i, x, y, z);

                    if(PointInfo[PlayerInfo[i][pCapturingPoint]][pTime] == 0 && PlayerInfo[i][pPointX] == x && PlayerInfo[i][pPointY] == y && PlayerInfo[i][pPointZ] == z)
                    {
	                    SendClientMessageToAllEx(COLOR_YELLOW, "Point Wars: %s da co gang chiem %s tu %s. No se la cua ho sau 15 phut nua.", GetPlayerRPName(i), PointInfo[PlayerInfo[i][pCapturingPoint]][pName], GangInfo[PlayerInfo[i][pGang]][gName]);

						PointInfo[PlayerInfo[i][pCapturingPoint]][pCaptureTime] = 15;
						PointInfo[PlayerInfo[i][pCapturingPoint]][pCapturer] = i;
					}
					else
					{
					    SendClientMessage(i, COLOR_LIGHTRED, "Ban da di chuyen khoi vi tri cua minh va do do ban khong the chiem duoc.");
					}

                    PlayerInfo[i][pCapturingPoint] = -1;
                    PlayerInfo[i][pCaptureTime] = 0;
				}

            }
			if(PlayerInfo[i][pPoisonTime] > 0)
			{
			    new
			        Float:health;
			    GetPlayerHealth(i, health);
			    SetPlayerHealth(i, health - 3.0 < 1.0 ? 1.0 : health - 3.0);
			    PlayerInfo[i][pPoisonTime]--;
			}

			AnticheatCheck(i);

			//GetPlayerHealth(i, PlayerInfo[i][pHealth]);

			if(PlayerInfo[i][pGang] >= 0 && !PlayerInfo[i][pBandana])
			{
				new id;

				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[i][pTagType] == TAG_VIP)
					{
					    SetPlayerSpecialTag(i, TAG_NONE);
						SendClientMessage(i, COLOR_YELLOW, "The VIP cua ban da tu dong bi vo hieu hoa khi ban vao khu vuc Turfs dang hoat dong.");
					}
					PlayerInfo[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Bandana cua ban duoc kich hoat tu dong khi ban buoc vao Turfs trong mot cuoc chien dang dien ra.");
					SetPlayerColor(i, GangInfo[PlayerInfo[i][pGang]][gColor] & ~0xff);
				}
				if((id = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[id][pTime] == 0 && PointInfo[id][pCapturer] != INVALID_PLAYER_ID)
				{
   					if(PlayerInfo[i][pTagType] == TAG_VIP)
					{
					    SetPlayerSpecialTag(i, TAG_NONE);
						SendClientMessage(i, COLOR_YELLOW, "The VIP cua ban da tu dong bi vo hieu hoa khi ban vao khu vuc diem hoat dong.");
					}
					PlayerInfo[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Bandana cua ban duoc kich hoat tu dong khi ban dang o trong pham vi cua mot diem hoat dong.");
				}
			}

			if(!PlayerInfo[i][pBackup] && !IsPlayerBeingFound(i))
			{
				// Yeah, this is indeed a mess. But it works. Cleaning this section is on my list.
				if(PlayerInfo[i][pJoinedEvent] && EventInfo[eType] == 2) {
				    SetPlayerColor(i, (PlayerInfo[i][pEventTeam] == RED_TEAM) ? (0xFF000000) : (0x0000FF00));
				} else if(PlayerInfo[i][pPaintball] == 2) {
				    SetPlayerColor(i, (PlayerInfo[i][pPaintballTeam] == 1) ? (0x33CCFF00) : (0xFFFF9900));
				} else if(PlayerInfo[i][pJailType] == 2) {
				    SetPlayerColor(i, 0xAD7A2100);
				} else if(PlayerInfo[i][pFaction] >= 0 && PlayerInfo[i][pDuty] && FactionInfo[PlayerInfo[i][pFaction]][fType] != FACTION_HITMAN) {
					SetPlayerColor(i, FactionInfo[PlayerInfo[i][pFaction]][fColor] & ~0xff);
				//} else if(PlayerInfo[i][pFaction] >= 0 && PlayerInfo[i][pDuty] == 0 && FactionInfo[PlayerInfo[i][pFaction]][fType] != FACTION_HITMAN && FactionInfo[PlayerInfo[i][pFaction]][fType] != FACTION_POLICE && FactionInfo[PlayerInfo[i][pFaction]][fType] != FACTION_MEDIC) {
				    //SetPlayerColor(i, FactionInfo[PlayerInfo[i][pFaction]][fColor] & ~0xff);
				} else if(PlayerInfo[i][pGang] >= 0 && PlayerInfo[i][pBandana]) {
				    SetPlayerColor(i, GangInfo[PlayerInfo[i][pGang]][gColor] & ~0xff);
				} else if(PlayerInfo[i][pVIPPackage] > 0 && PlayerInfo[i][pVIPColor]) {
				    SetPlayerColor(i, 0xFF00FF00);
				//} else if(PlayerInfo[i][pAdmin] > 0 && PlayerInfo[i][pAdminDuty]) {
				    //SetPlayerColor(i, 0xAA333300); // 0xFFD70000
				} else {
				    SetPlayerColor(i, 0xFFFFFF00);
				}
			}
		}
	}

	for(new i = 0; i < MAX_ACTORS; i ++)
	{
	    if(IsValidActor(i))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
	        GetActorPos(i, x, y, z);
	        SetActorPos(i, x, y, z);
	    }
	}

    format(string, sizeof(string), "Raw ephedrine\nStock: %i\nGia: $1,000/gram\n/buydrug ephedrine [so luong]", gEphedrineStock);
    UpdateDynamic3DTextLabelText(gEphedrineStockText, COLOR_YELLOW, string);
	format(string, sizeof(string), "Hat can sa\nStock: %i\nGia: $500/seed\n/buydrug seeds [so luong]", gSeedsStock);
	UpdateDynamic3DTextLabelText(gSeedsStockText, COLOR_YELLOW, string);
	format(string, sizeof(string), "Cocaine\nStock: %i\nGia: $750/gram\n/buydrug cocaine [so luong]", gCocaineStock);
    UpdateDynamic3DTextLabelText(gCocaineText, COLOR_YELLOW, string);

	if(Iter_Count(Player) > gPlayerRecord)
	{
		gPlayerRecord = Iter_Count(Player);
		gRecordDate = GetDate();
		SaveServerInfo();
	}
}
forward LastAlertPayCheck(playerid);
public LastAlertPayCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	GameTextForPlayer(playerid, "~w~Go /lanhluong", 2500, 1);
    	SendClientMessage(playerid, COLOR_WHITE, "Ban con mot phut truoc khi ma paycheck cua ban het han. Hay go /lanhluong de lanh luong.");
        SetTimerEx("DestroyCheck", 60000, false, "i", playerid);
	}
}
forward DestroyCheck(playerid);
public DestroyCheck(playerid)
{
	if(PayCheckCode[playerid] != 0)
	{
    	PayCheckCode[playerid] = 0;
    	SendClientMessage(playerid, COLOR_WHITE, "Ma paycheck cua ban da het han. Xin hay nho su dung /lanhluong cho lan sau.");
	}
}

forward MinuteTimer();
public MinuteTimer()
{
	new hour;

	gettime(.hour = hour);

	//RefreshTime();
	if(gacooldown)
	{
		for(new x = 0; x < MAX_GANGS; x++)
		{
		    if(GangInfo[x][gInvCooldown] > 0)
		    {
                GangInfo[x][gInvCooldown]--;
		    }
		}
	}
	if(gHour != hour)
	{
	    SendClientMessageToAllEx(COLOR_WHITE, "NewCity Roleplay: Bay gio la {AFAFAF}%02d:00{FFFFFF}.", hour);
		new budget;
		for(new i = 0; i < MAX_FACTIONS; i ++)
		{
			if(FactionInfo[i][fType] != FACTION_NONE)
			{
				budget += FactionInfo[i][fFund] - GetTotalFactionPay(i);
			}
		}
	 	AddToTaxVault(-budget);
    	foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLogged] && !PlayerInfo[i][pKicked])
	        {
		        if(PlayerInfo[i][pAFK] && PlayerInfo[i][pAFKTime] > 900)
		        {
		            SendClientMessage(i, COLOR_LIGHTRED, "Ban khong duoc nhan tien luong trong gio nay vi ban da AFK trong hon 15 phut.");
		        }
		        else if(PlayerInfo[i][pMinutes] < 25)
		        {
		            SendClientMessage(i, COLOR_LIGHTRED, "Ban khong du dieu kien nhan tien luong vi ban da choi duoi 25 phut trong gio nay.");
		        }
		        else
		        {
		            new code = Random(100000, 999999);
	  				PayCheckCode[i] = code;

					SendClientMessage(i, COLOR_LIGHTRED,"_______________________________________________________________");
					SendClientMessage(i, COLOR_WHITE,"Thong tin ve thue doi voi phieu luong: {33CCFF}/taxhelp");
	  				SendClientMessage(i, COLOR_LIGHTRED,"_______________________________________________________________");
	    			SendClientMessage(i, COLOR_WHITE,"Ky ten vao sec de nhan chi phieu luong cua ban.");
		    		SendClientMessage(i, COLOR_AQUA, "Go /lanhluong (Tai ngan hang)");
	    			SendClientMessage(i, COLOR_WHITE,"Ban co 5 phut de lanh luong truoc khi no bi vo hieu hoa.");
		    		SendClientMessage(i, COLOR_LIGHTRED,"_______________________________________________________________");

					GameTextForPlayer(i, "~w~Go ", 2500, 1);
		  			SetTimerEx("LastAlertPayCheck", 240000, false, "i", i);
				}
                if(GetFactionType(i) == FACTION_GOVERNMENT)
		  	    {
		  			SendClientMessageEx(i, COLOR_YELLOW2, "%s nguoi da bi dua ra khoi kho thue cho moi khoan luong to chuc.", FormatNumber(budget));
				}
				if(PlayerInfo[i][pReportMuted])
				{
					PlayerInfo[i][pReportMuted]--;

					if(PlayerInfo[i][pReportMuted] <= 0)
					{
					    PlayerInfo[i][pReportMuted] = 0;
					    PlayerInfo[i][pReportWarns] = 0;

					    SendClientMessage(i, COLOR_YELLOW, "Tinh nang an bao cao cua ban da tu dong duoc go bo.");
				    }
				}
			}
	    }

	    for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists])
	        {
	            if(PointInfo[i][pTime] > 0)
	            {
	                PointInfo[i][pTime]--;
	                ReloadPoint(i);
				}

				if(!PointInfo[i][pTime])
				{
				    SendClientMessageToAllEx(COLOR_YELLOW, "Point Wars: %s hien co san de chiem dong.", PointInfo[i][pName]);
				    PointInfo[i][pCapturedGang] = -1;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i, capturedgang = %i WHERE id = %i", PointInfo[i][pTime], PointInfo[i][pCapturedGang], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

  		foreach(new i : Turf)
	    {
	        if(TurfInfo[i][tExists])
	        {
	            if(TurfInfo[i][tTime] > 0)
	            {
	                TurfInfo[i][tTime]--;
	                ReloadTurf(i);
				}

				if(!TurfInfo[i][tTime] && TurfInfo[i][tType] != 8)
				{
				    SendTurfMessage(i, COLOR_YELLOW, "Turf Wars: %s hien co san de chiem dong.", TurfInfo[i][tName]);
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[i][tTime], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		switch(hour)
		{
		    case 0, 4, 8, 12, 16, 18:
		    {
		        for(new i = 0; i < MAX_GANGS; i ++)
		        {
		            if(GangInfo[i][gSetup] && GangInfo[i][gTurfTokens] < 10)
		            {
		                GangInfo[i][gTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }

		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if((FactionInfo[i][fType] == FACTION_POLICE || FactionInfo[i][fType] == FACTION_FEDERAL || FactionInfo[i][fType] == FACTION_ARMY) && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		    }
		}

		if(RobberyInfo[rTime] > 0)
		{
		    RobberyInfo[rTime]--;
		}

	    SetWorldTime(hour);

		gWorldTime = hour;
	    gHour = hour;

	    gCharityHealth = 0;
	    gCharityArmor = 0;
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(PlayerInfo[i][pWeedPlanted] && PlayerInfo[i][pWeedTime] > 0)
		    {
		        PlayerInfo[i][pWeedTime]--;

		        if((PlayerInfo[i][pWeedTime] % 2) == 0)
		        {
		            PlayerInfo[i][pWeedGrams]++;
		        }
		    }
		    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pAFKTime] < 900)
		    {
				//new amount = 35 * min(PlayerInfo[i][pLevel], 21);
		        //AddToPaycheck(i, amount);

		        PlayerInfo[i][pMinutes]++;
			}
		}

		for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists] && PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PointInfo[i][pCaptureTime] > 0)
	        {
	            if(PlayerInfo[PointInfo[i][pCapturer]][pGang] == -1)// || PlayerInfo[PointInfo[i][pCapturer]][pGangRank] < 5)
	            {
	                PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	                PointInfo[i][pCaptureTime] = 0;
	            }
	            else
	            {
		            PointInfo[i][pCaptureTime]--;

		            if(PointInfo[i][pCaptureTime] <= 0)
		            {
		                GiveGangPoints(PlayerInfo[PointInfo[i][pCapturer]][pGang], 50);

		                GetPlayerName(PointInfo[i][pCapturer], PointInfo[i][pCapturedBy], MAX_PLAYER_NAME);
					    PointInfo[i][pCapturedGang] = PlayerInfo[PointInfo[i][pCapturer]][pGang];

						GangInfo[PointInfo[i][pCapturedGang]][gCash] += PointInfo[i][pProfits];
						GangInfo[PointInfo[i][pCapturedGang]][gTurfTokens] ++;
						SendClientMessageToAllEx(COLOR_YELLOW, "Point Wars: %s da chiem dong thanh cong %s cho %s.", GetPlayerRPName(PointInfo[i][pCapturer]), PointInfo[i][pName], GangInfo[PointInfo[i][pCapturedGang]][gName]);
						SendGangMessage(PointInfo[i][pCapturedGang], COLOR_YELLOW, "Bang dang cua ban kiem duoc $%i, 50 GP, va 1 Turf Token cho lan thanh cong chiem dong lan nay.", PointInfo[i][pProfits]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i, cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gTurfTokens], GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%s', capturedgang = %i, profits = 0, time = 20 WHERE id = %i", PointInfo[i][pCapturedBy], PointInfo[i][pCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
		                PointInfo[i][pCaptureTime] = 0;
		                PointInfo[i][pProfits] = 0;
		                PointInfo[i][pTime] = 20;

		                ReloadPoint(i);
					}
				}
			}
		}

		foreach(new i : Turf)
	    {
	        if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && TurfInfo[i][tCaptureTime] > 0)
	        {
	          	if(!IsLawEnforcement(TurfInfo[i][tCapturer]) && (PlayerInfo[TurfInfo[i][tCapturer]][pGang] == -1))
	            {
	                TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	                TurfInfo[i][tCaptureTime] = 0;
	                ReloadTurf(i);
	            }
	            else
	            {
		            TurfInfo[i][tCaptureTime]--;

		            if(TurfInfo[i][tCaptureTime] <= 0)
		            {
		                GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);

		                if(IsLawEnforcement(TurfInfo[i][tCapturer]))
		                {
							SendClientMessageToAllEx(COLOR_YELLOW, "Turf Wars: %s da duoc chiem lai thanh cong boi %s.", TurfInfo[i][tName], GetPlayerRPName(TurfInfo[i][tCapturer]));
                            GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);
		                    TurfInfo[i][tCapturedGang] = -5;
							SendTurfMessage(i, COLOR_YELLOW, "Turf Wars: Canh sat da dong thanh cong %s.", TurfInfo[i][tName]);
							for(new y = 0; y < MAX_FACTIONS; y++)
							{
							    if(FactionInfo[y][fType] == FACTION_POLICE || FactionInfo[y][fType] == FACTION_FEDERAL || FactionInfo[y][fType] == FACTION_ARMY)
							    {
									SendFactionMessage(y, COLOR_YELLOW, "TURFS: To chuc cua ban da dong thanh cong mot Turfs, ban da kiem duoc $5000.");
									foreach(new x: Player)
									{
									    if(PlayerInfo[x][pFaction] == y)
									    {
                                             GivePlayerCash(x, 5000);
									    }
									}
								}
							}
						}
						else
						{
						    new gangid = PlayerInfo[TurfInfo[i][tCapturer]][pGang];

						    TurfInfo[i][tCapturedGang] = gangid;

						    GiveGangPoints(gangid, 25);
						    SendClientMessageToAllEx(COLOR_YELLOW, "Turf Wars: %s da duoc chiem thanh cong boi %s cho %s.", TurfInfo[i][tName], GetPlayerRPName(TurfInfo[i][tCapturer]), GangInfo[gangid][gName]);

							switch(TurfInfo[i][tType])
							{
							    case 1:
							    {
							        new amount = 10000 + (5000*GangInfo[gangid][gMatLevel]);
							        GangInfo[gangid][gMaterials] = GangInfo[gangid][gMaterials] + amount > GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) ? GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) : GangInfo[gangid][gMaterials] + 15000;
									SendGangMessage(gangid, COLOR_YELLOW, "Bang dang ban kiem duoc %i vat lieu trong kho khi chiem duoc Turfs nay!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[gangid][gMaterials], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
							    case 2:
							    {
							        new amount = 10 + GangInfo[gangid][gGunLevel];
							        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_UZI] += amount;
							        SendGangMessage(gangid, COLOR_YELLOW, "Bang dang ban kiem duoc +%i 9mm/SDPistol/Shotgun/Tec9/Uzi moi trong kho cua Turfs nay!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = %i, weapon_sdpistol = %i, weapon_shotgun = %i, weapon_tec9 = %i, weapon_uzi = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_9MM], GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[gangid][gWeapons][GANGWEAPON_TEC9], GangInfo[gangid][gWeapons][GANGWEAPON_UZI], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 3:
			    				{
							        new amount = 10 + GangInfo[gangid][gGunLevel];
								    GangInfo[gangid][gWeapons][GANGWEAPON_MP5] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_AK47] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] += amount;
							        SendGangMessage(gangid, COLOR_YELLOW, "Bang dang cua ban kiem duoc +%i MP5/AK47/Rifle moi trong kho cua Turfs nay!", amount);

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = %i, weapon_ak47 = %i, weapon_rifle = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_MP5], GangInfo[gangid][gWeapons][GANGWEAPON_AK47], GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 4:
								{
								    new amount = 10 + GangInfo[gangid][gGunLevel];
								    GangInfo[gangid][gWeapons][GANGWEAPON_M4] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] += amount;
								    //GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] += amount;
								    GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12] += (amount-8);
							        SendGangMessage(gangid, COLOR_YELLOW, "Bang dang ban kiem duoc +%i M4/Deagle va +%i tren Spas12 moi trong kho cua Turfs nay!", amount, (amount-8));

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = %i, weapon_spas12 = %i, weapon_deagle = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_M4], GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12], GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 5:
							    {
							        GangInfo[gangid][gWeed] = GangInfo[gangid][gWeed] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gWeed] + 100;
							        GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 50;
							        SendGangMessage(gangid, COLOR_YELLOW, "Bang dang cua ban kiem duoc 100 grams weed & 50 grams meth trong kho cua Turfs nay!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weed = %i, meth = %i WHERE id = %i", GangInfo[gangid][gWeed], GangInfo[gangid][gMeth], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 6:
							    {
							        GangInfo[gangid][gCocaine] = GangInfo[gangid][gCocaine] + 75 > GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) ? GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) : GangInfo[gangid][gCocaine] + 75;
							        SendGangMessage(gangid, COLOR_YELLOW, "Bang dang cua ban kiem duoc 75 grams cocaine trong kho cua Turfs nay!");

							        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cocaine = %i WHERE id = %i", GangInfo[gangid][gCocaine], gangid);
							        mysql_tquery(connectionID, queryBuffer);
								}
								case 7:
								{
								    SendGangMessage(gangid, COLOR_YELLOW, "Bang dang cua ban se nhan duoc 10 phan tram cua tat ca cac doanh so ban hang trong Turfs nay.");
							    }
							}
						}

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%s', capturedgang = %i, time = 12 WHERE id = %i", TurfInfo[i][tCapturedBy], TurfInfo[i][tCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
		                TurfInfo[i][tCaptureTime] = 0;
		                TurfInfo[i][tTime] = 12;

						ReloadTurf(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_REPORTS; i ++)
		{
		    if(ReportInfo[i][rExists] && ReportInfo[i][rTime] > 0)
		    {
		        ReportInfo[i][rTime]--;

		        if(ReportInfo[i][rTime] <= 0 && ReportInfo[i][rAccepted] == 0)
		        {
		            SendClientMessage(ReportInfo[i][rReporter], COLOR_LIGHTRED, "Bao cao cua ban da het han. Ban co the yeu cau quan tri vien tren new-city.net neu ban van can giup do.");
		            ReportInfo[i][rExists] = 0;
		        }
			}
	    }
	}

	//RefreshLoginScreen();
}

forward FuelTimer();
public FuelTimer()
{
	new driverid;

	foreach(new i: Vehicle)
	{
	    if((driverid = GetVehicleDriver(i)) != INVALID_VEHICLE_ID)
	    {
			if(vehicleFuel[i] > 0)
			{
			    vehicleFuel[i]--;

			    switch(vehicleFuel[i])
			    {
			        case 15, 10, 5:
			        {
			            SendClientMessage(driverid, COLOR_LIGHTRED, "** Xe nay sap het nhien lieu. Den tram xang gan nhat de do xang. (/refuel)");
					}
				}
			}

			if(vehicleFuel[i] <= 0 && driverid != INVALID_PLAYER_ID)
			{
			    GameTextForPlayer(driverid, "~r~Het nhien lieu", 5000, 3);
			    TogglePlayerControllable(driverid, 0);
			}
		}
	}
}

forward InjuredTimer();
public InjuredTimer()
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pInjured] && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
		{
  			new
     			Float:health;
	    	GetPlayerHealth(i, health);
		    SetPlayerHealth(i, health - 1.0);
		}
	}
}

forward RandomFire(check);
public RandomFire(check)
{
	new count, index, announced, rand = random(10);

	if(!IsFireActive())
	{
	    if(check)
	    {
			foreach(new i : Player)
			{
			    if(GetFactionType(i) == FACTION_MEDIC)
		    	{
		        	count++;
	        	}
	    	}
	    }
	    else
	    {
	        count = 3;
	    }

	    if(count >= 3)
	    {
	        for(new i = 0; i < sizeof(randomFireSpawns); i ++)
	        {
	            if(randomFireSpawns[i][fireIndex] == rand)
	            {
	                if(!announced)
	                {
	                    foreach(new x : Player)
	                    {
	                        if(IsPlayerInRangeOfPoint(x, 30.0, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]))
	                        {
	                            SendClientMessage(x, COLOR_PURPLE, "** Mot tieng no co the duoc nghe thay. Khoi boc len tu mot toa nha gan do.");
	                        }
	                        if(GetFactionType(x) == FACTION_MEDIC)
	                        {
	                            PlayerInfo[x][pCP] = CHECKPOINT_MISC;
	                            SetPlayerCheckpoint(x, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 3.0);
	                            SendClientMessageEx(x, COLOR_DOCTOR, "** Tat ca cac don vi, mot dam chay da duoc bao cao o %s. Vui long di den danh dau tren ban do cua ban. **", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
							}
	                    }

						announced = 1;
					}

	                gFireObjects[index] = CreateDynamicObject(18691, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 0.0, 0.0, randomFireSpawns[i][fireA], .streamdistance = 50.0);
	                gFireHealth[index++] = 50.0;
	            }
	        }

	        gFires = index;
	    }
	}
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	if(!PlayerInfo[playerid][pKicked])
	{
	    PlayerInfo[playerid][pKicked] = 1;
	    SetTimerEx("KickPlayer", 200, false, "i", playerid);
	}
	else
	{
	    PlayerInfo[playerid][pKicked] = 0;
	    Kick(playerid);
	}
}

#if defined SERVER_INTRO

forward ShowMainMenuCamera(playerid, query);
public ShowMainMenuCamera(playerid, query)
{
	if(!query)
	{
	    for(new i = 0; i < 11; i ++)
		{
			TextDrawShowForPlayer(playerid, LoginScreen[i]);
		}

		//InterpolateCameraPos(playerid, 2090.500732, -1730.270385, 122.216575, 873.889953, -1519.312011, 123.752815, 60000);
		//InterpolateCameraLookAt(playerid, 2090.014404, -1730.264892, 122.177040, 873.899353, -1518.828613, 123.698936, 60000);

	//	InterpolateCameraPos(playerid, 2169.808105, -1659.838256, 103.374832, 2167.935058, -1136.155029, 106.361320, 30000);
 	//	InterpolateCameraLookAt(playerid, 2169.811035, -1659.351928, 103.347076, 2167.435058, -1136.148559, 106.344200, 30000);
  		ShowRandomCamera(playerid);

	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
	}
}

#else

forward ShowMainMenuCamera(playerid);
public ShowMainMenuCamera(playerid)
{
	for(new i = 0; i < 11; i ++)
	{
		TextDrawShowForPlayer(playerid, LoginScreen[i]);
	}

    PlayAudioStreamForPlayer(playerid,"https://dl.dropbox.com/s/xl5leq5z6dbq845/IMRAN%20KAHN%20-%20SATISFYA%20INSTRUMENTAL%20%20LYRICS%20%28Remake%20by%20z7beats%29.mp3?dl=0"); // Hernandez
    PlayLoginMusic(playerid);
    ClearChat(playerid);
	//InterpolateCameraPos(playerid, 2090.500732, -1730.270385, 122.216575, 873.889953, -1519.312011, 123.752815, 60000);
	//InterpolateCameraLookAt(playerid, 2090.014404, -1730.264892, 122.177040, 873.899353, -1518.828613, 123.698936, 60000);

 //	InterpolateCameraPos(playerid, 2169.808105, -1659.838256, 103.374832, 2167.935058, -1136.155029, 106.361320, 30000);
 //	InterpolateCameraLookAt(playerid, 2169.811035, -1659.351928, 103.347076, 2167.435058, -1136.148559, 106.344200, 30000);

    ShowRandomCamera(playerid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
}

#endif


forward ShowRandomCamera(playerid);
public ShowRandomCamera(playerid)
{
    if(PlayerInfo[playerid][pLogged] == 0)
    {
    	SetTimerEx("ShowRandomCamera", 25000, false, "i", playerid);
        switch(random(14))
        {
            case 0:
            {
				InterpolateCameraPos(playerid, 1358.270263, -1400.463378, 16.012187, 635.142089, -1397.839477, 16.242132, 25000);
				InterpolateCameraLookAt(playerid, 1358.198120, -1395.467773, 15.816926, 630.169982, -1398.341796, 16.402261, 25000);
            }
            case 1:
            {
				InterpolateCameraPos(playerid, 1152.572387, -1576.658813, 126.939743, 2037.290283, -1873.286132, 75.740158, 20000);
				InterpolateCameraLookAt(playerid, 1157.089477, -1577.831176, 125.144783, 2040.672485, -1870.160522, 73.793060, 20000);
            }
            case 2:
			{
				InterpolateCameraPos(playerid, 2708.809326, -1156.367675, 98.996513, 2193.700439, -1088.259765, 66.590530, 20000);
				InterpolateCameraLookAt(playerid, 2713.692138, -1156.193603, 97.934356, 2195.987548, -1091.977905, 64.152374, 20000);
            }
            case 3:
			{
        		InterpolateCameraPos(playerid, 1497.903808, -946.151672, 103.133064, 758.957885, -985.996887, 102.186241, 20000);
				InterpolateCameraLookAt(playerid, 1495.672729, -941.692016, 102.767417, 758.147644, -981.072814, 101.875152, 20000);
			}
			case 4:
			{
				InterpolateCameraPos(playerid, 2827.478027, 176.076858, 125.017463, 674.973083, -1236.012695, 101.310714, 20000);
				InterpolateCameraLookAt(playerid, 2824.024169, 179.005325, 122.897193, 679.100646, -1238.736694, 100.573738, 20000);
			}
			case 5:
			{
				InterpolateCameraPos(playerid, 564.227416, -1270.595947, 117.906425, 2804.868408, -2520.089843, 68.289138, 20000);
				InterpolateCameraLookAt(playerid, 568.653625, -1272.701660, 116.919204, 2802.140136, -2516.820556, 65.668601, 20000);
			}
			case 6:
			{
			    InterpolateCameraPos(playerid, 2329.556640, -1224.172851, 147.774871, 468.417907, -2018.696289, 41.915149, 20000);
				InterpolateCameraLookAt(playerid, 2324.625488, -1224.099121, 146.951461, 463.734161, -2020.160400, 40.956539, 20000);
			}
			case 7:
			{
				InterpolateCameraPos(playerid, 379.712585, -2223.727050, 13.025588, 544.500549, 777.025573, 191.690505, 25000);
				InterpolateCameraLookAt(playerid, 379.724273, -2218.727050, 13.016270, 545.923217, 780.048767, 187.970809, 25000);
			}
			case 8:
			{
			    InterpolateCameraPos(playerid, 600.168395, -1399.425415, 13.949178, 1294.397216, -1399.727172, 30.581665, 20000);
				InterpolateCameraLookAt(playerid, 605.147460, -1399.876953, 14.020008, 1299.234130, -1399.882446, 29.324470, 20000);
			}
			case 9:
			{
				InterpolateCameraPos(playerid, 1176.744873, -1867.337280, 44.840515, 1398.125976, -908.075561, 103.393424, 20000);
				InterpolateCameraLookAt(playerid, 1176.792968, -1862.377075, 44.213005, 1398.975708, -903.213806, 102.592720, 20000);
			}
			case 10:
			{
				InterpolateCameraPos(playerid, 1383.088745, -873.350158, 53.427341, 1298.574340, -1674.859741, 26.873167, 20000);
				InterpolateCameraLookAt(playerid, 1382.099975, -878.233032, 53.002857, 1298.335693, -1679.814453, 26.245662, 20000);
			}
			case 11:
			{
				InterpolateCameraPos(playerid, 2201.885498, 2954.438476, 94.977218, 2097.426269, 1028.633544, 42.864006, 20000);
				InterpolateCameraLookAt(playerid, 2201.185546, 2949.500244, 94.625427, 2098.926025, 1024.108886, 41.354595, 20000);
			}
			case 12:
			{
                InterpolateCameraPos(playerid, 1883.376708, 1343.405273, 64.111930, 2904.031005, 1339.342041, 117.513442, 20000);
				InterpolateCameraLookAt(playerid, 1887.563842, 1343.319458, 61.380535, 2908.433349, 1339.226196, 115.145622, 20000);
			}
			case 13:
			{
                InterpolateCameraPos(playerid, 255.634811, -2148.487060, 73.211730, 1204.358032, -1346.118652, 43.993221, 25000);
				InterpolateCameraLookAt(playerid, 259.249938, -2145.514160, 71.453193, 1202.191040, -1342.735961, 41.016445, 25000);
			}
        }
    }
}

forward DespawnTimer(vehicleid);
public DespawnTimer(vehicleid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOccupied(vehicleid) && !IsVehicleBeingPicked(vehicleid))
	{
	    DespawnVehicle(vehicleid);
	}
	else
	{
	    // ANOTHER TEN MINUTES!
	    VehicleInfo[vehicleid][vTimer] = SetTimerEx("DespawnTimer", 300000, false, "i", vehicleid);
	}
}
/*forward HTTP_ListShoutcastStations(index, response_code, data[]);
public HTTP_ListShoutcastStations(index, response_code, data[])
{
}*/

forward HTTP_ProxyCheck(playerid, response_code, data[]);
public HTTP_ProxyCheck(playerid, response_code, data[])
{
	if(response_code == 200)
	{
		if(data[0] == 'Y')
		{
			SendAdminMessage(COLOR_YELLOW,"AdmWarning: %s[%i] da co gang ket noi Proxy/VPN.", GetPlayerRPName(playerid), playerid);
  			SendClientMessage(playerid, COLOR_RED, "_________Hay vo hieu hoa proxy/VPN va tham gia lai!_________");
   			KickPlayer(playerid);
		}
		if(data[0] == 'X')
		{
			printf("WRONG IP FORMAT");
		}
	}
	else
	{
		printf("Yeu cau khong thanh cong! Ma phan hoi la: %d", response_code);
	}
	return 1;
}

forward HTTP_OnMusicFetchResponse(index, response_code, data[]);
public HTTP_OnMusicFetchResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
        new
            buffer[2048],
            string[288],
			count,
			start,
			pos;

		strcpy(buffer, data);

        while((pos = strfind(buffer, "<br/>")) != -1)
        {
            strdel(buffer, pos, pos + 5);

            if(++count == 8)
            {
                strmid(string, buffer, start, pos);
                SendClientMessage(index, COLOR_YELLOW, string);

				start = pos;
                count = 0;
			}
			else
			{
			    if((strlen(buffer) - pos) < 6)
			    {
			        strmid(string, buffer, start, pos);
			        SendClientMessage(index, COLOR_YELLOW, string);
			        break;
			    }

			    strins(buffer, ", ", pos);
            }
        }
    }
    else
    {
        SendClientMessageEx(index, COLOR_RED, "Co so du lieu am nhac hien khong co san. (error %i)", response_code);
    }
}

forward Radio_PlayStation(playerid);
public Radio_PlayStation(playerid)
{
	if(cache_get_row_count(radioConnectionID))
	{
	    new name[128], url[128];

	    cache_get_field_content(0, "name", name);
	    cache_get_field_content(0, "url", url);

	    switch(PlayerInfo[playerid][pMusicType])
	    {
	        case MUSIC_MP3PLAYER:
	        {
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da thay doi dai phat thanh tren may nghe nhac MP3 cua ho.", GetPlayerRPName(playerid));
	    		SendClientMessageEx(playerid, COLOR_AQUA, "Ban hien da theo doi {00AA00}%s{33CCFF}.", name);
				SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
			}
			case MUSIC_BOOMBOX:
			{
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da thay doi dai phat thanh tren Boombox cua ho.", GetPlayerRPName(playerid));
	    		SendClientMessageEx(playerid, COLOR_AQUA, "Boombox cua ban hien duoc dieu chinh theo {00AA00}%s{33CCFF}.", name);
				SetMusicStream(MUSIC_BOOMBOX, playerid, url);
			}
			case MUSIC_VEHICLE:
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
				    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da thay doi dai phat thanh tren xe.", GetPlayerRPName(playerid));
		    		SendClientMessageEx(playerid, COLOR_AQUA, "Dai cua ban hien da duoc dieu chinh {00AA00}%s{33CCFF}.", name);
					SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
				}
			}
		}
	}
}

forward Radio_ListStations(playerid);
public Radio_ListStations(playerid)
{
	new rows = cache_get_row_count(radioConnectionID);

	if((!rows) && PlayerInfo[playerid][pSearch] && PlayerInfo[playerid][pPage] == 1)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co ket qua duoc tim thay.");
	    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
	}
	else if(rows)
	{
	    static string[MAX_LISTED_STATIONS * 64], name[128];

	    string[0] = 0;

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "name", name);
	        format(string, sizeof(string), "%s\n%s", string, name);
		}

		if(PlayerInfo[playerid][pPage] > 1)
		{
		    strcat(string, "\n{FF6347}<< Quay lai{FFFFFF}");
		}
		if(rows == MAX_LISTED_STATIONS)
		{
		    strcat(string, "\n{00AA00}>> Trang tiep{FFFFFF}");
		}

		ShowPlayerDialog(playerid, DIALOG_MP3RADIORESULTS, DIALOG_STYLE_LIST, "Cac ket qua", string, "Phat", "Quay lai");
	}
}

forward MDC_ListCharges(playerid);
public MDC_ListCharges(playerid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong co khoan phi hoat dong nao doi voi chung.");
	}
	else
	{
	    new chargedby[MAX_PLAYER_NAME], date[24], reason[128], string[512];

	    string = "Tinh phi boi\tNgay\tLy do";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "chargedby", chargedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "reason", reason);

	        format(string, sizeof(string), "%s\n%s\t%s\t%s", string, chargedby, date, reason);
		}

		ShowPlayerDialog(playerid, DIALOG_MDCCHARGES, DIALOG_STYLE_TABLIST_HEADERS, "Phi hoat dong:", string, "<<", "");
	}

	return 1;
}

forward MDC_ClearCharges(playerid);
public MDC_ClearCharges(playerid)
{
	if(cache_get_row_count(connectionID))
	{
	    new username[MAX_PLAYER_NAME], id = PlayerInfo[playerid][pSelected];

	    cache_get_field_content(0, "username", username);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(!strcmp(GetPlayerNameEx(i), username))
            {
                SendClientMessageEx(i, COLOR_WHITE, "Do truy na cua ban da duoc xoa boi %s.", GetPlayerRPName(playerid));
                PlayerInfo[i][pWantedLevel] = 0;
            }
        }

        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s da xoa toi danh va muc do truy na cua %s's.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), username);
	}
}

forward MDC_PlayerLookup(playerid, username[]);
public MDC_PlayerLookup(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong ton tai va do do khong co thong tin de xem.");
	    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Tra cuu nguoi choi", "Nhap ten day du cua nguoi choi de tra cuu:", "Submit", "Huy bo");
	}
	else
	{
	    new string[200];

	    PlayerInfo[playerid][pSelected] = cache_get_field_content_int(0, "uid");

	    format(string, sizeof(string), "Ten: %s\nGioi tinh: %s\nTuoi: %i tuoi\nPham toi: %i\nLan bi bat: %i\nMuc do truy na: %i/6\nBang lai xe: %s", username, (cache_get_field_content_int(0, "gender") == 2) ? ("Nu") : ("Nam"), cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "crimes"), cache_get_field_content_int(0, "arrested"), cache_get_field_content_int(0, "wantedlevel"), cache_get_field_content_int(0, "carlicense") ? ("Co") : ("Khong"));
		ShowPlayerDialog(playerid, DIALOG_MDCPLAYER1, DIALOG_STYLE_MSGBOX, "Tra cuu nguoi choi", string, "Tuy chon", "Huy bo");
	}
}

public OnPlayerExitVehicle(playerid, vehicleid)
{

    if(ExBJck[playerid] == 1)
	{
	    RemovePlayerAttachedObject(playerid, 7);
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s voi lay day an toan cua ho va thao ra.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "Da coi day an toan.");
	}
	return 1;
}


public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(gettime() - PlayerInfo[playerid][pLastDeath] > 10 && (areaid == area_paintball[0] || areaid == area_paintball[1]))
	{
	    if(PlayerInfo[playerid][pPaintball] == 3 || PlayerInfo[playerid][pPaintball] == 4)
	    {
	    	SendClientMessage(playerid, COLOR_RED, "Ban da bi chet vi roi khoi dau truong. (Su dung /exit)");
	    	SetPlayerHealth(playerid, 0.0);
		}
	}
	return 1;
}

forward OnPlayerUpgradeGarage(playerid, garageid);
public OnPlayerUpgradeGarage(playerid, garageid)
{
	new count, rows = cache_get_row_count(connectionID), vehicleid;

	for(new i = 0; i < rows; i ++)
	{
	    vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));

	    if((vehicleid == INVALID_VEHICLE_ID) || (vehicleid != INVALID_VEHICLE_ID && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld]))
	    {
	        count++;
		}
	}

	if(count)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da dau nhung chiec xe trong Garage cua ban. Do chung ben ngoai truoc khi nang cap.");
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(GetInsideGarage(i) == garageid)
		    {
				SetPlayerPos(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVX], garageInteriors[GarageInfo[garageid][gType] + 1][intVY], garageInteriors[GarageInfo[garageid][gType] + 1][intVZ]);
				SetPlayerFacingAngle(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVA]);
				SetPlayerInterior(i, garageInteriors[GarageInfo[garageid][gType] + 1][intID]);
				SetCameraBehindPlayer(i);
			}
		}

		GarageInfo[garageid][gType]++;
		GarageInfo[garageid][gPrice] = garageInteriors[GarageInfo[garageid][gType]][intPrice];

		GivePlayerCash(playerid, -garageInteriors[GarageInfo[garageid][gType]][intPrice]);
		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da nang cap kich thuoc Garage len %s voi gia %s.", garageInteriors[GarageInfo[garageid][gType]][intName], FormatNumber(garageInteriors[GarageInfo[garageid][gType]][intPrice]));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i, price = %i WHERE id = %i", GarageInfo[garageid][gType], GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_property", "%s (uid: %i) da nang cap garage cua ho len kich thuoc (id: %i) %s voi giar $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GarageInfo[garageid][gID], garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	}
}

forward OnPlayerCheckMoney(playerid, achievement[]);
public OnPlayerCheckMoney(playerid, achievement[])
{
	if(cache_get_row_count(connectionID))
	{
	    AwardAchievement(playerid, achievement);
	}
}

forward OnPlayerAwardedAchievement(playerid, name[]);
public OnPlayerAwardedAchievement(playerid, name[])
{
	new count = cache_get_row_int(0, 0), string[64];

	format(string, sizeof(string), "~g~~h~~h~%s~n~~w~(%i/%i mo khoa)", name, count, sizeof(achievementInfo));
    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][9], string);

 	for(new i = 6; i < 10; i ++)
 	{
 	    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][i]);
    }

    if(count == sizeof(achievementInfo))
    {
        SendClientMessageToAllEx(COLOR_GREEN, "Xin chuc mung %s vi da hoan thanh thu thach thanh tich, ho da nhan duoc 50 Cookies.", GetPlayerRPName(playerid));
        SendClientMessage(playerid, COLOR_AQUA, "Lam tot! Ban da hoan thanh tat ca cac thanh tich va nhan duoc 50 Cookies.");
        PlayerInfo[playerid][pCookies] += 50;
   	}

    SetTimerEx("HideAchievementTextdraw", 10000, false, "i", playerid);
}

forward OnPlayerAchievementCheck(playerid, name[]);
public OnPlayerAchievementCheck(playerid, name[])
{
	if(cache_affected_rows(connectionID) > 0)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM achievements WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAwardedAchievement", "is", playerid, name);
	}
}

forward OnPlayerUseCarStorage(playerid);
public OnPlayerUseCarStorage(playerid)
{


	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay da duoc su dung.");
        }
        else if(IsVehicleBeingPicked(vehicleid))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay dang duoc dot nhap!");
        }
        else
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);

            if(health < 600.0)
            {
                SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay qua hu hong co the bi no.");
            }
            else
            {
		        SendClientMessageEx(playerid, COLOR_AQUA, "{FF6347}%s{33CCFF} cua ban nam o %s da bi bong troc", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				DespawnVehicle(vehicleid);
			}
		}
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
	}
}

forward OnPlayerAttemptResetUpgrades(playerid);
public OnPlayerAttemptResetUpgrades(playerid)
{
	if(PlayerInfo[playerid][pVIPPackage] == 0 && cache_get_row_int(0, 0) > 3)
	{
 		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Hien tai ban so huu %i/%i phuong tien. Vui long ban mot so chung truoc khi su dung lenh nay.", cache_get_row_int(0, 0), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}
	else
	{
	    PlayerInfo[playerid][pUpgradePoints] = (PlayerInfo[playerid][pLevel] - 1) * 2;
	    PlayerInfo[playerid][pInventoryUpgrade] = 0;
	    PlayerInfo[playerid][pAddictUpgrade] = 0;
	    PlayerInfo[playerid][pTraderUpgrade] = 0;
	    PlayerInfo[playerid][pAssetUpgrade] = 0;
	    PlayerInfo[playerid][pLaborUpgrade] = 0;
	    PlayerInfo[playerid][pSpawnHealth] = 50.0;
	    PlayerInfo[playerid][pSpawnArmor] = 0.0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i, inventoryupgrade = 0, addictupgrade = 0, traderupgrade = 0, assetupgrade = 0, laborupgrade = 0, spawnhealth = '50.0', spawnarmor = '0.0' WHERE uid = %i", PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_GREEN, "Ban da dat lai diem nang cap cua minh. Ban hien co san %i diem nang cap.", PlayerInfo[playerid][pUpgradePoints]);
	}
}

forward OnBanAttempt(username[], ip[], from[], reason[], permanent);
public OnBanAttempt(username[], ip[], from[], reason[], permanent)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE bans SET reason = '%e' WHERE id = %i", reason, cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, '%s', '%s', '%s', NOW(), '%e', %i)", username, ip, from, reason, permanent);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerAttemptInviteGang(playerid, targetid);
public OnPlayerAttemptInviteGang(playerid, targetid)
{
    if(cache_get_row_int(0, 0) >= GetGangMemberLimit(PlayerInfo[playerid][pGang]))
    {
        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Bang dang cua ban khong the co nhieu hon %i thanh vien o cap do cua no.", GetGangMemberLimit(PlayerInfo[playerid][pGang]));
    }
    else
    {
    	PlayerInfo[targetid][pGangOffer] = playerid;
		PlayerInfo[targetid][pGangOffered] = PlayerInfo[playerid][pGang];

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da moi ban tham gia {00AA00}%s{33CCFF} (/chapnhan gang).", GetPlayerRPName(playerid), GangInfo[PlayerInfo[playerid][pGang]][gName]);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da moi %s tham gia bang nhom cua minh.", GetPlayerRPName(targetid));
	}
}

forward OnPlayerAttemptBuyVehicleEx(playerid, offeredby, vehicleid, price);
public OnPlayerAttemptBuyVehicleEx(playerid, offeredby, vehicleid, price)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Hen ban dang so huu %i/%i phuong tien. Ban khong the so huu nua tru khi ban nang cap dac quyen tai san cua minh.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
   	 	GetPlayerName(playerid, VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
	    VehicleInfo[vehicleid][vOwnerID] = PlayerInfo[playerid][pID];

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET ownerid = %i, owner = '%s' WHERE id = %i", VehicleInfo[vehicleid][vOwnerID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan de nghi xe cua %s's va tra %s cho %s cua ban.", GetPlayerRPName(offeredby), FormatNumber(price), GetVehicleName(vehicleid));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s chap nhan de nghi mua xe cua ban va tra %s cho %s cua ban.", GetPlayerRPName(playerid), FormatNumber(price), GetVehicleName(vehicleid));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) da ban %s (id: %i) cua ho voi gia $%i cho %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));
	}
}

forward OnPlayerAttemptBuyVehicle(playerid, index);
public OnPlayerAttemptBuyVehicle(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Hien ban dang so huu %i/%i phuong tien. Ban khong the so huu nua tru khi ban nang cap dac quyen tai san cua minh.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(PlayerInfo[playerid][pCash] < vehicleArray[index][carPrice])
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua phuong tien nay.");
        }
        else if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the co nhieu hon %i phuong tien duoc tao ra cung mot luc.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
		    new
				Float:x,
				Float:y,
				Float:z,
				Float:angle;

            if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
			{
				switch(random(3))
	    	    {
	        	    case 0: x = 562.3970, y = -1283.8485, z = 17.0007, angle = 0.0000;
	            	case 1: x = 557.8670, y = -1283.9822, z = 17.0007, angle = 0.0000;
	            	case 2: x = 552.8177, y = -1284.1307, z = 17.0007, angle = 0.0000;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
			{
			    switch(random(4))
	    	    {
	        	    case 0: x = 138.0530, y = -1828.8923, z = -0.4000, angle = 90.0000;
	            	case 1: x = 138.0067, y = -1819.7065, z = -0.4000, angle = 90.0000;
	            	case 2: x = 137.9428, y = -1810.7821, z = -0.4000, angle = 90.0000;
	            	case 3: x = 137.0448, y = -1801.4567, z = -0.4000, angle = 90.0000;
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
			{
			    switch(random(3))
	    	    {
	        	    case 0: x = 1806.3048, y = -2424.4480, z = 15.0087, angle = 180.0000;
	            	case 1: x = 1847.3726, y = -2428.7100, z = 15.0087, angle = 180.0000;
	            	case 2: x = 1891.6610, y = -2433.3047, z = 15.0087, angle = 180.0000;
				}
			}

			AwardAchievement(playerid, "First wheels");

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '%f', '%f', '%f', '%f')", PlayerInfo[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][carPrice], x, y, z, angle);
   			mysql_tquery(connectionID, queryBuffer);

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][carPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][carPrice]);

	        format(string, sizeof(string), "~r~-$%i", vehicleArray[index][carPrice]);
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SendClientMessageEx(playerid, COLOR_GREEN, "%s duoc mua voi gia $%i. /carstorage de chinh xe.", vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][carPrice]);
    	    Log_Write("log_property", "%s (uid: %i) da mua %s voi gia $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][carPrice]);
		}
	}
}

forward OnPlayerChangeNumber(playerid, number);
public OnPlayerChangeNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "So dien thoai do da duoc su dung.");
	    ShowPlayerDialog(playerid, DIALOG_COOKIENUMBER, DIALOG_STYLE_INPUT, "Thay doi so dien thoai", "Nhap mot so dien thoai tuy chon:", "Gui", "Huy bo");
	}
	else
	{
	    PlayerInfo[playerid][pCookies] -= 10;
	    PlayerInfo[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i, phone = %i WHERE uid = %i", PlayerInfo[playerid][pCookies], PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da doi 10 Cookies de doi {00AA00}so dien thoai{33CCFF} thanh %i.", number);
	}
}

forward OnHitmanPassport(playerid, name[], level, skinid);
public OnHitmanPassport(playerid, name[], level, skinid)
{
    if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ten do da duoc su dung, vui long chon ten khac.");
	}
	else
	{
	    strcpy(PlayerInfo[playerid][pNameChange], name, MAX_PLAYER_NAME);

		PlayerInfo[playerid][pFreeNamechange] = 2;
		PlayerInfo[playerid][pChosenLevel] = level;
	    PlayerInfo[playerid][pChosenSkin] = skinid;

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da yeu cau doi ten thanh {00AA00}%s{33CCFF} mien phi, vui long doi su chap thuan cua quan tri vien.", name);
		SendClientMessageEx(playerid, COLOR_AQUA, "Khi viec thay doi ten duoc chap thuan, ban se nhan duoc ten, cap do va trang phuc cua minh.");

		SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] dang yeu cau doi ten thanh %s. (/chapnhanname %i or /denyname %i)", GetPlayerRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerAttemptNameChange(playerid, name[]);
public OnPlayerAttemptNameChange(playerid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ten do da duoc su dung, vui long chon ten khac.");

	    if(PlayerInfo[playerid][pFreeNamechange])
	    {
	        ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Mot quan tri vien da ket luan rang ten cua ban la Non-RP.\nVi vay, ban da duoc thay doi ten mien phi nay de sua no.\n\nNhap ten o dinh dang Ho_Ten o ben duoi:", "Gui", "Huy bo");
		}
	}
	else
	{
	    strcpy(PlayerInfo[playerid][pNameChange], name, MAX_PLAYER_NAME);

		if(PlayerInfo[playerid][pFreeNamechange]) {
			SendClientMessageEx(playerid, COLOR_AQUA, "Ban da yeu cau doi ten thanh {00AA00}%s{33CCFF} mien phi, vui long doi su chap thuan cua quan tri vien.", name);
		} else {
		    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da da yeu cau doi ten thanh {00AA00}%s{33CCFF} voi gia %s, vui long doi su chap thuan cua quan tri vien.", name, FormatNumber(PlayerInfo[playerid][pLevel] * 7500));
		}

		SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] da yeu cau doi ten thanh %s. (/chapnhanname %i or /denyname %i)", GetPlayerRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerRamFurnitureDoor(playerid, objectid, id);
public OnPlayerRamFurnitureDoor(playerid, objectid, id)
{
	if(cache_get_field_content_int(0, "door_opened"))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Cua da duoc mo.");
	}
	else
	{
	    new
	        Float:rx,
			Float:ry,
			Float:rz;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dap cua xuong.", GetPlayerRPName(playerid));

        GetDynamicObjectRot(objectid, rx, ry, rz);
        rz -= 90.0;
		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET rot_z = '%f', door_locked = 0, door_opened = 1 WHERE id = %i", rz, id);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerRamLandDoor(playerid, objectid, id);
public OnPlayerRamLandDoor(playerid, objectid, id)
{
	if(cache_get_field_content_int(0, "door_opened"))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Cua da duoc mo.");
	}
	else
	{
	    new
	        Float:rx,
			Float:ry,
			Float:rz;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dap cua xuong.", GetPlayerRPName(playerid));

        GetDynamicObjectRot(objectid, rx, ry, rz);
        rz -= 90.0;
		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET rot_z = '%f', door_locked = 0, door_opened = 1 WHERE id = %i", rz, id);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerLockFurnitureDoor(playerid, id);
public OnPlayerLockFurnitureDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da khoa cua.", GetPlayerRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo khoa cua.", GetPlayerRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseFurnitureDoor(playerid, objectid, id);
public OnPlayerUseFurnitureDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Cua da bi khoa.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s opens the door.", GetPlayerRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s closes the door.", GetPlayerRPName(playerid));
	}
}

forward OnPlayerLockLandDoor(playerid, id);
public OnPlayerLockLandDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s locks the door.", GetPlayerRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s unlocks the door.", GetPlayerRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseLandGate(playerid, objectid, id);
public OnPlayerUseLandGate(playerid, objectid, id)
{
	if(!Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
	{
	    new
         	Float:x = cache_get_field_content_float(0, "move_x"),
 			Float:y = cache_get_field_content_float(0, "move_y"),
 			Float:z = cache_get_field_content_float(0, "move_z");

	    if(x == 0.0 && y == 0.0 && z == 0.0)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Cong nay khong co thiet lap diem den.");
	    }
	    else
	    {
			MoveDynamicObject(objectid, x, y, z, 3.0, cache_get_field_content_float(0, "move_rx"), cache_get_field_content_float(0, "move_ry"), cache_get_field_content_float(0, "move_rz"));
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa cua ho de mo cong.", GetPlayerRPName(playerid));
			Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 1);
		}
	}
	else
	{
		MoveDynamicObject(objectid, cache_get_field_content_float(0, "pos_x"), cache_get_field_content_float(0, "pos_y"), cache_get_field_content_float(0, "pos_z"), 3.0, cache_get_field_content_float(0, "rot_x"), cache_get_field_content_float(0, "rot_y"), cache_get_field_content_float(0, "rot_z"));
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung dieu khien tu xa cua ho de dong cong.", GetPlayerRPName(playerid));
		Streamer_SetExtraInt(objectid, E_OBJECT_OPENED, 0);
	}
}

forward OnPlayerUseLandDoor(playerid, objectid, id);
public OnPlayerUseLandDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Cua da bi khoa.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s mo cua.", GetPlayerRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dong cua.", GetPlayerRPName(playerid));
	}
}

forward OnPlayerAddToPhonebook(playerid, number, name[]);
public OnPlayerAddToPhonebook(playerid, number, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "So do da co danh ba.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phonebook VALUES('%e', %i)", name, number);
		mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_GREEN, "Ban da them %s voi so %i vao danh ba.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) da them %s voi so %i vao danh ba.", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerRemoveFromPhonebook(playerid, number);
public OnPlayerRemoveFromPhonebook(playerid, number)
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "So do khong co trong danh ba.");
	}
	else
	{
	    new name[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_GREEN, "Ban da xoa %s voi so %i tu danh ba.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) da xoa %s voi so %i tu danh ba.", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerListInjuries(playerid, targetid);
public OnPlayerListInjuries(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi thuong.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "______ %s's bi thuong ______", GetPlayerRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW, "[%i giay truoc] %s da bi thuong boi %s", gettime() - cache_get_row_int(i, 1), GetPlayerRPName(targetid), GetWeaponNameEx(cache_get_row_int(i, 0)));
		}
	}
}

forward OnPlayerOfflineKickFaction(playerid, username[]);
public OnPlayerOfflineKickFaction(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else if(cache_get_row_int(0, 1) != PlayerInfo[playerid][pFaction])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong nam ngoai to chuc cua ban.");
	}
	/*else if(cache_get_row_int(0, 2) > PlayerInfo[playerid][pFactionRank])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "That player has a higher rank than you.");
	}*/
	else
	{
	    new uid = cache_get_row_int(0, 0), factionid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_faction", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, factionleader = 0, division = -1 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da truc xuat %s ra khoi to chuc cua ban.", username);
	}
}

forward OnPlayerOfflineKickGang(playerid, username[]);
public OnPlayerOfflineKickGang(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else if(cache_get_row_int(0, 1) != PlayerInfo[playerid][pGang])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong nam ngoai bang dang cua ban.");
	}
	else if(cache_get_row_int(0, 2) > PlayerInfo[playerid][pGangRank])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do co Rank cao hon ban.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), gangid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_gang", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da truc xuat %s ra khoi bang dang.", username);
	}
}

forward OnPlayerListGangs(playerid, gangid);
public OnPlayerListGangs(playerid, gangid)
{
	new color, members = cache_get_row_int(0, 0), color2, allyname[32];

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}

	new alliance = GangInfo[gangid][gAlliance];
	new
		rival = GangInfo[gangid][gWar],
		rivalName[32],
		colorRival;

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
		if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
		{
	    	color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[alliance][gColor];
		}
	}
	if(rival >= 0){
		strcpy(rivalName, GangInfo[rival][gName]);
		if(GangInfo[rival][gColor] == -1 || GangInfo[rival][gColor] == -256)
		{
	    	colorRival = 0xC8C8C8FF;
		}
		else
		{
		    colorRival = GangInfo[rival][gColor];
		}
	}
	if(alliance >= 0 && rival >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | {%06x}%s{C8C8C8} | Lanh dao: %s | Thanh vien: %i/%i | Strikes: %i/3 | Dong minh: {%06x}%s{C8C8C8} | Doi thu: {%06x}%s", gangid, color >>> 8, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname, colorRival >>> 8, rivalName);
	}
	else if(alliance >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | {%06x}%s{C8C8C8} | Lanh dao: %s | Thanh vien: %i/%i | Strikes: %i/3 | Dong minh: {%06x}%s", gangid, color >>> 8, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else if(rival >= 0)
		SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | {%06x}%s{C8C8C8} | Lanh dao: %s | Thanh vien: %i/%i | Strikes: %i/3 | Doi thu: {%06x}%s", gangid, color >>> 8, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], colorRival >>> 8, rivalName);
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | {%06x}%s{C8C8C8} | Lanh dao: %s | Thanh vien: %i/%i | Strikes: %i/3", gangid, color >>> 8, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}
}

forward OnPlayerListFactions(playerid, factionid);
public OnPlayerListFactions(playerid, factionid)
{
	new color, members = cache_get_row_int(0, 0);

	if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = FactionInfo[factionid][fColor];
	}

    if(FactionInfo[factionid][fType] == FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 7)
	{
    	SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Ten: {%06x}%s{C8C8C8} | Lanh dao: Da phan loai | Thanh vien: 0", factionid, color >>> 8, FactionInfo[factionid][fName]);
	}
   	else
   	{
		SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Ten: {%06x}%s{C8C8C8} | Lanh dao: %s | Thanh vien: %i", factionid, color >>> 8, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader], members);
	}
}



forward OnPlayerBuyPhoneNumber(playerid, number);
public OnPlayerBuyPhoneNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "So dien thoai duoc chi dinh da duoc su dung.");
	}
	else
	{
	    PlayerInfo[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", number, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(playerid, -10000);
	    GameTextForPlayer(playerid, "~r~-$10,000", 5000, 1);

	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da tra $10.000 de thay doi so dien thoai cua minh thanh %i.", number);
	    Log_Write("log_vip", "%s VIP %s (uid: %i) da thay doi so dien thoai: %i voi gia $10000.", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], number);
	}
}

forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri duoc chi dinh khong chua phuong tien hop le nao ban co the chinh ra.");
	}
	else
	{
	    if(GetVehicleLinkedID(cache_get_field_content_int(0, "id")) != INVALID_VEHICLE_ID)
     	{
      		return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay da duoc chinh ra. /findcar de tim no.");
	    }
	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the co nhieu hon %i phuong tien cung duoc tao ra mot luc.", MAX_SPAWNED_VEHICLES);
	    }

	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);

		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vAlarm] = cache_get_field_content_int(0, "alarm");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vWeed] = cache_get_field_content_int(0, "weed");
	        VehicleInfo[vehicleid][vCocaine] = cache_get_field_content_int(0, "cocaine");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
	        VehicleInfo[vehicleid][vWeapons][3] = cache_get_field_content_int(0, "weapon_4");
	        VehicleInfo[vehicleid][vWeapons][4] = cache_get_field_content_int(0, "weapon_5");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;
		    VehicleInfo[vehicleid][vRank] = 0;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

		    if(!parked)
			{
			    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chinh {00AA00}%s{33CCFF} cua ban o %s. /findcar de tim no.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
	    }
	}

	return 1;
}

forward OnPlayerAttachCopClothing(playerid, name[], clothingid);
public OnPlayerAttachCopClothing(playerid, name[], clothingid)
{
	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

 	SendClientMessageEx(playerid, COLOR_AQUA, "%s duoc them vao kho quan ao. /clothing de dinh kem vat pham moi.", name);
}

forward OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid);
public OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid)
{
    new string[16];

    if(PlayerInfo[playerid][pTraderUpgrade] > 0)
    {
		price -= percent(price, (PlayerInfo[playerid][pTraderUpgrade] * 10));
		SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Dac quyen thuong nhan cua cap %i/3 cua ban da giam gia mat hang nay xuong con $%i.", PlayerInfo[playerid][pTraderUpgrade], price);
    }

	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

	BusinessInfo[businessid][bCash] += price;
	BusinessInfo[businessid][bProducts]--;

 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
 	mysql_tquery(connectionID, queryBuffer);

	GivePlayerCash(playerid, -price);
 	SendClientMessageEx(playerid, COLOR_AQUA, "%s duoc mua voi gia {00AA00}$%i{33CCFF}. /clothing de tim vat pham moi cua ban.", name, price);

    format(string, sizeof(string), "~r~-$%i", price);
	GameTextForPlayer(playerid, string, 5000, 1);
}

forward OnPlayerSendTextMessage(playerid, number, msg[]);
public OnPlayerSendTextMessage(playerid, number, msg[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Con so ban dang co gang tiep can khong thuoc ve bat ky nguoi cu the nao.");
	}
	else if(cache_get_row_int(0, 1))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang bi bo tu va khong the su dung dien thoai cua ho.");
 	}
 	else if(cache_get_row_int(0, 2))
 	{
 	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da tat dien thoai di dong cua ho.");
	}
 	else
	{
	    new
	        username[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, username);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO texts VALUES(null, %i, %i, '%s', NOW(), '%e')", PlayerInfo[playerid][pPhone], number, GetPlayerNameEx(playerid), msg);
	    mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay dien thoai ra va gui tin nhan.", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS den %s (%i): %s **", username, number, msg);
	    SendClientMessage(playerid, COLOR_WHITE, "Nguoi choi so huu so dang ngoai tuyen, nhung se nhan duoc tin nhan khi ho dang nhap.");

        GivePlayerCash(playerid, -1);
        GameTextForPlayer(playerid, "~w~Da gui tin nhan!~n~~r~-$1", 5000, 1);
	}
}

forward OnPlayerRentHouse(playerid, houseid);
public OnPlayerRentHouse(playerid, houseid)
{
	if(cache_get_row_int(0, 0) >= GetHouseTenantCapacity(houseid))
	{
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ngoi nha nay da dat den gioi han %i nguoi thue.", GetHouseTenantCapacity(houseid));
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = %i WHERE uid = %i", HouseInfo[houseid][hID], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		PlayerInfo[playerid][pRentingHouse] = HouseInfo[houseid][hID];
		SendClientMessageEx(playerid, COLOR_GREEN, "Ban dang thue nha tai %s's house. Ban se tra %s cho moi lan lanh luong.", HouseInfo[houseid][hOwner], FormatNumber(HouseInfo[houseid][hRentPrice]));
	}
}

forward OnPlayerEvict(playerid, username[]);
public OnPlayerEvict(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong ton tai hoac khong thue nha cua ban.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerNameEx(i), username) && PlayerInfo[i][pLogged])
	        {
	            PlayerInfo[i][pRentingHouse] = 0;
	            SendClientMessage(i, COLOR_RED, "Ban da bi chu duoi ra khoi nha.");
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

        SendClientMessageEx(playerid, COLOR_WHITE, "Ban da duoi %s ra khoi nha cua minh.", username);
	}

	return 1;
}

forward OnListPlayerFlags(playerid, targetid);
public OnListPlayerFlags(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong co flags nao duoc liet ke trong tai khoan cua ho.");
	}
	else
	{
	    new flaggedby[24], date[24], desc[128];

	    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_________ %s's Flags _________", GetPlayerRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i][%s] %s (from: %s)", i + 1, date, desc, flaggedby);
	    }
	}
}

forward OnVerifyRemoveFlag(playerid, targetid);
public OnVerifyRemoveFlag(playerid, targetid)
{
	if(cache_get_row_count(connectionID))
	{
	    new
			desc[128];

	    cache_get_field_content(0, "description", desc);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM flags WHERE id = %i", cache_get_field_content_int(0, "id"));
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da go bo flag cua %s's cho '%s'.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), desc);
	}
}

forward OnVerifyRemoveVehicle(playerid, targetid);
public OnVerifyRemoveVehicle(playerid, targetid)
{
	if(cache_get_row_count(connectionID))
	{
	    new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id")), modelid = cache_get_field_content_int(0, "modelid");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", cache_get_field_content_int(0, "id"));
	    mysql_tquery(connectionID, queryBuffer);

	    if(vehicleid != INVALID_VEHICLE_ID)
	    {
	        DespawnVehicle(vehicleid, false);
		}

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da go bo %s's %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), vehicleNames[modelid - 400]);
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}%s{33CCFF} from your vehicle list.", GetPlayerRPName(playerid), vehicleNames[modelid - 400]);
	}
}
forward OnUpdatePartner(playerid);
public OnUpdatePartner(playerid)
{
    if(cache_get_row_count(connectionID))
	{
	    cache_get_field_content(0, "username", PlayerInfo[playerid][pMarriedName], connectionID, MAX_PLAYER_NAME);
	}
}
forward OnAdminSetPhoneNumber(playerid, targetid, number);
public OnAdminSetPhoneNumber(playerid, targetid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "So duoc chi dinh da duoc su dung.");
	}
	else
	{
	    PlayerInfo[targetid][pPhone] = number;
	    SendClientMessageEx(playerid, COLOR_WHITE, "Ban da dat so dien thoai cua %s's thanh %i.", GetPlayerRPName(targetid), number);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", number, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) phone number to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], number);
	}
}

forward OnAdminChangePassword(playerid, username[], password[]);
public OnAdminChangePassword(playerid, username[], password[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else
	{
	    new
	        hashed[129];

	    WP_Hash(hashed, sizeof(hashed), password);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE username = '%e'", hashed, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi mat khau tai khoan %s's.", GetPlayerRPName(playerid), username);
	}
}

forward OnAdminListVehiclesForRemoval(playerid, targetid);
public OnAdminListVehiclesForRemoval(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong so huu phuong tien nao.");
	}
	else
	{
		static string[1024];

		string = "#\tModel\tVi tri";

		for(new i = 0; i < rows; i ++)
    	{
			new
				vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"));

			if(vehicleid == INVALID_VEHICLE_ID)
			{
				format(string, sizeof(string), "%s\nn/a\t%s\t%s", string, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "interior")) ? ("Garage") : GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
			}
			else
			{
				format(string, sizeof(string), "%s\nID %i\t%s\t%s", string, vehicleid, GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
		}

		PlayerInfo[playerid][pRemoveFrom] = targetid;
		ShowPlayerDialog(playerid, DIALOG_REMOVEPVEH, DIALOG_STYLE_TABLIST_HEADERS, "Chon mot phuong tien de loai bo.", string, "Chon", "Huy bo");
	}
}

forward OnAdminListVehicles(playerid, targetid);
public OnAdminListVehicles(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s's Vehicles _____", GetPlayerRPName(targetid));

    for(new i = 0; i < rows; i ++)
    {
		new
			vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"));

		if(vehicleid == INVALID_VEHICLE_ID)
		{
			SendClientMessageEx(playerid, COLOR_GREY2, "ID: n/a | Model: %s | Vi tri: %s", vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "interior")) ? ("Garage") : GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Model: %s | Vi tri: %s", vehicleid, GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
		}
	}
}

forward OnAdminOfflineDM(playerid, username[]);
public OnAdminOfflineDM(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
		if(cache_get_field_content_int(0, "adminlevel") > PlayerInfo[playerid][pAdmin])
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ho khong de bi trung phat.");
		}
		else
		{
		    new ip[16], id = cache_get_field_content_int(0, "uid"), warns = cache_get_field_content_int(0, "warns");

			warns++;

			if(warns < 3)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = %i, dmwarnings = %i, weaponrestricted = %i, prisonedby = '%s', prisonreason = 'DM' WHERE uid = %i", warns * 3600, warns, warns * 4, GetPlayerNameEx(playerid), id);
			    mysql_tquery(connectionID, queryBuffer);

				Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, id, warns * 60);
				SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da Offline DM Warned & Prisoned trong %i phut boi %s, ly do: DM (%i/3)", username, warns * 60, GetPlayerRPName(playerid), warns);
			}
			else
			{
			    cache_get_field_content(0, "ip", ip);
			    AddBan(username, ip, GetPlayerNameEx(playerid), "DM (3/3 canh cao)");

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = 0 WHERE uid = %i", id);
			    mysql_tquery(connectionID, queryBuffer);

		        Log_Write("log_punishments", "%s (uid: %i) offline banned %s (uid: %i), reason: DM (3/3 warnings)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, id);
		        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da Offline Banned boi %s, ly do: DM (3/3 warnings)", username, GetPlayerRPName(playerid));
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
}

forward OnAdminCheckNameHistory(playerid, targetid);
public OnAdminCheckNameHistory(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong co lich su thay doi ten duoc ghi lai.");
	}
	else
	{
	    new oldname[MAX_PLAYER_NAME], newname[MAX_PLAYER_NAME], changedby[MAX_PLAYER_NAME], date[24];

		SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Lich su thay doi ten _____");

		for(new i = 0; i < rows; i ++)
		{
		    cache_get_field_content(i, "oldname", oldname);
		    cache_get_field_content(i, "newname", newname);
		    cache_get_field_content(i, "changedby", changedby);
		    cache_get_field_content(i, "date", date);

		    SendClientMessageEx(playerid, COLOR_YELLOW, "[%s] %s da doi ten %s's thanh %s.", date, changedby, oldname, newname);
		}
	}
}

forward OnAdminListFlagsForRemoval(playerid, targetid);
public OnAdminListFlagsForRemoval(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong co flags nao duoc liet ke trong tai khoan cua ho.");
	}
	else
	{
	    static string[4096], flaggedby[24], date[24], desc[128];

	    string = "#\tFlagged boi\tNgay\tMieu ta";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        format(string, sizeof(string), "%s\n%i\t%s\t%s\t%s", string, i + 1, flaggedby, date, desc);
	    }

	    PlayerInfo[playerid][pRemoveFrom] = targetid;
	    ShowPlayerDialog(playerid, DIALOG_REMOVEFLAG, DIALOG_STYLE_TABLIST_HEADERS, "Chon mot flag de xoa.", string, "Chon", "Huy bo");
	}
}

forward OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world);
public OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world)
{
	LockerInfo[lockerid][lID] = cache_insert_id(connectionID);
	LockerInfo[lockerid][lExists] = 1;
	LockerInfo[lockerid][lFaction] = factionid;
    LockerInfo[lockerid][lPosX] = x;
    LockerInfo[lockerid][lPosY] = y;
    LockerInfo[lockerid][lPosZ] = z;
    LockerInfo[lockerid][lInterior] = interior;
    LockerInfo[lockerid][lWorld] = world;
	LockerInfo[lockerid][lIcon] = 1239;
	LockerInfo[lockerid][lLabel] = 1;

    // CHANGE SQL TOO PLS
    LockerInfo[lockerid][locKevlar] = { 1, 100 };
    LockerInfo[lockerid][locMedKit] = { 1, 50 };
    LockerInfo[lockerid][locNitestick] = { 0, 0 };
    LockerInfo[lockerid][locMace] = { 0, 0 };
    LockerInfo[lockerid][locDeagle] = { 1, 850 };
    LockerInfo[lockerid][locShotgun] = { 1, 1000 };
    LockerInfo[lockerid][locMP5] = { 1, 1500 };
    LockerInfo[lockerid][locM4] = { 1, 2500 };
    LockerInfo[lockerid][locSpas12] = { 1, 3500 };
    LockerInfo[lockerid][locSniper] = { 1, 5000 };
    LockerInfo[lockerid][locCamera] = { 0, 0 };
    LockerInfo[lockerid][locFireExt] = { 0, 0 };
    LockerInfo[lockerid][locPainKillers] = { 0, 0 };

    LockerInfo[lockerid][lText] = Text3D:INVALID_3DTEXT_ID;
    LockerInfo[lockerid][lPickup] = -1;

    ReloadLocker(lockerid);
    SendClientMessageEx(playerid, COLOR_GREEN, "** Tu do %i duoc tao cho %s.", lockerid, FactionInfo[factionid][fName]);
}
forward OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    AtmInfo[atm][aID] = cache_insert_id(connectionID);
	AtmInfo[atm][aExists] = true;
    AtmInfo[atm][aPosX] = x;
    AtmInfo[atm][aPosY] = y;
    AtmInfo[atm][aPosZ] = z;
    AtmInfo[atm][aPosA] = a;

	ReloadAtm(atm);
    SendClientMessageEx(playerid, COLOR_GREEN, "** ATM [%i] duoc tao o %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateLocation(playerid, location, name[], Float:x, Float:y, Float:z);
public OnAdminCreateLocation(playerid, location, name[], Float:x, Float:y, Float:z)
{
	LocationInfo[location][locID] = cache_insert_id(connectionID);
	LocationInfo[location][locExists] = true;
	strcpy(LocationInfo[location][locName], name, 32);
    LocationInfo[location][locPosX] = x;
    LocationInfo[location][locPosY] = y;
    LocationInfo[location][locPosZ] = z;

    SendClientMessageEx(playerid, COLOR_GREEN, "** Vi tri [%i] %s duoc tao o %.1f, %.1f, %.1f.", location, name, x, y, z);
}

forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Trinh phat duoc chi dinh khong ton tai.");
	}
	else
	{
	    // At first I didn't know how I was going to do this. But then I came up with a plan.
	    // Load everything into an unused player slot, use DisplayStats as normal, then destroy the data.
	    // This ensures that whenever I add a new thing to /thongtin for instance, I don't have to maintain
	    // two stats functions, I can just call DisplayStats and let the work do itself.

	    PlayerInfo[MAX_PLAYERS][pID] = cache_get_field_content_int(0, "uid");
	    PlayerInfo[MAX_PLAYERS][pCzID] = cache_get_field_content_int(0, "czid");
		PlayerInfo[MAX_PLAYERS][pSetup] = cache_get_field_content_int(0, "setup");
        PlayerInfo[MAX_PLAYERS][pGender] = cache_get_field_content_int(0, "gender");
        PlayerInfo[MAX_PLAYERS][pAge] = cache_get_field_content_int(0, "age");
        PlayerInfo[MAX_PLAYERS][pSkin] = cache_get_field_content_int(0, "skin");
        PlayerInfo[MAX_PLAYERS][pCameraX] = cache_get_field_content_float(0, "camera_x");
        PlayerInfo[MAX_PLAYERS][pCameraY] = cache_get_field_content_float(0, "camera_y");
        PlayerInfo[MAX_PLAYERS][pCameraZ] = cache_get_field_content_float(0, "camera_z");
        PlayerInfo[MAX_PLAYERS][pPosX] = cache_get_field_content_float(0, "pos_x");
        PlayerInfo[MAX_PLAYERS][pPosY] = cache_get_field_content_float(0, "pos_y");
        PlayerInfo[MAX_PLAYERS][pPosZ] = cache_get_field_content_float(0, "pos_z");
        PlayerInfo[MAX_PLAYERS][pPosA] = cache_get_field_content_float(0, "pos_a");
        PlayerInfo[MAX_PLAYERS][pInterior] = cache_get_field_content_int(0, "interior");
        PlayerInfo[MAX_PLAYERS][pWorld] = cache_get_field_content_int(0, "world");
        PlayerInfo[MAX_PLAYERS][pCash] = cache_get_field_content_int(0, "cash");
        PlayerInfo[MAX_PLAYERS][pBank] = cache_get_field_content_int(0, "bank");
        PlayerInfo[MAX_PLAYERS][pPaycheck] = cache_get_field_content_int(0, "paycheck");
        PlayerInfo[MAX_PLAYERS][pLevel] = cache_get_field_content_int(0, "level");
        PlayerInfo[MAX_PLAYERS][pvLock] = cache_get_field_content_int(0, "vehlock");
        PlayerInfo[MAX_PLAYERS][pGraphic] = cache_get_field_content_int(0, "graphic");
        PlayerInfo[MAX_PLAYERS][pEXP] = cache_get_field_content_int(0, "exp");
        PlayerInfo[MAX_PLAYERS][pMinutes] = cache_get_field_content_int(0, "minutes");
        PlayerInfo[MAX_PLAYERS][pHours] = cache_get_field_content_int(0, "hours");
        PlayerInfo[MAX_PLAYERS][pAdmin] = cache_get_field_content_int(0, "adminlevel");
        PlayerInfo[MAX_PLAYERS][pHelper] = cache_get_field_content_int(0, "helperlevel");
        PlayerInfo[MAX_PLAYERS][pHealth] = cache_get_field_content_float(0, "health");
        PlayerInfo[MAX_PLAYERS][pArmor] = cache_get_field_content_float(0, "armor");
        PlayerInfo[MAX_PLAYERS][pHunger] = cache_get_field_content_int(0, "hunger");
        PlayerInfo[MAX_PLAYERS][pThirsty] = cache_get_field_content_int(0, "thirsty");
		PlayerInfo[MAX_PLAYERS][pUpgradePoints] = cache_get_field_content_int(0, "upgradepoints");
		PlayerInfo[MAX_PLAYERS][pWarnings] = cache_get_field_content_int(0, "warnings");
		PlayerInfo[MAX_PLAYERS][pInjured] = cache_get_field_content_int(0, "injured");
		PlayerInfo[MAX_PLAYERS][pHospital] = cache_get_field_content_int(0, "hospital");
		PlayerInfo[MAX_PLAYERS][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
        PlayerInfo[MAX_PLAYERS][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
        PlayerInfo[MAX_PLAYERS][pJailType] = cache_get_field_content_int(0, "jailtype");
        PlayerInfo[MAX_PLAYERS][pJailTime] = cache_get_field_content_int(0, "jailtime");
        PlayerInfo[MAX_PLAYERS][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
        PlayerInfo[MAX_PLAYERS][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
        PlayerInfo[MAX_PLAYERS][pAdMuted] = cache_get_field_content_int(0, "admuted");
        PlayerInfo[MAX_PLAYERS][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
        PlayerInfo[MAX_PLAYERS][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
        PlayerInfo[MAX_PLAYERS][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
        PlayerInfo[MAX_PLAYERS][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
        PlayerInfo[MAX_PLAYERS][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
        PlayerInfo[MAX_PLAYERS][pCookies] = cache_get_field_content_int(0, "cookies");
		PlayerInfo[MAX_PLAYERS][pPhone] = cache_get_field_content_int(0, "phone");
		PlayerInfo[MAX_PLAYERS][pJob] = cache_get_field_content_int(0, "job");
		PlayerInfo[MAX_PLAYERS][pSecondJob] = cache_get_field_content_int(0, "secondjob");
		PlayerInfo[MAX_PLAYERS][pCrimes] = cache_get_field_content_int(0, "crimes");
		PlayerInfo[MAX_PLAYERS][pArrested] = cache_get_field_content_int(0, "arrested");
		PlayerInfo[MAX_PLAYERS][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
		PlayerInfo[MAX_PLAYERS][pMaterials] = cache_get_field_content_int(0, "materials");
		PlayerInfo[MAX_PLAYERS][pWeed] = cache_get_field_content_int(0, "weed");
		PlayerInfo[MAX_PLAYERS][pCocaine] = cache_get_field_content_int(0, "cocaine");
		PlayerInfo[MAX_PLAYERS][pMeth] = cache_get_field_content_int(0, "meth");
		PlayerInfo[MAX_PLAYERS][pPainkillers] = cache_get_field_content_int(0, "painkillers");
		PlayerInfo[MAX_PLAYERS][pSeeds] = cache_get_field_content_int(0, "seeds");
		PlayerInfo[MAX_PLAYERS][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
		PlayerInfo[MAX_PLAYERS][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
		PlayerInfo[MAX_PLAYERS][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
		PlayerInfo[MAX_PLAYERS][pCigars] = cache_get_field_content_int(0, "cigars");
		PlayerInfo[MAX_PLAYERS][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
		PlayerInfo[MAX_PLAYERS][pChannel] = cache_get_field_content_int(0, "channel");
		PlayerInfo[MAX_PLAYERS][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
		PlayerInfo[MAX_PLAYERS][pSpraycans] = cache_get_field_content_int(0, "spraycans");
		PlayerInfo[MAX_PLAYERS][pBoombox] = cache_get_field_content_int(0, "boombox");
		PlayerInfo[MAX_PLAYERS][pMP3Player] = cache_get_field_content_int(0, "mp3player");
		PlayerInfo[MAX_PLAYERS][pPhonebook] = cache_get_field_content_int(0, "phonebook");
		PlayerInfo[MAX_PLAYERS][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
		PlayerInfo[MAX_PLAYERS][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
		PlayerInfo[MAX_PLAYERS][pFishWeight] = cache_get_field_content_int(0, "fishweight");
		PlayerInfo[MAX_PLAYERS][pComponents] = cache_get_field_content_int(0, "components");
		PlayerInfo[MAX_PLAYERS][pCourierSkill] = cache_get_field_content_int(0, "courierskill");
		PlayerInfo[MAX_PLAYERS][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
		PlayerInfo[MAX_PLAYERS][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
		PlayerInfo[MAX_PLAYERS][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
		PlayerInfo[MAX_PLAYERS][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
		PlayerInfo[MAX_PLAYERS][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
		PlayerInfo[MAX_PLAYERS][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
		PlayerInfo[MAX_PLAYERS][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
		PlayerInfo[MAX_PLAYERS][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
		PlayerInfo[MAX_PLAYERS][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
		PlayerInfo[MAX_PLAYERS][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
		PlayerInfo[MAX_PLAYERS][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
		PlayerInfo[MAX_PLAYERS][pToggleWT] = cache_get_field_content_int(0, "togglewt");
		PlayerInfo[MAX_PLAYERS][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
		PlayerInfo[MAX_PLAYERS][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
		PlayerInfo[MAX_PLAYERS][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
		PlayerInfo[MAX_PLAYERS][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
		PlayerInfo[MAX_PLAYERS][pToggleNews] = cache_get_field_content_int(0, "togglenews");
		PlayerInfo[MAX_PLAYERS][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
		PlayerInfo[MAX_PLAYERS][pToggleCam] = cache_get_field_content_int(0, "togglecam");
		PlayerInfo[MAX_PLAYERS][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
		PlayerInfo[MAX_PLAYERS][pToggleReports] = cache_get_field_content_int(0, "togglereports");
		PlayerInfo[MAX_PLAYERS][pToggleWhisper] = cache_get_field_content_int(0, "togglewhisper");
		PlayerInfo[MAX_PLAYERS][pCarLicense] = cache_get_field_content_int(0, "carlicense");
		PlayerInfo[MAX_PLAYERS][pGunLicense] = cache_get_field_content_int(0, "carlicense");
		PlayerInfo[MAX_PLAYERS][pVIPPackage] = cache_get_field_content_int(0, "vippackage");
		PlayerInfo[MAX_PLAYERS][pVIPTime] = cache_get_field_content_int(0, "viptime");
		PlayerInfo[MAX_PLAYERS][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
		PlayerInfo[MAX_PLAYERS][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
		PlayerInfo[MAX_PLAYERS][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
		PlayerInfo[MAX_PLAYERS][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
		PlayerInfo[MAX_PLAYERS][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
		PlayerInfo[MAX_PLAYERS][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
		PlayerInfo[MAX_PLAYERS][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
		PlayerInfo[MAX_PLAYERS][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
		PlayerInfo[MAX_PLAYERS][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
		PlayerInfo[MAX_PLAYERS][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
		PlayerInfo[MAX_PLAYERS][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
		PlayerInfo[MAX_PLAYERS][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
		PlayerInfo[MAX_PLAYERS][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
		PlayerInfo[MAX_PLAYERS][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
		PlayerInfo[MAX_PLAYERS][pFaction] = cache_get_field_content_int(0, "faction");
		PlayerInfo[MAX_PLAYERS][pFactionRank] = cache_get_field_content_int(0, "factionrank");
		PlayerInfo[MAX_PLAYERS][pFactionLeader] = cache_get_field_content_int(0, "factionleader");
		PlayerInfo[MAX_PLAYERS][pFactionID] = cache_get_field_content_int(0, "factionid");
		PlayerInfo[MAX_PLAYERS][pGang] = cache_get_field_content_int(0, "gang");
		PlayerInfo[MAX_PLAYERS][pGangRank] = cache_get_field_content_int(0, "gangrank");
		PlayerInfo[MAX_PLAYERS][pDivision] = cache_get_field_content_int(0, "division");
		PlayerInfo[MAX_PLAYERS][pCrew] = cache_get_field_content_int(0, "crew");
		PlayerInfo[MAX_PLAYERS][pContracted] = cache_get_field_content_int(0, "contracted");
		PlayerInfo[MAX_PLAYERS][pBombs] = cache_get_field_content_int(0, "bombs");
		PlayerInfo[MAX_PLAYERS][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
		PlayerInfo[MAX_PLAYERS][pFailedHits] = cache_get_field_content_int(0, "failedhits");
		PlayerInfo[MAX_PLAYERS][pReports] = cache_get_field_content_int(0, "reports");
		PlayerInfo[MAX_PLAYERS][pNewbies] = cache_get_field_content_int(0, "newbies");
		PlayerInfo[MAX_PLAYERS][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
		PlayerInfo[MAX_PLAYERS][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
		PlayerInfo[MAX_PLAYERS][pFactionMod] = cache_get_field_content_int(0, "factionmod");
		PlayerInfo[MAX_PLAYERS][pWebDev] = cache_get_field_content_int(0, "webdev");
		PlayerInfo[MAX_PLAYERS][pGangMod] = cache_get_field_content_int(0, "gangmod");
		PlayerInfo[MAX_PLAYERS][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
		PlayerInfo[MAX_PLAYERS][pFormerAdmin] = cache_get_field_content_int(0, "FormerAdmin");
		PlayerInfo[MAX_PLAYERS][pDeveloper] = cache_get_field_content_int(0, "scripter");
		PlayerInfo[MAX_PLAYERS][pWeedPlanted] = cache_get_field_content_int(0, "weedplanted");
		PlayerInfo[MAX_PLAYERS][pWeedTime] = cache_get_field_content_int(0, "weedtime");
		PlayerInfo[MAX_PLAYERS][pWeedGrams] = cache_get_field_content_int(0, "weedgrams");
		PlayerInfo[MAX_PLAYERS][pWeedX] = cache_get_field_content_float(0, "weed_x");
		PlayerInfo[MAX_PLAYERS][pWeedY] = cache_get_field_content_float(0, "weed_y");
		PlayerInfo[MAX_PLAYERS][pWeedZ] = cache_get_field_content_float(0, "weed_z");
		PlayerInfo[MAX_PLAYERS][pWeedA] = cache_get_field_content_float(0, "weed_a");
		PlayerInfo[MAX_PLAYERS][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
		PlayerInfo[MAX_PLAYERS][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
        PlayerInfo[MAX_PLAYERS][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
        PlayerInfo[MAX_PLAYERS][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
        PlayerInfo[MAX_PLAYERS][pLaborUpgrade] = cache_get_field_content_int(0, "laborupgrade");
		PlayerInfo[MAX_PLAYERS][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
		PlayerInfo[MAX_PLAYERS][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
		PlayerInfo[MAX_PLAYERS][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
		PlayerInfo[MAX_PLAYERS][pWatch] = cache_get_field_content_int(0, "watch");
		PlayerInfo[MAX_PLAYERS][pGPS] = cache_get_field_content_int(0, "gps");
		PlayerInfo[MAX_PLAYERS][pClothes] = cache_get_field_content_int(0, "clothes");
		PlayerInfo[MAX_PLAYERS][pShowLands] = cache_get_field_content_int(0, "showlands");
		PlayerInfo[MAX_PLAYERS][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
		PlayerInfo[MAX_PLAYERS][pWatchOn] = cache_get_field_content_int(0, "watchon");
		PlayerInfo[MAX_PLAYERS][pGPSOn] = cache_get_field_content_int(0, "gpson");
		PlayerInfo[MAX_PLAYERS][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
        PlayerInfo[MAX_PLAYERS][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
        PlayerInfo[MAX_PLAYERS][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
        PlayerInfo[MAX_PLAYERS][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
        PlayerInfo[MAX_PLAYERS][pThiefCooldown] = cache_get_field_content_int(0, "thiefcooldown");
        PlayerInfo[MAX_PLAYERS][pCocaineCooldown] = cache_get_field_content_int(0, "crackcooldown");
    	PlayerInfo[MAX_PLAYERS][pGasCan] = cache_get_field_content_int(0, "gascan");
    	PlayerInfo[MAX_PLAYERS][pDuty] = cache_get_field_content_int(0, "duty");
    	PlayerInfo[MAX_PLAYERS][pBandana] = cache_get_field_content_int(0, "bandana");
        PlayerInfo[MAX_PLAYERS][pPassport] = cache_get_field_content_int(0, "passport");
        PlayerInfo[MAX_PLAYERS][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
        PlayerInfo[MAX_PLAYERS][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
        PlayerInfo[MAX_PLAYERS][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
        PlayerInfo[MAX_PLAYERS][pNewbieMuteTime] = cache_get_field_content_int(0, "newbiemutetime");
		PlayerInfo[MAX_PLAYERS][pReportMuteTime] = cache_get_field_content_int(0, "reportmutetime");
		PlayerInfo[MAX_PLAYERS][pGlobalMuteTime] = cache_get_field_content_int(0, "globalmutetime");
		PlayerInfo[MAX_PLAYERS][pAdminHide] = cache_get_field_content_int(0, "adminhide");
		PlayerInfo[MAX_PLAYERS][pInsurance] = cache_get_field_content_int(0, "insurance");
		PlayerInfo[MAX_PLAYERS][pRope] = cache_get_field_content_int(0, "rope");
		PlayerInfo[MAX_PLAYERS][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
		PlayerInfo[MAX_PLAYERS][pTotalFires] = cache_get_field_content_int(0, "totalfires");
		PlayerInfo[MAX_PLAYERS][pMask] = cache_get_field_content_int(0, "mask");

		strcpy(PlayerInfo[MAX_PLAYERS][pUsername], username, MAX_PLAYER_NAME);
		DisplayStats(MAX_PLAYERS, playerid);
	}
}

forward OnAdminOfflineFlag(playerid, username[], desc[]);
public OnAdminOfflineFlag(playerid, username[], desc[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", cache_get_field_content_int(0, "uid"), GetPlayerNameEx(playerid), desc);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s offline flagged tai khoan s's cho '%s'.", GetPlayerRPName(playerid), username, desc);
	}
}

forward OnAdminCheckBanHistory(playerid, username[]);
public OnAdminCheckBanHistory(playerid, username[])
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong co lich su banned nao ghi lai.");
	}
	else
	{
	    new date[24], description[255];

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_row(i, 0, date);
	        cache_get_row(i, 1, description);

	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s", date, description);
	    }
	}
}

forward OnAdminCheckLastActive(playerid, username[]);
public OnAdminCheckLastActive(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_row(0, 0, date);
		SendClientMessageEx(playerid, COLOR_GREEN, "%s dang nhap lan cuoi vao nay %s (Thoi gian may chu).", username, date);
	}
}

forward OnAdminSetHelperLevel(playerid, username[], level);
public OnAdminSetHelperLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else if((PlayerInfo[playerid][pAdmin] < 6) && cache_get_row_int(0, 0) > PlayerInfo[playerid][pHelper] && level < cache_get_row_int(0, 0))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong co cap do Helper cao hon ban. Ho khong the bi giang cap.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat cap do helper %s's thanh %i.", GetPlayerRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's helper level to %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
	}
}

forward OnAdminSetAdminLevel(playerid, username[], level);
public OnAdminSetAdminLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin] && level < cache_get_row_int(0, 0))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ho khong the bi giang cap");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    if(level == 0)
	    {
   			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, helpermanager = 0, webdev = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE username = '%e'", username);
			mysql_tquery(connectionID, queryBuffer);
	    }

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat cap do quan tri vien cua %s's thanh %i.", GetPlayerRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) da dat cap do quan tri vien cua %s's thanh %i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, level);
	}
}

forward OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(TurfInfo[turfid][tName], name, 32);
	strcpy(TurfInfo[turfid][tCapturedBy], "No-one", MAX_PLAYER_NAME);

	TurfInfo[turfid][tExists] = 1;
	TurfInfo[turfid][tCapturedGang] = -1;
	TurfInfo[turfid][tTime] = 12;
	TurfInfo[turfid][tType] = type;
	TurfInfo[turfid][tMinX] = minx;
	TurfInfo[turfid][tMinY] = miny;
	TurfInfo[turfid][tMaxX] = maxx;
	TurfInfo[turfid][tMaxY] = maxy;
	TurfInfo[turfid][tHeight] = height;
	TurfInfo[turfid][tGangZone] = -1;
	TurfInfo[turfid][tArea] = -1;
	TurfInfo[turfid][tCaptureTime] = 0;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
    Iter_Add(Turf, turfid);

	ReloadTurf(turfid);
	SendClientMessageEx(playerid, COLOR_GREEN, "** Turf %i duoc tao thanh cong.", turfid);
}

forward OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(LandInfo[landid][lOwner], "Khong co", MAX_PLAYER_NAME);

	LandInfo[landid][lExists] = 1;
	LandInfo[landid][lID] = cache_insert_id(connectionID);
	LandInfo[landid][lOwnerID] = 0;
	LandInfo[landid][lLevel] = 1;
	LandInfo[landid][lPrice] = price;
	LandInfo[landid][lMinX] = minx;
	LandInfo[landid][lMinY] = miny;
	LandInfo[landid][lMaxX] = maxx;
	LandInfo[landid][lMaxY] = maxy;
	LandInfo[landid][lHeight] = height;
	LandInfo[landid][lGangZone] = -1;
    LandInfo[landid][lArea] = -1;
    Iter_Add(Land, landid);

    ReloadLand(landid);
    SendClientMessageEx(playerid, COLOR_GREEN, "** Land %i duoc tao thanh cong.", landid);
}

forward OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(EntranceInfo[entranceid][eOwner], "Khong co", MAX_PLAYER_NAME);
	strcpy(EntranceInfo[entranceid][eName], name, 40);
	strcpy(EntranceInfo[entranceid][ePassword], "None", 64);

	EntranceInfo[entranceid][eExists] = 1;
	EntranceInfo[entranceid][eID] = cache_insert_id(connectionID);
	EntranceInfo[entranceid][eOwnerID] = 0;
	EntranceInfo[entranceid][eIcon] = 1239;
	EntranceInfo[entranceid][eLocked] = 0;
	EntranceInfo[entranceid][eRadius] = 3.0;
	EntranceInfo[entranceid][ePosX] = x;
	EntranceInfo[entranceid][ePosY] = y;
	EntranceInfo[entranceid][ePosZ] = z;
	EntranceInfo[entranceid][ePosA] = angle;
	EntranceInfo[entranceid][eIntX] = 0.0;
	EntranceInfo[entranceid][eIntY] = 0.0;
	EntranceInfo[entranceid][eIntZ] = 0.0;
	EntranceInfo[entranceid][eIntA] = 0.0;
	EntranceInfo[entranceid][eInterior] = 0;
	EntranceInfo[entranceid][eWorld] = EntranceInfo[entranceid][eID] + 4000000;
	EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);
	EntranceInfo[entranceid][eAdminLevel] = 0;
	EntranceInfo[entranceid][eFactionType] = FACTION_NONE;
	EntranceInfo[entranceid][eGang] = -1;
	EntranceInfo[entranceid][eVIP] = 0;
	EntranceInfo[entranceid][eVehicles] = 0;
	EntranceInfo[entranceid][eFreeze] = 0;
	EntranceInfo[entranceid][eLabel] = 1;
	EntranceInfo[entranceid][eType] = 0;
	EntranceInfo[entranceid][eMapIcon] = 0;
	EntranceInfo[entranceid][eText] = Text3D:INVALID_3DTEXT_ID;
	EntranceInfo[entranceid][ePickup] = -1;
	EntranceInfo[entranceid][eMapIconID] = -1;
	EntranceInfo[entranceid][eColor] = -256;
    Iter_Add(Entrance, entranceid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
	SendClientMessageEx(playerid, COLOR_GREEN, "** Entrance %i duoc tao thanh cong.", entranceid);
}

forward OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(BusinessInfo[businessid][bOwner], "Khong co", MAX_PLAYER_NAME);

	BusinessInfo[businessid][bExists] = 1;
	BusinessInfo[businessid][bID] = cache_insert_id(connectionID);
	BusinessInfo[businessid][bOwnerID] = 0;
	BusinessInfo[businessid][bType] = type;
	BusinessInfo[businessid][bPrice] = bizInteriors[type][intPrice];
	BusinessInfo[businessid][bEntryFee] = 0;
	BusinessInfo[businessid][bLocked] = 0;
	BusinessInfo[businessid][bPosX] = x;
	BusinessInfo[businessid][bPosY] = y;
	BusinessInfo[businessid][bPosZ] = z;
	BusinessInfo[businessid][bPosA] = angle;
	BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
	BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
	BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
	BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
	BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
	BusinessInfo[businessid][bWorld] = BusinessInfo[businessid][bID] + 3000000;
	BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);
	BusinessInfo[businessid][bCash] = 0;
	BusinessInfo[businessid][bProducts] = 500;
	BusinessInfo[businessid][bMaterials] = 0;
	BusinessInfo[businessid][bText] = Text3D:INVALID_3DTEXT_ID;
	BusinessInfo[businessid][bPickup] = -1;
	BusinessInfo[businessid][bMapIcon] = -1;
	Iter_Add(Business, businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SendClientMessageEx(playerid, COLOR_GREEN, "** Doanh nghiep %i duoc tao thanh cong.", businessid);
}

forward OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(GarageInfo[garageid][gOwner], "Khong co", MAX_PLAYER_NAME);

	GarageInfo[garageid][gExists] = 1;
	GarageInfo[garageid][gID] = cache_insert_id(connectionID);
	GarageInfo[garageid][gOwnerID] = 0;
	GarageInfo[garageid][gType] = type;
	GarageInfo[garageid][gPrice] = garageInteriors[type][intPrice];
	GarageInfo[garageid][gLocked] = 0;
	GarageInfo[garageid][gPosX] = x;
	GarageInfo[garageid][gPosY] = y;
	GarageInfo[garageid][gPosZ] = z;
	GarageInfo[garageid][gPosA] = angle;
	GarageInfo[garageid][gExitX] = x - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitY] = y - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitZ] = z;
	GarageInfo[garageid][gExitA] = angle - 180.0;
	GarageInfo[garageid][gWorld] = GarageInfo[garageid][gID] + 2000000;
    GarageInfo[garageid][gText] = Text3D:INVALID_3DTEXT_ID;
    GarageInfo[garageid][gPickup] = -1;
	Iter_Add(Garage, garageid);
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET world = %i WHERE id = %i", GarageInfo[garageid][gWorld], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
	SendClientMessageEx(playerid, COLOR_GREEN, "** Garage %i duoc tao thanh cong.", garageid);
}

forward OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(HouseInfo[houseid][hOwner], "Khong co", MAX_PLAYER_NAME);

	HouseInfo[houseid][hExists] = 1;
	HouseInfo[houseid][hID] = cache_insert_id(connectionID);
	HouseInfo[houseid][hOwnerID] = 0;
	HouseInfo[houseid][hType] = type;
	HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hRentPrice] = 0;
	HouseInfo[houseid][hLevel] = 1;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosA] = angle;
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hWorld] = HouseInfo[houseid][hID] + 1000000;
	HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeed] = 0;
	HouseInfo[houseid][hCocaine] = 0;
	HouseInfo[houseid][hMeth] = 0;
	HouseInfo[houseid][hPainkillers] = 0;
	HouseInfo[houseid][hLabels] = 0;
	HouseInfo[houseid][hText] = Text3D:INVALID_3DTEXT_ID;
	HouseInfo[houseid][hPickup] = -1;
	HouseInfo[houseid][hDelivery] = 1;
	HouseInfo[houseid][hLights] = 1;
	Iter_Add(House, houseid);

	for(new i = 0; i < 10; i ++)
	{
	    HouseInfo[houseid][hWeapons][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SendClientMessageEx(playerid, COLOR_GREEN, "** House %i duoc tao thanh cong.", houseid);
}

forward OnAdminDeleteAccount(playerid, username[]);
public OnAdminDeleteAccount(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ban khong the xoa chung.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da xoa tai khoan %s's.", GetPlayerNameEx(playerid), username);
	}
}

forward OnAdminListKills(playerid, targetid);
public OnAdminListKills(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do chua giet hoac da bi giet boi bat ky ai ke tu khi ho dang ky.");
	}
	else
	{
	    new date[24], killer[24], target[24], reason[24];

	    SendClientMessage(playerid, COLOR_NAVYBLUE, "________ Kills & Deaths ________");

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "killer", killer);
	        cache_get_field_content(i, "target", target);
	        cache_get_field_content(i, "reason", reason);

	        if(cache_get_field_content_int(i, "killer_uid") == PlayerInfo[targetid][pID])
	        {
		        SendClientMessageEx(playerid, COLOR_YELLOW, "[%s] %s killed %s (%s)", date, killer, target, reason);
	        }
	        else if(cache_get_field_content_int(i, "target_uid") == PlayerInfo[targetid][pID])
	        {
	            SendClientMessageEx(playerid, COLOR_YELLOW, "[%s] %s da bi giet boi %s (%s)", date, target, killer, reason);
	        }
	    }
	}
}

forward OnAdminListDamages(playerid, targetid);
public OnAdminListDamages(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi sat thuong nao ke tu khi ket noi.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "___________ Damage Received ___________");

	    for(new i = 0; i < rows; i ++)
	    {
	        SendClientMessageEx(playerid, COLOR_YELLOW, "[%i giay truoc] %s bi %s sat thuong bang %s", gettime() - cache_get_row_int(i, 2), GetPlayerRPName(targetid), GetPlayerRPName(cache_get_row_int(i, 1)), GetWeaponNameEx(cache_get_row_int(i, 0)));
			//SendClientMessageEx(playerid, COLOR_GREY2, "(Weapon: %s) - (From: %s) - (Time: %i seconds ago)", GetWeaponNameEx(cache_get_row_int(i, 0)), GetPlayerRPName(cache_get_row_int(i, 1)), gettime() - cache_get_row_int(i, 2));
		}
	}
}

forward OnAdminListShots(playerid, targetid);
public OnAdminListShots(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi hung cu danh nao ke tu khi ho ket noi.");
	}
	else
	{
	    new weaponid, hittype, timestamp, hit[48];

	    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "___________ %i Last Shots ___________", rows);

	    for(new i = 0; i < rows; i ++)
	    {
	        weaponid 	= cache_get_field_content_int(i, "weaponid");
	        hittype 	= cache_get_field_content_int(i, "hittype");
	        timestamp 	= cache_get_field_content_int(i, "timestamp");

			switch(hittype)
			{
       			case BULLET_HIT_TYPE_PLAYER:
					cache_get_field_content(i, "hitplayer", hit);
          		case BULLET_HIT_TYPE_VEHICLE:
          		    format(hit, sizeof(hit), "Vehicle (ID %i)", cache_get_field_content_int(i, "hitid"));
    			default:
    			    hit = "Missed";
			}

			SendClientMessageEx(playerid, COLOR_YELLOW, "[%i giay truoc] %s shot a %s and hit: %s", gettime() - timestamp, GetPlayerRPName(targetid), GetWeaponNameEx(weaponid), hit);
		}
	}
}

forward OnAdminBanIP(playerid, ip[], reason[]);
public OnAdminBanIP(playerid, ip[], reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Dia chi IP nay da bi cam.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip))
			{
				SendClientMessageEx(i, COLOR_YELLOW, "Dia chi IP cua ban da bi cam boi %s, ly do: %s", GetPlayerRPName(playerid), reason);
				KickPlayer(i);
			}
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, 'n/a', '%s', '%s', NOW(), '%s', 0)", ip, GetPlayerNameEx(playerid), reason);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da cam IP '%s', ly do: %s", GetPlayerRPName(playerid), ip, reason);
	    Log_Write("log_punishments", "%s (uid: %i) da cam IP: %s, ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], ip, reason);
	}
}

forward OnAdminCheckBan(playerid, string[]);
public OnAdminCheckBan(playerid, string[])
{
	new bannedby[MAX_PLAYER_NAME], username[MAX_PLAYER_NAME], ip[16], date[24], reason[128];

	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co lenh cam nao phu hop voi tieu chi cua ban.");
	}
	else
	{
	    cache_get_field_content(0, "bannedby", bannedby);
	    cache_get_field_content(0, "username", username);
	    cache_get_field_content(0, "ip", ip);
	    cache_get_field_content(0, "date", date);
	    cache_get_field_content(0, "reason", reason);

		if(!strcmp(username, "n/a", true)) {
		    if(strfind(ip, "*", true) != -1) {
		    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' duoc gioi han boi %s, ly do: %s", date, ip, bannedby, reason);
	        } else {
	            SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' da cam boi %s, ly do: %s", date, ip, bannedby, reason);
	        }
		}
		else {
		    if(strfind(ip, "*", true) != -1) {
		    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) duoc gioi han boi %s, ly do: %s", date, username, ip, bannedby, reason);
	        } else if(cache_get_field_content_int(0, "permanent")) {
	            SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) bi cam vinh vien boi %s, ly do: %s", date, username, ip, bannedby, reason);
	        } else {
	            SendClientMessageEx(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) da bi cam boi %s, ly do: %s", date, username, ip, bannedby, reason);
	        }
		}
	}
}

forward OnAdminUnbanUser(playerid, username[]);
public OnAdminUnbanUser(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 1) && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay bi cam vinh vien. Permabans chi co the duoc do bo boi ban quan ly.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE id = %i", cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bo cam %s.", GetPlayerRPName(playerid), username);
		Log_Write("log_punishments", "%s (uid: %i) da bo cam %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co nguoi choi bi cam nao duoc biet den voi cai ten do.");
	}

	return 1;
}

forward OnAdminLockAccount(playerid, username[]);
public OnAdminLockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
	}
	else if(cache_get_row_int(0, 0))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Tai khoan cua nguoi choi nay da bi khoa. /unlockaccount de mo no.");
	}
	else if(cache_get_row_int(0, 1) > PlayerInfo[playerid][pAdmin])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ho khong the bi khoa.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da khoa tai khoan %s's.", GetPlayerRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) da khoa tai khoan %s's.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
}

forward OnAdminUnlockAccount(playerid, username[]);
public OnAdminUnlockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai, or their account is not locked.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da mo khoa tai khoan %s's.", GetPlayerRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) da mo khoa tai khoan %s's.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username);
	}
}

forward OnAdminChangeName(playerid, targetid, name[]);
public OnAdminChangeName(playerid, targetid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ten duoc chi dinh da duoc su dung.");
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);
		Log_Write("log_namechanges", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_namehistory VALUES(null, %i, '%s', '%s', '%s', NOW())", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), name, GetPlayerNameEx(playerid));
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi ten %s's thanh %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), name);
		SendClientMessageEx(targetid, COLOR_WHITE, "%s da doi ten cua ban tu %s thanh %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), name);

		Namechange(targetid, GetPlayerNameEx(targetid), name);
	}
}
/*
forward OnAdminAssignDonation(playerid, username[], donationid);
public OnAdminAssignDonation(playerid, username[], donationid)
{
    if(cache_get_row_count(connectionID))
	{
		new
		    ip[16];

		cache_get_row(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);

        switch(donationid)
        {
        	case DONATION_1M:
        	{
    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i"
				mysql_tquery(connectionID, queryBuffer);
			}

        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was offline banned by %s, reason: %s", username, GetPlayerNameEx(playerid), reason);
        Log_Write("log_admin", "%s (uid: %i) assigned %s the %s donation.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, reason);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not registered.");
	}

	return 1;
}
*/
forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
    if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	    {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ho khong the bi cam.");
		}

		new
		    ip[16];

		cache_get_row(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", cache_get_field_content_int(0, "uid"), username, ip, GetPlayerNameEx(playerid), reason);
		mysql_tquery(connectionID, queryBuffer);

        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bi cam ngoai tuyen boi %s, ly do: %s", username, GetPlayerNameEx(playerid), reason);
        Log_Write("log_punishments", "%s (uid: %i) offline banned %s, ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, reason);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do chua dang ky.");
	}

	return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	    {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ho khong the bi bo tu.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = %i, prisonedby = '%e', prisonreason = '%e' WHERE username = '%e'", minutes * 60, GetPlayerNameEx(playerid), reason, username);
	    mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bi bo tu ngoai tuyen %i phut boi %s, ly do: %s", username, minutes, GetPlayerRPName(playerid), reason);
		Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s voi %i phut, ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, minutes, reason);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do chua dang ky.");
	}

	return 1;
}

forward OnAdminOfflineFine(playerid, username[], amount, reason[]);
public OnAdminOfflineFine(playerid, username[], amount, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > PlayerInfo[playerid][pAdmin])
	    {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ho khong the bi phat.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE username = '%e'", amount, username);
	    mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bi phat %s boi %s, ly do: %s", username, FormatNumber(amount), GetPlayerRPName(playerid), reason);
        Log_Write("log_admin", "%s (uid: %i) offline fined %s voi $%i, ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], username, amount, reason);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do chua duoc dang ky.");
	}

	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	new
	    File:file = fopen("mysql_error.txt", io_append);

	if(file)
	{
	    new
	        string[2048];

		format(string, sizeof(string), "[%s]\r\nError ID: %i\r\nCallback: %s\r\nQuery: %s\r\nError: %s\r\n\r\n", GetDate(), errorid, callback, query, error);
		fwrite(file, string);
		fclose(file);
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: A MySQL error occurred (error %i). Details written to mysql_error.txt.", errorid);
	return 1;
}

forward OnQueryFinished(threadid, extraid);
public OnQueryFinished(threadid, extraid)
{
	new rows = cache_get_row_count(connectionID);

	switch(threadid)
	{
	    case THREAD_LOOKUP_BANS:
	    {
	        if(rows)
        	{
	            new bannedby[24], date[24], reason[128];

	            cache_get_field_content(0, "bannedby", bannedby);
	            cache_get_field_content(0, "date", date);
	            cache_get_field_content(0, "reason", reason);

	            GameTextForPlayer(extraid, "~r~Ban da bi cam!", 999999, 3);

				if(cache_get_field_content_int(0, "permanent"))
				    SendClientMessageEx(extraid, COLOR_YELLOW, "Ban bi cam vinh vien khoi may chu nay.");
				else
					SendClientMessageEx(extraid, COLOR_YELLOW, "Ban bi cam vao may chu nay. Ban co the khieu nai tai www.new-city.net");

				SendClientMessageEx(extraid, COLOR_LIGHTRED, "Admin: %s", bannedby);
	            SendClientMessageEx(extraid, COLOR_LIGHTRED, "Thoi gian: %s", date);
	            SendClientMessageEx(extraid, COLOR_LIGHTRED, "Ly do: %s", reason);

				KickPlayer(extraid);
	        }
	        else
	        {
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%s'", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_ACCOUNT, extraid);
	        }
		}
	    case THREAD_LOOKUP_ACCOUNT:
	    {
	        if(rows)
	        {
	            #if defined SERVER_INTRO
					//PlayAudioStreamForPlayer(extraid, "https://dl.dropbox.com/s/xl5leq5z6dbq845/IMRAN%20KAHN%20-%20SATISFYA%20INSTRUMENTAL%20%20LYRICS%20%28Remake%20by%20z7beats%29.mp3?dl=0"); // Hernandez
					PlayLoginMusic(extraid);
                	SetTimerEx("ShowMainMenuCamera", 400, false, "ii", extraid, 0);
				#endif

				ShowDialogToPlayer(extraid, DIALOG_LOGIN);
			}
			else
			{
			    /*new namechange;
				for(new i = strlen(string); i > 0; i--)
				{
        			if(!('A' <= string[i] <= 'Z') && !('a' <= string[i] <= 'z') && (string[i] != '_'))
					{
					    namechange = true;
					    break;
					}
        		}*/
			    if(strfind(GetPlayerNameEx(extraid), "_") == -1)
			    {
			        ShowPlayerDialog(extraid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Mot quan tri vien da ket luan rang ten cua ban Non-RP.\nVi vay, ban da duoc thay doi ten mien phi nay sua no.\n\nNhap ten theo dinh dang Ho_Ten duoi day:", "Gui", "");
			        //SendClientMessage(extraid, COLOR_LIGHTRED, "Please reconnect with a proper roleplay name in the Firstname_Lastname format.");
			        //KickPlayer(extraid);
			    }
			    else
			    {
			        #if defined SERVER_INTRO
				        ShowServerIntro(extraid);
					#else
				    	ShowDialogToPlayer(extraid, DIALOG_REGISTER);
					#endif
				}
			}
	    }
	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new
	            id = cache_insert_id(connectionID);

	       

			//if(id)
	        //{
	        	/*mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", id);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);*/

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", id);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);
			//ShowDialogToPlayer(extraid, DIALOG_RULES);
	        //}
	    }
	    case THREAD_PROCESS_LOGIN:
	    {
	    	
	        if(!rows)
	        {
	            PlayerInfo[extraid][pLoginTries]++;

				if(PlayerInfo[extraid][pLoginTries] < 3)
				{
				    ShowDialogToPlayer(extraid, DIALOG_LOGIN);
		            SendClientMessageEx(extraid, COLOR_ORANGE, "Mat khau khong chinh xac, ban co the dang nhap %i lan truoc khi bi truc xuat.", 3 - PlayerInfo[extraid][pLoginTries]);
				}
				else
				{
				    ShowPlayerDialog(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{6FD497}New City{FFFFFF} | Khong the dang nhap", "{FFFFFF}Co ve nhu ban da quen mat khau cua ban.\n\nBan co the dang bai yeu cau doi mat khau tren {6FD497}new-city.net{FFFFFF}.", "Huy bo", "");
				    KickPlayer(extraid);
				}
		    }
	        else if(cache_get_field_content_int(0, "locked"))
         	{
          		SendClientMessage(extraid, COLOR_LIGHTRED, "** Tai khoan nay hien dang bi khoa. Dang mot yeu cau quan tri vien de yeu do bo no.");
          		ShowPlayerDialog(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{6FD497}New City{FFFFFF} | Khong the dang nhap", "{FFFFFF}Tai khoan nay hien dang bi khoa.\n\nBan co the dang bai yeu cau quan tri vien tren {6FD497}new-city.net{FFFFFF} de yeu cau duoc do bo.", "Huy bo", "");
            	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da co gang dang nhap tai khoan bi khoa.", GetPlayerRPName(extraid));
             	KickPlayer(extraid);
            }
			else
			{
   			    if(PlayerInfo[extraid][pAdminDuty])
   			    {
   					ResetPlayerWeaponsEx(extraid);
   				}

	            new date[64], string[64];

	            cache_get_field_content(0, "login_date", date);
	            cache_get_field_content(0, "accent", PlayerInfo[extraid][pAccent], connectionID, 16);
	            cache_get_field_content(0, "adminname", PlayerInfo[extraid][pAdminName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "contractby", PlayerInfo[extraid][pContractBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonedby", PlayerInfo[extraid][pPrisonedBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonreason", PlayerInfo[extraid][pPrisonReason], connectionID, 128);
	            cache_get_field_content(0, "passportname", PlayerInfo[extraid][pPassportName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "customtitle", PlayerInfo[extraid][pCustomTitle], connectionID, 64);
	            //cache_get_field_content(0, "marriedname", PlayerInfo[extraid][pMarriedName], connectionID, MAX_PLAYER_NAME);
				PlayerInfo[extraid][pCustomTColor] = cache_get_field_content_int(0, "customcolor");

	            PlayerInfo[extraid][pID] = cache_get_field_content_int(0, "uid");
	            PlayerInfo[extraid][pCzID] = cache_get_field_content_int(0, "czid");
				PlayerInfo[extraid][pSetup] = cache_get_field_content_int(0, "setup");
                PlayerInfo[extraid][pGender] = cache_get_field_content_int(0, "gender");
                PlayerInfo[extraid][pAge] = cache_get_field_content_int(0, "age");
                PlayerInfo[extraid][pSkin] = cache_get_field_content_int(0, "skin");
                PlayerInfo[extraid][pCameraX] = cache_get_field_content_float(0, "camera_x");
                PlayerInfo[extraid][pCameraY] = cache_get_field_content_float(0, "camera_y");
                PlayerInfo[extraid][pCameraZ] = cache_get_field_content_float(0, "camera_z");
                PlayerInfo[extraid][pPosX] = cache_get_field_content_float(0, "pos_x");
                PlayerInfo[extraid][pPosY] = cache_get_field_content_float(0, "pos_y");
                PlayerInfo[extraid][pPosZ] = cache_get_field_content_float(0, "pos_z");
                PlayerInfo[extraid][pPosA] = cache_get_field_content_float(0, "pos_a");
                PlayerInfo[extraid][pInterior] = cache_get_field_content_int(0, "interior");
                PlayerInfo[extraid][pWorld] = cache_get_field_content_int(0, "world");
                PlayerInfo[extraid][pCash] = cache_get_field_content_int(0, "cash");
                PlayerInfo[extraid][pBank] = cache_get_field_content_int(0, "bank");
                PlayerInfo[extraid][pPaycheck] = cache_get_field_content_int(0, "paycheck");
                PlayerInfo[extraid][pLevel] = cache_get_field_content_int(0, "level");
                PlayerInfo[extraid][pvLock] = cache_get_field_content_int(0, "vehlock");
                PlayerInfo[extraid][pGraphic] = cache_get_field_content_int(0, "graphic");
                PlayerInfo[extraid][pEXP] = cache_get_field_content_int(0, "exp");
                PlayerInfo[extraid][pMinutes] = cache_get_field_content_int(0, "minutes");
                PlayerInfo[extraid][pHours] = cache_get_field_content_int(0, "hours");
                PlayerInfo[extraid][pAdmin] = cache_get_field_content_int(0, "adminlevel");
                PlayerInfo[extraid][pHelper] = cache_get_field_content_int(0, "helperlevel");
                PlayerInfo[extraid][pHealth] = cache_get_field_content_float(0, "health");
                PlayerInfo[extraid][pArmor] = cache_get_field_content_float(0, "armor");
                PlayerInfo[extraid][pHunger] = cache_get_field_content_int(0, "hunger");
                PlayerInfo[extraid][pThirsty] = cache_get_field_content_int(0, "thirsty");
				PlayerInfo[extraid][pUpgradePoints] = cache_get_field_content_int(0, "upgradepoints");
				PlayerInfo[extraid][pWarnings] = cache_get_field_content_int(0, "warnings");
				PlayerInfo[extraid][pInjured] = cache_get_field_content_int(0, "injured");
				PlayerInfo[extraid][pHospital] = cache_get_field_content_int(0, "hospital");
				PlayerInfo[extraid][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
                PlayerInfo[extraid][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
                PlayerInfo[extraid][pJailType] = cache_get_field_content_int(0, "jailtype");
                PlayerInfo[extraid][pJailTime] = cache_get_field_content_int(0, "jailtime");
                PlayerInfo[extraid][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
                PlayerInfo[extraid][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
                PlayerInfo[extraid][pAdMuted] = cache_get_field_content_int(0, "admuted");
                PlayerInfo[extraid][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
                PlayerInfo[extraid][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
                PlayerInfo[extraid][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
                PlayerInfo[extraid][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
                PlayerInfo[extraid][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
                PlayerInfo[extraid][pCookies] = cache_get_field_content_int(0, "cookies");
				PlayerInfo[extraid][pPhone] = cache_get_field_content_int(0, "phone");
				PlayerInfo[extraid][pJob] = cache_get_field_content_int(0, "job");
				PlayerInfo[extraid][pSecondJob] = cache_get_field_content_int(0, "secondjob");
				PlayerInfo[extraid][pCrimes] = cache_get_field_content_int(0, "crimes");
				PlayerInfo[extraid][pArrested] = cache_get_field_content_int(0, "arrested");
				PlayerInfo[extraid][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
				PlayerInfo[extraid][pMaterials] = cache_get_field_content_int(0, "materials");
				PlayerInfo[extraid][pWeed] = cache_get_field_content_int(0, "weed");
				PlayerInfo[extraid][pCocaine] = cache_get_field_content_int(0, "cocaine");
				PlayerInfo[extraid][pMeth] = cache_get_field_content_int(0, "meth");
				PlayerInfo[extraid][pPainkillers] = cache_get_field_content_int(0, "painkillers");
				PlayerInfo[extraid][pSeeds] = cache_get_field_content_int(0, "seeds");
				PlayerInfo[extraid][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
				PlayerInfo[extraid][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
				PlayerInfo[extraid][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
				PlayerInfo[extraid][pCigars] = cache_get_field_content_int(0, "cigars");
				PlayerInfo[extraid][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
				PlayerInfo[extraid][pChannel] = cache_get_field_content_int(0, "channel");
				PlayerInfo[extraid][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
				PlayerInfo[extraid][pSpraycans] = cache_get_field_content_int(0, "spraycans");
				PlayerInfo[extraid][pBoombox] = cache_get_field_content_int(0, "boombox");
				PlayerInfo[extraid][pMP3Player] = cache_get_field_content_int(0, "mp3player");
				PlayerInfo[extraid][pPhonebook] = cache_get_field_content_int(0, "phonebook");
				PlayerInfo[extraid][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
				PlayerInfo[extraid][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
				PlayerInfo[extraid][pFishWeight] = cache_get_field_content_int(0, "fishweight");
				PlayerInfo[extraid][pComponents] = cache_get_field_content_int(0, "components");
				PlayerInfo[extraid][pCourierSkill] = cache_get_field_content_int(0, "courierskill");
				PlayerInfo[extraid][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
				PlayerInfo[extraid][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
				PlayerInfo[extraid][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
				PlayerInfo[extraid][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
				PlayerInfo[extraid][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
				PlayerInfo[extraid][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
				PlayerInfo[extraid][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
				PlayerInfo[extraid][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
				PlayerInfo[extraid][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
				PlayerInfo[extraid][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
				PlayerInfo[extraid][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
				PlayerInfo[extraid][pToggleWT] = cache_get_field_content_int(0, "togglewt");
				PlayerInfo[extraid][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
				PlayerInfo[extraid][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
				PlayerInfo[extraid][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
				PlayerInfo[extraid][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
				PlayerInfo[extraid][pToggleNews] = cache_get_field_content_int(0, "togglenews");
				PlayerInfo[extraid][pToggleCam] = cache_get_field_content_int(0, "togglecam");
				PlayerInfo[extraid][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
				PlayerInfo[extraid][pToggleReports] = cache_get_field_content_int(0, "togglereports");
				PlayerInfo[extraid][pToggleWhisper] = cache_get_field_content_int(0, "togglewhisper");
				PlayerInfo[extraid][pToggleBug] = cache_get_field_content_int(0, "togglebug");
				PlayerInfo[extraid][pCarLicense] = cache_get_field_content_int(0, "carlicense");
				PlayerInfo[extraid][pGunLicense] = cache_get_field_content_int(0, "carlicense");
				PlayerInfo[extraid][pVIPPackage] = cache_get_field_content_int(0, "vippackage");
				PlayerInfo[extraid][pVIPTime] = cache_get_field_content_int(0, "viptime");
				PlayerInfo[extraid][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
				PlayerInfo[extraid][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
				PlayerInfo[extraid][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
				PlayerInfo[extraid][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
				PlayerInfo[extraid][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
				PlayerInfo[extraid][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
				PlayerInfo[extraid][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
				PlayerInfo[extraid][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
				PlayerInfo[extraid][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
				PlayerInfo[extraid][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
				PlayerInfo[extraid][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
				PlayerInfo[extraid][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
				PlayerInfo[extraid][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
				PlayerInfo[extraid][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
				PlayerInfo[extraid][pFaction] = cache_get_field_content_int(0, "faction");
				PlayerInfo[extraid][pFactionRank] = cache_get_field_content_int(0, "factionrank");
				PlayerInfo[extraid][pFactionLeader] = cache_get_field_content_int(0, "factionleader");
				PlayerInfo[extraid][pFactionID] = cache_get_field_content_int(0, "factionid");
				PlayerInfo[extraid][pGang] = cache_get_field_content_int(0, "gang");
				PlayerInfo[extraid][pGangRank] = cache_get_field_content_int(0, "gangrank");
				PlayerInfo[extraid][pDivision] = cache_get_field_content_int(0, "division");
				PlayerInfo[extraid][pCrew] = cache_get_field_content_int(0, "crew");
				PlayerInfo[extraid][pContracted] = cache_get_field_content_int(0, "contracted");
				PlayerInfo[extraid][pBombs] = cache_get_field_content_int(0, "bombs");
				PlayerInfo[extraid][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
				PlayerInfo[extraid][pFailedHits] = cache_get_field_content_int(0, "failedhits");
				PlayerInfo[extraid][pReports] = cache_get_field_content_int(0, "reports");
				PlayerInfo[extraid][pNewbies] = cache_get_field_content_int(0, "newbies");
				PlayerInfo[extraid][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
				PlayerInfo[extraid][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
				PlayerInfo[extraid][pWebDev] = cache_get_field_content_int(0, "webdev");
				PlayerInfo[extraid][pFactionMod] = cache_get_field_content_int(0, "factionmod");
				PlayerInfo[extraid][pGangMod] = cache_get_field_content_int(0, "gangmod");
				PlayerInfo[extraid][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
				PlayerInfo[extraid][pFormerAdmin] = cache_get_field_content_int(0, "FormerAdmin");
				PlayerInfo[extraid][pDeveloper] = cache_get_field_content_int(0, "scripter");
				PlayerInfo[extraid][pHelperManager] = cache_get_field_content_int(0, "helpermanager");
				PlayerInfo[extraid][pDynamicAdmin] = cache_get_field_content_int(0, "dynamicadmin");
				PlayerInfo[extraid][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
				PlayerInfo[extraid][pHumanResources] = cache_get_field_content_int(0, "humanresources");
				PlayerInfo[extraid][pComplaintMod] = cache_get_field_content_int(0, "complaintmod");
				PlayerInfo[extraid][pWeedPlanted] = cache_get_field_content_int(0, "weedplanted");
				PlayerInfo[extraid][pWeedTime] = cache_get_field_content_int(0, "weedtime");
				PlayerInfo[extraid][pWeedGrams] = cache_get_field_content_int(0, "weedgrams");
				PlayerInfo[extraid][pWeedX] = cache_get_field_content_float(0, "weed_x");
				PlayerInfo[extraid][pWeedY] = cache_get_field_content_float(0, "weed_y");
				PlayerInfo[extraid][pWeedZ] = cache_get_field_content_float(0, "weed_z");
				PlayerInfo[extraid][pWeedA] = cache_get_field_content_float(0, "weed_a");
				PlayerInfo[extraid][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
				PlayerInfo[extraid][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
                PlayerInfo[extraid][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
                PlayerInfo[extraid][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
                PlayerInfo[extraid][pLaborUpgrade] = cache_get_field_content_int(0, "laborupgrade");
				PlayerInfo[extraid][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
				PlayerInfo[extraid][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
				PlayerInfo[extraid][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
				PlayerInfo[extraid][pWatch] = cache_get_field_content_int(0, "watch");
				PlayerInfo[extraid][pGPS] = cache_get_field_content_int(0, "gps");
				PlayerInfo[extraid][pClothes] = cache_get_field_content_int(0, "clothes");
				PlayerInfo[extraid][pShowLands] = cache_get_field_content_int(0, "showlands");
				PlayerInfo[extraid][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
				PlayerInfo[extraid][pWatchOn] = cache_get_field_content_int(0, "watchon");
				PlayerInfo[extraid][pGPSOn] = cache_get_field_content_int(0, "gpson");
				PlayerInfo[extraid][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
                PlayerInfo[extraid][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
                PlayerInfo[extraid][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
                PlayerInfo[extraid][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
                PlayerInfo[extraid][pThiefCooldown] = cache_get_field_content_int(0, "thiefcooldown");
                PlayerInfo[extraid][pCocaineCooldown] = cache_get_field_content_int(0, "crackcooldown");
            	PlayerInfo[extraid][pGasCan] = cache_get_field_content_int(0, "gascan");
            	PlayerInfo[extraid][pDuty] = cache_get_field_content_int(0, "duty");
            	PlayerInfo[extraid][pBandana] = cache_get_field_content_int(0, "bandana");
                PlayerInfo[extraid][pPassport] = cache_get_field_content_int(0, "passport");
                PlayerInfo[extraid][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
                PlayerInfo[extraid][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
                PlayerInfo[extraid][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
                PlayerInfo[extraid][pNewbieMuteTime] = cache_get_field_content_int(0, "newbiemutetime");
				PlayerInfo[extraid][pReportMuteTime] = cache_get_field_content_int(0, "reportmutetime");
				PlayerInfo[extraid][pGlobalMuteTime] = cache_get_field_content_int(0, "globalmutetime");
				PlayerInfo[extraid][pAdminHide] = cache_get_field_content_int(0, "adminhide");
				PlayerInfo[extraid][pInsurance] = cache_get_field_content_int(0, "insurance");
				PlayerInfo[extraid][pRope] = cache_get_field_content_int(0, "rope");
				PlayerInfo[extraid][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
				PlayerInfo[extraid][pMask] = cache_get_field_content_int(0, "mask");
				PlayerInfo[extraid][pTotalFires] = cache_get_field_content_int(0, "totalfires");
				PlayerInfo[extraid][pPasswordChanged] = cache_get_field_content_int(0, "passwordchanged");
				PlayerInfo[extraid][pFirstAid] = cache_get_field_content_int(0, "firstaid");
				PlayerInfo[extraid][pPoliceScanner] = cache_get_field_content_int(0, "policescanner");
				PlayerInfo[extraid][pBodykits] = cache_get_field_content_int(0, "bodykits");
				PlayerInfo[extraid][pRimkits] = cache_get_field_content_int(0, "rimkits");
				PlayerInfo[extraid][pScannerOn] = cache_get_field_content_int(0, "scanneron");
				PlayerInfo[extraid][pToggleGlobal] = 1;
				new tempkey = cache_get_field_content_int(0, "landkeys");
				for(new i = 0; i < MAX_LANDS; i++)
				{
				    if(LandInfo[i][lExists])
				    {
				        if(LandInfo[i][lID] == tempkey)
				        {
				            PlayerInfo[extraid][pLandPerms] = i;
				            break;
				        }
				    }
				}
				PlayerInfo[extraid][pBugged] = cache_get_field_content_int(0, "bugged");
				PlayerInfo[extraid][pRareTime] = cache_get_field_content_int(0, "rarecooldown");
				PlayerInfo[extraid][pDiamonds] = cache_get_field_content_int(0, "diamonds");
				PlayerInfo[extraid][pSkates] = cache_get_field_content_int(0, "rollerskates");
				PlayerInfo[extraid][pMarriedTo] = cache_get_field_content_int(0, "marriedto");

				if(PlayerInfo[extraid][pMarriedTo] != -1)
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", PlayerInfo[extraid][pMarriedTo]);
    				mysql_tquery(connectionID, queryBuffer, "OnUpdatePartner", "i", extraid);
				}
				else
				{
				    strcpy(PlayerInfo[extraid][pMarriedName], "Khong co", MAX_PLAYER_NAME);
				}
                PlayerInfo[extraid][pLogged] = 1;
                PlayerInfo[extraid][pACTime] = gettime() + 5;

                if(!PlayerInfo[extraid][pAdminDuty])
				{
					ClearChat(extraid);
                }

                for(new i = 0; i < 11; i ++)
				{
					TextDrawHideForPlayer(extraid, LoginScreen[i]);
				}

				if(!PlayerInfo[extraid][pToggleTextdraws])
				{
					RefreshPlayerTextdraws(extraid);
				}

				if(cache_get_field_content_int(0, "refercount") > 0)
				{
				    new
						count = cache_get_field_content_int(0, "refercount");

				    SendClientMessageEx(extraid, COLOR_GREEN, "%i nguoi choi ma ban gioi thieu da dat cap do 3. Do do ban nhan duoc %i Cookies!", count, count * 10);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refercount = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}

                if(!PlayerInfo[extraid][pSetup])
                {
                    if(!PlayerInfo[extraid][pAdminDuty] && !PlayerInfo[extraid][pToggleCam])
                    {
                        PlayerInfo[extraid][pLoginCamera] = 1;
					}
					else
					{
					    PlayerInfo[extraid][pLoginCamera] = 0;
					}

                    if(PlayerInfo[extraid][pWeedPlanted] && PlayerInfo[extraid][pWeedObject] == INVALID_OBJECT_ID)
                    {
                        PlayerInfo[extraid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[extraid][pWeedX], PlayerInfo[extraid][pWeedY], PlayerInfo[extraid][pWeedZ] - 1.8, 0.0, 0.0, PlayerInfo[extraid][pWeedA]);
					}
					if(PlayerInfo[extraid][pShowTurfs])
					{
					    ShowTurfsOnMap(extraid, true);
					}
					if(PlayerInfo[extraid][pShowLands])
					{
					    ShowLandsOnMap(extraid, true);
					}

					if(!PlayerInfo[extraid][pAdminDuty])
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lastlogin = NOW(), ip = '%s' WHERE uid = %i", GetPlayerIP(extraid), PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FLAGS, extraid);

				     	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM clothing WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_CLOTHING, extraid);

					    if(!PlayerInfo[extraid][pTogglePhone])
					    {
						    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM texts WHERE recipient_number = %i", PlayerInfo[extraid][pPhone]);
						    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_TEXTS, extraid);
						}
					}

					foreach(new i: Vehicle)
					{
					    if(IsVehicleOwner(extraid, i) && VehicleInfo[i][vTimer] >= 0)
					    {
							KillTimer(VehicleInfo[i][vTimer]);
							VehicleInfo[i][vTimer] = -1;
					    }
					}

					// Just in case.
					SetPlayerSpecialTag(extraid, TAG_NONE);

				    if(PlayerInfo[extraid][pAdminDuty])
				    {
						PlayerInfo[extraid][pAdminDuty] = 0;
				    	SetPlayerName(extraid, PlayerInfo[extraid][pUsername]);
				        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s khong con hoat dong Admin nua.", GetPlayerRPName(extraid));
				        SendClientMessage(extraid, COLOR_WHITE, "Ban khong con lam nhiem vu quan tri vien nua. Thong ke tai khoan cua ban da duoc giu nguyen.");
				    }
				    else
				    {
				        if(!isnull(gServerMOTD))
						{
							SendClientMessageEx(extraid, COLOR_YELLOW, "** MOTD: %s", gServerMOTD);
						}
						if(!isnull(adminMOTD) && PlayerInfo[extraid][pAdmin] > 0)
						{
							SendClientMessageEx(extraid, COLOR_LIGHTRED, "** Admin MOTD: %s", adminMOTD);
						}
						if(!isnull(helperMOTD) && PlayerInfo[extraid][pHelper] > 0)
						{
							SendClientMessageEx(extraid, COLOR_AQUA, "** Helper MOTD: %s", helperMOTD);
						}
						if(PlayerInfo[extraid][pGang] >= 0 && strcmp(GangInfo[PlayerInfo[extraid][pGang]][gMOTD], "None", true) != 0)
						{
							SendClientMessageEx(extraid, COLOR_YELLOW, "Gang MOTD: %s", GangInfo[PlayerInfo[extraid][pGang]][gMOTD]);
						}
						if(PlayerInfo[extraid][pFaction] >= 0 && strcmp(FactionInfo[PlayerInfo[extraid][pFaction]][fMOTD], "None", true) != 0)
						{
							SendClientMessageEx(extraid, COLOR_YELLOW, "Faction MOTD: %s", FactionInfo[PlayerInfo[extraid][pFaction]][fMOTD]);
						}
					    if(PlayerInfo[extraid][pAdmin] && !PlayerInfo[extraid][pAdminHide])
					    {
					        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s %s da dang nhap.", GetAdminRank(extraid), GetPlayerRPName(extraid));
					    }
					    if(PlayerInfo[extraid][pGang] >= 0)
					    {
							SendGangMessage(PlayerInfo[extraid][pGang], COLOR_AQUA, "(( %s %s da dang nhap. ))", GangRanks[PlayerInfo[extraid][pGang]][PlayerInfo[extraid][pGangRank]], GetPlayerRPName(extraid));
						}
						if(PlayerInfo[extraid][pFaction] >= 0)
					    {
							SendFactionMessage(PlayerInfo[extraid][pFaction], COLOR_FACTIONCHAT, "(( %s %s da dang nhap. ))", FactionRanks[PlayerInfo[extraid][pFaction]][PlayerInfo[extraid][pFactionRank]], GetPlayerRPName(extraid));
						}

					    format(string, sizeof(string), "~w~Xin chao ~n~~y~   %s", GetPlayerRPName(extraid));
        	        	GameTextForPlayer(extraid, string, 5000, 1);

        	        	if(PlayerInfo[extraid][pAdmin] > 0) {
							SendClientMessageEx(extraid, COLOR_WHITE, "NewCity Roleplay: Ban da dang nhap voi tu cach la mot {FF6347} %i %s{FFFFFF}.", PlayerInfo[extraid][pAdmin], GetAdminRank(extraid));
						} else if(PlayerInfo[extraid][pHelper] > 0) {
						    SendClientMessageEx(extraid, COLOR_WHITE, "NewCity Roleplay: Ban da dang nhap voi tu cach la mo {33CCFF}%s{FFFFFF}.", GetHelperRank(extraid));
						} else if(PlayerInfo[extraid][pVIPPackage] > 0) {
						    SendClientMessageEx(extraid, COLOR_WHITE, "NewCity Roleplay: Ban da dang nhap voi tu cach la mo {D909D9}%s VIP{FFFFFF}.", GetVIPRank(PlayerInfo[extraid][pVIPPackage]));
        	        	} else if(PlayerInfo[extraid][pLevel] >= 2) {
        	        	    SendClientMessageEx(extraid, COLOR_WHITE, "NewCity Roleplay: Ban da dang nhap voi tu cach la {AFAFAF}Nguoi choi cap do %i{FFFFFF}.", PlayerInfo[extraid][pLevel]);
						} else {
						    SendClientMessage(extraid, COLOR_WHITE, "NewCity Roleplay: Ban da dang nhap voi tu cach la mot {AFAFAF}Newbie{FFFFFF}.");
						}

					    SendClientMessageEx(extraid, COLOR_NAVYBLUE, "Lan dang nhap cuoi cung cua ban la %s (Thoi gian may chu).", GetDate());
					    StopAudioStreamForPlayer(extraid);
					}

					if(PlayerInfo[extraid][pFaction] >= 0 && FactionInfo[PlayerInfo[extraid][pFaction]][fType] == FACTION_NONE)
					{
			         	SetPlayerFaction(extraid, -1);
				        SendClientMessageEx(extraid, COLOR_LIGHTRED, "Ban da bi kick khoi to chuc khi ngoai tuyen hoac no da bi xoa.");
					}
					if(PlayerInfo[extraid][pGang] >= 0 && !GangInfo[PlayerInfo[extraid][pGang]][gSetup])
					{
					    SendClientMessage(extraid, COLOR_LIGHTRED, "Ban da bi kick khoi bang dang khi ngoai tuyen hoac no da bi xoa.");
					    PlayerInfo[extraid][pGang] = -1;
					    PlayerInfo[extraid][pGangRank] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
					if(PlayerInfo[extraid][pPasswordChanged] == 0)
					{
					    ShowPlayerDialog(extraid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "{6FD497}NewCity Roleplay{FFFFFF} | Thay doi mat khau", "Vui long thay doi mat khau cua ban vi muc dich bao mat\nNhap mat khau moi cua ban duoi day:", "Gui", "Huy bo");
					}
				}
				SetPlayerToSpawn(extraid);
	        }
	    }
	    case THREAD_COUNT_FLAGS:
	    {
	        if(rows)
	        {
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co %i flags dang cho xu ly. (/listflags %i)", GetPlayerRPName(extraid), extraid, rows, extraid);
			}
		}
		case THREAD_TRACE_IP:
		{
		    if(rows)
		    {
		        new username[24], date[24];

		        SendClientMessageEx(extraid, COLOR_NAVYBLUE, "___________ %i Ket qua tim thay ___________", rows);

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "username", username);
		            cache_get_field_content(i, "lastlogin", date);

		            SendClientMessageEx(extraid, COLOR_GREY2, "Ten: %s - Nhin thay lan cuoi: %s", username, date);
		        }
		    }
		    else
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Dia chi IP nay khong duoc lien ket voi bat ky tai khoan nao.");
			}
		}
		/*
		case THREAD_LOGIN_UPDATE:
  		{
			new string[1028];
		    if(extraid == 1) // Changes
		    {
		        new text[128];

				if(!rows)
			    {
			        strcat(string, "~n~- n/a");
				}
				else
				{
					for(new i = 0; i < rows; i ++)
					{
					    cache_get_field_content(i, "text", text);
					    format(string, sizeof(string), "%s- %s~n~", string, text);
					}
				}

				TextDrawSetString(LoginScreen[6], string);
			}
			else if(extraid == 2) // Top ten players
			{
			    new username[MAX_PLAYER_NAME];

			    if(!rows)
			    {
			        strcat(string, "~n~- n/a");
				}
				else
				{
				    for(new i = 0; i < rows; i ++)
				    {
				        cache_get_field_content(i, "username", username);
				        format(string, sizeof(string), "%s - %s (%i gio)~n~", string, username, cache_get_field_content_int(i, "hours"));
			    	}
			    }

			    TextDrawSetString(LoginScreen[7], string);
			}
		}*/
		case THREAD_LIST_CHANGES:
		{
		    new text[128];

		    SendClientMessage(extraid, COLOR_NAVYBLUE, "________ Danh sach thay doi ________");

		    for(new i = 0; i < rows; i ++)
			{
			    cache_get_field_content(i, "text", text);
			    SendClientMessageEx(extraid, COLOR_GREY1, "Slot %i -> %s", cache_get_field_content_int(i, "slot"), text);
			}
		}
		case THREAD_LIST_HELPERS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SendClientMessage(extraid, COLOR_NAVYBLUE, "_______ Danh sach Helper _______");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "helperlevel"))
				{
					case 1: SendClientMessageEx(extraid, COLOR_GREY2, "Junior Helper %s - Nhin thay lan cuoi: %s", username, lastlogin);
					case 2: SendClientMessageEx(extraid, COLOR_GREY2, "Senior Helper %s - Nhin thay lan cuoi: %s", username, lastlogin);
					case 3: SendClientMessageEx(extraid, COLOR_GREY2, "Asst.Helper Management %s - Nhin thay lan cuoi: %s", username, lastlogin);
					case 4: SendClientMessageEx(extraid, COLOR_GREY2, "Helper Management %s - Nhin thay lan cuoi: %s", username, lastlogin);
					case 5: SendClientMessageEx(extraid, COLOR_GREY2, "Junior Advisor %s - Nhin thay lan cuoi: %s", username, lastlogin);
		            case 6: SendClientMessageEx(extraid, COLOR_GREY2, "Senior Advisor %s - Nhin thay lan cuoi: %s", username, lastlogin);
		            case 7: SendClientMessageEx(extraid, COLOR_GREY2, "Chief Advisor %s - Nhin thay lan cuoi: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LOAD_HOUSES:
		{
		    for(new i = 0; i < rows && i < MAX_HOUSES; i ++)
		    {
		        cache_get_field_content(i, "owner", HouseInfo[i][hOwner], connectionID, MAX_PLAYER_NAME);

		        HouseInfo[i][hID] = cache_get_field_content_int(i, "id");
		        HouseInfo[i][hOwnerID] = cache_get_field_content_int(i, "ownerid");
		        HouseInfo[i][hType] = cache_get_field_content_int(i, "type");
		        HouseInfo[i][hPrice] = cache_get_field_content_int(i, "price");
		        HouseInfo[i][hRentPrice] = cache_get_field_content_int(i, "rentprice");
		        HouseInfo[i][hLevel] = cache_get_field_content_int(i, "level");
		        HouseInfo[i][hLocked] = cache_get_field_content_int(i, "locked");
		        HouseInfo[i][hTimestamp] = cache_get_field_content_int(i, "timestamp");
		        HouseInfo[i][hPosX] = cache_get_field_content_float(i, "pos_x");
		        HouseInfo[i][hPosY] = cache_get_field_content_float(i, "pos_y");
		        HouseInfo[i][hPosZ] = cache_get_field_content_float(i, "pos_z");
		        HouseInfo[i][hPosA] = cache_get_field_content_float(i, "pos_a");
                HouseInfo[i][hIntX] = cache_get_field_content_float(i, "int_x");
		        HouseInfo[i][hIntY] = cache_get_field_content_float(i, "int_y");
		        HouseInfo[i][hIntZ] = cache_get_field_content_float(i, "int_z");
		        HouseInfo[i][hIntA] = cache_get_field_content_float(i, "int_a");
		        HouseInfo[i][hInterior] = cache_get_field_content_int(i, "interior");
		        HouseInfo[i][hWorld] = cache_get_field_content_int(i, "world");
		        HouseInfo[i][hOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        HouseInfo[i][hOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        HouseInfo[i][hCash] = cache_get_field_content_int(i, "cash");
		        HouseInfo[i][hMaterials] = cache_get_field_content_int(i, "materials");
                HouseInfo[i][hWeed] = cache_get_field_content_int(i, "weed");
                HouseInfo[i][hCocaine] = cache_get_field_content_int(i, "cocaine");
                HouseInfo[i][hMeth] = cache_get_field_content_int(i, "meth");
                HouseInfo[i][hPainkillers] = cache_get_field_content_int(i, "painkillers");
                HouseInfo[i][hWeapons][0] = cache_get_field_content_int(i, "weapon_1");
                HouseInfo[i][hWeapons][1] = cache_get_field_content_int(i, "weapon_2");
                HouseInfo[i][hWeapons][2] = cache_get_field_content_int(i, "weapon_3");
                HouseInfo[i][hWeapons][3] = cache_get_field_content_int(i, "weapon_4");
                HouseInfo[i][hWeapons][4] = cache_get_field_content_int(i, "weapon_5");
                HouseInfo[i][hWeapons][5] = cache_get_field_content_int(i, "weapon_6");
                HouseInfo[i][hWeapons][6] = cache_get_field_content_int(i, "weapon_7");
                HouseInfo[i][hWeapons][7] = cache_get_field_content_int(i, "weapon_8");
                HouseInfo[i][hWeapons][8] = cache_get_field_content_int(i, "weapon_9");
                HouseInfo[i][hWeapons][9] = cache_get_field_content_int(i, "weapon_10");
                HouseInfo[i][hDelivery] = cache_get_field_content_int(i, "delivery");
                HouseInfo[i][hLights] = cache_get_field_content_int(i, "lights");
                HouseInfo[i][hText] = Text3D:INVALID_3DTEXT_ID;
                HouseInfo[i][hPickup] = -1;
                HouseInfo[i][hLabels] = 0;
                HouseInfo[i][hExists] = 1;
                Iter_Add(House, i);
                ReloadHouse(i);
		    }

		    printf("[Script] %i houses loaded.", rows);
		}
		case THREAD_LIST_TENANTS:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Hien tai khong co ai thue nha ban.");
			}
			else
			{
			    new username[MAX_PLAYER_NAME], date[24];

				SendClientMessage(extraid, COLOR_NAVYBLUE, "_______ Danh sach nguoi thue _______");

			    for(new i = 0; i < rows; i ++)
			    {
			        cache_get_field_content(i, "username", username);
			        cache_get_field_content(i, "lastlogin", date);

			        SendClientMessageEx(extraid, COLOR_GREY2, "Teb: %s - Nhin thay lan cuoi: %s", username, date);
				}
			}
		}
		case THREAD_LOAD_FURNITURE:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"), cache_get_field_content_int(i, "world"), cache_get_field_content_int(i, "interior"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_FURNITURE);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "houseid"));

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_field_content(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0, .worldid = cache_get_field_content_int(i, "world"), .interiorid = cache_get_field_content_int(i, "interior")));
				}
			}
		}
		case THREAD_LOAD_GARAGES:
		{
		    for(new i = 0; i < rows && i < MAX_GARAGES; i ++)
		    {
		        cache_get_field_content(i, "owner", GarageInfo[i][gOwner], connectionID, MAX_PLAYER_NAME);

		        GarageInfo[i][gID] = cache_get_field_content_int(i, "id");
		        GarageInfo[i][gOwnerID] = cache_get_field_content_int(i, "ownerid");
		        GarageInfo[i][gType] = cache_get_field_content_int(i, "type");
		        GarageInfo[i][gPrice] = cache_get_field_content_int(i, "price");
		        GarageInfo[i][gLocked] = cache_get_field_content_int(i, "locked");
		        GarageInfo[i][gTimestamp] = cache_get_field_content_int(i, "timestamp");
		        GarageInfo[i][gPosX] = cache_get_field_content_float(i, "pos_x");
		        GarageInfo[i][gPosY] = cache_get_field_content_float(i, "pos_y");
		        GarageInfo[i][gPosZ] = cache_get_field_content_float(i, "pos_z");
		        GarageInfo[i][gPosA] = cache_get_field_content_float(i, "pos_a");
		        GarageInfo[i][gExitX] = cache_get_field_content_float(i, "exit_x");
		        GarageInfo[i][gExitY] = cache_get_field_content_float(i, "exit_y");
		        GarageInfo[i][gExitZ] = cache_get_field_content_float(i, "exit_z");
		        GarageInfo[i][gExitA] = cache_get_field_content_float(i, "exit_a");
		        GarageInfo[i][gWorld] = cache_get_field_content_int(i, "world");
		        GarageInfo[i][gText] = Text3D:INVALID_3DTEXT_ID;
		        GarageInfo[i][gPickup] = -1;
		        GarageInfo[i][gExists] = 1;
		        Iter_Add(Garage, i);

				ReloadGarage(i);
		    }

		    printf("[Script] %i garages loaded.", rows);
		}
        case THREAD_LOAD_BUSINESSES:
		{
		    for(new i = 0; i < rows && i < MAX_BUSINESSES; i ++)
		    {
		        cache_get_field_content(i, "owner", BusinessInfo[i][bOwner], connectionID, MAX_PLAYER_NAME);

		        BusinessInfo[i][bID] = cache_get_field_content_int(i, "id");
		        BusinessInfo[i][bOwnerID] = cache_get_field_content_int(i, "ownerid");
		        BusinessInfo[i][bType] = cache_get_field_content_int(i, "type");
		        BusinessInfo[i][bPrice] = cache_get_field_content_int(i, "price");
		        BusinessInfo[i][bEntryFee] = cache_get_field_content_int(i, "entryfee");
		        BusinessInfo[i][bLocked] = cache_get_field_content_int(i, "locked");
		        BusinessInfo[i][bTimestamp] = cache_get_field_content_int(i, "timestamp");
		        BusinessInfo[i][bPosX] = cache_get_field_content_float(i, "pos_x");
		        BusinessInfo[i][bPosY] = cache_get_field_content_float(i, "pos_y");
		        BusinessInfo[i][bPosZ] = cache_get_field_content_float(i, "pos_z");
		        BusinessInfo[i][bPosA] = cache_get_field_content_float(i, "pos_a");
                BusinessInfo[i][bIntX] = cache_get_field_content_float(i, "int_x");
		        BusinessInfo[i][bIntY] = cache_get_field_content_float(i, "int_y");
		        BusinessInfo[i][bIntZ] = cache_get_field_content_float(i, "int_z");
		        BusinessInfo[i][bIntA] = cache_get_field_content_float(i, "int_a");
		        BusinessInfo[i][bInterior] = cache_get_field_content_int(i, "interior");
		        BusinessInfo[i][bWorld] = cache_get_field_content_int(i, "world");
		        BusinessInfo[i][bOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        BusinessInfo[i][bOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        BusinessInfo[i][bCash] = cache_get_field_content_int(i, "cash");
                BusinessInfo[i][bProducts] = cache_get_field_content_int(i, "products");
                BusinessInfo[i][bMaterials] = cache_get_field_content_int(i, "materials");
                BusinessInfo[i][bText] = Text3D:INVALID_3DTEXT_ID;
                BusinessInfo[i][bPickup] = -1;
                BusinessInfo[i][bMapIcon] = -1;
                BusinessInfo[i][bExists] = 1;
                Iter_Add(Business, i);

                ReloadBusiness(i);
		    }

		    printf("[Script] %i businesses loaded.", rows);
		}
		case THREAD_LOAD_ENTRANCES:
		{
		    for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
		    {
		        cache_get_field_content(i, "owner", EntranceInfo[i][eOwner], connectionID, MAX_PLAYER_NAME);
		        cache_get_field_content(i, "name", EntranceInfo[i][eName], connectionID, 40);
		        cache_get_field_content(i, "password", EntranceInfo[i][ePassword], connectionID, 64);

				EntranceInfo[i][eID] = cache_get_field_content_int(i, "id");
				EntranceInfo[i][eOwnerID] = cache_get_field_content_int(i, "ownerid");
				EntranceInfo[i][eIcon] = cache_get_field_content_int(i, "iconid");
                EntranceInfo[i][eLocked] = cache_get_field_content_int(i, "locked");
                EntranceInfo[i][eRadius] = cache_get_field_content_float(i, "radius");
                EntranceInfo[i][ePosX] = cache_get_field_content_float(i, "pos_x");
                EntranceInfo[i][ePosY] = cache_get_field_content_float(i, "pos_y");
                EntranceInfo[i][ePosZ] = cache_get_field_content_float(i, "pos_z");
                EntranceInfo[i][ePosA] = cache_get_field_content_float(i, "pos_a");
                EntranceInfo[i][eIntX] = cache_get_field_content_float(i, "int_x");
                EntranceInfo[i][eIntY] = cache_get_field_content_float(i, "int_y");
                EntranceInfo[i][eIntZ] = cache_get_field_content_float(i, "int_z");
                EntranceInfo[i][eIntA] = cache_get_field_content_float(i, "int_a");
                EntranceInfo[i][eInterior] = cache_get_field_content_int(i, "interior");
                EntranceInfo[i][eWorld] = cache_get_field_content_int(i, "world");
                EntranceInfo[i][eOutsideInt] = cache_get_field_content_int(i, "outsideint");
                EntranceInfo[i][eOutsideVW] = cache_get_field_content_int(i, "outsidevw");
                EntranceInfo[i][eAdminLevel] = cache_get_field_content_int(i, "adminlevel");
                EntranceInfo[i][eFactionType] = cache_get_field_content_int(i, "factiontype");
                EntranceInfo[i][eGang] = cache_get_field_content_int(i, "gang");
                EntranceInfo[i][eVIP] = cache_get_field_content_int(i, "vip");
                EntranceInfo[i][eVehicles] = cache_get_field_content_int(i, "vehicles");
                EntranceInfo[i][eFreeze] = cache_get_field_content_int(i, "freeze");
                EntranceInfo[i][eLabel] = cache_get_field_content_int(i, "label");
                EntranceInfo[i][eType] = cache_get_field_content_int(i, "type");
                EntranceInfo[i][eMapIcon] = cache_get_field_content_int(i, "mapicon");
                EntranceInfo[i][eColor] = cache_get_field_content_int(i, "color");
                EntranceInfo[i][eText] = Text3D:INVALID_3DTEXT_ID;
                EntranceInfo[i][ePickup] = -1;
                EntranceInfo[i][eMapIconID] = -1;
                EntranceInfo[i][eExists] = 1;
                Iter_Add(Entrance, i);

                ReloadEntrance(i);
			}

			printf("[Script] %i entrances loaded.", rows);
		}
		case THREAD_LOAD_FACTIONS:
		{
		    for(new i = 0; i < rows && i < MAX_FACTIONS; i ++)
		    {
		        new factionid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", FactionInfo[factionid][fName], connectionID, 48);
		        cache_get_field_content(i, "shortname", FactionInfo[factionid][fShortName], connectionID, 24);
		        cache_get_field_content(i, "motd", FactionInfo[factionid][fMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", FactionInfo[factionid][fLeader], connectionID, MAX_PLAYER_NAME);

		        FactionInfo[factionid][fType] = cache_get_field_content_int(i, "type");
		        FactionInfo[factionid][fColor] = cache_get_field_content_int(i, "color");
		        FactionInfo[factionid][fRankCount] = cache_get_field_content_int(i, "rankcount");
		        FactionInfo[factionid][fTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        FactionInfo[factionid][fFund] = cache_get_field_content_int(i, "budget");
                FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
                FactionInfo[factionid][fPickup] = -1;
		    }

		    printf("[Script] %i factions loaded.", rows);
		}
		case THREAD_LOAD_FACTIONRANKS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_RANKS; r ++)
		        {
		            strcpy(FactionRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_FACTIONSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_FACTIONPAY:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fPaycheck][cache_get_field_content_int(i, "rank")] = cache_get_field_content_int(i, "amount");
		    }
		}
		case THREAD_LOAD_DIVISIONS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_DIVISIONS; r ++)
		        {
		            FactionDivisions[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionDivisions[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "divisionid")], connectionID, 32);
      		}
		}
		case THREAD_LOAD_LANDS:
		{
		    for(new i = 0; i < rows && i < MAX_LANDS; i ++)
		    {
		        cache_get_field_content(i, "owner", LandInfo[i][lOwner], connectionID, MAX_PLAYER_NAME);

		        LandInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LandInfo[i][lOwnerID] = cache_get_field_content_int(i, "ownerid");
		        LandInfo[i][lLevel] = cache_get_field_content_int(i, "level");
		        LandInfo[i][lPrice] = cache_get_field_content_int(i, "price");
		        LandInfo[i][lMinX] = cache_get_field_content_float(i, "min_x");
		        LandInfo[i][lMinY] = cache_get_field_content_float(i, "min_y");
		        LandInfo[i][lMaxX] = cache_get_field_content_float(i, "max_x");
		        LandInfo[i][lMaxY] = cache_get_field_content_float(i, "max_y");
		        LandInfo[i][lHeight] = cache_get_field_content_float(i, "height");
		        LandInfo[i][lGangZone] = -1;
		        LandInfo[i][lArea] = -1;
		        LandInfo[i][lLabels] = 0;
		        //LandInfo[i][lTextdraw];
		        LandInfo[i][lExists] = 1;
		        Iter_Add(Land, i);

		        ReloadLand(i);
			}

			printf("[Script] %i lands loaded.", rows);
		}
		case THREAD_LOAD_LANDOBJECTS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_LAND);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "landid"));
				Streamer_SetExtraFloat(objectid, E_OBJECT_X, cache_get_field_content_float(i, "pos_x"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Y, cache_get_field_content_float(i, "pos_y"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Z, cache_get_field_content_float(i, "pos_z"));

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_field_content(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0));
				}
			}
		}
		case THREAD_LOAD_GANGS:
		{
		    for(new i = 0; i < rows && i < MAX_GANGS; i ++)
		    {
		        new gangid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", GangInfo[gangid][gName], connectionID, 32);
		        cache_get_field_content(i, "motd", GangInfo[gangid][gMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", GangInfo[gangid][gLeader], connectionID, MAX_PLAYER_NAME);

		        GangInfo[gangid][gColor] = cache_get_field_content_int(i, "color");
		        GangInfo[gangid][gStrikes] = cache_get_field_content_int(i, "strikes");
		        GangInfo[gangid][gLevel] = cache_get_field_content_int(i, "level");
		        GangInfo[gangid][gPoints] = cache_get_field_content_int(i, "points");
		        GangInfo[gangid][gTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        GangInfo[gangid][gStashX] = cache_get_field_content_float(i, "stash_x");
		        GangInfo[gangid][gStashY] = cache_get_field_content_float(i, "stash_y");
		        GangInfo[gangid][gStashZ] = cache_get_field_content_float(i, "stash_z");
		        GangInfo[gangid][gStashInterior] = cache_get_field_content_int(i, "stashinterior");
		        GangInfo[gangid][gStashWorld] = cache_get_field_content_int(i, "stashworld");
		        GangInfo[gangid][gCash] = cache_get_field_content_int(i, "cash");
		        GangInfo[gangid][gMaterials] = cache_get_field_content_int(i, "materials");
		        GangInfo[gangid][gWeed] = cache_get_field_content_int(i, "weed");
		        GangInfo[gangid][gCocaine] = cache_get_field_content_int(i, "cocaine");
		        GangInfo[gangid][gMeth] = cache_get_field_content_int(i, "meth");
		        GangInfo[gangid][gPainkillers] = cache_get_field_content_int(i, "painkillers");
		        GangInfo[gangid][gAlliance] = cache_get_field_content_int (i, "alliance");
		        GangInfo[gangid][gWar] = cache_get_field_content_int (i, "war");
				GangInfo[gangid][gMatLevel] = cache_get_field_content_int (i, "matlevel");
				GangInfo[gangid][gGunLevel] = cache_get_field_content_int (i, "gunlevel");

				// Gang stash weapons
		        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] = cache_get_field_content_int(i, "weapon_9mm");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "weapon_sdpistol");
		        GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "weapon_deagle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "weapon_shotgun");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12] = cache_get_field_content_int(i, "weapon_spas12");
		        GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "weapon_tec9");
		        GangInfo[gangid][gWeapons][GANGWEAPON_UZI] = cache_get_field_content_int(i, "weapon_uzi");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MP5] = cache_get_field_content_int(i, "weapon_mp5");
		        GangInfo[gangid][gWeapons][GANGWEAPON_AK47] = cache_get_field_content_int(i, "weapon_ak47");
		        GangInfo[gangid][gWeapons][GANGWEAPON_M4] = cache_get_field_content_int(i, "weapon_m4");
		        GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "weapon_rifle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "weapon_sniper");

		        // Gang stash weapon ranks (01/07/2017)
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_9MM] = cache_get_field_content_int(i, "rank_9mm");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "rank_sdpistol");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "rank_deagle");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "rank_shotgun");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_SPAS12] = cache_get_field_content_int(i, "rank_spas12");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "rank_tec9");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_UZI] = cache_get_field_content_int(i, "rank_uzi");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_MP5] = cache_get_field_content_int(i, "rank_mp5");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_AK47] = cache_get_field_content_int(i, "rank_ak47");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_M4] = cache_get_field_content_int(i, "rank_m4");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "rank_rifle");
		        GangInfo[gangid][gWeaponRanks][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "rank_sniper");
				GangInfo[gangid][gVestRank] = cache_get_field_content_int(i, "rank_vest");

				// Gang arms & drug dealer
		        GangInfo[gangid][gArmsDealer] = cache_get_field_content_int(i, "armsdealer");
		        GangInfo[gangid][gDrugDealer] = cache_get_field_content_int(i, "drugdealer");
		        GangInfo[gangid][gArmsX] = cache_get_field_content_float(i, "arms_x");
		        GangInfo[gangid][gArmsY] = cache_get_field_content_float(i, "arms_y");
		        GangInfo[gangid][gArmsZ] = cache_get_field_content_float(i, "arms_z");
		        GangInfo[gangid][gArmsA] = cache_get_field_content_float(i, "arms_a");
		        GangInfo[gangid][gDrugX] = cache_get_field_content_float(i, "drug_x");
		        GangInfo[gangid][gDrugY] = cache_get_field_content_float(i, "drug_y");
		        GangInfo[gangid][gDrugZ] = cache_get_field_content_float(i, "drug_z");
		        GangInfo[gangid][gDrugA] = cache_get_field_content_float(i, "drug_a");
		        GangInfo[gangid][gArmsWorld] = cache_get_field_content_int(i, "armsworld");
		        GangInfo[gangid][gDrugWorld] = cache_get_field_content_int(i, "drugworld");
                GangInfo[gangid][gDrugWeed] = cache_get_field_content_int(i, "drugweed");
                GangInfo[gangid][gDrugCocaine] = cache_get_field_content_int(i, "drugcocaine");
                GangInfo[gangid][gDrugMeth] = cache_get_field_content_int(i, "drugmeth");
                GangInfo[gangid][gArmsMaterials] = cache_get_field_content_int(i, "armsmaterials");
                GangInfo[gangid][gArmsPrices][0] = cache_get_field_content_int(i, "armsprice_1");
                GangInfo[gangid][gArmsPrices][1] = cache_get_field_content_int(i, "armsprice_2");
                GangInfo[gangid][gArmsPrices][2] = cache_get_field_content_int(i, "armsprice_3");
                GangInfo[gangid][gArmsPrices][3] = cache_get_field_content_int(i, "armsprice_4");
                GangInfo[gangid][gArmsPrices][4] = cache_get_field_content_int(i, "armsprice_5");
                GangInfo[gangid][gArmsPrices][5] = cache_get_field_content_int(i, "armsprice_6");
                GangInfo[gangid][gArmsPrices][6] = cache_get_field_content_int(i, "armsprice_7");
                GangInfo[gangid][gArmsPrices][7] = cache_get_field_content_int(i, "armsprice_8");
                GangInfo[gangid][gArmsPrices][8] = cache_get_field_content_int(i, "armsprice_9");
                GangInfo[gangid][gArmsPrices][9] = cache_get_field_content_int(i, "armsprice_10");
                GangInfo[gangid][gArmsPrices][10] = cache_get_field_content_int(i, "armsprice_11");
                GangInfo[gangid][gArmsPrices][11] = cache_get_field_content_int(i, "armsprice_12");
                GangInfo[gangid][gDrugPrices][0] = cache_get_field_content_int(i, "weed_price");
                GangInfo[gangid][gDrugPrices][1] = cache_get_field_content_int(i, "cocaine_price");
                GangInfo[gangid][gDrugPrices][2] = cache_get_field_content_int(i, "meth_price");

		        GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    			GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
		        GangInfo[gangid][gPickup] = -1;
		        GangInfo[gangid][gSetup] = 1;


				ReloadGang(gangid);
			}

			printf("[Script] %i gangs loaded.", rows);
		}
		case THREAD_LOAD_GANGRANKS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < 7; r ++)
		        {
		            strcpy(GangRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_GANGSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				GangInfo[cache_get_field_content_int(i, "id")][gSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_POINTS:
		{
		    for(new i = 0; i < rows && i < MAX_POINTS; i ++)
		    {
		        new pointid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", PointInfo[pointid][pName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", PointInfo[pointid][pCapturedBy], connectionID, MAX_PLAYER_NAME);

		        PointInfo[pointid][pCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        PointInfo[pointid][pType] = cache_get_field_content_int(i, "type");
		        PointInfo[pointid][pProfits] = cache_get_field_content_int(i, "profits");
		        PointInfo[pointid][pTime] = cache_get_field_content_int(i, "time");
		        PointInfo[pointid][pPointX] = cache_get_field_content_float(i, "point_x");
		        PointInfo[pointid][pPointY] = cache_get_field_content_float(i, "point_y");
		        PointInfo[pointid][pPointZ] = cache_get_field_content_float(i, "point_z");
		        PointInfo[pointid][pPointInterior] = cache_get_field_content_int(i, "pointinterior");
		        PointInfo[pointid][pPointWorld] = cache_get_field_content_int(i, "pointworld");
		        PointInfo[pointid][pCaptureTime] = 0;
		        PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		        PointInfo[pointid][pText] = Text3D:INVALID_3DTEXT_ID;
		        PointInfo[pointid][pPickup] = -1;
		        PointInfo[pointid][pExists] = 1;

				if(PointInfo[pointid][pCapturedGang] >= 0 && !GangInfo[PointInfo[pointid][pCapturedGang]][gSetup])
				{
				    PointInfo[pointid][pCapturedGang] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE id = %i", pointid);
				    mysql_tquery(connectionID, queryBuffer);
				}

				ReloadPoint(pointid);
		    }

		    printf("[Script] %i points loaded.", rows);
		}
		case THREAD_LOAD_TURFS:
		{
		    for(new i = 0; i < rows && i < MAX_TURFS; i ++)
		    {
		        new turfid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", TurfInfo[turfid][tName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", TurfInfo[turfid][tCapturedBy], connectionID, MAX_PLAYER_NAME);

		        TurfInfo[turfid][tCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        TurfInfo[turfid][tType] = cache_get_field_content_int(i, "type");
		        TurfInfo[turfid][tTime] = cache_get_field_content_int(i, "time");
		        TurfInfo[turfid][tMinX] = cache_get_field_content_float(i, "min_x");
		        TurfInfo[turfid][tMinY] = cache_get_field_content_float(i, "min_y");
		        TurfInfo[turfid][tMaxX] = cache_get_field_content_float(i, "max_x");
		        TurfInfo[turfid][tMaxY] = cache_get_field_content_float(i, "max_y");
		        TurfInfo[turfid][tHeight] = cache_get_field_content_float(i, "height");
		        TurfInfo[turfid][tGangZone] = -1;
		        TurfInfo[turfid][tArea] = -1;
		        TurfInfo[turfid][tCaptureTime] = 0;
				TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		        TurfInfo[turfid][tExists] = 1;
		        Iter_Add(Turf, turfid);

		        ReloadTurf(turfid);
			}

			printf("[Script] %i turfs loaded.", rows);
		}
		case THREAD_LOAD_LOCKERS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCKERS; i ++)
		    {
		        LockerInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LockerInfo[i][lFaction] = cache_get_field_content_int(i, "factionid");
		        LockerInfo[i][lPosX] = cache_get_field_content_float(i, "pos_x");
		        LockerInfo[i][lPosY] = cache_get_field_content_float(i, "pos_y");
		        LockerInfo[i][lPosZ] = cache_get_field_content_float(i, "pos_z");
		        LockerInfo[i][lInterior] = cache_get_field_content_int(i, "interior");
		        LockerInfo[i][lWorld] = cache_get_field_content_int(i, "world");
				LockerInfo[i][lIcon] = cache_get_field_content_int(i, "iconid");
				LockerInfo[i][lLabel] = cache_get_field_content_int(i, "label");

				LockerInfo[i][locKevlar][0] = cache_get_field_content_int(i, "weapon_kevlar");
			    LockerInfo[i][locMedKit][0] = cache_get_field_content_int(i, "weapon_medkit");
			    LockerInfo[i][locNitestick][0] = cache_get_field_content_int(i, "weapon_nitestick");
			    LockerInfo[i][locMace][0] = cache_get_field_content_int(i, "weapon_mace");
			    LockerInfo[i][locDeagle][0] = cache_get_field_content_int(i, "weapon_deagle");
			    LockerInfo[i][locShotgun][0] = cache_get_field_content_int(i, "weapon_shotgun");
			    LockerInfo[i][locMP5][0] = cache_get_field_content_int(i, "weapon_mp5");
			    LockerInfo[i][locM4][0] = cache_get_field_content_int(i, "weapon_m4");
			    LockerInfo[i][locSpas12][0] = cache_get_field_content_int(i, "weapon_spas12");
			    LockerInfo[i][locSniper][0] = cache_get_field_content_int(i, "weapon_sniper");
			    LockerInfo[i][locCamera][0] = cache_get_field_content_int(i, "weapon_camera");
			    LockerInfo[i][locFireExt][0] = cache_get_field_content_int(i, "weapon_fire_extinguisher");
			    LockerInfo[i][locPainKillers][0] = cache_get_field_content_int(i, "weapon_painkillers");

                LockerInfo[i][locKevlar][1] = cache_get_field_content_int(i, "price_kevlar");
			    LockerInfo[i][locMedKit][1] = cache_get_field_content_int(i, "price_medkit");
			    LockerInfo[i][locNitestick][1] = cache_get_field_content_int(i, "price_nitestick");
			    LockerInfo[i][locMace][1] = cache_get_field_content_int(i, "price_mace");
			    LockerInfo[i][locDeagle][1] = cache_get_field_content_int(i, "price_deagle");
			    LockerInfo[i][locShotgun][1] = cache_get_field_content_int(i, "price_shotgun");
			    LockerInfo[i][locMP5][1] = cache_get_field_content_int(i, "price_mp5");
			    LockerInfo[i][locM4][1] = cache_get_field_content_int(i, "price_m4");
			    LockerInfo[i][locSpas12][1] = cache_get_field_content_int(i, "price_spas12");
			    LockerInfo[i][locSniper][1] = cache_get_field_content_int(i, "price_sniper");
			    LockerInfo[i][locCamera][1] = cache_get_field_content_int(i, "price_camera");
			    LockerInfo[i][locFireExt][1] = cache_get_field_content_int(i, "price_fire_extinguisher");
			    LockerInfo[i][locPainKillers][1] = cache_get_field_content_int(i, "price_painkillers");

		        LockerInfo[i][lText] = Text3D:INVALID_3DTEXT_ID;
		        LockerInfo[i][lPickup] = -1;
		        LockerInfo[i][lExists] = 1;

		        ReloadLocker(i);
		    }
		}
		case THREAD_LOAD_CLOTHING:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", ClothingInfo[extraid][i][cName], connectionID, 32);

		        ClothingInfo[extraid][i][cID] = cache_get_field_content_int(i, "id");
		        ClothingInfo[extraid][i][cModel] = cache_get_field_content_int(i, "modelid");
		        ClothingInfo[extraid][i][cBone] = cache_get_field_content_int(i, "boneid");
		        ClothingInfo[extraid][i][cAttached] = cache_get_field_content_int(i, "attached");
		        ClothingInfo[extraid][i][cPosX] = cache_get_field_content_float(i, "pos_x");
		        ClothingInfo[extraid][i][cPosY] = cache_get_field_content_float(i, "pos_y");
		        ClothingInfo[extraid][i][cPosZ] = cache_get_field_content_float(i, "pos_z");
		        ClothingInfo[extraid][i][cRotX] = cache_get_field_content_float(i, "rot_x");
		        ClothingInfo[extraid][i][cRotY] = cache_get_field_content_float(i, "rot_y");
		        ClothingInfo[extraid][i][cRotZ] = cache_get_field_content_float(i, "rot_z");
		        ClothingInfo[extraid][i][cScaleX] = cache_get_field_content_float(i, "scale_x");
		        ClothingInfo[extraid][i][cScaleY] = cache_get_field_content_float(i, "scale_y");
		        ClothingInfo[extraid][i][cScaleZ] = cache_get_field_content_float(i, "scale_z");
		        ClothingInfo[extraid][i][cExists] = 1;
		        ClothingInfo[extraid][i][cAttachedIndex] = -1;
		    }

		    PlayerInfo[extraid][pAwaitingClothing] = 1;
		}
		case THREAD_HOUSE_INFORMATION:
		{
			new type[16], houseid = GetNearbyHouseEx(extraid);

		    if(HouseInfo[houseid][hType] == -1)
			{
				type = "Other";
			}
			else
			{
				strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
			}

			SendClientMessageEx(extraid, COLOR_NAVYBLUE, "_______ House ID %i _______", houseid);
			SendClientMessageEx(extraid, COLOR_GREY2, "Gia tri: %s - Gia thue: %s - Cap do: %i/5 - Hoat dong: %s - Khoa: %s", FormatNumber(HouseInfo[houseid][hPrice]), FormatNumber(HouseInfo[houseid][hRentPrice]), HouseInfo[houseid][hLevel], (gettime() - HouseInfo[houseid][hTimestamp] > 2592000) ? ("{FF6347}Khong{C8C8C8}") : ("Co"), (HouseInfo[houseid][hLocked]) ? ("Co") : ("Khong"));
			SendClientMessageEx(extraid, COLOR_GREY2, "Loai: %s - Vi tri: %s - Do noi that: %i/%i - Nguoi thue: %i/%i", type, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), cache_get_row_int(0, 0), GetHouseFurnitureCapacity(houseid), cache_get_row_int(0, 1), GetHouseTenantCapacity(houseid));
		}
		case THREAD_COUNT_FURNITURE:
		{
		    new houseid = GetInsideHouse(extraid);

		    if(cache_get_row_int(0, 0) >= GetHouseFurnitureCapacity(houseid))
		    {
		        SendClientMessageEx(extraid, COLOR_LIGHTRED, "Ngoi nha cua ban chi duoc phep toi da %i do noi that o muc hien tai.", GetHouseFurnitureCapacity(houseid));
		    }
		    else
		    {
		        ShowDialogToPlayer(extraid, DIALOG_BUYFURNITURETYPE);
				//ShowDialogToPlayer(extraid, DIALOG_BUYFURNITURE1);
			}
		}
		case THREAD_SELL_FURNITURE:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SendClientMessageEx(extraid, COLOR_AQUA, "Ban da ban {FF6347}%s{33CCFF} va nhan duoc khoan hoan tra 75 phan tram la {00AA00}$%i{33CCFF}.", name, price);
		        RemoveFurniture(PlayerInfo[extraid][pSelected]);
			}
		}
		case THREAD_CLEAR_FURNITURE:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Nha cua ban khong co do dac gi co the ban duoc.");
		    }
		    else
		    {
		        new price, houseid = GetInsideHouse(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllFurniture(houseid);

				GivePlayerCash(extraid, price);
				SendClientMessageEx(extraid, COLOR_AQUA, "Ban da ban duoc tong cong %i mat hang va nhan lai{00AA00}$%i{33CCFF}.", rows, price);
			}
		}

		case THREAD_DUPLICATE_FURNITURE:
		{
			//name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z

  			if(cache_get_row_count(connectionID))
			{
			    new string[20], name[32], houseid = GetInsideHouse(extraid);

			    new modelid = cache_get_field_content_int(0, "modelid");
			    new price = cache_get_field_content_int(0, "price");
			    new Float:x = cache_get_field_content_float(0, "pos_x");
			    new Float:y = cache_get_field_content_float(0, "pos_y");
			    new Float:z = cache_get_field_content_float(0, "pos_z");
			    new Float:rx = cache_get_field_content_float(0, "rot_x");
			    new Float:ry = cache_get_field_content_float(0, "rot_y");
			    new Float:rz = cache_get_field_content_float(0, "rot_z");

			    if(PlayerInfo[extraid][pCash] < price)
			    {
			        SendClientMessage(extraid, COLOR_LIGHTRED, "Ban khong co kha nang sao chep do noi that.");
			    }
			    else
			    {
			        // INSERT INTO furniture VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)

			        PlayerInfo[extraid][pFurnitureHouse] = houseid;
				    cache_get_field_content(0, "name", name);

			    	GivePlayerCash(extraid, -price);
			    	SendClientMessageEx(extraid, COLOR_GREEN, "%s da nhan ban voi gia $%i. Bay gio ban se chinh sua doi tuong nay.", name, price);

				    format(string, sizeof(string), "~r~-$%i", price);
				    GameTextForPlayer(extraid, string, 5000, 1);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO furniture VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)", HouseInfo[houseid][hID], modelid, name, price, x, y, z, rx, ry, rz, GetPlayerInterior(extraid), GetPlayerVirtualWorld(extraid));
					mysql_tquery(connectionID, queryBuffer);

					mysql_tquery(connectionID, "SELECT * FROM furniture WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);
					mysql_tquery(connectionID, "SELECT LAST_INSERT_ID() FROM furniture LIMIT 1", "OnQueryFinished", "ii", THREAD_DUPLICATED_FURNITURE, extraid);
				}
			}
		}
		case THREAD_DUPLICATED_FURNITURE:
		{
			if(cache_get_row_count(connectionID))
			{
			    new id = cache_get_row_int(0, 0);

			    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
			    {
			        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == id)
			        {
			            PlayerInfo[extraid][pEditType] = EDIT_FURNITURE;
		    	    	PlayerInfo[extraid][pEditObject] = i;

						EditDynamicObject(extraid, i);
	    		    	GameTextForPlayer(extraid, "~w~Editing Mode~n~~g~Nhan vao dia de luu~n~~r~Nhan ECS de huy bo", 5000, 1);

			            //PlayerInfo[extraid][pSelected] = i;
						//ShowDialogToPlayer(extraid, DIALOG_LANDOBJECTMENU);
			            break;
					}
			    }
		    }
		}
		case THREAD_COUNT_TEXTS:
		{
		    rows = cache_get_row_int(0, 0);

		    if(rows)
		    {
		        SendClientMessageEx(extraid, COLOR_YELLOW, "** Ban co %i tin nhan van ban chua doc. (/texts)", rows);
			}
		}
		case THREAD_VIEW_TEXTS:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Ban khong con van ban nao de doc.");
			}
			else
			{
		    	static listString[4096], sender[MAX_PLAYER_NAME], date[24], message[128];

				listString = "Noi dung duoc gui cho ban khi ngoai tuyen (gan day nhat):\n";

			    for(new i = 0; i < min(rows, 25); i ++)
			    {
			        cache_get_field_content(i, "sender", sender);
		    	    cache_get_field_content(i, "date", date);
		        	cache_get_field_content(i, "message", message);

			        format(listString, sizeof(listString), "%s\n[%s] Tin nhan tu %s (%i): %s", listString, date, sender, cache_get_field_content_int(i, "sender_number"), message);
				}

				if(rows > 25)
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Van ban chua doc", listString, "Tiep", "Dong y");
				}
				else
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Van ban chua doc", listString, "Dong y", "");
				}
			}
		}
		case THREAD_LIST_VEHICLES:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Ban khong so huu phuong tien nao ma ban co the sinh ra.");
		    }
		    else
		    {
		        static string[1024];

		        string = "#\tModel\tVi tri";

		        for(new i = 0; i < rows; i ++)
		        {
		            format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Chon mot phuong tien de chinh ra.", string, "Chon", "Huy bo");
		    }
		}
		case THREAD_CAR_STORAGE:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Ban khong so huu phuong tien nao ma ban co the sinh ra.");
		    }
		    else
		    {
		        new string[1024], vehicleid;

		        string = "#\tModel\tTrang thai\tVi tri";

		        for(new i = 0; i < rows; i ++)
		        {
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t{00AA00}Da lay ra{FFFFFF}\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
					else
						format(string, sizeof(string), "%s\n%i\t%s\t{FF6347}Da cat{FFFFFF}\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_CARSTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Chon mot phuong tien de lay/cat.", string, "Chon", "Huy bo");
		    }
		}
		case THREAD_FACTION_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SendClientMessage(extraid, COLOR_NAVYBLUE, "_____ Faction Roster _____");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SendClientMessageEx(extraid, COLOR_GREY2, "%s %s - Nhin thay lan cuoi: %s", FactionRanks[PlayerInfo[extraid][pFaction]][cache_get_field_content_int(i, "factionrank")], username, date);
		    }
		}
		case THREAD_GANG_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SendClientMessage(extraid, COLOR_NAVYBLUE, "_____ Gang Roster _____");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SendClientMessageEx(extraid, COLOR_GREY2, "[%i] %s %s - Nhin thay lan cuoi: %s", cache_get_field_content_int(i, "gangrank"), GangRanks[PlayerInfo[extraid][pGang]][cache_get_field_content_int(i, "gangrank")], username, date);
		    }
		}
		case THREAD_VIEW_PHONEBOOK:
		{
		    if((!rows) && PlayerInfo[extraid][pPage] == 1)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Thu muc danh ba hien dang trong.");
		    }
		    else
		    {
		        static string[MAX_LISTED_NUMBERS * 32], name[MAX_PLAYER_NAME];

		        string = "#\tTen\tSo";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t%i", string, ((PlayerInfo[extraid][pPage] - 1) * MAX_LISTED_NUMBERS) + (i + 1), name, cache_get_field_content_int(i, "number"));
				}

				if(PlayerInfo[extraid][pPage] > 1)
				{
				    strcat(string, "\n{FF6347}<< Quay lai{FFFFFF}");
				}
    			if(rows == MAX_LISTED_NUMBERS)
    			{
    			    strcat(string, "\n{00AA00}>> Trang tiep{FFFFFF}");
				}

				ShowPlayerDialog(extraid, DIALOG_PHONEBOOK, DIALOG_STYLE_TABLIST_HEADERS, "Danh Ba", string, "Chon", "Dong");
		    }
		}
		case THREAD_COUNT_LANDOBJECTS:
		{
		    new landid = GetNearbyLand(extraid);

		    if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(LandInfo[landid][lLevel]))
		    {
		        SendClientMessageEx(extraid, COLOR_LIGHTRED, "Ban chi duoc phep toi da %i doi tuong cho dat cua minh.", GetLandObjectCapacity(LandInfo[landid][lLevel]));
		    }
		    else
		    {
		        ShowDialogToPlayer(extraid, DIALOG_LANDBUILDTYPE);
				//ShowDialogToPlayer(extraid, DIALOG_LANDBUILD1);
			}
		}
		case THREAD_SELL_LANDOBJECT:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SendClientMessageEx(extraid, COLOR_AQUA, "Ban da ban {FF6347}%s{33CCFF} va nhan duoc khoan hoan tra 75 phan tram la {00AA00}$%i{33CCFF}.", name, price);
		        RemoveLandObject(PlayerInfo[extraid][pSelected]);
			}
		}
		case THREAD_DUPLICATE_LANDOBJECT:
		{
			//name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z

  			if(cache_get_row_count(connectionID))
			{
			    new string[20], name[32], landid = GetNearbyLand(extraid);

			    new modelid = cache_get_field_content_int(0, "modelid");
			    new price = cache_get_field_content_int(0, "price");
			    new Float:x = cache_get_field_content_float(0, "pos_x");
			    new Float:y = cache_get_field_content_float(0, "pos_y");
			    new Float:z = cache_get_field_content_float(0, "pos_z");
			    new Float:rx = cache_get_field_content_float(0, "rot_x");
			    new Float:ry = cache_get_field_content_float(0, "rot_y");
			    new Float:rz = cache_get_field_content_float(0, "rot_z");

			    if(PlayerInfo[extraid][pCash] < price)
			    {
			        SendClientMessage(extraid, COLOR_LIGHTRED, "Ban khong co kha nang sao chep doi tuong nay.");
			    }
			    else
			    {
			        PlayerInfo[extraid][pObjectLand] = landid;
				    cache_get_field_content(0, "name", name);

			    	GivePlayerCash(extraid, -price);
			    	SendClientMessageEx(extraid, COLOR_GREEN, "%s da nhan ban voi gia $%i. Bay gio ban se chinh sua doi tuong nay.", name, price);

				    format(string, sizeof(string), "~r~-$%i", price);
				    GameTextForPlayer(extraid, string, 5000, 1);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '0.0', '0.0', '0.0', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], modelid, name, price, x, y, z, rx, ry, rz);
					mysql_tquery(connectionID, queryBuffer);

					mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
					mysql_tquery(connectionID, "SELECT LAST_INSERT_ID() FROM landobjects LIMIT 1", "OnQueryFinished", "ii", THREAD_DUPLICATED_OBJECT, extraid);
				}
			}
		}
		case THREAD_DUPLICATED_OBJECT:
		{
			if(cache_get_row_count(connectionID))
			{
			    new id = cache_get_row_int(0, 0);

			    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
			    {
			        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == id)
			        {
			            PlayerInfo[extraid][pEditType] = EDIT_LAND_OBJECT;
		    	    	PlayerInfo[extraid][pEditObject] = i;

						EditDynamicObject(extraid, i);
	    		    	GameTextForPlayer(extraid, "~w~Editing Mode~n~~g~Nhan vao dia de luu~n~~r~Nhan ECS de dong", 5000, 1);

			            //PlayerInfo[extraid][pSelected] = i;
						//ShowDialogToPlayer(extraid, DIALOG_LANDOBJECTMENU);
			            break;
					}
			    }
		    }
		}
		case THREAD_CLEAR_LANDOBJECTS:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Dat cua ban khong co do dac gi co the ban duoc.");
		    }
		    else
		    {
		        new price, landid = GetNearbyLand(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllLandObjects(landid);

				GivePlayerCash(extraid, price);
				SendClientMessageEx(extraid, COLOR_AQUA, "Ban da ban duoc tong cong %i vat pham va nhan lai {00AA00}$%i{33CCFF}.", rows, price);
			}
		}
		case THREAD_LIST_LANDOBJECTS:
		{
		    if((!rows) && PlayerInfo[extraid][pPage] == 1)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Dat cua ban khong co doi tuong nao co the duoc liet ke.");
		    }
		    else
		    {
		        static string[MAX_LISTED_OBJECTS * 48], name[32];

		        string = "#\tTen\tGia\tKhoang cach";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t{00AA00}$%i{FFFFFF}\t%.1fm", string, GetLandObjectID(cache_get_field_content_int(i, "id")), name, cache_get_field_content_int(i, "price"), GetPlayerDistanceFromPoint(extraid, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
				}

				if(PlayerInfo[extraid][pPage] > 1)
				{
				    strcat(string, "\n{FF6347}<< Quay lai{FFFFFF}");
				}
    			if(rows == MAX_LISTED_OBJECTS)
    			{
    			    strcat(string, "\n{00AA00}>> Trang tiep{FFFFFF}");
				}

				ShowPlayerDialog(extraid, DIALOG_LANDOBJECTS, DIALOG_STYLE_TABLIST_HEADERS, "Danh sach doi tuong", string, "Chon", "Quay lai");
		    }
		}
		case THREAD_LAND_MAINMENU:
		{
		    new
		        landid = GetNearbyLand(extraid),
		        string[64];

			format(string, sizeof(string), "Land menu {FFD700}(Cap do: %i/3) (%i/%i doi tuong)", LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
		    ShowPlayerDialog(extraid, DIALOG_LANDMENU, DIALOG_STYLE_LIST, string, "Xay dung doi tuong\nChinh sua doi tuong\nChuyen doi nhan\nDanh sach tat ca doi tuong\nBan tat ca doi tuong\nNang cap dat\nQuyen", "Chon", "Huy bo");
		}
		case THREAD_LAND_INFORMATION:
		{
		    new landid = GetNearbyLand(extraid);

		    //SendClientMessage(extraid, COLOR_NAVYBLUE, "_______ My Land _______");
			//SendClientMessageEx(extraid, COLOR_GREY2, "(ID: %i) - (Value: $%i) - (Objects: %i/%i) - (Location: %s)", landid, LandInfo[landid][lPrice], cache_get_row_int(0, 0), GetLandObjectCapacity(landid), GetZoneName(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]));
			SendClientMessageEx(extraid, COLOR_WHITE, "** Dat cap %i/3 cua ban o %s tri gia {00AA00}%s{FFFFFF} va chua %i/%i doi tuong.", LandInfo[landid][lLevel], GetZoneName(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]), FormatNumber(LandInfo[landid][lPrice]), cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
		}
		case THREAD_LOAD_VEHICLES:
		{
		    new modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, color1, color2, respawndelay, siren, vehicleid;

		    for(new i = 0; i < rows; i ++)
		    {
	            modelid 		= cache_get_field_content_int(i, "modelid"),
				pos_x 			= cache_get_field_content_float(i, "pos_x"),
				pos_y 			= cache_get_field_content_float(i, "pos_y"),
				pos_z 			= cache_get_field_content_float(i, "pos_z"),
				pos_a 			= cache_get_field_content_float(i, "pos_a"),
				color1 			= cache_get_field_content_int(i, "color1"),
				color2 			= cache_get_field_content_int(i, "color2"),
				respawndelay 	= cache_get_field_content_int(i, "respawndelay");
				siren           = cache_get_field_content_int(i, "siren");
		        vehicleid 		= CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, respawndelay, siren);


				if(vehicleid != INVALID_VEHICLE_ID)
				{
				    ResetVehicle(vehicleid); // Forgot this!

					VehicleInfo[vehicleid][vID] = cache_get_field_content_int(i, "id");
					VehicleInfo[vehicleid][vGang] = cache_get_field_content_int(i, "gangid");
					VehicleInfo[vehicleid][vFactionType] = cache_get_field_content_int(i, "factiontype");
					VehicleInfo[vehicleid][vRank] = cache_get_field_content_int(i, "rank");
					VehicleInfo[vehicleid][vVIP] = cache_get_field_content_int(i, "vippackage");
					VehicleInfo[vehicleid][vJob] = cache_get_field_content_int(i, "job");
					VehicleInfo[vehicleid][vHealth] = cache_get_field_content_int(i, "health");

					if(VehicleInfo[vehicleid][vGang] >= 0)
					{
					    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(i, "price");
					    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(i, "locked");
					    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(i, "paintjob");
					    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(i, "interior");
				        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(i, "world");
				        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(i, "mod_1");
				        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(i, "mod_2");
				        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(i, "mod_3");
				        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(i, "mod_4");
				        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(i, "mod_5");
				        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(i, "mod_6");
				        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(i, "mod_7");
				        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(i, "mod_8");
				        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(i, "mod_9");
				        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(i, "mod_10");
				        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(i, "mod_11");
				        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(i, "mod_12");
				        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(i, "mod_13");
				        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(i, "mod_14");
						ReloadVehicle(vehicleid);
					}

					VehicleInfo[vehicleid][vModel] = modelid;
					VehicleInfo[vehicleid][vPosX] = pos_x;
					VehicleInfo[vehicleid][vPosY] = pos_y;
					VehicleInfo[vehicleid][vPosZ] = pos_z;
					VehicleInfo[vehicleid][vPosA] = pos_a;
					VehicleInfo[vehicleid][vColor1] = color1;
					VehicleInfo[vehicleid][vColor2] = color2;
					VehicleInfo[vehicleid][vRespawnDelay] = respawndelay;
					VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vTimer] = -1;
					vehicleFuel[vehicleid] = 100;
					VehicleInfo[vehicleid][vBoxes] = 0;

					SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
		        }
			}
		}
		case THREAD_GANG_INFORMATION:
		{
			if(rows)
			{
			    new count, total;

       			foreach(new i : Turf)
			    {
			        if(TurfInfo[i][tExists])
			        {
			            if(TurfInfo[i][tCapturedGang] == PlayerInfo[extraid][pGang])
			                count++;
			            else if(TurfInfo[i][tType] != 8)
			                total++;
			        }
				}

			    SendClientMessageEx(extraid, COLOR_NAVYBLUE, "______ %s ______", GangInfo[PlayerInfo[extraid][pGang]][gName]);
			    SendClientMessageEx(extraid, COLOR_GREY2, "Lanh dao: %s - Cap do: %i/3 - Strikes: %i/3 - Thanh vien: %i/%i - Phuong tien: %i/%i", GangInfo[PlayerInfo[extraid][pGang]][gLeader], GangInfo[PlayerInfo[extraid][pGang]][gLevel], GangInfo[PlayerInfo[extraid][pGang]][gStrikes], cache_get_row_int(0, 0), GetGangMemberLimit(PlayerInfo[extraid][pGang]), GetGangVehicles(PlayerInfo[extraid][pGang]), GetGangVehicleLimit(PlayerInfo[extraid][pGang]));
			    SendClientMessageEx(extraid, COLOR_GREY2, "Diem bang dang: %s GP - Turf Tokens: %s - Tien: %s/%s - Vat lieu: %s/%s", FormatNumber(GangInfo[PlayerInfo[extraid][pGang]][gPoints], 0), FormatNumber(GangInfo[PlayerInfo[extraid][pGang]][gTurfTokens], 0), FormatNumber(GangInfo[PlayerInfo[extraid][pGang]][gCash], 0), FormatNumber(GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_CASH), 0),
					FormatNumber(GangInfo[PlayerInfo[extraid][pGang]][gMaterials], 0), FormatNumber(GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_MATERIALS), 0));
			    SendClientMessageEx(extraid, COLOR_GREY2, "Turfs: %i/%i - Weed: %i/%ig - Cocaine: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i", count, total, GangInfo[PlayerInfo[extraid][pGang]][gWeed], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_WEED), GangInfo[PlayerInfo[extraid][pGang]][gCocaine], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_COCAINE), GangInfo[PlayerInfo[extraid][pGang]][gMeth], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_METH),
				GangInfo[PlayerInfo[extraid][pGang]][gPainkillers], GetGangStashCapacity(PlayerInfo[extraid][pGang], STASH_CAPACITY_PAINKILLERS));
			}
		}
		case THREAD_OFFLINE_IP:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Ten nguoi dung duoc chi dinh chua duoc dang ky.");
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];


		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

				if((cache_get_field_content_int(0, "adminlevel") > 2) && (PlayerInfo[extraid][pAdmin]))
				{
				    SendClientMessage(extraid, COLOR_LIGHTRED, "Ban khong the kiem tra IP cua quan tri vien khac");
				}
				else
				{
		        	SendClientMessageEx(extraid, COLOR_WHITE, "** %s's IP: %s **", username, ip);
				}

		    }
		}
		case THREAD_CHECK_REFERRAL:
		{
		    if(!rows)
		    {
		        SendClientMessage(extraid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong ton tai.");
		        ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        if(!strcmp(GetPlayerIP(extraid), ip))
		        {
		            SendClientMessage(extraid, COLOR_LIGHTRED, "Tai khoan nay duoc liet ke duoi dia chi IP cua rieng ban. Ban khong the tu gioi thieu.");
		            ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		        }
		        else
		        {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = %i WHERE uid = %i", cache_get_field_content_int(0, "uid"), PlayerInfo[extraid][pID]);
		            mysql_tquery(connectionID, queryBuffer);
                    ClearChat(extraid);
			    	PlayerInfo[extraid][pTutorial] = 0;
				   	PlayerInfo[extraid][pSetup] = 0;
				    PlayerInfo[extraid][pTutorial] = 0;
			   	    PlayerInfo[extraid][pSetup] = 0;
			   	    PlayerInfo[extraid][pCash] = 300;
			   	    PlayerInfo[extraid][pMaterials] = 0;
			   	    PlayerInfo[extraid][pBank] = 100;
			   	    PlayerInfo[extraid][pHours] = 0;
			   	    PlayerInfo[extraid][pHunger] = 100;
			   	    PlayerInfo[extraid][pThirsty] = 100;
			   	    PlayerInfo[extraid][pCzID] = random(799999) + 199999;
        	        HideTutorialTextDraws(extraid);
    	            SetPlayerSkin(extraid, PlayerInfo[extraid][pSkin]);
				    SetPlayerPos(extraid, 1357.3593, 252.4489, 19.5669);
				    SetPlayerFacingAngle(extraid, 25.0000);
				    SetPlayerVirtualWorld(extraid, 0);
				    SetCameraBehindPlayer(extraid);
				    StopAudioStreamForPlayer(extraid);
			    	TogglePlayerControllable(extraid, 1);

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET setup = 0, czid = %i, hours = %i, materials = %i, cash = %i, bank = %i,  gender = %i, age = %i, skin = %i, hunger = %i, thirsty = %i WHERE uid = %i", PlayerInfo[extraid][pCzID], PlayerInfo[extraid][pHours], PlayerInfo[extraid][pMaterials], PlayerInfo[extraid][pCash], PlayerInfo[extraid][pBank], PlayerInfo[extraid][pGender], PlayerInfo[extraid][pAge], PlayerInfo[extraid][pSkin], PlayerInfo[extraid][pHunger], PlayerInfo[extraid][pThirsty], PlayerInfo[extraid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					SendClientMessage(extraid, COLOR_WHITE, "Chao mung ban toi {6FD497}NewCity Roleplay{FFFFFF}. Truy cap new-city.net de biet tin tuc va cap nhat moi cua may chu.");
					SendClientMessage(extraid, COLOR_WHITE, "Su dung {FFFF90}/locate{FFFFFF} de tim cac vi tri, cong viec, dia diem trong thi tran.");
					SendClientMessageEx(extraid, COLOR_LIGHTRED, "[Thanh pho]{FFFFFF} Ma so can cuoc cong dan cua ban la: {df3a3a}%i", PlayerInfo[extraid][pCzID]);

					SendStaffMessage(COLOR_YELLOW, "OnPlayerSpawn: %s[%d] la nguoi tham gia moi cua New City RolePlay!", GetPlayerRPName(extraid), extraid);
					ShowPlayerDialog(extraid, DIALOG_NEWBWELCOME, DIALOG_STYLE_MSGBOX, "{FFFFFF}Chao mung ban toi {6FD497}NewCity Roleplay", "Ban co can mot nguoi tro giup ho tro ban khong?", "Co", "Khong");

	                PlayerInfo[extraid][pTutorialTimer] = SetTimerEx("TutorialTimer", 14000, false, "ii", extraid, 11);
	                PlayerInfo[extraid][pReferralUID] = cache_get_field_content_int(0, "uid");

	                SendClientMessageEx(extraid, COLOR_YELLOW, "Ban da chon %s la nguoi gioi thieu cua minh. Nguoi choi nay se duoc thuong khi ban dat den cap do 3.", username);
		            //SendClientMessage(extraid, COLOR_YELLOW, "That's all the information we need right now. The tutorial will start in just a moment.");
				}
		    }
		}
		case THREAD_REWARD_REFERRER:
		{
		    if(rows)
		    {
			    new username[MAX_PLAYER_NAME], ip[16], referralid = INVALID_PLAYER_ID;

				cache_get_field_content(0, "username", username);
				cache_get_field_content(0, "ip", ip);

				// Add a log entry for this referral.
				Log_Write("log_referrals", "%s (uid: %i) (IP: %s) da nhan duoc 10 Cookies cho gioi thieu %s (uid: %i) (IP: %s).", username, PlayerInfo[extraid][pReferralUID], ip, GetPlayerNameEx(extraid), PlayerInfo[extraid][pID], GetPlayerIP(extraid));

				// Check to see if any of the players online match the player's referral UID.
			    foreach(new i : Player)
			    {
			        if(i != extraid && PlayerInfo[i][pLogged] && PlayerInfo[i][pID] == PlayerInfo[extraid][pReferralUID])
			        {
			            referralid = i;
			            break;
			        }
			    }

				// Referrer is online.
			    if(referralid != INVALID_PLAYER_ID && strcmp(GetPlayerIP(referralid), GetPlayerIP(extraid)) != 0)
			    {
			        PlayerInfo[referralid][pCookies] += 10;

			        SendClientMessage(referralid, COLOR_GREEN, "Mot nguoi choi ma ban da gioi thieu da dat den cap do 3. Do do, ban nhan duoc 10 Cookies!");
			        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) da nhan duoc 10 Cookies khi gioi thieu %s (IP: %s).", GetPlayerRPName(referralid), GetPlayerIP(referralid), GetPlayerRPName(extraid), GetPlayerIP(extraid));

			  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = cookies + 10 WHERE uid = %i AND ip != '%s'", PlayerInfo[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
				    // Referrer is offline. Let's give them their Cookies and increment refercount which sends them an alert on login!
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = cookies + 10, refercount = refercount + 1 WHERE uid = %i AND ip != '%s'", PlayerInfo[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}

				// Finally, remove the player's link to the referrer as the prize has been given.
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = 0 WHERE uid = %i", PlayerInfo[extraid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case THREAD_LIST_FLAGGED:
		{
		    new
				flags[MAX_PLAYERS],
				username[MAX_PLAYER_NAME],
				targetid;

		    SendClientMessage(extraid, COLOR_NAVYBLUE, "_____ Flagged Players _____");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_row(i, 0, username);

		        if(IsPlayerOnline(username, targetid))
		        {
		            flags[targetid]++;
				}
		    }

		    foreach(new i : Player)
		    {
		        if(flags[i] > 0)
		        {
		            SendClientMessageEx(extraid, COLOR_GREY3, "** %s[%i] co %i flags hoat dong.", GetPlayerRPName(i), i, flags[i]);
				}
			}
		}
		case THREAD_LIST_ACHIEVEMENTS:
		{
		    static string[2048];

			new achieved[sizeof(achievementInfo)], achievement[32], title[64], count;

		    string = "Ten\tMieu ta\tTrang thai";

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "achievement", achievement);

				for(new x = 0; x < sizeof(achievementInfo); x ++)
		    	{
		    	    if(!strcmp(achievementInfo[x][aName], achievement, true))
		    	    {
		    	        achieved[x] = true;
		    	        count++;
		            }
		        }
		    }

		    for(new i = 0; i < sizeof(achievementInfo); i ++)
		    {
		        if(achieved[i])
		            format(string, sizeof(string), "%s\n%s\t%s\t{00AA00}Da mo khoa{FFFFFF}", string, achievementInfo[i][aName], achievementInfo[i][aDescription]);
		        else
		            format(string, sizeof(string), "%s\n%s\t%s\t{ED6464}Da khoa{FFFFFF}", string, achievementInfo[i][aName], achievementInfo[i][aDescription]);
		    }

		    format(title, sizeof(title), "Thanh tuu (%i/%i da mo khoa)", count, sizeof(achievementInfo));
		    ShowPlayerDialog(extraid, 0, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Dong y", "");
		}
		case THREAD_LIST_ADMINS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SendClientMessage(extraid, COLOR_GREEN, "---- Admin Team ----");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);
				SendClientMessageEx(extraid, COLOR_GREY2, "Quan tri vien cap %i %s - Nhin thay lan cuoi: %s", cache_get_field_content_int(i, "adminlevel"), username, lastlogin);
		    }
		}
		case THREAD_DUPLICATE_LANDOBJ:
		{
			if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(LandInfo[PlayerInfo[extraid][pObjectLand]][lLevel]))
			{
 				SendClientMessageEx(extraid, COLOR_LIGHTRED, "Ban chi duoc phep toi da %i doi tuong cho dat cua minh.", GetLandObjectCapacity(LandInfo[PlayerInfo[extraid][pObjectLand]][lLevel]));
   			}
			else
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z FROM landobjects WHERE id = %i", Streamer_GetExtraInt(PlayerInfo[extraid][pSelected], E_OBJECT_INDEX_ID));
   				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DUPLICATE_LANDOBJECT, extraid);
			}
		}
		case THREAD_CHECKDUPE_FURNITURE:
		{
		    new houseid = GetInsideHouse(extraid);

		    if(cache_get_row_int(0, 0) >= GetHouseFurnitureCapacity(houseid))
		    {
		        SendClientMessageEx(extraid, COLOR_LIGHTRED, "Ban chi duoc phep toi da %i doi tuong trong nha cua minh.", GetHouseFurnitureCapacity(houseid));
		    }
		    else
		    {
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z FROM furniture WHERE id = %i", Streamer_GetExtraInt(PlayerInfo[extraid][pSelected], E_OBJECT_INDEX_ID));
        		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DUPLICATE_FURNITURE, extraid);
		    }
		}
		case THREAD_LOAD_LOCATIONS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCATIONS; i ++)
		    {
      			cache_get_field_content(i, "name", LocationInfo[i][locName], connectionID, 64);

		        LocationInfo[i][locID] = cache_get_field_content_int(i, "id");
		        LocationInfo[i][locPosX] = cache_get_field_content_float(i, "pos_x");
		        LocationInfo[i][locPosY] = cache_get_field_content_float(i, "pos_y");
			   	LocationInfo[i][locPosZ] = cache_get_field_content_float(i, "pos_z");
				LocationInfo[i][locExists] = true;
			}
			printf("[Script] %i locations loaded", (rows < MAX_LOCATIONS) ? (rows) : (MAX_LOCATIONS));
		}
		case THREAD_UPDATE_LANDLABELS:
		{
		    new landid = extraid;
			new string[128];
			if(IsValidDynamic3DTextLabel(LandInfo[landid][lTextdraw]))
			{
				if(LandInfo[landid][lOwnerID] > 0)
				{
					format(string, sizeof(string), "Khu dat nay thuoc so huu cua %s\n{FFD700}Cap do: %i/3\n{FFFFFF}%i/%i Doi tuong", LandInfo[landid][lOwner], LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
            		UpdateDynamic3DTextLabelText(LandInfo[landid][lTextdraw], COLOR_LIGHTRED, string);
				}
				else
				{
				    format(string, sizeof(string), "Khu dat nay duoc nha nuoc ban\n{00AA00}Gia: %s{FFFFFF}\n{FFD700}Cap do: %i/3\n{FFFFFF}%i/%i Doi tuong", FormatNumber(LandInfo[landid][lPrice]), LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
				    UpdateDynamic3DTextLabelText(LandInfo[landid][lTextdraw], COLOR_LIGHTRED, string);
				}
			}
		}
		case THREAD_LOAD_CREWS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < MAX_GANG_CREWS; r ++)
		        {
		            GangCrews[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangCrews[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "crewid")], connectionID, 32);
      		}
            printf("[Script] %i crews loaded", rows);
		}
		case THREAD_LIST_VIPS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24], viplevel, viptime;

		    SendClientMessage(extraid, COLOR_VIP, "---- Danh sach VIP ----");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);
		        viplevel = cache_get_field_content_int(i, "vippackage");
		        viptime = cache_get_field_content_int(i, "viptime");
				SendClientMessageEx(extraid, COLOR_GREY2, "[%i] {D909D9}%s VIP{C8C8C8} %s - Nhin thay lan cuoi: %s - Het han: %s", viplevel, GetVIPRank(viplevel), username, lastlogin, GetDateFromTimestamp(viptime, 4));
		    }
		}
		case THREAD_LOAD_ATMS:
		{
		    for(new i = 0; i < rows && i < MAX_ATMS; i ++)
		    {
		        AtmInfo[i][aID] = cache_get_field_content_int(i, "id");
		        AtmInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        AtmInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	AtmInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	AtmInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				AtmInfo[i][aExists] = true;
				ReloadAtm(i);
			}
			printf("[Script] %i atms loaded", (rows < MAX_ATMS) ? (rows) : (MAX_ATMS));
		}
		case THREAD_REMOVE_VIP:
		{
		    printf("[Script] %i vips removed.", rows);
		}
		case THREAD_LOAD_PLAYERBACKPACK:
		{
			new szField[64];
		    for(new i = 0; i < rows && i < MAX_BACKPACKS; i ++)
		    {
				BackpackInfo[i][bBackpackOwner] = -1;
				BackpackInfo[i][bBackpackSize] = 0;
				BackpackInfo[i][bHouseStored] = 0;
				BackpackInfo[i][bVehicleStored] = 0;
				BackpackInfo[i][bCash] = 0;
				BackpackInfo[i][bPot] = 0;
				BackpackInfo[i][bCrack] = 0;
				BackpackInfo[i][bMats] = 0;
				for(new weaponid; weaponid<MAX_STOREGUN; weaponid++) {
					BackpackInfo[i][bGun][weaponid] = 0;
				}

		        BackpackInfo[i][bBackpackOwner] = cache_get_field_content_int(i, "BackpackOwner");
		        BackpackInfo[i][bBackpackSize] = cache_get_field_content_int(i, "BackpackSize");
		        BackpackInfo[i][bHouseStored] = cache_get_field_content_int(i, "HouseStored");
		        BackpackInfo[i][bVehicleStored] = cache_get_field_content_int(i, "VehicleStored");
		        BackpackInfo[i][bCash] = cache_get_field_content_int(i, "Cash");
		        BackpackInfo[i][bPot] = cache_get_field_content_int(i, "Pot");
		        BackpackInfo[i][bCrack] = cache_get_field_content_int(i, "Crack");
		        BackpackInfo[i][bMats] = cache_get_field_content_int(i, "Mats");
		        for(new weaponid; weaponid<MAX_STOREGUN; weaponid++) {
		            format(szField, sizeof(szField), "Gun%d", weaponid);
					BackpackInfo[i][bGun][weaponid] = cache_get_field_content_int(i, szField);
				}
			}

			printf("[Script] %i Player Backpacks loaded.", rows);
		}
	}
}

// ---------------------------------------
// ---- PRIVATE LS ELEVATOR FORWARDS -----
forward Elevator_Initialize();
forward Elevator_Destroy();

forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);

forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward Elevator_TurnToIdle();

forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();

forward DidPlayerRequestElevator(playerid);

forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);


public OnPlayerConnect(playerid)
{
	ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_HEALTH, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_ARMOUR, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_MONEY, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_WEAPON, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_AMMO, false);
	// check whether or not the player is using a proxy
	/*if(gDisabledVPN)
	{
		new formato[100];
		format(formato, sizeof formato, "proxy.mind-media.com/block/proxycheck.php?ip=%s", GetPlayerIP(playerid));
		HTTP(playerid, HTTP_GET, formato, "", "HTTP_ProxyCheck");
	}*/
	if(IsPlayerNPC(playerid)) return 1;

	Maskara[playerid] = 0;

	// Default values are handled via MySQL. Don't assign default values here.
	//(playerid);
	CourierDuty[playerid] = 0;
	PlayerInfo[playerid][pCourierQueue] = 0;
	PlayerInfo[playerid][pCourierBiz] = -1;
	PlayerInfo[playerid][pCourierDelivered] = 0;
	PlayerInfo[playerid][pHoldingBox] = 0;
	PlayerInfo[playerid][pHoldingPizza] = 0;
	PlayerInfo[playerid][pPizzaHouse] = -1;
	PlayerInfo[playerid][pPizzaQueue] = 0;
	PlayerInfo[playerid][pPizzasDelivered] = 0;
	PizzaDuty[playerid] = 0;
	FarmerDuty[playerid] = 0;
	PlayerInfo[playerid][pParkAssasination] = 0;
    PlayerInfo[playerid][pGraffiti] = -1;
    PlayerInfo[playerid][pGraffitiTime] = 0;
    PlayerInfo[playerid][pGraffitiColor] = 0;
    PlayerInfo[playerid][pEditGraffiti] = -1;
	PlayerInfo[playerid][pID] = 0;
	PlayerInfo[playerid][pLogged] = 0;
	PlayerInfo[playerid][pvLock] = 0;
	PlayerInfo[playerid][pKicked] = 0;
	PlayerInfo[playerid][pLoginTries] = 0;
	PlayerInfo[playerid][pSetup] = 0;
	PlayerInfo[playerid][pGender] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pSkin] = 0;
	PlayerInfo[playerid][pCameraX] = 0;
	PlayerInfo[playerid][pCameraY] = 0;
	PlayerInfo[playerid][pCameraZ] = 0;
	PlayerInfo[playerid][pPosX] = 0;
	PlayerInfo[playerid][pPosY] = 0;
	PlayerInfo[playerid][pPosZ] = 0;
	PlayerInfo[playerid][pPosA] = 0;
	PlayerInfo[playerid][pInterior] = 0;
	PlayerInfo[playerid][pWorld] = 0;
	PlayerInfo[playerid][pCash] = 200;
	PlayerInfo[playerid][pBank] = 0;
	PlayerInfo[playerid][pPaycheck] = 0;
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pGraphic] = 0;
	PlayerInfo[playerid][pPasswordChanged] = 0;
	PlayerInfo[playerid][pEXP] = 0;
	PlayerInfo[playerid][pMinutes] = 0;
	PlayerInfo[playerid][pHours] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pAdminName] = 0;
	PlayerInfo[playerid][pHelper] = 0;
	PlayerInfo[playerid][pHealth] = 100.0;
	PlayerInfo[playerid][pArmor] = 0.0;
	PlayerInfo[playerid][pHunger] = 0;
	PlayerInfo[playerid][pThirsty] = 0;
	PlayerInfo[playerid][pUpgradePoints] = 0;
	PlayerInfo[playerid][pWarnings] = 0;
	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pHospital] = 0;
	PlayerInfo[playerid][pSpawnHealth] = 50.0;
	PlayerInfo[playerid][pSpawnArmor] = 0;
	PlayerInfo[playerid][pJailType] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pNewbieMuted] = 0;
	PlayerInfo[playerid][pHelpMuted] = 0;
	PlayerInfo[playerid][pAdMuted] = 0;
	PlayerInfo[playerid][pLiveMuted] = 0;
	PlayerInfo[playerid][pGlobalMuted] = 0;
	PlayerInfo[playerid][pReportMuted] = 0;
	PlayerInfo[playerid][pReportWarns] = 0;
	PlayerInfo[playerid][pFightStyle] = 0;
	PlayerInfo[playerid][pAccent] = 0;
	PlayerInfo[playerid][pCookies] = 0;
	PlayerInfo[playerid][pPhone] = 0;
	PlayerInfo[playerid][pJob] = JOB_NONE;
	PlayerInfo[playerid][pSecondJob] = JOB_NONE;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pMaterials] = 0;
	PlayerInfo[playerid][pWeed] = 0;
	PlayerInfo[playerid][pCocaine] = 0;
	PlayerInfo[playerid][pMeth] = 0;
	PlayerInfo[playerid][pPainkillers] = 0;
	PlayerInfo[playerid][pSeeds] = 0;
	PlayerInfo[playerid][pEphedrine] = 0;
	PlayerInfo[playerid][pMuriaticAcid] = 0;
	PlayerInfo[playerid][pBakingSoda] = 0;
	PlayerInfo[playerid][pCigars] = 0;
	PlayerInfo[playerid][pWalkieTalkie] = 0;
	PlayerInfo[playerid][pChannel] = 0;
	PlayerInfo[playerid][pRentingHouse] = 0;
	PlayerInfo[playerid][pSpraycans] = 0;
	PlayerInfo[playerid][pBoombox] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pMP3Player] = 0;
	PlayerInfo[playerid][pPhonebook] = 0;
	PlayerInfo[playerid][pFishingRod] = 0;
	PlayerInfo[playerid][pFishingBait] = 0;
	PlayerInfo[playerid][pFishWeight] = 0;
	PlayerInfo[playerid][pComponents] = 0;
	PlayerInfo[playerid][pCourierSkill] = 0;
	PlayerInfo[playerid][pFishingSkill] = 0;
	PlayerInfo[playerid][pGuardSkill] = 0;
	PlayerInfo[playerid][pWeaponSkill] = 0;
	PlayerInfo[playerid][pLawyerSkill] = 0;
	PlayerInfo[playerid][pSmugglerSkill] = 0;
	PlayerInfo[playerid][pToggleTextdraws] = 0;
	PlayerInfo[playerid][pToggleOOC] = 0;
	PlayerInfo[playerid][pTogglePhone] = 0;
	PlayerInfo[playerid][pToggleAdmin] = 0;
	PlayerInfo[playerid][pToggleHelper] = 0;
	PlayerInfo[playerid][pToggleNewbie] = 0;
	PlayerInfo[playerid][pToggleWT] = 0;
	PlayerInfo[playerid][pToggleRadio] = 0;
	PlayerInfo[playerid][pToggleVIP] = 0;
	PlayerInfo[playerid][pToggleMusic] = 0;
	PlayerInfo[playerid][pToggleFaction] = 0;
	PlayerInfo[playerid][pToggleGang] = 0;
	PlayerInfo[playerid][pToggleNews] = 0;
	PlayerInfo[playerid][pToggleGlobal] = 1;
	PlayerInfo[playerid][pToggleCam] = 0;
	PlayerInfo[playerid][pCarLicense] = 0;
	PlayerInfo[playerid][pGunLicense] = 0;
	PlayerInfo[playerid][pVIPPackage] = 0;
	PlayerInfo[playerid][pVIPTime] = 0;
	PlayerInfo[playerid][pVIPCooldown] = 0;
	PlayerInfo[playerid][pWeapons] = 0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pFactionRank] = 0;
	PlayerInfo[playerid][pFactionID] = 0;
	PlayerInfo[playerid][pGang] = 0;
	PlayerInfo[playerid][pGangRank] = 0;
	PlayerInfo[playerid][pDivision] = 0;
	PlayerInfo[playerid][pCrew] = 0;
	PlayerInfo[playerid][pContracted] = 0;
	PlayerInfo[playerid][pContractBy] = 0;
	PlayerInfo[playerid][pBombs] = 0;
	PlayerInfo[playerid][pCompletedHits] = 0;
	PlayerInfo[playerid][pFailedHits] = 0;
	PlayerInfo[playerid][pReports] = 0;
	PlayerInfo[playerid][pNewbies] = 0;
	PlayerInfo[playerid][pHelpRequests] = 0;
	PlayerInfo[playerid][pSpeedometer] = 0;
	PlayerInfo[playerid][pFactionMod] = 0;
	PlayerInfo[playerid][pWebDev] = 0;
	PlayerInfo[playerid][pGangMod] = 0;
	PlayerInfo[playerid][pBanAppealer] = 0;
	PlayerInfo[playerid][pHelperManager] = 0;
	PlayerInfo[playerid][pAdminPersonnel] = 0;
	PlayerInfo[playerid][pGameAffairs] = 0;
	PlayerInfo[playerid][pWebDev] = 0;
	PlayerInfo[playerid][pComplaintMod] = 0;
	PlayerInfo[playerid][pHumanResources] = 0;
	PlayerInfo[playerid][pHelperManager] = 0;
	PlayerInfo[playerid][pDeveloper] = 0;
	PlayerInfo[playerid][pWeedPlanted] = 0;
	PlayerInfo[playerid][pWeedTime] = 0;
	PlayerInfo[playerid][pWeedGrams] = 0;
	PlayerInfo[playerid][pWeedX] = 0;
	PlayerInfo[playerid][pWeedY] = 0;
	PlayerInfo[playerid][pWeedZ] = 0;
	PlayerInfo[playerid][pWeedA] = 0;
	PlayerInfo[playerid][pInventoryUpgrade] = 0;
	PlayerInfo[playerid][pAddictUpgrade] = 0;
	PlayerInfo[playerid][pTraderUpgrade] = 0;
	PlayerInfo[playerid][pAssetUpgrade] = 0;

	PlayerInfo[playerid][pLastReport] = 0;
	PlayerInfo[playerid][pLastNewbie] = 0;
	PlayerInfo[playerid][pLastRequest] = 0;
	PlayerInfo[playerid][pLastPay] = 0;
	PlayerInfo[playerid][pLastRepair] = 0;
	PlayerInfo[playerid][pLastRefuel] = 0;
	PlayerInfo[playerid][pLastDrug] = 0;
	PlayerInfo[playerid][pLastSell] = 0;
	PlayerInfo[playerid][pLastEnter] = 0;
	PlayerInfo[playerid][pLastPress] = 0;
	PlayerInfo[playerid][pLastDeath] = 0;
	PlayerInfo[playerid][pLastDesync] = 0;
	PlayerInfo[playerid][pLastGlobal] = 0;
	PlayerInfo[playerid][pFPS] = 0;
	PlayerInfo[playerid][pDrunkLevel] = 0;
	PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pAdminDuty] = 0;
	PlayerInfo[playerid][pActiveReport] = -1;
	PlayerInfo[playerid][pHospitalTime] = 0;
	PlayerInfo[playerid][pListen] = 0;
	PlayerInfo[playerid][pJoinedEvent] = 0;
	PlayerInfo[playerid][pPaintball] = 0;
	PlayerInfo[playerid][pPaintballTeam] = -1;
	PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pEventTeam] = 0;
	PlayerInfo[playerid][pAwaitingClothing] = 0;
	PlayerInfo[playerid][pTutorial] = 0;
	PlayerInfo[playerid][pFreezeTimer] = -1;
	PlayerInfo[playerid][pNameChange][0] = 0;
	PlayerInfo[playerid][pHelpRequest][0] = 0;
	PlayerInfo[playerid][pAcceptedHelp] = 0;
	PlayerInfo[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pBizOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pVestOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pCarOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLandOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pAllianceOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pWarOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pDuelOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pEditType] = 0;
    PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pFurniturePerms] = -1;
    PlayerInfo[playerid][pLandPerms] = -1;
	PlayerInfo[playerid][pPizzas] = 0;
	PlayerInfo[playerid][pLastPizza] = 0;
	PlayerInfo[playerid][pLastStuck] = 0;
	PlayerInfo[playerid][pLastUpdate] = 0;
	PlayerInfo[playerid][pLastLoad] = 0;
	PlayerInfo[playerid][pLastBet] = 0;
	PlayerInfo[playerid][pLastShot] = 0;
	PlayerInfo[playerid][pCBug] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	PlayerInfo[playerid][pShipment] = -1;
	PlayerInfo[playerid][pFishTime] = 0;
	PlayerInfo[playerid][pUsedBait] = 0;
	PlayerInfo[playerid][pSmuggleMats] = 0;
	PlayerInfo[playerid][pSmuggleTime] = 0;
	PlayerInfo[playerid][pSmuggleDrugs] = 0;
	PlayerInfo[playerid][pRefuel] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pCallLine] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pAFK] = 0;
    PlayerInfo[playerid][pAFKTime] = 0;
	PlayerInfo[playerid][pLoopAnim] = 0;
	PlayerInfo[playerid][pMiningTime] = 0;
	PlayerInfo[playerid][pMiningRock] = 0;
	PlayerInfo[playerid][pDrivingTest] = 0;
    PlayerInfo[playerid][pSweeping] = 0;
	PlayerInfo[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	PlayerInfo[playerid][pTagType] = TAG_NONE;
	PlayerInfo[playerid][pVIPColor] = 0;
    PlayerInfo[playerid][pTaxiFare] = 0;
    PlayerInfo[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pTaxiBill] = 0;
    PlayerInfo[playerid][pTaxiTime] = 0;
    PlayerInfo[playerid][pFaction] = -1;
    PlayerInfo[playerid][pFactionRank] = 0;
    PlayerInfo[playerid][pFactionID] = 0;
    PlayerInfo[playerid][pGang] = -1;
    PlayerInfo[playerid][pGangRank] = 0;
	PlayerInfo[playerid][pDuty] = 0;
	PlayerInfo[playerid][pBackup] = 0;
	PlayerInfo[playerid][pTazer] = 0;
	PlayerInfo[playerid][pTazedTime] = 0;
	PlayerInfo[playerid][pCuffed] = 0;
	PlayerInfo[playerid][pTied] = 0;
	PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSkinSelected] = -1;
	PlayerInfo[playerid][pReceivingAid] = 0;
    PlayerInfo[playerid][pDelivered] = 0;
    PlayerInfo[playerid][pPlantedBomb] = 0;
    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pContractTaken] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSpamTime] = 0;
    PlayerInfo[playerid][pMuted] = 0;
    PlayerInfo[playerid][pBoomboxPlaced] = 0;
    PlayerInfo[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pBoomboxListen] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pZonePickups][0] = -1;
    PlayerInfo[playerid][pZonePickups][1] = -1;
    PlayerInfo[playerid][pZonePickups][2] = -1;
    PlayerInfo[playerid][pZonePickups][3] = -1;
    PlayerInfo[playerid][pZoneID] = -1;
    PlayerInfo[playerid][pZoneCreation] = 0;
    PlayerInfo[playerid][pShowLands] = 0;
    PlayerInfo[playerid][pShowTurfs] = 0;
    PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
    PlayerInfo[playerid][pFreeNamechange] = 0;
	PlayerInfo[playerid][pVehicleKeys] = INVALID_VEHICLE_ID;
    PlayerInfo[playerid][pCurrentWeapon] = 0;
    PlayerInfo[playerid][pCurrentAmmo] = 0;
    PlayerInfo[playerid][pCurrentVehicle] = 0;
    PlayerInfo[playerid][pVehicleCount] = 0;
    PlayerInfo[playerid][pACWarns] = 0;
    PlayerInfo[playerid][pACTime] = 0;
    PlayerInfo[playerid][pArmorTime] = 0;
    PlayerInfo[playerid][pACFired] = 0;
    PlayerInfo[playerid][pWeedObject] = INVALID_OBJECT_ID;
    PlayerInfo[playerid][pPickPlant] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pPickTime] = 0;
    PlayerInfo[playerid][pCookMeth] = 0;
    PlayerInfo[playerid][pCookTime] = 0;
    PlayerInfo[playerid][pCookGrams] = 0;
    PlayerInfo[playerid][pDrugsUsed] = 0;
    PlayerInfo[playerid][pDrugsTime] = 0;
    PlayerInfo[playerid][pBandana] = 0;
	PlayerInfo[playerid][pCapturingPoint] = -1;
	PlayerInfo[playerid][pCaptureTime] = 0;
	PlayerInfo[playerid][pWatchingIntro] = 0;
	PlayerInfo[playerid][pLoginCamera] = 0;
	PlayerInfo[playerid][pPoisonTime] = 0;
	PlayerInfo[playerid][pJetpack] = 0;
    PlayerInfo[playerid][pWatchOn] = 0;
    PlayerInfo[playerid][pGPSOn] = 0;
    PlayerInfo[playerid][pTextFrom] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pWhisperFrom] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pTaxiCall] = 0;
    PlayerInfo[playerid][pEmergencyCall] = 0;
	PlayerInfo[playerid][pClip] = 0;
	PlayerInfo[playerid][pReloading] = 0;
    PlayerInfo[playerid][pFindTime] = 0;
    PlayerInfo[playerid][pFindPlayer] = INVALID_PLAYER_ID;
    PlayerInfo[playerid][pRobCash] = 0;
	PlayerInfo[playerid][pLootTime] = 0;
    PlayerInfo[playerid][pRemoveFrom] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pSniper] = 0;
	PlayerInfo[playerid][pLockBreak] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pLockTimer] = 0;
	PlayerInfo[playerid][pLockText] = Text3D:INVALID_3DTEXT_ID;
    PlayerInfo[playerid][pAnimation] = 0;
	PlayerInfo[playerid][pDropTime] = 0;
    PlayerInfo[playerid][pCocaineTime] = 0;
	PlayerInfo[playerid][pCocaineFrom] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pLastFire] = 0;
    PlayerInfo[playerid][pRapidFire] = 0;
    PlayerInfo[playerid][pGodmode] = 0;
    PlayerInfo[playerid][pGodmodeHP] = 100.0;
    PlayerInfo[playerid][pGodmodeAP] = 0.0;
	PlayerInfo[playerid][pNOPTime] = 0;
    PlayerInfo[playerid][pPreviewHouse] = -1;
    PlayerInfo[playerid][pPreviewType] = 0;
    PlayerInfo[playerid][pPreviewTime] = 0;
    PlayerInfo[playerid][pDamageTimer] = -1;
    PlayerInfo[playerid][pHHCheck] = 0;
	PlayerInfo[playerid][pHHTime] = 0;
	PlayerInfo[playerid][pHHRounded] = 0;
	PlayerInfo[playerid][pHHCount] = 0;
	PlayerInfo[playerid][pNoDamage] = 0;
	PlayerInfo[playerid][pGovTimer] = 0;
	PlayerInfo[playerid][pGodshand] = 0;
	PlayerInfo[playerid][pUndercover][0] = 0;
    PlayerInfo[playerid][pUndercover][1] = 0;
	PlayerInfo[playerid][pUndercoverHP] = 0.0;
	PlayerInfo[playerid][pUndercoverAR] = 0.0;
	PlayerInfo[playerid][pHurt] = 0;
	PlayerInfo[playerid][pBugged] = 0;
	PlayerInfo[playerid][pSkates] = 0;
	PlayerInfo[playerid][pSkateObj] = 0;
	PlayerInfo[playerid][pSkating] = false;
	PlayerInfo[playerid][pOil] = 0;
	PlayerInfo[playerid][pCreatingPoll] = 0;
	PlayerInfo[playerid][pAnsweredPoll] = 0;
	PlayerInfo[playerid][pRareTime] = 0;
	PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pHunted] = 0;
	PlayerInfo[playerid][pHuntKilled] = 0;
	PlayerInfo[playerid][pDiamonds] = 0;
	PlayerInfo[playerid][pDeleteMode] = 0;
	PlayerInfo[playerid][pAdvertWarnings] = 0;
	PlayerInfo[playerid][pNoKnife] = 0;
	PlayerInfo[playerid][pExecute] = 0;
	PlayerInfo[playerid][pMarriedTo] = 0;
	PlayerInfo[playerid][pStationEdit] = 0;
	PlayerInfo[playerid][pRobbingBiz] = -1;
	PlayerInfo[playerid][pAdminFrozen] = 0;
	ExBJck[playerid] = 0;
	isPMOff[playerid] = false;

	aimWarnings[playerid] = 0;
	PayCheckCode[playerid] = 0;

	// - RemoveObject
	RemoveBuildingForPlayer(playerid, 3573, 1798.6484, -2057.9141, 14.9844, 0.25); // - TRUCKINGRemoveBuildingForPlayer(playerid, 3573, 1798.6484, -2057.9141, 14.9844, 0.25);

    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    chattingWith[playerid]{i} = false;
	}

	for(new i = 0; i < 13; i ++)
	{
	    PlayerInfo[playerid][pWeapons][i] = 0;
	    PlayerInfo[playerid][pTempWeapons][i] = 0;
	}

	for(new i = 0; i < 3; i ++)
	{
	    MarkedPositions[playerid][i][mPosX] = 0.0;
	    MarkedPositions[playerid][i][mPosY] = 0.0;
	    MarkedPositions[playerid][i][mPosZ] = 0.0;
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cExists] = 0;
	    ClothingInfo[playerid][i][cID] = 0;
	    ClothingInfo[playerid][i][cName] = 0;
	    ClothingInfo[playerid][i][cModel] = 0;
	    ClothingInfo[playerid][i][cBone] = 0;
	    ClothingInfo[playerid][i][cAttached] = 0;
	    ClothingInfo[playerid][i][cAttachedIndex] = -1;
	}
	backpackid[playerid] = MAX_BACKPACKS+1;
	// Reset the player's client attributes.
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
		}
	}


    CSInfo[1][CSPostion][0] = -1823.619506, CSInfo[1][CSPostion][1] = -2184.968261,CSInfo[1][CSPostion][2] = 77.896224;
    CSInfo[2][CSPostion][0]  = -1858.775146, CSInfo[2][CSPostion][1] = -1843.905273,CSInfo[2][CSPostion][2] = 81.689292;
    CSInfo[3][CSPostion][0]  = -1520.394531, CSInfo[3][CSPostion][1] = -1520.394531,CSInfo[3][CSPostion][2] = 50.607093;
    CSInfo[4][CSPostion][0]  = -1632.578002, CSInfo[4][CSPostion][1] = -2357.620361,CSInfo[4][CSPostion][2] = 45.693874;
    CSInfo[5][CSPostion][0]  = -1689.200927, CSInfo[5][CSPostion][1] = -2431.744384,CSInfo[5][CSPostion][2] = 101.736457;
    CSInfo[6][CSPostion][0]  = -1882.560791, CSInfo[6][CSPostion][1] = -2469.221191,CSInfo[6][CSPostion][2] = 32.500949; 
    CSInfo[7][CSPostion][0]  = -2036.135620, CSInfo[7][CSPostion][1] = -2010.388061,CSInfo[7][CSPostion][2] = 79.161819;
    CSInfo[8][CSPostion][0]  = -1454.682373, CSInfo[8][CSPostion][1] = -1787.760986,CSInfo[8][CSPostion][2] = 46.551845;
    CSInfo[9][CSPostion][0]  = -1699.436889, CSInfo[9][CSPostion][1] = -1957.629882,CSInfo[9][CSPostion][2] = 101.569534;
    CSInfo[10][CSPostion][0] = -1746.821533, CSInfo[10][CSPostion][1] = -2359.650146,CSInfo[10][CSPostion][2] = 59.424171;
    CSInfo[11][CSPostion][0]  = -1704.570434, CSInfo[11][CSPostion][1] = -2602.213623,CSInfo[11][CSPostion][2] = 32.692611;
    CSInfo[12][CSPostion][0]  = -1420.282226, CSInfo[12][CSPostion][1] = -2591.811523,CSInfo[12][CSPostion][2] = 65.288009;
    CSInfo[13][CSPostion][0]  = -1391.704711, CSInfo[13][CSPostion][1] = -2064.522216,CSInfo[13][CSPostion][2] = 31.381397;
    CSInfo[14][CSPostion][0]  = -1265.051391, CSInfo[14][CSPostion][1] = -977.1107,CSInfo[14][CSPostion][2] = 21.319282;
    for(new i = 1; i < 15 ; i++) {
        CSInfo[i][CanSaID] = i;
        CSInfo[i][CanSaSet] = 1;
        printf("[%d] %f %f %f", i, CSInfo[i][CSPostion][0] ,CSInfo[i][CSPostion][1] ,CSInfo[i][CSPostion][2]);
        CSInfo[i][CSObj] = CreateObject(19473, CSInfo[i][CSPostion][0] ,CSInfo[i][CSPostion][1] ,CSInfo[i][CSPostion][2], 0,0,0, 5);
    }

	for(new i;i<MAX_COWS;i++)
	{
		Cows[i][cowName] = CreateDynamic3DTextLabel("Bo Shorthorn", COLOR_LIGHTRED, Cows[i][cPos_X], Cows[i][cPos_Y], Cows[i][cPos_Z], 10.0);
	}
    /*if(!BobTheBuilder[playerid])
	{
		DestroyAllBuildings(playerid);
	}
	BobTheBuilder[playerid] = 0;
	*/
	ResetPlayerWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);
 	// 						Paintball
	//	Deagle Float:minx, Float:miny, Float:maxx, Float:maxy)
	zone_paintball[0] = GangZoneCreateEx(1287.0806, 2055.0513, 1487.7770, 2275.3984);
	area_paintball[0] = CreateDynamicRectangle(1287.0806, 2055.0513, 1487.7770, 2275.3984);
	// 	Sniper
	zone_paintball[1] = GangZoneCreateEx(-2591.2288, -1814.2455, -2178.9082, -1394.5500);
	area_paintball[1] = CreateDynamicRectangle(-2591.2288, -1814.2455, -2178.9082, -1394.5500);
    //Innclude
	// GPS
	PlayerInfo[playerid][pText][0] = CreatePlayerTextDraw(playerid, 88.000000, 323.000000, "Dang Tai...");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][0], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][0], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][0], 0.260000, 1.300000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][0], 1);

	/*
	// Speedometer
	PlayerInfo[playerid][pText][1] = CreatePlayerTextDraw(playerid, 552.000000, 382.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][1], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][1], 1);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][1], 0.519999, 5.500000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][1], 1);
	PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][1], 1);
	PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][1], 85);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][1], 628.000000, 0.000000);

	PlayerInfo[playerid][pText][2] = CreatePlayerTextDraw(playerid, 554.000000, 384.000000, "~b~~h~Speed:~w~ 100 km/h~n~~b~~h~Fuel:~w~ 100%~n~~b~~h~Damage:~w~ 50%~n~~b~~h~Doors:~w~ Locked");
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][2], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][2], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][2], 0.169999, 1.200000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][2], 1);
	*/
	// HP & armor
	PlayerInfo[playerid][pText][3] = CreatePlayerTextDraw(playerid, 577.000000, 43.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][3], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][3], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][3], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][3], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][3], 1);

	PlayerInfo[playerid][pText][4] = CreatePlayerTextDraw(playerid, 577.000000, 65.500000, "100");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][4], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][4], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][4], 2);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][4], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][4], 1);

	// Ammo notification
	PlayerInfo[playerid][pText][5] = CreatePlayerTextDraw(playerid, 521.000000, 63.000000, "");
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pText][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][5], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][5], 0.270000, 1.300000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][5], -1446714113);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][5], 1);

	// Achievements
	PlayerInfo[playerid][pText][6] = CreatePlayerTextDraw(playerid, 502.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][6], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][6], 0.500000, 4.500000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][6], 0);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][6], 1);
	PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][6], 1);
	PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][6], 102);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][6], 611.000000, 0.000000);

	PlayerInfo[playerid][pText][7] = CreatePlayerTextDraw(playerid, 502.000000, 116.000000, "LD_DRV:gold");
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][7], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][7], 4);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][7], 0);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pText][7], 1);
	PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][pText][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][pText][7], 255);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pText][7], 31.000000, 33.000000);

	PlayerInfo[playerid][pText][8] = CreatePlayerTextDraw(playerid, 499.000000, 99.000000, "Thanh Tuu");
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][8], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][8], 0);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][8], 0.409999, 1.700000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][8], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][8], 1);

	PlayerInfo[playerid][pText][9] = CreatePlayerTextDraw(playerid, 539.000000, 121.000000, "~g~~h~~h~First wheels");
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pText][9], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pText][9], 1);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pText][9], 0.230000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pText][9], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pText][9], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pText][9], 1);

	Streamer_ToggleIdleUpdate(playerid, true);
	GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME);

    LoadTextdraw(playerid);
    LoadMap();


	gConnections++;
    SaveServerInfo();
	// ANTI FLOOD
	GetPlayerIp(playerid, ipa, sizeof(ipa));
    UserMaxConnect[playerid] = 0;
    SetTimerEx("CheckIfFlood", 1000, true, "i", playerid);
    return 1;

}
public OnGameModeInit()
{
	//UsePlayerPedAnims(); //cj running style
	new string[128];

    AntiDeAMX();
	GiftAllowed = 1;
    SetVehiclePassengerDamage(true);
    SetDisableSyncBugs(true);
    SetDamageFeed(false);
    SetDamageSounds(false, false);
    ManualVehicleEngineAndLights();

    //EnableVehicleFriendlyFire();
	//SetCustomFallDamage(true, 25.0, -0.6);
    SetCbugAllowed(false);
	connectionID = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, MYSQL_DATABASE, MYSQL_PASSWORD);

	if(mysql_errno(connectionID))
	{
	    print("[LOI] - Khong the thiet lap ket noi voi MYSQL...");
	    SendRconCommand("exit");
	    return 0;
	}

    radioConnectionID = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, "nrp", MYSQL_PASSWORD);

	if(mysql_errno(radioConnectionID))
	{
	    print("[CANH BAO] - Khong the ket noi voi co so du lieu... may chu se tiep tuc binh thuong.");
	    radioConnectionID = 0;
	}

	for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    ResetVehicle(i);
	}
	/*
    Textdraw0 = TextDrawCreate(635.599975, 174.726654, "usebox");
    TextDrawLetterSize(Textdraw0, 0.000000, 3.665556);
    TextDrawTextSize(Textdraw0, 525.200012, 0.000000);
    TextDrawAlignment(Textdraw0, 1);
    TextDrawColor(Textdraw0, 0);
    TextDrawUseBox(Textdraw0, true);
    TextDrawBoxColor(Textdraw0, 102);
    TextDrawSetShadow(Textdraw0, 0);
    TextDrawSetOutline(Textdraw0, 0);
    TextDrawFont(Textdraw0, 0);

    Textdraw1 = TextDrawCreate(526.400024, 172.479995, "LD_SPAC:white");
    TextDrawLetterSize(Textdraw1, 0.000000, 0.000000);
    TextDrawTextSize(Textdraw1, 1.599975, 40.320007);
    TextDrawAlignment(Textdraw1, 1);
    TextDrawColor(Textdraw1, -5963521);
    TextDrawSetShadow(Textdraw1, 0);
    TextDrawSetOutline(Textdraw1, 0);
    TextDrawFont(Textdraw1, 4);

    Textdraw2 = TextDrawCreate(526.400024, 212.800003, "LD_SPAC:white");
    TextDrawLetterSize(Textdraw2, 0.000000, 0.000000);
    TextDrawTextSize(Textdraw2, 106.399963, -1.493331);
    TextDrawAlignment(Textdraw2, 1);
    TextDrawColor(Textdraw2, -5963521);
    TextDrawSetShadow(Textdraw2, 0);
    TextDrawSetOutline(Textdraw2, 0);
    TextDrawFont(Textdraw2, 4);

    Textdraw3 = TextDrawCreate(632.799987, 172.479995, "LD_SPAC:white");
    TextDrawLetterSize(Textdraw3, 0.000000, 0.000000);
    TextDrawTextSize(Textdraw3, 1.599975, 40.320007);
    TextDrawAlignment(Textdraw3, 1);
    TextDrawColor(Textdraw3, -5963521);
    TextDrawSetShadow(Textdraw3, 0);
    TextDrawSetOutline(Textdraw3, 0);
    TextDrawFont(Textdraw3, 4);

    Textdraw4 = TextDrawCreate(633.599975, 180.693328, "LD_SPAC:white");
    TextDrawLetterSize(Textdraw4, 0.000000, 0.000000);
    TextDrawTextSize(Textdraw4, -107.199951, -8.959991);
    TextDrawAlignment(Textdraw4, 1);
    TextDrawColor(Textdraw4, -5963521);
    TextDrawSetShadow(Textdraw4, 0);
    TextDrawSetOutline(Textdraw4, 0);
    TextDrawFont(Textdraw4, 4);

    Textdraw5 = TextDrawCreate(553.599975, 170.239990, "SERVER");
    TextDrawLetterSize(Textdraw5, 0.425999, 1.114666);
    TextDrawAlignment(Textdraw5, 1);
    TextDrawColor(Textdraw5, -1);
    TextDrawSetShadow(Textdraw5, 0);
    TextDrawSetOutline(Textdraw5, 1);
    TextDrawBackgroundColor(Textdraw5, 51);
    TextDrawFont(Textdraw5, 1);
    TextDrawSetProportional(Textdraw5, 1);

    Textdraw6 = TextDrawCreate(530.399963, 181.439956, "Unknown Command");
    TextDrawLetterSize(Textdraw6, 0.288399, 1.032533);
    TextDrawAlignment(Textdraw6, 1);
    TextDrawColor(Textdraw6, -1);
    TextDrawSetShadow(Textdraw6, 0);
    TextDrawSetOutline(Textdraw6, 1);
    TextDrawBackgroundColor(Textdraw6, 51);
    TextDrawFont(Textdraw6, 1);
    TextDrawSetProportional(Textdraw6, 1);

    Textdraw7 = TextDrawCreate(533.600036, 189.653198, "To list commands");
    TextDrawLetterSize(Textdraw7, 0.293199, 0.965332);
    TextDrawAlignment(Textdraw7, 1);
    TextDrawColor(Textdraw7, -1);
    TextDrawSetShadow(Textdraw7, 0);
    TextDrawSetOutline(Textdraw7, 1);
    TextDrawBackgroundColor(Textdraw7, 51);
    TextDrawFont(Textdraw7, 1);
    TextDrawSetProportional(Textdraw7, 1);

    Textdraw8 = TextDrawCreate(552.799987, 195.626693, "/help");
    TextDrawLetterSize(Textdraw8, 0.325999, 1.077333);
    TextDrawAlignment(Textdraw8, 1);
    TextDrawColor(Textdraw8, -1);
    TextDrawSetShadow(Textdraw8, 0);
    TextDrawSetOutline(Textdraw8, 1);
    TextDrawBackgroundColor(Textdraw8, 51);
    TextDrawFont(Textdraw8, 1);
    TextDrawSetProportional(Textdraw8, 1);*/
    for(new index = 0; index<MAX_BACKPACKS; index++)
	{
	    BackpackInfo[index][bBackpackOwner] = -1;
	    BackpackInfo[index][bBackpackSize] = 0;
	    BackpackInfo[index][bCash] = 0;
	    BackpackInfo[index][bPot] = 0;
	    BackpackInfo[index][bCrack] = 0;
	    BackpackInfo[index][bMats] = 0;
	    BackpackInfo[index][bHouseStored] = 0;
	    BackpackInfo[index][bVehicleStored] = 0;
	    for(new gunid = 0; gunid < MAX_STOREGUN; gunid++)  {BackpackInfo[index][bGun][gunid] = 0;}

	}


	mysql_tquery(connectionID, "TRUNCATE TABLE shots");
	mysql_tquery(connectionID, "SELECT * FROM houses", "OnQueryFinished", "ii", THREAD_LOAD_HOUSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM furniture", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, 0);
	mysql_tquery(connectionID, "SELECT * FROM garages", "OnQueryFinished", "ii", THREAD_LOAD_GARAGES, 0);
	mysql_tquery(connectionID, "SELECT * FROM `graffiti`", "Graffiti_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM `speedcameras`", "Speed_Load", "");
    mysql_tquery(connectionID, "SELECT * FROM `gunracks`", "Rack_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM businesses", "OnQueryFinished", "ii", THREAD_LOAD_BUSINESSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM entrances", "OnQueryFinished", "ii", THREAD_LOAD_ENTRANCES, 0);
	mysql_tquery(connectionID, "SELECT * FROM factions", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionranks", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionskins", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONSKINS, 0);
    mysql_tquery(connectionID, "SELECT * FROM factionpay", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONPAY, 0);
    mysql_tquery(connectionID, "SELECT * FROM divisions", "OnQueryFinished", "ii", THREAD_LOAD_DIVISIONS, 0);
    mysql_tquery(connectionID, "SELECT * FROM lands", "OnQueryFinished", "ii", THREAD_LOAD_LANDS, 0);
    mysql_tquery(connectionID, "SELECT * FROM landobjects", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, 0);
    mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE ownerid = 0", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangs", "OnQueryFinished", "ii", THREAD_LOAD_GANGS, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangranks", "OnQueryFinished", "ii", THREAD_LOAD_GANGRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM gangskins", "OnQueryFinished", "ii", THREAD_LOAD_GANGSKINS, 0);
	mysql_tquery(connectionID, "SELECT * FROM points", "OnQueryFinished", "ii", THREAD_LOAD_POINTS, 0);
	mysql_tquery(connectionID, "SELECT * FROM turfs", "OnQueryFinished", "ii", THREAD_LOAD_TURFS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionlockers", "OnQueryFinished", "ii", THREAD_LOAD_LOCKERS, 0);
    mysql_tquery(connectionID, "SELECT * FROM locations", "OnQueryFinished", "ii", THREAD_LOAD_LOCATIONS, 0);
    mysql_tquery(connectionID, "SELECT * FROM crews", "OnQueryFinished", "ii", THREAD_LOAD_CREWS, 0);
    mysql_tquery(connectionID, "SELECT * FROM atms", "OnQueryFinished", "ii", THREAD_LOAD_ATMS, 0);
    mysql_tquery(connectionID, "SELECT * FROM playerbackpack", "OnQueryFinished", "ii", THREAD_LOAD_PLAYERBACKPACK, 0);
    mysql_tquery(connectionID, "UPDATE users SET vippackage = 0, viptime = 0 WHERE viptime < UNIX_TIMESTAMP()", "OnQueryFinished", "ii", THREAD_REMOVE_VIP, 0);
	switch(random(4))
	{
	    case 0: gWeather = 13;
	    case 1: gWeather = 10;
	    case 2: gWeather = 7;
	    case 3: gWeather = 12;
	}

	SetGameModeText("NewCity "SERVER_REVISION);
	SetWeather(gWeather);
	SetNameTagDrawDistance(30.0);
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();

	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);
	//Streamer_TickRate(20);

    /*// Materials pickup 1
	CreateDynamic3DTextLabel("Materials pickup 1\nCost: $150\n/smugglemats to begin.", COLOR_YELLOW, 1421.6913, -1318.4719, 13.5547, 10.0);
	CreateDynamicPickup(1318, 1, 1421.6913, -1318.4719, 13.5547);

	// Materials pickup 2
	CreateDynamic3DTextLabel("Materials pickup 2\nCost: $150\n/smugglemats to begin.", COLOR_YELLOW, 2393.4885, -2008.5726, 13.3467, 10.0);
	CreateDynamicPickup(1318, 1, 2393.4885, -2008.5726, 13.3467);*/
    CreateDynamicPickup(1582, 1, 379.2269,-62.0940,1001.5078);
    CreateDynamic3DTextLabel("[Nha Bep]\n{FFFFFF}Nhan Y de lay banh", COLOR_LIGHTRED, 379.2269,-62.0940,1001.5078, 10.0);
    //Lay lua
    CreateDynamicPickup(2901, 1, -86.0914, -31.2349, 3.1094);
    CreateDynamic3DTextLabel("Nha Kho\n{FFFFFF}Nhan Y de lay thuc an", COLOR_LIGHTRED, -86.0914, -31.2349, 3.1094, 10.0);
    //Lay xe giao hang
    CreateDynamicPickup(1210, 1, 304.5129,-243.0556,1.5781);
    CreateDynamic3DTextLabel("Nhan N de lay xe giao hang", COLOR_YELLOW, 304.5129,-243.0556,1.5781, 10.0);
    //Lay xe pizza
    CreateDynamicPickup(1582, 1, 1373.6323,265.4795,19.5669);
    CreateDynamic3DTextLabel("Nhan N de lay xe Pizza", COLOR_YELLOW, 1373.6323,265.4795,19.5669, 10.0);
	// Hospital exit
	CreateDynamic3DTextLabel("(( /exit ))", COLOR_GREY2, -45.3173, 157.9171, 999.0613, 20.0);

	CreateDynamic3DTextLabel("County General\nGia: $500\n/buyinsurance de xuat vien o day.", COLOR_DOCTOR, -2323.3250,110.9966,-5.3942, 10.0, .worldid = HOSPITAL_COUNTY);
	CreateDynamicPickup(1240, 1, -2323.3250,110.9966,-5.3942, .worldid = HOSPITAL_COUNTY);

	CreateDynamic3DTextLabel("Red Country Hospital\nGia: $500\n/buyinsurance de xuat vien o day.", COLOR_DOCTOR, -2323.3250,110.9966,-5.3942, 10.0, .worldid = HOSPITAL_ALLSAINTS);
	CreateDynamicPickup(1240, 1, -2323.3250,110.9966,-5.3942, .worldid = HOSPITAL_ALLSAINTS);

	CreateDynamic3DTextLabel("Loading Dock\n{FFFFFF}Nhan {F3E000}N {FFFFFF}\nde lay mot thung hang.", COLOR_YELLOW, 164.0410,-54.5746,1.5781, 10.0);
	CreateDynamicPickup(1239, 1, 164.0410,-54.5746,1.5781);

	CreateDynamic3DTextLabel("Garbage Pickup\n/garbage\nde bat dau lam viec.", COLOR_YELLOW, 1622.7959,-1825.0040,13.5293, 10.0);
	CreateDynamicPickup(1239, 1, 1622.7959,-1825.0040,13.5293);

	CreateDynamic3DTextLabel("Cong Cu Sua Xe\n/buycomps de mua.", COLOR_YELLOW, 2330.0369, -2315.4553, 13.5469, 10.0);
	CreateDynamicPickup(1239, 1, 2330.0369, -2315.4553, 13.5469);

	CreateDynamic3DTextLabel("Thi Bang Lai Xe\nGia: $100\n/thibanglai de bat dau.", COLOR_YELLOW, -2033.2953, -117.4508, 1035.1719, 10.0);
	CreateDynamicPickup(1239, 1, -2033.2953, -117.4508, 1035.1719);

	CreateDynamic3DTextLabel("Grotti dealership\n/buyvehicle to view catalog.\n/upgradevehicle for upgrades.", COLOR_YELLOW, 542.0433, -1293.5909, 17.2422, 10.0);
	CreateDynamicPickup(1274, 1, 542.0433, -1293.5909, 17.2422);

	CreateDynamic3DTextLabel("Dai Ly Thuyen\n/buyvehicle de xem danh muc.", COLOR_YELLOW, 154.2223, -1946.3030, 5.1920, 10.0);
	CreateDynamicPickup(1274, 1, 154.2223, -1946.3030, 5.1920);

	CreateDynamic3DTextLabel("Dai Ly May Bay\n/buyvehicle de xem danh muc.", COLOR_YELLOW, 1892.6315, -2328.6721, 13.5469, 10.0);
	CreateDynamicPickup(1274, 1, 1892.6315, -2328.6721, 13.5469);

	CreateDynamic3DTextLabel("Paintball Arena\n/enter de choi PaintBall!", COLOR_YELLOW, 1310.1538, -1366.9827, 13.5144, 10.0);
	CreateDynamicPickup(1254, 1, 1310.1538, -1366.9827, 13.5144);

	CreateDynamic3DTextLabel("Thay doi ten\nGia: $7500/cap do\n/changename de yeu cau.", COLOR_YELLOW, 628.2476, -94.3477, -79.0754, 10.0);
	CreateDynamicPickup(1239, 1, 628.2476, -94.3477, -79.0754);

	CreateDynamic3DTextLabel("Ket Hon\nGia: $25000\n/propose de bat dau.", COLOR_YELLOW, 2240.9014, -1358.3053, 1500.9048, 10.0);
	CreateDynamicPickup(1239, 1, 2240.9014, -1358.3053, 1500.9048);

	CreateDynamic3DTextLabel("Buon Lau Ma Tuy\nGia: $500\n/smuggledrugs de bat dau buon lau.", COLOR_YELLOW, 52.0937, -292.2513, 1.7001, 10.0);
	CreateDynamicPickup(1279, 1, 52.0937, -292.2513, 1.7001);

	CreateDynamic3DTextLabel("Meth Cookoff\nYeu cau ephedrin\n/cookmeth de bat dau che bien.", COLOR_YELLOW, 1.2179, 2.8095, 999.4284, 10.0, .interiorid = 2, .worldid = 10);
	CreateDynamicPickup(1577, 1, 1.2179, 2.8095, 999.4284, .interiorid = 2, .worldid = 10);

    // VIP Lounge
    CreateDynamic3DTextLabel("Mien phi Boombox\nChi Supreme VIP\n/getboombox de lay.", COLOR_YELLOW, 1814.8076, -1297.4489, 1131.7552, 10.0);

    CreateDynamic3DTextLabel("Mien phi HP+ARM\nChi Supreme VIP\n/healup de hoi phucl.", COLOR_YELLOW, 1811.1191, -1294.0303, 1131.7552, 10.0);

    CreateDynamic3DTextLabel("Mien phi Weaps Pack\nChi Supreme VIP\n/vweapons de lay.", COLOR_YELLOW, 1813.2942, -1290.4213, 1131.7552, 10.0);

	//CreateDynamic3DTextLabel("Banking commands\n/bankhelp for more help.", COLOR_YELLOW, 1667.4260, -972.6691, 683.6873, 10.0);
	//CreateDynamicPickup(1239, 1, 1667.4260, -972.6691, 683.6873);

    CreateDynamic3DTextLabel("Tro giup Ngan Hang\nDung o day de nhan tien luong.\n/bankhelp de xem danh sach lenh.", COLOR_YELLOW, 1667.4180, -972.4201, 683.6855, 10.0);
	gPaycheck = CreateDynamicPickup(1274, 1, 1667.4180, -972.4201, 683.6855);

	gEphedrineStockText = CreateDynamic3DTextLabel("Raw ephedrine\nSo luong: 100\n/buydrug ephedrine [so luong]", COLOR_YELLOW, 323.7289, 1117.4187, 1083.8828, 10.0);
	CreateDynamicPickup(1577, 1, 323.7289, 1117.1797, 1083.8828);

	gSeedsStockText = CreateDynamic3DTextLabel("Marijuana seeds\nSo luong: 100\n/buydrug seeds [so luong]", COLOR_YELLOW, 321.8347, 1117.1797, 1083.8828, 10.0);
	CreateDynamicPickup(1578, 1, 321.8347, 1117.1797, 1083.8828);

	gCocaineText = CreateDynamic3DTextLabel("Cocaine\nSo luong: 100\n/buydrug cocaine [so luong]", COLOR_YELLOW, 2342.7766, -1187.0839, 1027.9766, 10.0);
    CreateDynamicPickup(1575, 1, 2342.7766, -1187.0839, 1027.9766);

	gVIPHealth = CreateDynamicPickup(1240, 1, 1825.3673, -1309.5450, 1131.7552, .worldid = 7, .interiorid = 3);
	gVIPArmor = CreateDynamicPickup(1242, 1, 1826.3057, -1306.8455, 1131.7552, .worldid = 7, .interiorid = 3);

	CreateDynamic3DTextLabel("/clothes\nde thay doi trang phuc.", COLOR_YELLOW, 1826.3379, -1308.8324, 1131.7552, 15.0);

    gParachutes[0] = CreateDynamicPickup(371, 1, 1542.9038, -1353.0352, 329.4744); // Star tower
	gParachutes[1] = CreateDynamicPickup(371, 1, 315.9415, 1010.6052, 1953.0031); // Andromada interior

	for(new i = 0; i < sizeof(staticEntrances); i ++)
	{
	    format(string, sizeof(string), "%s\nNhan F de vao trong.", staticEntrances[i][eName]);

	    CreateDynamicPickup(1239, 1, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ]);
	    CreateDynamic3DTextLabel(string, COLOR_GREY1, staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], 10.0);

	    if(staticEntrances[i][eMapIcon])
	    {
	        CreateDynamicMapIcon(staticEntrances[i][ePosX], staticEntrances[i][ePosY], staticEntrances[i][ePosZ], staticEntrances[i][eMapIcon], 0);
		}
	}

	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    format(string, sizeof(string), "Nhan Y de nhan cong viec\nCong viec %s.", jobLocations[i][jobName]);

	    jobLocations[i][jobActorID] = CreateActor(jobLocations[i][jobActorModel], jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], jobLocations[i][jobR]);
	    SetActorVirtualWorld(jobLocations[0][jobActorID], 1108);
	    CreateDynamic3DTextLabel(string, COLOR_YELLOW, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 10.0);
	    CreateDynamicMapIcon(jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 56, 0, .style = MAPICON_GLOBAL);
	}

	for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    CreateDynamicObject(19324, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ], 0.0, 0.0, atmMachines[i][atmA]);
	    CreateDynamic3DTextLabel("May ATM\n/atm de su dung.", COLOR_GREEN, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ] + 0.4, 10.0);
	}


	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    CreateDynamic3DTextLabel("/arrest\nde bat toi pham.", COLOR_YELLOW, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2], 7.0);
	    CreateDynamicPickup(1247, 1, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]);
	}

    /*LoadDonorObjects();
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(!IsPlayerConnected(playerid)) continue;
		BobTheBuilder[playerid] = 1;
	}*/

	// LOGIN SCREEN NEW


// here do it
	new motd[128];
	strcpy(motd, gServerMOTD);
	for(new i =0; i < sizeof(gServerMOTD); i++)
	{
	    if(motd[i] == ' ')
	    {
			motd[i] = '_';
	    }
	}


	Tutorial[0] = TextDrawCreate(529.000366, 396.818450, "usebox");
	TextDrawLetterSize(Tutorial[0], 0.000000, -14.743003);
	TextDrawTextSize(Tutorial[0], 106.999954, 0.000000);
	TextDrawAlignment(Tutorial[0], 1);
	TextDrawColor(Tutorial[0], 0);
	TextDrawUseBox(Tutorial[0], true);
	TextDrawBoxColor(Tutorial[0], 102);
	TextDrawSetShadow(Tutorial[0], 0);
	TextDrawSetOutline(Tutorial[0], 0);
	TextDrawBackgroundColor(Tutorial[0], 255);
	TextDrawFont(Tutorial[0], 0);

	Tutorial[1] = TextDrawCreate(232.666809, 265.896209, "NewCity Roleplay - Huong Dan");
	TextDrawLetterSize(Tutorial[1], 0.335000, 1.616592);
	TextDrawAlignment(Tutorial[1], 1);
	TextDrawColor(Tutorial[1], 144559871);
	TextDrawSetShadow(Tutorial[1], 0);
	TextDrawSetOutline(Tutorial[1], 1);
	TextDrawBackgroundColor(Tutorial[1], 51);
	TextDrawFont(Tutorial[1], 1);
	TextDrawSetProportional(Tutorial[1], 1);

	Tutorial[2] = TextDrawCreate(318.666717, 290.370208, "Chao mung ban den NewCity RolePlay! Cam on ban da chon chung toi. Chung toi hy vong ban thich mot cong dong nhu the nay.");
	TextDrawLetterSize(Tutorial[2], 0.195333, 1.052444);
	TextDrawAlignment(Tutorial[2], 2);
	TextDrawColor(Tutorial[2], -1);
	TextDrawSetShadow(Tutorial[2], 0);
	TextDrawSetOutline(Tutorial[2], 1);
	TextDrawBackgroundColor(Tutorial[2], 51);
	TextDrawFont(Tutorial[2], 1);
	TextDrawSetProportional(Tutorial[2], 1);

	// Time textdraw
	TimeTD = TextDrawCreate(575.000000, 20.000000, "12:34");
	TextDrawAlignment(TimeTD, 2);
	TextDrawBackgroundColor(TimeTD, 255);
	TextDrawFont(TimeTD, 3);
	TextDrawLetterSize(TimeTD, 0.430000, 1.790000);
	TextDrawColor(TimeTD, -1);
	TextDrawSetOutline(TimeTD, 1);
	TextDrawSetProportional(TimeTD, 1);

	// Animation textdraw
	AnimationTD = TextDrawCreate(435.000000, 426.000000, "Nhan ~r~~k~~PED_SPRINT~~w~ de dung hanh dong");
	TextDrawBackgroundColor(AnimationTD, 255);
	TextDrawFont(AnimationTD, 2);
	TextDrawLetterSize(AnimationTD, 0.260000, 1.299999);
	TextDrawColor(AnimationTD, -1);
	TextDrawSetOutline(AnimationTD, 1);
	TextDrawSetProportional(AnimationTD, 1);

	// Damage Informer Textdraw
	for(new i; i < MAX_PLAYERS; ++i)
	{
		Damage[i] = TextDrawCreate(198.000015, 382.874114, "Sat thuong: Ban da bi ban boi");
		TextDrawLetterSize(Damage[i], 0.213333, 1.110517);
		TextDrawAlignment(Damage[i], 1);
		TextDrawColor(Damage[i], -1);
		TextDrawSetShadow(Damage[i], 0);
		TextDrawSetOutline(Damage[i], 1);
		TextDrawBackgroundColor(Damage[i], 51);
		TextDrawFont(Damage[i], 1);
		TextDrawSetProportional(Damage[i], 1);
	}

	#if defined SERVER_INTRO
		// Server intro by Koxie
		introTextdraws[0] = TextDrawCreate(660.000000, -59.000000, "_");
		TextDrawBackgroundColor(introTextdraws[0], 255);
		TextDrawFont(introTextdraws[0], 1);
		TextDrawLetterSize(introTextdraws[0], 0.500000, 19.000000);
		TextDrawColor(introTextdraws[0], -1);
		TextDrawSetOutline(introTextdraws[0], 0);
		TextDrawSetProportional(introTextdraws[0], 1);
		TextDrawSetShadow(introTextdraws[0], 1);
		TextDrawUseBox(introTextdraws[0], 1);
		TextDrawBoxColor(introTextdraws[0], 255);
		TextDrawTextSize(introTextdraws[0], -50.000000, 0.000000);

		introTextdraws[1] = TextDrawCreate(651.000000, 338.000000, "_");
		TextDrawBackgroundColor(introTextdraws[1], 255);
		TextDrawFont(introTextdraws[1], 1);
		TextDrawLetterSize(introTextdraws[1], 0.500000, 19.000000);
		TextDrawColor(introTextdraws[1], -1);
		TextDrawSetOutline(introTextdraws[1], 0);
		TextDrawSetProportional(introTextdraws[1], 1);
		TextDrawSetShadow(introTextdraws[1], 1);
		TextDrawUseBox(introTextdraws[1], 1);
		TextDrawBoxColor(introTextdraws[1], 255);
		TextDrawTextSize(introTextdraws[1], -50.000000, 0.000000);

		introTextdraws[2] = TextDrawCreate(249.000000, 144.000000, "NewCity Roleplay");
		TextDrawBackgroundColor(introTextdraws[2], 255);
		TextDrawFont(introTextdraws[2], 2);
		TextDrawLetterSize(introTextdraws[2], 0.400000, 2.099999);
		TextDrawColor(introTextdraws[2], 144559871);
		TextDrawSetOutline(introTextdraws[2], 1);
		TextDrawSetProportional(introTextdraws[2], 1);

		introTextdraws[3] = TextDrawCreate(331.000000, 161.000000, "Qua tang...");
		TextDrawBackgroundColor(introTextdraws[3], 255);
		TextDrawFont(introTextdraws[3], 2);
		TextDrawLetterSize(introTextdraws[3], 0.300000, 1.799999);
		TextDrawColor(introTextdraws[3], -1);
		TextDrawSetOutline(introTextdraws[3], 1);
		TextDrawSetProportional(introTextdraws[3], 1);

		introTextdraws[4] = TextDrawCreate(288.000000, 156.000000, "Grand~n~ Theft~n~Auto");
		TextDrawBackgroundColor(introTextdraws[4], 255);
		TextDrawFont(introTextdraws[4], 3);
		TextDrawLetterSize(introTextdraws[4], 0.750000, 2.999999);
		TextDrawColor(introTextdraws[4], -1);
		TextDrawSetOutline(introTextdraws[4], 1);
		TextDrawSetProportional(introTextdraws[4], 1);

		introTextdraws[5] = TextDrawCreate(261.000000, 233.000000, "San Andreas");
		TextDrawBackgroundColor(introTextdraws[5], 255);
		TextDrawFont(introTextdraws[5], 0);
		TextDrawLetterSize(introTextdraws[5], 0.599999, 2.699999);
		TextDrawColor(introTextdraws[5], 144559871);
		TextDrawSetOutline(introTextdraws[5], 1);
		TextDrawSetProportional(introTextdraws[5], 1);

		introTextdraws[6] = TextDrawCreate(513.000000, 176.000000, "Management");
		TextDrawBackgroundColor(introTextdraws[6], 255);
		TextDrawFont(introTextdraws[6], 0);
		TextDrawLetterSize(introTextdraws[6], 0.579999, 2.399997);
		TextDrawColor(introTextdraws[6], 144559871);
		TextDrawSetOutline(introTextdraws[6], 1);
		TextDrawSetProportional(introTextdraws[6], 1);

		introTextdraws[7] = TextDrawCreate(555.000000, 201.000000, "Kiet Le");
		TextDrawAlignment(introTextdraws[7], 2);
		TextDrawBackgroundColor(introTextdraws[7], 255);
		TextDrawFont(introTextdraws[7], 2);
		TextDrawLetterSize(introTextdraws[7], 0.189999, 1.399997);
		TextDrawColor(introTextdraws[7], -1);
		TextDrawSetOutline(introTextdraws[7], 1);
		TextDrawSetProportional(introTextdraws[7], 1);

		introTextdraws[8] = TextDrawCreate(26.000000, 153.000000, "Development");
		TextDrawBackgroundColor(introTextdraws[8], 255);
		TextDrawFont(introTextdraws[8], 0);
		TextDrawLetterSize(introTextdraws[8], 0.579999, 2.399997);
		TextDrawColor(introTextdraws[8], 144559871);
		TextDrawSetOutline(introTextdraws[8], 1);
		TextDrawSetProportional(introTextdraws[8], 1);

		introTextdraws[9] = TextDrawCreate(44.000000, 178.000000, "Kiet Le");
		TextDrawBackgroundColor(introTextdraws[9], 255);
		TextDrawFont(introTextdraws[9], 2);
		TextDrawLetterSize(introTextdraws[9], 0.189999, 1.399997);
		TextDrawColor(introTextdraws[9], -1);
		TextDrawSetOutline(introTextdraws[9], 1);
		TextDrawSetProportional(introTextdraws[9], 1);

		introTextdraws[10] = TextDrawCreate(33.000000, 219.000000, "Mapping");
		TextDrawBackgroundColor(introTextdraws[10], 255);
		TextDrawFont(introTextdraws[10], 0);
		TextDrawLetterSize(introTextdraws[10], 0.579999, 2.399997);
		TextDrawColor(introTextdraws[10], 144559871);
		TextDrawSetOutline(introTextdraws[10], 1);
		TextDrawSetProportional(introTextdraws[10], 1);

		introTextdraws[11] = TextDrawCreate(65.000000, 246.000000, "Open Source");
		TextDrawAlignment(introTextdraws[11], 2);
		TextDrawBackgroundColor(introTextdraws[11], 255);
		TextDrawFont(introTextdraws[11], 2);
		TextDrawLetterSize(introTextdraws[11], 0.189999, 1.399997);
		TextDrawColor(introTextdraws[11], -1);
		TextDrawSetOutline(introTextdraws[11], 1);
		TextDrawSetProportional(introTextdraws[11], 1);

		introTextdraws[12] = TextDrawCreate(145.000000, 144.000000, "Beta Testing");
		TextDrawBackgroundColor(introTextdraws[12], 255);
		TextDrawFont(introTextdraws[12], 0);
		TextDrawLetterSize(introTextdraws[12], 0.579999, 2.399997);
		TextDrawColor(introTextdraws[12], 144559871);
		TextDrawSetOutline(introTextdraws[12], 1);
		TextDrawSetProportional(introTextdraws[12], 1);

		introTextdraws[13] = TextDrawCreate(192.000000, 168.000000, "Kiet Le");
		TextDrawAlignment(introTextdraws[13], 2);
		TextDrawBackgroundColor(introTextdraws[13], 255);
		TextDrawFont(introTextdraws[13], 2);
		TextDrawLetterSize(introTextdraws[13], 0.189999, 1.399997);
		TextDrawColor(introTextdraws[13], -1);
		TextDrawSetOutline(introTextdraws[13], 1);
		TextDrawSetProportional(introTextdraws[13], 1);

		introTextdraws[14] = TextDrawCreate(428.000000, 208.000000, "Suggestions");
		TextDrawBackgroundColor(introTextdraws[14], 255);
		TextDrawFont(introTextdraws[14], 0);
		TextDrawLetterSize(introTextdraws[14], 0.579999, 2.399997);
		TextDrawColor(introTextdraws[14], 144559871);
		TextDrawSetOutline(introTextdraws[14], 1);
		TextDrawSetProportional(introTextdraws[14], 1);

		introTextdraws[15] = TextDrawCreate(469.000000, 233.000000, "Beta Testers");
		TextDrawAlignment(introTextdraws[15], 2);
		TextDrawBackgroundColor(introTextdraws[15], 255);
		TextDrawFont(introTextdraws[15], 2);
		TextDrawLetterSize(introTextdraws[15], 0.189999, 1.399997);
		TextDrawColor(introTextdraws[15], -1);
		TextDrawSetOutline(introTextdraws[15], 1);
		TextDrawSetProportional(introTextdraws[15], 1);

		introTextdraws[16] = TextDrawCreate(293.000000, 140.000000, "Credits");
		TextDrawBackgroundColor(introTextdraws[16], 255);
		TextDrawFont(introTextdraws[16], 0);
		TextDrawLetterSize(introTextdraws[16], 0.639998, 2.599997);
		TextDrawColor(introTextdraws[16], 144559871);
		TextDrawSetOutline(introTextdraws[16], 1);
		TextDrawSetProportional(introTextdraws[16], 1);

		introTextdraws[17] = TextDrawCreate(321.000000, 165.000000, "Kiet Le~n~Admin team~n~Helper team~n~Beta testers~n~Nguoi choi!");
		TextDrawAlignment(introTextdraws[17], 2);
		TextDrawBackgroundColor(introTextdraws[17], 255);
		TextDrawFont(introTextdraws[17], 2);
		TextDrawLetterSize(introTextdraws[17], 0.189999, 1.399997);
		TextDrawColor(introTextdraws[17], -1);
		TextDrawSetOutline(introTextdraws[17], 1);
		TextDrawSetProportional(introTextdraws[17], 1);

		introTextdraws[18] = TextDrawCreate(391.000000, 161.000000, "De co gang phat trien...");
		TextDrawBackgroundColor(introTextdraws[18], 255);
		TextDrawFont(introTextdraws[18], 2);
		TextDrawLetterSize(introTextdraws[18], 0.240000, 1.599999);
		TextDrawColor(introTextdraws[18], 144559871);
		TextDrawSetOutline(introTextdraws[18], 1);
		TextDrawSetProportional(introTextdraws[18], 1);

		introTextdraws[19] = TextDrawCreate(421.000000, 175.000000, "Chung toi da co gang tao tap lenh");
		TextDrawBackgroundColor(introTextdraws[19], 255);
		TextDrawFont(introTextdraws[19], 2);
		TextDrawLetterSize(introTextdraws[19], 0.240000, 1.599999);
		TextDrawColor(introTextdraws[19], -1);
		TextDrawSetOutline(introTextdraws[19], 1);
		TextDrawSetProportional(introTextdraws[19], 1);

		introTextdraws[20] = TextDrawCreate(29.000000, 161.000000, "Tot nhat de tao hanh phuc cho nguoi choi");
		TextDrawBackgroundColor(introTextdraws[20], 255);
		TextDrawFont(introTextdraws[20], 2);
		TextDrawLetterSize(introTextdraws[20], 0.240000, 1.599999);
		TextDrawColor(introTextdraws[20], 144559871);
		TextDrawSetOutline(introTextdraws[20], 1);
		TextDrawSetProportional(introTextdraws[20], 1);

		introTextdraws[21] = TextDrawCreate(29.000000, 175.000000, "Se co gang cap nhat he thong moi thoi gian toi.");
		TextDrawBackgroundColor(introTextdraws[21], 255);
		TextDrawFont(introTextdraws[21], 2);
		TextDrawLetterSize(introTextdraws[21], 0.240000, 1.599999);
		TextDrawColor(introTextdraws[21], -1);
		TextDrawSetOutline(introTextdraws[21], 1);
		TextDrawSetProportional(introTextdraws[21], 1);

		introTextdraws[22] = TextDrawCreate(204.000000, 152.000000, "Tieu chuan xuat sac");
		TextDrawBackgroundColor(introTextdraws[22], 255);
		TextDrawFont(introTextdraws[22], 2);
		TextDrawLetterSize(introTextdraws[22], 0.240000, 1.599999);
		TextDrawColor(introTextdraws[22], 144559871);
		TextDrawSetOutline(introTextdraws[22], 1);
		TextDrawSetProportional(introTextdraws[22], 1);

		introTextdraws[23] = TextDrawCreate(281.000000, 125.000000, "~w~Chao mung toi..."); // 258.00
		TextDrawBackgroundColor(introTextdraws[23], 255);
		TextDrawFont(introTextdraws[23], 0);
		TextDrawLetterSize(introTextdraws[23], 0.649998, 2.699997);
		TextDrawColor(introTextdraws[23], 144559871);
		TextDrawSetOutline(introTextdraws[23], 1);
		TextDrawSetProportional(introTextdraws[23], 1);

		introTextdraws[24] = TextDrawCreate(258.000000, 146.000000, "NewCity Roleplay");
		TextDrawBackgroundColor(introTextdraws[24], 255);
		TextDrawFont(introTextdraws[24], 0);
		TextDrawLetterSize(introTextdraws[24], 0.649998, 2.699997);
		TextDrawColor(introTextdraws[24], 144559871);
		TextDrawSetOutline(introTextdraws[24], 1);
		TextDrawSetProportional(introTextdraws[24], 1);

		introTextdraws[25] = TextDrawCreate(202.000000, 342.000000, "Cam on ban da xem phan gioi thieu nay.~n~Ket thuc dieu nay, sau do ban co the dang ky.");
		TextDrawBackgroundColor(introTextdraws[25], 255);
		TextDrawFont(introTextdraws[25], 2);
		TextDrawLetterSize(introTextdraws[25], 0.240000, 1.599999);
		TextDrawColor(introTextdraws[25], -1);
		TextDrawSetOutline(introTextdraws[25], 1);
		TextDrawSetProportional(introTextdraws[25], 1);
	#endif
	// House Lights
   	/*houseLights = TextDrawCreate(0.0, 0.0, "|");
    TextDrawUseBox(houseLights, 1);
    TextDrawBoxColor(houseLights, 0x000000BB);
    TextDrawTextSize(houseLights, 660.000000, 22.000000);
    TextDrawAlignment(houseLights, 0);
    TextDrawBackgroundColor(houseLights, 0x000000FF);
    TextDrawFont(houseLights, 3);
    TextDrawLetterSize(houseLights, 1.000000, 52.200000);
    TextDrawColor(houseLights, 0x000000FF);
    TextDrawSetOutline(houseLights, 1);
    TextDrawSetProportional(houseLights, 1);
    TextDrawSetShadow(houseLights, 1);*/

    testVehicles[0] = AddStaticVehicleEx(445, 852.3868,-582.2361,18.0523,182.8203, 1, 1, 10); // test car 1
	testVehicles[1] = AddStaticVehicleEx(445, 856.8610,-582.0626,18.0570,183.1360, 1, 1, 10); // test car 2
	testVehicles[2] = AddStaticVehicleEx(445, 861.1528,-581.2597,18.0798,186.3117, 1, 1, 10); // test car 3
	testVehicles[3] = AddStaticVehicleEx(445, 865.2709,-580.8766,18.0905,184.5702, 1, 1, 10); // test car 4

	for(new i = 0; i < 4;i++)
	{
		TextTV3D[testVehicles[i]] = Create3DTextLabel("Phuong tien DMV", COLOR_LIGHTRED, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToVehicle(TextTV3D[testVehicles[i]], testVehicles[i], 0.0, 0.0, 2.0);
	}



	gettime(.hour = gHour);
 	gettime(.hour = gWorldTime);
	SetWorldTime(gWorldTime);

	// Timers
	SetTimer("MinuteTimer", 60000, true);
	SetTimer("SecondTimer", 1000, true);
	SetTimer("FuelTimer", 75000, true);
	SetTimer("InjuredTimer", 5000, true);
	SetTimerEx("RandomFire", 5400000, true, "i", 1);
	SetTimer("OnPlayerUpdateEx", 1000, true);
	SetTimer("UpdateSpeedo", 300, true);
	SetTimer("AntiNameTag", 500, true);

	
    LoadServerInfo();
    //RefreshLoginScreen();
    //RefreshTime();
    ResetEvent();
    ResetRobbery();
	// LS Elevator
	ResetElevatorQueue();
	Elevator_Initialize();

	print("__________________________________________________");
	print("| NewCity Roleplay duoc xay dung boi Cypher Team |");
	print("|           Project duoc tai thanh cong          |");
	print("|________________________________________________|");

	new count;

	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i)) count++;
	}

	printf("%i objects loaded.", count);

	return 1;
}
// LS ELEVATOR
public OnGameModeExit()
{
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}

	Elevator_Destroy();
	mysql_close(connectionID);

	if(gDoubleXP)
	{
	    SetDoubleXP(false);
	}

	return 1;
}
public OnDynamicObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetDynamicObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetDynamicObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= Create3DTextLabel("{CCCCCC}Nhan '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' de su dung thang may", 0xCCCCCCAA, 1784.9822, -1302.0426, z - 0.9, 4.0, 0, 1);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}

	return 1;
}
// END LS ELEVATOR

public OnPlayerDisconnect(playerid, reason)
{
    if(IsPlayerNPC(playerid)) return 1;
    Maskara[playerid] = 0;
	if(GetPVarInt(playerid, "DangHaiCan") == 1) {
        KillTimer(CheckCSTimer[playerid]);
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
        DeletePVar(playerid, "DangHaiCan"); 
        DeletePVar(playerid, "CS_Hai");
        CSInfo[GetPVarInt(playerid, "CS_Hai")][CanSaKhaiThac] = 0; 
    }
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pSpectating] == playerid)
	    {
	        SendClientMessageEx(i, COLOR_ORANGE, "Ban khong con theo doi %s (ID %i).", GetPlayerRPName(PlayerInfo[i][pSpectating]), PlayerInfo[i][pSpectating]);
	    	PlayerInfo[i][pSpectating] = INVALID_PLAYER_ID;
	    	SetPlayerToSpawn(i);
		}
		if(PlayerInfo[i][pHouseOffer] == playerid)
		{
		    PlayerInfo[i][pHouseOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerInfo[i][pGarageOffer] == playerid)
		{
		    PlayerInfo[i][pGarageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pBizOffer] == playerid)
		{
		    PlayerInfo[i][pBizOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pVestOffer] == playerid)
		{
		    PlayerInfo[i][pVestOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pCarOffer] == playerid)
		{
		    PlayerInfo[i][pCarOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFactionOffer] == playerid)
		{
		    PlayerInfo[i][pFactionOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pGangOffer] == playerid)
		{
		    PlayerInfo[i][pGangOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFriskOffer] == playerid)
		{
		    PlayerInfo[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pTicketOffer] == playerid)
		{
		    PlayerInfo[i][pTicketOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLiveOffer] == playerid)
		{
		    PlayerInfo[i][pLiveOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLiveBroadcast] == playerid)
		{
		    PlayerInfo[i][pLiveBroadcast] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pShakeOffer] == playerid)
		{
		    PlayerInfo[i][pShakeOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pLandOffer] == playerid)
		{
		    PlayerInfo[i][pLandOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pSellOffer] == playerid)
		{
		    PlayerInfo[i][pSellOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pAllianceOffer] == playerid)
		{
		    PlayerInfo[i][pAllianceOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[playerid][pGangOffer] == playerid)
		{
			PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerInfo[i][pDefendOffer] == playerid)
		{
		    PlayerInfo[i][pDefendOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pDiceOffer] == playerid)
		{
		    PlayerInfo[i][pDiceOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pInviteOffer] == playerid)
		{
		    PlayerInfo[i][pInviteOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pRobberyOffer] == playerid)
		{
		    PlayerInfo[i][pRobberyOffer] = INVALID_PLAYER_ID;
		}
        if(PlayerInfo[i][pDuelOffer] == playerid)
		{
		    PlayerInfo[i][pDuelOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pMarriageOffer] == playerid)
		{
		    PlayerInfo[i][pMarriageOffer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pTextFrom] == playerid)
		{
		    PlayerInfo[i][pTextFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pWhisperFrom] == playerid)
		{
		    PlayerInfo[i][pWhisperFrom] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pFindPlayer] == playerid)
		{
		    PlayerInfo[i][pFindPlayer] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pRemoveFrom] == playerid)
		{
		    PlayerInfo[i][pRemoveFrom] = INVALID_PLAYER_ID;
		}
		if(chattingWith[i]{playerid})
		{
		    SendClientMessageEx(i, COLOR_YELLOW, "Cuoc tro chuyen cua ban voi %s (ID %i) da ket thuc khi ho roi khoi may chu.", GetPlayerRPName(playerid), playerid);
		    chattingWith[i]{playerid} = false;
		}
		if(PlayerInfo[i][pActiveReport] >= 0 && (ReportInfo[PlayerInfo[i][pActiveReport]][rHandledBy] == playerid || ReportInfo[PlayerInfo[i][pActiveReport]][rReporter] == playerid))
		{
		    if(ReportInfo[PlayerInfo[i][pActiveReport]][rReporter] == playerid)
				SendClientMessage(i, COLOR_GREEN, "Nguoi choi thuc hien bao cao da roi khoi may chu.");
			else if(ReportInfo[PlayerInfo[i][pActiveReport]][rHandledBy] == playerid)
                SendClientMessage(i, COLOR_GREEN, "Quan tri vien chap nhan bao cao da roi khoi may chu.");

		    ReportInfo[PlayerInfo[i][pActiveReport]][rExists] = 0;
		    PlayerInfo[i][pActiveReport] = -1;
		}
		if(PlayerInfo[i][pDueling] == playerid)
		{
		    SendClientMessage(i, COLOR_WHITE, "Muc tieu Duel cua ban da roi khoi may chu.");
		    PlayerInfo[i][pDueling] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(PlayerInfo[i][pContractTaken] == playerid)
		{
		    SendClientMessage(i, COLOR_YELLOW, "Muc tieu hop dong cua ban da roi khoi may chu.");
		    PlayerInfo[i][pContractTaken] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pDraggedBy] == playerid)
		{
		    SendClientMessage(i, COLOR_AQUA, "Nguoi keo ban da ngat ket noi. Ban duoc tu do!");
			PlayerInfo[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if(PlayerInfo[i][pCallLine] == playerid)
		{
		    HangupCall(PlayerInfo[i][pCallLine], HANGUP_DROPPED);
		}
	}

	if(PlayerInfo[playerid][pLogged])
	{
	    if(PlayerInfo[playerid][pUndercover][0])
		{
		    OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
		}
		if(PlayerInfo[playerid][pHurt])
		{
		    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s co the roi khoi may chu khi dang dau sung.", GetPlayerRPName(playerid));
			PlayerInfo[playerid][pInjured] = 1;
		}
	    SavePlayerVariables(playerid);

	    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0)
		{
	    	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s roi khoi may chu trong khi bi troi hoac bi cong.", GetPlayerRPName(playerid));
        	ResetPlayerWeaponsEx(playerid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest' WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    callcmd::cr(playerid, "\1");
	}
	if(PlayerInfo[playerid][pHunted])
	{
	    SendClientMessageToAllEx(COLOR_LIGHTORANGE, "(( Nan nhan AIDS bi san duoi %s da roi khoi may chu ))", GetPlayerRPName(playerid));
	}
	if(PlayerInfo[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(PlayerInfo[playerid][pAcceptedEMS], COLOR_YELLOW, "Benh nhan %s cua ban da roi khoi may chu khi bi thuong.", GetPlayerRPName(playerid));
		PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAcceptedEMS] == playerid)
	    {
	        SendClientMessage(i, COLOR_YELLOW, "Bac si cua ban da roi khoi may chu trong khi giai cuu ban. (bay gio ban co the chap nhan so phan cua minh)");
	        PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
	    }
	}
	if(PlayerInfo[playerid][pTutorial])
	{
	    KillTimer(PlayerInfo[playerid][pTutorialTimer]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pEditObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
	}
	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]))
	{
	    DestroyDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pBombObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);
	}
	if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
	{
	    DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
	}
	if(PlayerInfo[playerid][pLockBreak] != INVALID_VEHICLE_ID)
	{
	    CancelBreakIn(playerid);
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
	}
	if(PlayerInfo[playerid][pBoomboxPlaced])
	{
	    DestroyBoombox(playerid);
	}
	if(PlayerInfo[playerid][pAdminDuty] || Maskara[playerid])
	{
	    SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
	}
	if(PlayerInfo[playerid][pZoneID] >= 0)
	{
	    GangZoneDestroy(PlayerInfo[playerid][pZoneID]);
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}

	for(new i = 0; i < 4; i ++)
	{
	    if(IsValidDynamicPickup(PlayerInfo[playerid][pZonePickups][i]))
	    {
	        DestroyDynamicPickup(PlayerInfo[playerid][pZonePickups][i]);
	    }
	}

	if(PlayerInfo[playerid][pLogged])
	{
		foreach(new i: Vehicle)
		{
	    	if(IsVehicleOwner(playerid, i) && VehicleInfo[i][vTimer] == -1)
		    {
				VehicleInfo[i][vTimer] = SetTimerEx("DespawnTimer", 600000, false, "i", i);
	   		}
		}
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && ReportInfo[i][rReporter] == playerid)
	    {
	        ReportInfo[i][rExists] = 0;
		}
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pCaptureTime] > 0 && PointInfo[i][pCapturer] == playerid)
	    {
	        SendProximityMessage(i, 20.0, COLOR_RED, "(( %s da ngat ket noi va do do khong the chiem duoc diem ay. ))", GetPlayerRPName(playerid));

	        PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pCaptureTime] = 0;
	    }
	}

 	foreach(new i : Turf)
	{
	    if(TurfInfo[i][tExists] && TurfInfo[i][tCaptureTime] > 0 && TurfInfo[i][tCapturer] == playerid)
	    {
	        if(reason == 0)
			{
				if(PlayerInfo[playerid][pGang] >= 0)
		        {
		            GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens]++;
		            SendGangMessage(PlayerInfo[playerid][pGang], COLOR_YELLOW, "%s da bi crash khi co gang chiem Turf. 1 turf token da duoc hoan lai cho bang dang cua ban.", GetPlayerRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);
				}
				else if(PlayerInfo[playerid][pFaction] >= 0)
		        {
		            FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens]++;
		            SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "%s da bi crash khi co gang chiem Turf. 1 turf token da duoc hoan lai cho to chuc cua ban.", GetPlayerRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", PlayerInfo[playerid][pFaction]);
		            mysql_tquery(connectionID, queryBuffer);
				}
			}

	        SendTurfMessage(i, COLOR_RED, "(( %s ngat ket noi va do do khong chiem duoc turf. ))", GetPlayerRPName(playerid));

	        TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	        TurfInfo[i][tCaptureTime] = 0;
	        ReloadTurf(i);
	    }
	}


	switch(reason)
	{
	    case 0: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "%s da roi khoi may chu. (Timeout)", GetPlayerRPName(playerid));
	    case 1: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "%s da roi khoi may chu. (Thoat)", GetPlayerRPName(playerid));
	    case 2: SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "%s da roi khoi may chu. (Kicked)", GetPlayerRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM shots WHERE (playerid = %i) OR (hitid = %i AND hittype = 1)", playerid, playerid);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(PlayerInfo[playerid][pKicked]) return 0;
    if(IsPlayerNPC(playerid)) return 1;

	if(!PlayerInfo[playerid][pLogged])
	{
	    ClearChat(playerid);

		TogglePlayerSpectating(playerid, 1);
		SetPlayerColor(playerid, 0xFFFFFF00);
        SetPlayerTeam(playerid, NO_TEAM);

		// Due to a SA-MP bug, you can't apply camera coordinates directly after enabling spectator mode (to hide HUD).
		// In this case we'll use a timer to defer this action.

		#if defined SERVER_INTRO
		    ShowMainMenuCamera(playerid, 1);
		#else
		    SetTimerEx("ShowMainMenuCamera", 400, false, "i", playerid);
		#endif
	}

	return 1;
}

public OnPlayerSpawn(playerid)
{
	ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_HEALTH, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_ARMOUR, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_MONEY, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_WEAPON, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_AMMO, false);
	progress_bar_show(playerid);
	SetTimerEx("progress_bar_show", 10, true, "d", playerid);
	if(IsPlayerNPC(playerid)) return 1;
    if(PlayerInfo[playerid][pKicked]) return 0;

    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 1000, false, "ii", i, playerid);
	    }
	}

	LoadPlayerBackpack(playerid);
    //TextDrawHideForPlayer(playerid,  );
    /*
	for(new i = 0; i < 4; i++)
	{
		TextDrawHideForPlayer(playerid, LoginTD[i]);
	}*/

	if(PlayerInfo[playerid][pSetup])
	{
	    if(PlayerInfo[playerid][pTutorial])
		{
	    	KillTimer(PlayerInfo[playerid][pTutorialTimer]);
	    	PlayerInfo[playerid][pTutorial] = 0;
		}

	    SetPlayerPos(playerid, 1312.8910,337.8670,-58.3054);
	    SetPlayerCameraPos(playerid, 1299.5972,320.3192,71.7217);
		SetPlayerCameraLookAt(playerid, 1349.5016,288.6782,43.9138);
		TogglePlayerControllable(playerid, false);

		ShowDialogToPlayer(playerid, DIALOG_GENDER);
		StopAudioStreamForPlayer(playerid);

		SendClientMessage(playerid, COLOR_WHITE, "Chao mung toi {6FD497}NewCity Roleplay{FFFFFF}. Ban da dang ky tai khoan cua minh thanh cong tren may chu.");
		SendClientMessage(playerid, COLOR_WHITE, "Truoc khi co the choi, ban phai dien mot so thong tin sau do xem huong dan ngan gon.");
	}
	else if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    SetPlayerInJail(playerid);

	    if(PlayerInfo[playerid][pJailType] == 2)
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Ban da bi dua vao tu boi %s, ly do: %s", PlayerInfo[playerid][pPrisonedBy], PlayerInfo[playerid][pPrisonReason]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban van chua hoan thanh ban an tu cua minh.");
		}
	}
	else if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    SetPlayerInPaintball(playerid, PlayerInfo[playerid][pPaintball]);
	}
	else
	{
	    PlayerInfo[playerid][pJoinedEvent] = 0;

	    if(PlayerInfo[playerid][pInjured])
	    {
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
            ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0, 1);

            GameTextForPlayer(playerid, "~r~Bi Thuong~n~~w~/call 911 or~n~/chapnhan chet", 5000, 3);
	        SendClientMessage(playerid, COLOR_DOCTOR, "Ban bi thuong va mat mau. Hay /call 911 de goi cap cuu.");
	        SendClientMessage(playerid, COLOR_DOCTOR, "Neu ban muon chap nhan chet va den benh vien hay su dung /chapnhan chet.");
	    }
	    else if(PlayerInfo[playerid][pHospital])
	    {
	        if(PlayerInfo[playerid][pInsurance] == 0)
     	   		SetPlayerInHospital(playerid);
	        else
				SetPlayerInHospital(playerid, .type = PlayerInfo[playerid][pInsurance]);

			ResetPlayerWeaponsEx(playerid);
	    }
	    else
		{
		    SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
		    SetScriptArmour(playerid, PlayerInfo[playerid][pArmor]);
		}

		if(!PlayerInfo[playerid][pHospital])
		{
		    if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
			{
				PlayerInfo[PlayerInfo[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
				PlayerInfo[playerid][pDueling] = INVALID_PLAYER_ID;
			}

			if(PlayerInfo[playerid][pInterior] || PlayerInfo[playerid][pWorld])
			{
			    SetTimerEx("StreamedCheck", 1000, false, "ifffii", playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pInterior], PlayerInfo[playerid][pWorld]);
			}

			SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
			SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
	 		SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
			SetPlayerWeapons(playerid);

			if(!PlayerInfo[playerid][pInterior] && PlayerInfo[playerid][pLoginCamera] && !PlayerInfo[playerid][pToggleCam])
			{
			    SetPlayerCameraLookAt(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
        		SetPlayerCameraPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ] + 100.0);

			    TogglePlayerControllable(playerid, 0);
				SetTimerEx("GrandTheftAutoV", 2000, false, "iifffffff", playerid, 1, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], PlayerInfo[playerid][pCameraX], PlayerInfo[playerid][pCameraY], PlayerInfo[playerid][pCameraZ]);

				PlayerInfo[playerid][pLoginCamera] = 0;
			}
			else
			{
			    SetCameraBehindPlayer(playerid);
			}
		}
	}

	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 998);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 998);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 998);
	SetPlayerClothing(playerid);
	PreloadPlayerAnims(playerid);
	RefreshPlayerTextdraws(playerid);
	//TogleHud
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_HEALTH, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_ARMOUR, false);
    ToggleHUDComponentForPlayer(playerid, HUD_COMPONENT_MONEY, false);

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerNPC(playerid)) return SpawnPlayer(playerid);
	if((gettime() - PlayerInfo[playerid][pLastDeath]) < 2)
	{
	    return 1;
	}
    foreach(new i : Player)
	{
		if(PlayerInfo[i][pAdmin] >= 6 || PlayerInfo[i][pAdminDuty])
		{
		    if(PlayerInfo[playerid][pInjured] == 0)
		    {
	    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
	 		}
		}
	}
	if(PlayerInfo[playerid][pLogged])
	{
		if(PlayerInfo[playerid][pJoinedEvent])
		{
		    foreach(new i : Player)
			{
			    if(PlayerInfo[i][pJoinedEvent] && !PlayerInfo[playerid][pHunted])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s chet. ))", GetPlayerRPName(playerid));
			        else
						SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s da bi giet boi %s. ))", GetPlayerRPName(playerid), GetPlayerRPName(killerid));
    			}
			}
			if(PlayerInfo[playerid][pHunted])
			{
                if(killerid == INVALID_PLAYER_ID)
                {
                    SendClientMessageToAllEx(COLOR_LIGHTORANGE, "(( %s da chet vi can ben AIDS, mong anh ay yen nghi. ))", GetPlayerRPName(playerid));
                }
                else
                {
					SendClientMessageToAllEx(COLOR_LIGHTORANGE, "(( %s da bi giet boi %s, mong anh ay yen nghi. ))", GetPlayerRPName(playerid), GetPlayerRPName(killerid));
					SendClientMessageEx(killerid, COLOR_AQUA, "Ban da giet duoc %s bi san duoi, ban da duoc gan co de duoc giai thuong.", GetPlayerRPName(playerid));
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Server', NOW(), 'Allhunt winner')", PlayerInfo[killerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: May chu da gan co tai khoan %s's  la 'Allhunt winner'.",  GetPlayerRPName(killerid));
				}
				PlayerInfo[playerid][pHunted] = 0;
			}
		}
		else if(PlayerInfo[playerid][pPaintball] > 0)
		{
		    foreach(new i : Player)
			{
			    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s chet. ))", GetPlayerRPName(playerid));
			        else
						SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s bi giet boi %s. ))", GetPlayerRPName(playerid), GetPlayerRPName(killerid));
				}
			}
		}
		else if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
		{
		    new entranceid = GetInsideEntrance(playerid);

			SendClientMessageEx(playerid, COLOR_LIGHTORANGE, "(( Ban da thua trong cuoc dau tay doi voi %s! ))", GetPlayerRPName(PlayerInfo[playerid][pDueling]));

			if(killerid != INVALID_PLAYER_ID)
		    {
				SendClientMessageEx(killerid, COLOR_LIGHTORANGE, "(( Ban da thanh trong cuoc dau tay duoi voi %s! ))", GetPlayerRPName(playerid));

				if(entranceid >= 0 && EntranceInfo[entranceid][eType] == 1)
				{
				    foreach(new i : Player)
				    {
				        if(GetInsideEntrance(i) == entranceid)
				        {
				            SendClientMessageEx(i, COLOR_YELLOW, "Duel Arena: %s da thanh trong cuoc dau tay doi cua ho voi %s.", GetPlayerRPName(killerid), GetPlayerRPName(playerid));
						}
				    }
				}
				else
				{
					SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thang trong cuoc dau tay doi cua ho voi %s.", GetPlayerRPName(killerid), GetPlayerRPName(playerid));
				}

				SetPlayerWeapons(killerid);
				SetPlayerToSpawn(killerid);
			}
		}
		else
		{
		    if(killerid != INVALID_PLAYER_ID)
			{
			    HandleContract(playerid, killerid);
			}

		    if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pJailType] == 0 && PlayerInfo[playerid][pPreviewHouse] == -1)
		    {
			    if(PlayerInfo[playerid][pInjured] == 0)
				{
				    ResetPlayer(playerid);
				    PlayerInfo[playerid][pInjured] = 1;
					foreach(new i : Player)
					{
					    if(GetFactionType(i) == FACTION_MEDIC)
					    {
					    	SendClientMessageEx(i, COLOR_LIGHTRED, "Dispatch: Beacon %s (%i) dang can ho tro y te ngay lap tuc.", GetPlayerRPName(playerid), playerid);
						}
					}
				}
				else
				{
					PlayerInfo[playerid][pInjured] = 0;
					PlayerInfo[playerid][pHospital] = 1;
					if(PlayerInfo[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
					{
						SendClientMessageEx(PlayerInfo[playerid][pAcceptedEMS], COLOR_YELLOW, "Benh nhan %s cua ban da bi thuong.", GetPlayerRPName(playerid));
                        PlayerInfo[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
					}

				}
			}
			else
			{
			    PlayerInfo[playerid][pHealth] = 32767.0;
			}

			if(killerid != INVALID_PLAYER_ID)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
			    mysql_tquery(connectionID, queryBuffer);
			}

			GetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);

	        PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
	        PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}

	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    HangupCall(PlayerInfo[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(reason == 50 && killerid != INVALID_PLAYER_ID)
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] da bi giet boi %s[%i].", GetPlayerRPName(playerid), playerid, GetPlayerRPName(killerid), killerid);
	}

	if(killerid != INVALID_PLAYER_ID)
	{
	    gTotalKills++;
	}

	gTotalDeaths++;
	SaveServerInfo();

	PlayerInfo[playerid][pLastDeath] = gettime();
	return 1;
}

forward timerlolxd(playerid);
public timerlolxd(playerid) {
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{

	ExBJck[playerid] = 0;
    IsPlayerSteppingInVehicle[playerid] = vehicleid;
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	    SetTimerEx("timerlolxd", 1000, false, "i", playerid);
	}

	if((!ispassenger) && (PlayerInfo[playerid][pCuffed] || PlayerInfo[playerid][pTied] || PlayerInfo[playerid][pInjured]))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}

	if(!ispassenger)
	{
	    if((vehiclepizza == vehicleid) && PizzaDuty[playerid] == 0)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong phai Pizza Man.");
	        ClearAnimations(playerid);
	    }
		if((testVehicles[0] <= vehicleid <= testVehicles[3]) && !PlayerInfo[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong tham gia ky thi sat hach lai xe.");
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi no khong phai cua to chuc ban.");
	        ClearAnimations(playerid);
	    }
	    else if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && VehicleInfo[vehicleid][vRank] > PlayerInfo[playerid][pFactionRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong du thu hang %i trong to chuc cua minh.", VehicleInfo[vehicleid][vRank]);
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi no khong phai cua bang dang ban.");
	        ClearAnimations(playerid);
	    }
	    else if(VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vRank] > PlayerInfo[playerid][pGangRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong du thu hang %i trong bang dang cua minh.", VehicleInfo[vehicleid][vRank]);
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong phai la %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        ClearAnimations(playerid);
	    }
	    if(VehicleInfo[vehicleid][vVIP] > 0 && PlayerInfo[playerid][pVIPPackage] < VehicleInfo[vehicleid][vVIP])
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong phai la %s VIP+.", GetVIPRank(VehicleInfo[vehicleid][vVIP]));
	        ClearAnimations(playerid);
	    }
	}

	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	switch(PlayerInfo[playerid][pCP])
	{
		case CHECKPOINT_TRACEHOUSE, CHECKPOINT_TRACEBIZ:
		{
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
		}
	    /*case CHECKPOINT_PIZZA: - OLD PIZZA SYSTEM
	    {
			new string[32], amount = ((500 - PlayerInfo[playerid][pPizzaTime]) * 10) + random(100), tip = percent(amount, 5);

            if(gettime() - PlayerInfo[playerid][pLastPizza] < 15 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
		    {
		        PlayerInfo[playerid][pACWarns]++;

		        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport pizza delivering (time: %i).", GetPlayerRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastPizza]);
				}
				else
				{
				    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was autobanned by %s, reason: Teleport pizza runs", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
				    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport pizza runs");
				}
		    }

		    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
			{
				amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
			}

			format(string, sizeof(string), "~g~+$%i", amount);
			GameTextForPlayer(playerid, string, 5000, 1);

			AddToPaycheck(playerid, amount);
			GivePlayerCash(playerid, tip);

			PlayerInfo[playerid][pPizzas] = 0;
			PlayerInfo[playerid][pPizzaTime] = 0;
			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

			SendClientMessageEx(playerid, COLOR_AQUA, "You received {00AA00}$%i{33CCFF} on your paycheck for this delivery. You also received a {00AA00}$%i{33CCFF} tip.", amount, tip);
			DisablePlayerCheckpoint(playerid);
	    }*/
	    case CHECKPOINT_TEST:
	    {
	        PlayerInfo[playerid][pTestCP]++;

	        if(PlayerInfo[playerid][pTestCP] < sizeof(drivingTestCPs))
	        {
	            if(!(testVehicles[0] <= GetPlayerVehicleID(playerid) <= testVehicles[3]))
	            {
					SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban da truot bai kiem tra khi roi khoi xe cua minh.");
	                DisablePlayerCheckpoint(playerid);
		    		SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);

				    PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
		            PlayerInfo[playerid][pDrivingTest] = 0;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerInfo[playerid][pTestCP]][0], drivingTestCPs[PlayerInfo[playerid][pTestCP]][1], drivingTestCPs[PlayerInfo[playerid][pTestCP]][2], 3.0);
				}
			}
			else
			{
			    new
			        Float:health;

				GetVehicleHealth(PlayerInfo[playerid][pTestVehicle], health);

			    if(health < 900.0)
			    {
			        GameTextForPlayer(playerid, "~r~That Bai", 5000, 1);
			        SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban da ket thuc ky thi voi chiec xe bi hong va do do ban truot bai kiem tra.");
			    }
			    else
			    {
			        AwardAchievement(playerid, "Lai xe hop phap");

                    GameTextForPlayer(playerid, "~w~Hoan Thanh!~n~~r~-$100", 5000, 1);
			        SendClientMessage(playerid, COLOR_LIGHTRED, "[DMV] {FFFFFF}Ban da vuot qua thanh cong bai kiem tra trinh dieu khien cua minh va nhan duoc giay phep cua minh!");

			        GivePlayerCash(playerid, -100);
			        PlayerInfo[playerid][pCarLicense] = 1;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer);
			    }

	    		DisablePlayerCheckpoint(playerid);
	    		SetVehicleToRespawn(PlayerInfo[playerid][pTestVehicle]);

			    PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	            PlayerInfo[playerid][pDrivingTest] = 0;
	        }
	    }

	    case CHECKPOINT_HOUSE:
	    {
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da di vao nha.", GetPlayerRPName(playerid));
			SetPlayerPos(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntX], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntY], HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntZ]);
			SetPlayerFacingAngle(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hIntA]);
			SetPlayerInterior(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[PlayerInfo[playerid][pInviteHouse]][hWorld]);
			SetCameraBehindPlayer(playerid);

			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERY:
	    {
	        if(IsPlayerInBankRobbery(playerid) && PlayerInfo[playerid][pRobCash] > 0)
	        {
	            if(gettime() - PlayerInfo[playerid][pLastLoad] < 60 && PlayerInfo[playerid][pAdmin] < 2)
	            {
	                SendClientMessage(playerid, COLOR_LIGHTRED, "Cuop khong thanh cong. Ban da den checkpoint qua nhanh.");
	                SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] den checkpoint khi cuop ngan hang qua nhanh.", GetPlayerRPName(playerid), playerid);
	            }
	            else
	            {
	                if(PlayerInfo[playerid][pGang] >= 0)
	                {
	                    GiveGangPoints(PlayerInfo[playerid][pGang], 50);
	                }

					RobberyInfo[rStolen] += PlayerInfo[playerid][pRobCash];
					GivePlayerCash(playerid, PlayerInfo[playerid][pRobCash]);
					SendClientMessageEx(playerid, COLOR_AQUA, "Ban da kiem duoc {00AA00}$%i{33CCFF} khi thuc hien thanh cong phi vu cuop ngan hang.", PlayerInfo[playerid][pRobCash]);
				}

				RemoveFromBankRobbery(playerid);
			}

			PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
		case CHECKPOINT_GARBAGE:
		{
 			if(!(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can dieu khien Trashmaster.");

		    if(PlayerInfo[playerid][pGarbage] == 1)
		    {
                GameTextForPlayer(playerid, "Tai Rac....~n~Vui long doi.", 5000, 3);
                TogglePlayerControllable(playerid, 0);
                SetTimerEx("garbagewait", 5000, false, "i", playerid);
				DisablePlayerCheckpoint(playerid);

				PlayerInfo[playerid][pGarbage] = 2;
				SetPlayerCheckpoint(playerid, 1138.8413,-1333.5553,13.6871, 5.0);
			}
			if(PlayerInfo[playerid][pGarbage] == 2)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1138.8413,-1333.5553,13.6871))
			    {
	   				GameTextForPlayer(playerid, "Tai Rac....~n~Vui long doi.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					PlayerInfo[playerid][pGarbage] = 3;
					SetPlayerCheckpoint(playerid, 2121.7314,-1342.7231,23.9844, 5.0);
				}

			}
			if(PlayerInfo[playerid][pGarbage] == 3)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 2121.7314,-1342.7231,23.9844))
			    {
	                GameTextForPlayer(playerid, "Tai Rac....~n~Vui long doi.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					PlayerInfo[playerid][pGarbage] = 4;
					SetPlayerCheckpoint(playerid, 1920.7303,-1791.3890,13.3828, 5.0);
				}
			}
			if(PlayerInfo[playerid][pGarbage] == 4)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1920.7303,-1791.3890,13.3828))
			    {
	                GameTextForPlayer(playerid, "Tai Rac....~n~Vui long doi.", 5000, 3);
	                TogglePlayerControllable(playerid, 0);
	                SetTimerEx("garbagewait", 5000, false, "i", playerid);
					DisablePlayerCheckpoint(playerid);

					PlayerInfo[playerid][pGarbage] = 5;
					SetPlayerCheckpoint(playerid, 1637.1412,-1794.4941,13.5223, 5.0);
				}

			}
			if(PlayerInfo[playerid][pGarbage] == 5)
			{
   				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1637.1412,-1794.4941,13.5223))
			    {
					GameTextForPlayer(playerid, "Don Rac....~n~Vui long doi.", 5000, 3);
					PlayerInfo[playerid][pGarbage] = 0;
					DisablePlayerCheckpoint(playerid);

					new amount = 1000 + random(500);
					PlayerInfo[playerid][pCash] = PlayerInfo[playerid][pCash] + amount;
					SendClientMessageEx(playerid, COLOR_AQUA, "Paycheck: Ban da kiem duoc $%i cho thoi gian lam viec don rac.", amount);

					PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;

	   				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", PlayerInfo[playerid][pCash], PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
			}
		}

	    default:
	    {
	        PlayerInfo[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(pickupid == gPaycheck && IsPlayerInRangeOfPoint(playerid, 5.0, 1667.4180, -972.4201, 683.6855))
	{
	    if(PlayerInfo[playerid][pPaycheck] > 0)
	    {
			new
				string[20];

			format(string, sizeof(string), "~g~+$%i", PlayerInfo[playerid][pPaycheck]);
			GameTextForPlayer(playerid, string, 5000, 1);

			GivePlayerCash(playerid, PlayerInfo[playerid][pPaycheck]);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pPaycheck] = 0;
	    }
	}

	if(PlayerInfo[playerid][pVIPPackage] > 0)
	{
	    if(pickupid == gVIPHealth) {
	        SetPlayerHealth(playerid, 100.0);
		} else if(pickupid == gVIPArmor) {
		    SetScriptArmour(playerid, 100.0);
		}
	}

	if(gParachutes[0] <= pickupid <= gParachutes[1]) {
	    GivePlayerWeaponEx(playerid, 46);
	}

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsValidDynamic3DTextLabel(PlayerInfo[playerid][pSpecialTag]))
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	else
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	}

	return 1;
}

/*ProcessDamage(playerid, issuerid, weaponid, Float:amount, bool:fmj = false)
{
	new
		Float:health,
		Float:armour;

	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);

	if(armour > 0.0)
	{
	    if(armour >= amount)
	    {
	        armour -= amount;
		}
		else
		{
		    health -= amount - armour;
		    armour = 0;
	    }
	}
	else if(health > 0.0)
	{
	    if(health >= amount)
	    {
	        health -= amount;
		}
		else
		{
		    health = 0;
	    }
	}

	if((fmj) && health >= amount / 2)
	{
	    health -= amount / 2;
	}

	SetPlayerHealth(playerid, health < 0.0 ? 0.0 : health);
	SetPlayerArmour(playerid, armour < 0.0 ? 0.0 : armour);

	if(health <= 0.0)
	{
	    CallLocalFunction("OnPlayerDeath", "iii", playerid, issuerid, weaponid);
	}
}*/

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{
		if(((1 <= weapon <= 15)||(22 <= weapon <= 36)) && !PlayerHasWeapon(issuerid, weapon, true) && PlayerInfo[issuerid][pAdmin] < 2 && !PlayerInfo[issuerid][pKicked])
		{
		    new
		        string[48];

			format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weapon));

			SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: %s", GetPlayerRPName(issuerid), SERVER_ANTICHEAT, string);
			BanPlayer(issuerid, SERVER_ANTICHEAT, string);
		    return 0;
		}
		if((weapon == 23) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && PlayerInfo[issuerid][pTazer] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(PlayerInfo[playerid][pAdminDuty])
			{
			    SendClientMessage(issuerid, COLOR_LIGHTRED, "Ban khong the tazer quan tri vien dang lam nhiem vu.");
				return 0;
			}
			if(PlayerInfo[playerid][pTazedTime])
			{
			    SendClientMessage(issuerid, COLOR_LIGHTRED, "Nguoi choi nay da bi taze.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SendClientMessage(issuerid, COLOR_LIGHTRED, "Ban khong the taze nguoi choi do. Ho o qua xa.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAiming(playerid))
			{
	  			SendClientMessage(issuerid, COLOR_LIGHTRED, "Cam Taze voi vang. Dieu nay co nghia la taze mot nguoi choi dang chia sung vao ban.");
	  			return 0;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(issuerid, COLOR_LIGHTRED, "Ban khong the khong che nguoi choi dang o tren xe.");
			    return 0;
			}

			PlayerInfo[playerid][pTazedTime] = 10;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
			GameTextForPlayer(playerid, "~r~Te liet", 5000, 3);

			SendProximityMessage(issuerid, 20.0, COLOR_PURPLE, "** %s ban nguon dien vao %s va lam ho te liet.", GetPlayerRPName(issuerid), GetPlayerRPName(playerid));
			SendClientMessageEx(playerid, COLOR_AQUA, "Ban da bi {FF6347}choang vang{33CCFF} boi nguon dien tazer tu %s's.", GetPlayerRPName(issuerid));
			SendClientMessageEx(issuerid, COLOR_AQUA, "Ban da lam cho %s bi choang vang. Chung bi vo hieu hoa trong 10 giay.", GetPlayerRPName(playerid));
			return 0;
		}
		if(gettime() - PlayerInfo[playerid][pLastUpdate] >= 3 && !PlayerInfo[playerid][pHurt])
		{
		    GameTextForPlayer(issuerid, "Nguoi choi dang AFK!", 5000, 3);
		    return 0;
		}
		if(PlayerInfo[issuerid][pFreezeTimer] != -1)
		{
		    PlayerInfo[issuerid][pFreezeTimer] = -1;
		}
		if(PlayerInfo[playerid][pFreezeTimer] != -1)
		{
		    GameTextForPlayer(issuerid, "Cho nguoi choi do dong bo hoa.", 5000, 3);
		    return 0;
		}
		if(PlayerInfo[playerid][pNoDamage])
		{
		    GameTextForPlayer(issuerid, "Nguoi choi do dang GOD-MODE!", 5000, 3);
		    GameTextForPlayer(playerid, "Che do GOD dang bat!", 5000, 3);
		    return 0;
		}
		if(PlayerInfo[issuerid][pGodshand])
		{
	        SetPlayerHealth(playerid, 0.0);
	        new
			    Float:x,
			    Float:y,
			    Float:z;

			GetPlayerPos(playerid, x, y, z);

			CreateExplosionForPlayer(playerid, x, y, z, 6, 20.0);
	        GameTextForPlayer(issuerid, "~r~THUC THI.", 5000, 3);
		    SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "* God pick's up their hand and slams it onto %s, oliberating them.", GetPlayerNameEx(playerid));
		    SendProximityMessage(playerid, 30.0, COLOR_ORANGE, "** You have just witnessed a true miracle. **");
	        GameTextForPlayer(playerid, "DAMN BRUH, GET REKT", 5000, 3);
			PlayerInfo[issuerid][pGodshand] = 0;
			return 1;
		}
		/*if(PlayerInfo[playerid][pDraggedBy] != INVALID_PLAYER_ID)
		{
			PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s falls upon the ground as he gets shot on the back.", GetPlayerRPName(playerid));
		}*/
		if(IsPlayerInRangeOfPoint(playerid, 50.0, 1098.47, 19.32, 1000.68) && GetPlayerInterior(playerid) == 5 && !IsLawEnforcement(issuerid))
		{
		    new Float:iPos[3];
		    GameTextForPlayer(issuerid, "~r~Su dung sung ~w~ben trong ~g~Casino ~w~bi ~r~cam.", 5000, 3);
			GetPlayerPos(playerid, iPos[0], iPos[1], iPos[2]);
      		PlayerInfo[issuerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", issuerid, iPos[0], iPos[1], iPos[2]);
    		TogglePlayerControllable(issuerid, false);

		    return 0;
  		}
  		new playerTurfID, issuerTurfID;
		if((playerTurfID = GetNearbyTurf(playerid)) != -1 && TurfInfo[playerTurfID][tCapturer] != INVALID_PLAYER_ID || (issuerTurfID = GetNearbyTurf(issuerid)) != -1  && TurfInfo[issuerTurfID][tCapturer] != INVALID_PLAYER_ID)
		{
			if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[issuerid][pAdminDuty])
			{
			    if(!PlayerInfo[playerid][pBandana] && !IsLawEnforcement(playerid) || !PlayerInfo[playerid][pDuty] && IsLawEnforcement(playerid))
			    {
			        GameTextForPlayer(issuerid, "~w~Khong the ban tru khi nguoi choi deo bandana.", 5000, 3);
                    return 0;
				}
				else if(!PlayerInfo[issuerid][pBandana] && !IsLawEnforcement(issuerid) || !PlayerInfo[issuerid][pDuty] && IsLawEnforcement(issuerid))
				{
				    GameTextForPlayer(issuerid, "~w~Bandana hoac khan ran ban phai o tren.", 5000, 3);
				    return 0;
				}
				else if(playerTurfID == -1 && issuerTurfID != -1)
				{
				    GameTextForPlayer(issuerid, "~w~Nguoi choi do o ngoai gioi han Turf.", 5000, 3);
				    return 0;
				}
				else if(issuerTurfID == -1 && playerTurfID != -1)
				{
				    GameTextForPlayer(issuerid, "~w~Ban phai o ben trong turf.", 5000, 3);
				    return 0;
				}
	   		}
		}
		if(!PlayerInfo[playerid][pJoinedEvent] && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !PlayerInfo[playerid][pAdminDuty] && !PlayerInfo[issuerid][pAdminDuty])
		{
			PlayerInfo[playerid][pHurt] = 3;
		}
	}
	if(playerid != INVALID_PLAYER_ID && PlayerInfo[playerid][pNoDamage])
	{
		return 0; // for fall damage while on /god
	}
	return 1;
}

public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	/*if(playerid != INVALID_PLAYER_ID && issuerid)
	{
	    switch(weapon) // NO LONGER NEED AS HH IS IMPOSSIBLE NOW
	    {
	        case 22..34:
	        {
			    if(gettime() - PlayerInfo[playerid][pLastUpdate] < 2 && PlayerInfo[playerid][pAdmin] < 2)
			    {
			        new
			            Float:health,
			            Float:armour;

			        GetPlayerHealth(playerid, health);
					GetPlayerArmour(playerid, armour);

				    if(PlayerInfo[playerid][pGodmode] == 0)
				    {
					    GetPlayerHealth(playerid, PlayerInfo[playerid][pGodmodeHP]);
					    GetPlayerArmour(playerid, PlayerInfo[playerid][pGodmodeAP]);
					}

					if(health != 0.0 && health == PlayerInfo[playerid][pGodmodeHP] && armour == PlayerInfo[playerid][pGodmodeAP])
					{
						PlayerInfo[playerid][pGodmode]++;
					}

					if(PlayerInfo[playerid][pGodmode] >= 15 && !PlayerInfo[playerid][pKicked])
					{
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly using health hacks.", GetPlayerRPName(playerid), playerid);
						Log_Write("log_cheat", "%s (uid: %i) is possibly using health hacks.", GetPlayerRPName(playerid), PlayerInfo[playerid][pID]);
						PlayerInfo[playerid][pGodmode] = 0;
			        }
			    }
	        }
	    }


	}*/
	new string[50];
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID) // motherfucker caused us to start out with bed rep BIATCH
	{
		if(PlayerInfo[issuerid][pToggleHUD] == 0 && IsPlayerConnected(issuerid))
		{
			format(string, sizeof(string), "~g~Sat Thuong: Ban danh %s voi %.0f sat thuong.", GetPlayerRPName(playerid), amount);
			TextDrawSetString(Damage[issuerid], string);
			TextDrawShowForPlayer(issuerid, Damage[issuerid]);
			PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 15.0);
			KillTimer(PlayerInfo[issuerid][pDamageTimer]);
			PlayerInfo[issuerid][pDamageTimer] = SetTimerEx("DestroyDamageTD", 1500, false, "i", issuerid);
		}
		if(IsPlayerConnected(issuerid))
		{
		    if(weapon == 4 && PlayerHasWeapon(issuerid, 4) && IsPlayerInRangeOfPlayer(playerid, issuerid, 20.0) && amount > 100.0)
		    {
		        SetPlayerHealth(playerid, 0.0);
		        HandleContract(playerid, issuerid);
		    }

	    	if(PlayerInfo[playerid][pToggleHUD] == 0)
			{
				format(string, sizeof(string), "~r~Sat Thuong: %s danh ban voi %.0f sat thuong.", GetPlayerRPName(issuerid), amount);
				TextDrawSetString(Damage[playerid], string);
				TextDrawShowForPlayer(playerid, Damage[playerid]);
				PlayerPlaySound(playerid, 17802, 0.0, 0.0, 15.0);
				KillTimer(PlayerInfo[playerid][pDamageTimer]);
				PlayerInfo[playerid][pDamageTimer] = SetTimerEx("DestroyDamageTD", 1500, false, "i", playerid);
			}
		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, '%s', '0.0', '0.0', '0.0', %i)", issuerid, weapon, BULLET_HIT_TYPE_PLAYER, playerid, GetPlayerNameEx(playerid), gettime());
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
/*public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if((22 <= weaponid <= 36) && damagedid != INVALID_PLAYER_ID && !PlayerHasWeapon(playerid, weaponid, true) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was autobanned by %s, reason: %s", GetPlayerRPName(playerid), SERVER_ANTICHEAT, string);
		BanPlayer(playerid, SERVER_ANTICHEAT, string);
	    return 0;
	}

	if((damagedid != INVALID_PLAYER_ID && weaponid == 23) && ((IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT) && PlayerInfo[playerid][pTazer] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
	{
		if(PlayerInfo[damagedid][pAdminDuty])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't taze an administrator currently on duty.");
		}
		if(PlayerInfo[damagedid][pTazedTime])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "This player has already been tazed.");
		}
		if(!IsPlayerInRangeOfPlayer(playerid, damagedid, 10.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't taze that player. They are too far from you.");
		}
		if((22 <= GetPlayerWeapon(damagedid) <= 38) && IsPlayerAiming(damagedid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
		}
		if(IsPlayerInAnyVehicle(damagedid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't taze a player who is in a vehicle.");
		}

		PlayerInfo[damagedid][pTazedTime] = 10;
		TogglePlayerControllable(damagedid, 0);

		ApplyAnimation(damagedid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
		GameTextForPlayer(damagedid, "~r~Tazed", 5000, 3);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s aims their tazer full of electricity at %s and stuns them.", GetPlayerRPName(playerid), GetPlayerRPName(damagedid));
		SendClientMessageEx(damagedid, COLOR_AQUA, "You've been {FF6347}stunned{33CCFF} with electricity by %s's tazer.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetPlayerRPName(damagedid));
	}

	if(PlayerInfo[playerid][pToggleHUD] == 0 && IsPlayerConnected(playerid))
	{
		new string[50];
		format(string, sizeof(string), "~g~Damage: You hit %s for %.0f damage.", GetPlayerRPName(damagedid), amount);
		TextDrawSetString(Damage[playerid], string);
		TextDrawShowForPlayer(playerid, Damage[playerid]);
		PlayerPlaySound(playerid, 17802, 0.0, 0.0, 15.0);
		KillTimer(PlayerInfo[playerid][pDamageTimer]);
		PlayerInfo[playerid][pDamageTimer] = SetTimerEx("DestroyDamageTD", 1500, false, "i", playerid);
	}

	if(damagedid != INVALID_PLAYER_ID && IsPlayerConnected(damagedid))
	{
	    switch(weaponid)
	    {
	        case 22..34:
	        {
			    if(gettime() - PlayerInfo[damagedid][pLastUpdate] < 2 && PlayerInfo[damagedid][pAdmin] < 2)
			    {
			        new
			            Float:health,
			            Float:armour;

			        GetPlayerHealth(damagedid, health);
					GetPlayerArmour(damagedid, armour);

				    if(PlayerInfo[damagedid][pGodmode] == 0)
				    {
					    GetPlayerHealth(damagedid, PlayerInfo[damagedid][pGodmodeHP]);
					    GetPlayerArmour(damagedid, PlayerInfo[damagedid][pGodmodeAP]);
					}

					if(health != 0.0 && health == PlayerInfo[damagedid][pGodmodeHP] && armour == PlayerInfo[damagedid][pGodmodeAP])
					{
						PlayerInfo[damagedid][pGodmode]++;
					}

					if(PlayerInfo[damagedid][pGodmode] >= 15 && !PlayerInfo[damagedid][pKicked])
					{
						SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly using health hacks.", GetPlayerRPName(damagedid), damagedid);
						Log_Write("log_cheat", "%s (uid: %i) is possibly using health hacks.", GetPlayerRPName(damagedid), PlayerInfo[damagedid][pID]);
						PlayerInfo[damagedid][pGodmode] = 0;
			        }
			    }
	        }
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, '%s', '0.0', '0.0', '0.0', %i)", playerid, weaponid, BULLET_HIT_TYPE_PLAYER, damagedid, GetPlayerNameEx(damagedid), gettime());
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	new string[50];

	if(IsPlayerConnected(issuerid))
	{
	    if(weaponid == 4 && PlayerHasWeapon(issuerid, 4) && IsPlayerInRangeOfPlayer(playerid, issuerid, 20.0) && amount > 100.0)
	    {
	        SetPlayerHealth(playerid, 0.0);
	        HandleContract(playerid, issuerid);
	    }

    	if(PlayerInfo[playerid][pToggleHUD] == 0)
		{
			format(string, sizeof(string), "~r~Damage: %s hit you for %.0f damage.", GetPlayerRPName(issuerid), amount);
			TextDrawSetString(Damage[playerid], string);
			TextDrawShowForPlayer(playerid, Damage[playerid]);
			PlayerPlaySound(playerid, 17802, 0.0, 0.0, 15.0);
			KillTimer(PlayerInfo[playerid][pDamageTimer]);
			PlayerInfo[playerid][pDamageTimer] = SetTimerEx("DestroyDamageTD", 1500, false, "i", playerid);
		}
	}
	return 1;
}*/

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(RobberyInfo[rPlanning] && objectid == RobberyInfo[rObjects][1])
	{
	    new bank[32];

     	if(GetPlayerVirtualWorld(playerid) == GetStaticEntranceWorld("Mulholland Bank")) {
     	    bank = "Mulholland Bank";
	    } else if(GetPlayerVirtualWorld(playerid) == GetStaticEntranceWorld("Rodeo Bank")) {
	        bank = "Rodeo Bank";
	    }

		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo[rRobbers][i], 3401, 0.0, 0.0, 0.0);
			    GameTextForPlayer(RobberyInfo[rRobbers][i], "~w~Heist Bat Dau", 5000, 1);
			    SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo[rRobbers][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
				PlayerInfo[RobberyInfo[rRobbers][i]][pWantedLevel] = 6;
				PlayerInfo[RobberyInfo[rRobbers][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Bank Robbery')", PlayerInfo[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", PlayerInfo[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
		        SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: Mot vu cuop dang xay ra tai %s. Co %i ten cuop duoc xac nhan.", bank, GetBankRobbers());
			}
		}

        GetDynamicObjectPos(RobberyInfo[rObjects][1], x, y, z);
	    MoveDynamicObject(RobberyInfo[rObjects][0], 1678.248901, -988.181152, 670.224853, 5.0, 90.000000, 0.000000, 0.000000);
		DestroyDynamicObject(RobberyInfo[rObjects][1]);

	    CreateExplosion(x, y, z, 12, 6.0);
		SendClientMessageToAllEx(COLOR_AQUA, "Tin Nong: Mot vu cuop da dien ra tai %s!", bank);

		RobberyInfo[rText][0] = CreateDynamic3DTextLabel("/lootbox\nde cuop thung tien.", COLOR_YELLOW, 1680.2344, -994.6146, 671.0032, 10.0);
		RobberyInfo[rText][1] = CreateDynamic3DTextLabel("/lootbox\nde cuop thung tien.", COLOR_YELLOW, 1680.2335, -998.6115, 671.0032, 10.0);
		RobberyInfo[rText][2] = CreateDynamic3DTextLabel("/lootbox\nde cuop thung tien.", COLOR_YELLOW, 1680.2344, -1002.5356, 671.0032, 10.0);
		RobberyInfo[rText][3] = CreateDynamic3DTextLabel("/lootbox\nde cuop thung tien.", COLOR_YELLOW, 1674.2708, -998.4954, 671.0032, 10.0);
		RobberyInfo[rText][4] = CreateDynamic3DTextLabel("/lootbox\nde cuop thung tien.", COLOR_YELLOW, 1674.2708, -994.5173, 671.0032, 10.0);

		RobberyInfo[rStarted] = 1;
		RobberyInfo[rStolen] = 0;
		RobberyInfo[rPlanning] = 0;
	}
	if(PlayerInfo[playerid][pDeleteMode])
	{
		PlayerInfo[playerid][pSelected] = objectid;
		ShowDialogToPlayer(playerid, DIALOG_DELETEOBJECT);
	}

	return 1;
}

public OnPlayerSuspectedForAimbot(playerid,hitid,weaponid,warnings)
{
	aimWarnings[playerid]++;
	new str[144], Float:Wstats[BUSTAIM_WSTATS_SHOTS];
	/*if(warnings & WARNING_OUT_OF_RANGE_SHOT)
	{
	    format(str, sizeof(str),"<BustAim> [#%i] %s(%i) fired shots from a distance greater than the %s's fire range (normal:%i)",aimWarnings[playerid],GetPlayerRPName(playerid),playerid,GetWeaponNameEx(weaponid),BustAim::GetNormalWeaponRange(weaponid));
		SendAdminMessage(COLOR_YELLOW, str);
		BustAim::GetRangeStats(playerid,Wstats);
		format(str, sizeof(str),"<BustAim> Shooter -> Victim Distance (SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendAdminMessage(COLOR_YELLOW, str);
	}*/
	if(warnings & WARNING_PROAIM_TELEPORT)
	{
	    format(str, sizeof(str),"<BustAim> [#%i] %s(%i) dang su dung proaim (teleport detected)",aimWarnings[playerid],GetPlayerRPName(playerid),playerid);
		SendAdminMessage(COLOR_YELLOW, str);
		BustAim::GetTeleportStats(playerid,Wstats);
		format(str, sizeof(str),"<BustAim> Bullet -> Khoang cach nan nhan(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendAdminMessage(COLOR_YELLOW, str);
	}
	if(warnings & WARNING_RANDOM_AIM)
	{
	    format(str, sizeof(str),"<BustAim> [#%i] %s(%i) bi nghi ngo dang su dung Aimbot (danh voi muc tieu ngau nhien voi %s)",aimWarnings[playerid],GetPlayerRPName(playerid),playerid,GetWeaponNameEx(weaponid));
		SendAdminMessage(COLOR_YELLOW, str);
		BustAim::GetRandomAimStats(playerid,Wstats);
		format(str, sizeof(str),"<BustAim> Random Aim Offsets: 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendAdminMessage(COLOR_YELLOW, str);
	}
	/*if(warnings & WARNING_CONTINOUS_SHOTS)
	{
	    format(str, sizeof(str),"<BustAim>[#%i] %s(%i) has fired 10 shots continously with %s(%d)",aimWarnings[playerid],GetPlayerRPName(playerid),playerid,GetWeaponNameEx(weaponid),weaponid);
		SendAdminMessage(COLOR_YELLOW, str);
	}*/
	if(aimWarnings[playerid] >= 10 && PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: Aimbot", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
 		BanPlayer(playerid, SERVER_ANTICHEAT, "Aimbot");
	}
	return 0;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if((PlayerInfo[playerid][pPaintball] > 0) && (GetPlayerVirtualWorld(playerid) != 1001 && GetPlayerVirtualWorld(playerid) != 1000))
	{
	    if(gettime() - PlayerInfo[playerid][pLastShot] >= 3)
	    {
	    	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] dang su dung vu khi paintball ben ngoai paintball.", GetPlayerRPName(playerid), playerid);
			PlayerInfo[playerid][pLastShot] = gettime();
	 		ResetPlayerWeapons(playerid);
		}

		return 0;
	}
	if((PlayerInfo[playerid][pJoinedEvent]) && (GetPlayerInterior(playerid) != EventInfo[eInterior] || GetPlayerVirtualWorld(playerid) != EventInfo[eWorld]))
	{
	    if(gettime() - PlayerInfo[playerid][pLastShot] >= 3)
	    {
		    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] dang su dung vu khi su kien ben ngoai su kien.", GetPlayerRPName(playerid), playerid);
			PlayerInfo[playerid][pLastShot] = gettime();
			ResetPlayerWeapons(playerid);
		}

		return 0;
	}
	new entranceid;
	if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(playerid, 150.0, 1419.6472, 4.0132, 1002.3906) && (entranceid = GetInsideEntrance(playerid)) != -1 && EntranceInfo[entranceid][eType] != 1)
	{
	    if(gettime() - PlayerInfo[playerid][pLastShot] >= 3)
	    {
		    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] dang su dung vu khi duel ben ngoai khu vuc duel.", GetPlayerRPName(playerid), playerid);
			PlayerInfo[playerid][pLastShot] = gettime();
			ResetPlayerWeapons(playerid);
		}

		return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		if((1 <= EventInfo[eType] <= 2) && PlayerInfo[playerid][pJoinedEvent])
		{
		    if(!EventInfo[eStarted])
		    {
		     	GameTextForPlayer(playerid, "~r~Dung ban cho den khi su kien bat dau!", 2000, 3);
			    return 0;
			}
			else if(EventInfo[eType] == 2 && PlayerInfo[hitid][pEventTeam] == PlayerInfo[playerid][pEventTeam])
			{
	            GameTextForPlayer(playerid, "~r~Dung TeamKill!", 2000, 3);
			    return 0;
			}
		}
		if(PlayerInfo[playerid][pPaintball] == 2 && PlayerInfo[hitid][pPaintballTeam] == PlayerInfo[playerid][pPaintballTeam])
		{
            GameTextForPlayer(playerid, "~r~Dung TeamKill!", 2000, 3);
		    return 0;
		}
		if(PlayerInfo[playerid][pAcceptedHelp])
		{
		    GameTextForPlayer(playerid, "~r~Dung ban vao Newbie!", 2000, 3);
		    return 0;
		}
	}

    if(weaponid != 22 && weaponid != 26 && weaponid != 28 && weaponid != 32)
	{
		if(PlayerInfo[playerid][pClip] > 0)
		{
		    new
				string[12];

		    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
		    PlayerInfo[playerid][pClip]--;

		    format(string, sizeof(string), "%i", PlayerInfo[playerid][pClip]);
		    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][5], string);
		}
	}


	if(!PlayerHasWeapon(playerid, weaponid, true) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked] && gettime() > PlayerInfo[playerid][pACTime])
	{
	    new
	        string[48];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: %s", GetPlayerRPName(playerid), SERVER_ANTICHEAT, string);
		BanPlayer(playerid, SERVER_ANTICHEAT, string);
	    return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!PlayerInfo[hitid][pJoinedEvent] && !PlayerInfo[hitid][pPaintball] && PlayerInfo[hitid][pDueling] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, PlayerInfo[hitid][pArmor]);
		}
	}

    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(22 <= GetPlayerWeapon(playerid) <= 36)
		{
	  		if(PlayerInfo[playerid][pACAmmo] == GetPlayerAmmo(playerid))
			{
	  			PlayerInfo[playerid][pACFired]++;
			}

		    if(!PlayerInfo[playerid][pReloading] && PlayerInfo[playerid][pACFired] >= 20)
    		{
		        if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
    		    {
					SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da tu dong bi Kick vi lay dan vo han.", GetPlayerRPName(playerid));
					Log_Write("log_cheat", "%s (uid: %i) da tu dong bi kick vi lay dan vo han.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
					KickPlayer(playerid);
				}
			}

			PlayerInfo[playerid][pACAmmo] = GetPlayerAmmo(playerid);
		}
	}

	// Anti CBug moved to WC_cbugpunishment
	/*if((23 <= weaponid <= 25) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new interval, time = NetStats_GetConnectedTime(playerid);

		switch(weaponid)
		{
		    case 23: interval = 200;
		    case 24: interval = 600;
			case 25: interval = 500;
	    }

     	if((time - PlayerInfo[playerid][pCBug]) < interval && PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !(PlayerInfo[playerid][pJoinedEvent] && EventInfo[eCS]))
	    {
	        if((hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID) && !PlayerInfo[hitid][pAdminDuty])
	        {
		        //ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
		        //SetPlayerHealth(playerid, GetPlayerHealthEx(playerid) - 30.0);
		        //GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
 	        	//SendClientMessage(playerid, COLOR_LIGHTRED, "** Please do not abuse the C-Bug glitch. This action has been reported to the admins.");

				GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
		        ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
		        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly abusing C-Bug with a %s.", GetPlayerRPName(playerid), playerid, GetWeaponNameEx(weaponid));
		        SetPlayerArmedWeapon(playerid, 0);
		        PlayerInfo[playerid][pCBug] = time;
		        return 0;
	        }
	    }

	    PlayerInfo[playerid][pCBug] = time;
	}*/

	// Rapid fire detection
	if((22 <= weaponid <= 27) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pAdmin] < 2)
	{
	    new time = NetStats_GetConnectedTime(playerid);

	    if((time - PlayerInfo[playerid][pLastFire]) < 25)
	    {
	        PlayerInfo[playerid][pRapidFire]++;

	        if(PlayerInfo[playerid][pRapidFire] >= 5)
	        {
	            SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: Rapid fire", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
             	BanPlayer(playerid, SERVER_ANTICHEAT, "Rapid fire");
	        }
	    }

	    PlayerInfo[playerid][pLastFire] = time;
	}

	/*else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, null, '%f', '%f', '%f', %i)", playerid, weaponid, hittype, hitid, fX, fY, fZ, gettime());
	}*/

	return 1;
}
stock CanPlayerCbug(playerid)
{
    if((23 <= GetPlayerWeapon(playerid) <= 25) || GetPlayerWeapon(playerid) == 34)
	{
     	if(PlayerInfo[playerid][pPaintball] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID && !(PlayerInfo[playerid][pJoinedEvent] && EventInfo[eCS]))
		{
	    	return 0;
		}
	}
 	return 1;
}
/*public WC_CbugPunishment(playerid, weapon)
{
	if(!CanPlayerCbug(playerid))
 	{
        if(!PlayerInfo[playerid][pAdminDuty])
        {
	        //ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
	        //SetPlayerHealth(playerid, GetPlayerHealthEx(playerid) - 30.0);
	        //GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
        	//SendClientMessage(playerid, COLOR_LIGHTRED, "** Please do not abuse the C-Bug glitch. This action has been reported to the admins.");

			GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
	        ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
	        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly abusing C-Bug with a %s.", GetPlayerRPName(playerid), playerid, GetWeaponNameEx(weapon));
	        SetPlayerArmedWeapon(playerid, 0);
	        FreezeSyncData(playerid, false);
			//ClearAnimations(playerid, 1);
	        return 0;
        }
   	}
   	return 1;
}*/

public OnPlayerTeleport(playerid, Float:distance)
{
	if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]))
	    {
		    PlayerInfo[playerid][pACWarns]++;

		    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		    {
	    	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co the hack teleport (khoang cach: %.1f).", GetPlayerRPName(playerid), playerid, distance);
	        	Log_Write("log_cheat", "%s (uid: %i) co the hack teleportd (khoang cach: %.1f)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], distance);
			}
			else
			{
		    	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: Teleport hacks", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
		    	BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport hacks");
   }
		}
	}

	return 1;
}

public OnPlayerAirbreak(playerid)
{
	if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
	{
	    PlayerInfo[playerid][pACWarns]++;

	    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
	    {
	        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co the dang su dung AirBreak.", GetPlayerRPName(playerid), playerid);
	        Log_Write("log_cheat", "%s (uid: %i) co the su dung AirBreak.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);
		}
		else
		{
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, reason: Airbreak", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
		    BanPlayer(playerid, SERVER_ANTICHEAT, "Airbreak");
		}
	}

	return 1;
}

public OnPlayerSelectionMenuResponse(playerid, extraid, response, listitem, modelid)
{
	switch(extraid)
	{
	    case MODEL_SELECTION_CLOTHES:
	    {
	        if(response)
	        {
		        new
					businessid = GetInsideBusiness(playerid);

		        if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
		        {
		            if(BusinessInfo[businessid][bProducts] <= 0)
		            {
		                return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep nay da het hang.");
		            }
		            if(PlayerInfo[playerid][pVIPPackage] == 0 && PlayerInfo[playerid][pCash] < 1000)
	                {
	                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong du tien. Ban khong the mua quan ao moi.");
	                }
					if((PlayerInfo[playerid][pVIPPackage] == 0 && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC) && (!(0 <= modelid <= 311) || (265 <= modelid <= 267) || (274 <= modelid <= 288) || (300 <= modelid <= 302) || (306 <= modelid <= 311)))
					{
					    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung skin do vi no khong hop le hoac danh rieng cho to chuc.");
					}

					if(PlayerInfo[playerid][pVIPPackage] == 0)
					{
					    new price = 100;

	                    if(PlayerInfo[playerid][pTraderUpgrade] > 0)
	                    {
							price -= percent(price, (PlayerInfo[playerid][pTraderUpgrade] * 10));
							SendClientMessageEx(playerid, COLOR_YELLOW3, "Trader Perk: Dac quyen thuong nhan cap %i/3 cua ban da giam gia mat hang nay xuong $%i.", PlayerInfo[playerid][pTraderUpgrade], price);
	                    }

						GivePlayerCash(playerid, -price);

						BusinessInfo[businessid][bCash] += price;
	                	BusinessInfo[businessid][bProducts]--;

	                	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                	mysql_tquery(connectionID, queryBuffer);

	                	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s tra %s cho chu tiem va nhan mot bo quan ao moi.", GetPlayerRPName(playerid), FormatNumber(price));
	             		SendClientMessageEx(playerid, COLOR_WHITE, "Ban da thay quan ao cua minh voi gia $%i.", price);
	                }
	                else
	                {
	                    SendClientMessage(playerid, COLOR_VIP, "VIP Perk: Ban da thay quan ao mien phi.");
					}

					SetScriptSkin(playerid, modelid);
		        }
			}
	    }
	    case MODEL_SELECTION_FURNITURE:
	    {
	        if(response)
	        {
	            new houseid = GetInsideHouse(playerid);

	            if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
	            {
		            PurchaseFurniture(playerid, listitem + PlayerInfo[playerid][pFurnitureIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
	    case MODEL_SELECTION_LANDOBJECTS:
	    {
	        if(response)
	        {
	            new landid = GetNearbyLand(playerid);

		    	if(landid >= 0 && HasLandPerms(playerid, landid))
				{
					PurchaseLandObject(playerid, landid, listitem + PlayerInfo[playerid][pFurnitureIndex]);
				}
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
	    case MODEL_SELECTION_CLOTHING:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
					PreviewClothing(playerid, listitem + PlayerInfo[playerid][pClothingIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
	    }
	    case MODEL_SELECTION_COPCLOTHING:
	    {
	        if((response) && IsLawEnforcement(playerid))
	        {
	            SetPlayerAttachedObject(playerid, 9, modelid, copClothing[listitem][cBone]);

				PlayerInfo[playerid][pEditType] = EDIT_COP_CLOTHING;
		        PlayerInfo[playerid][pSelected] = listitem;

				SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chon {FF6347}%s{33CCFF}. Su dung trinh chinh sua de sap xep quan ao cua ban va nhap vao bieu tuong dia de luu.", copClothing[listitem][cName]);
        		EditAttachedObject(playerid, 9);
	        }
	    }
	    case MODEL_SELECTION_VIPCLOTHES:
	    {
	        if((response) && PlayerInfo[playerid][pVIPPackage] > 0)
	        {
	            SetScriptSkin(playerid, modelid);
	            SendClientMessage(playerid, COLOR_VIP, "VIP Perk: Ban da thay quan ao mien phi.");
	        }
		}
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	// Finally... an end to that ANNOYING spectate bug!

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 500, false, "ii", i, playerid);
	    }
	}

	if((newinteriorid == 0) && IsPlayerInBankRobbery(playerid))
	{
	    PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	}

	/*if(PlayerInfo[playerid][pPreviewHouse] >= 0)
	{
		PlayerInfo[playerid][pPreviewHouse] = -1;
  		PlayerInfo[playerid][pPreviewType] = 0;
    	PlayerInfo[playerid][pPreviewTime] = 0;
    	SendClientMessage(playerid, COLOR_LIGHTRED, "Preview cancelled. You left your house interior.");
	}*/

	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(PlayerInfo[playerid][pKicked])
		return 0;

	if(!PlayerInfo[playerid][pLogged])
		return 1;

	new vehicleid = GetPlayerVehicleID(playerid), keys, string[128], index = GetPlayerAnimationIndex(playerid), drunkLevel = GetPlayerDrunkLevel(playerid);

	if(PlayerInfo[playerid][pCurrentWeapon] != GetPlayerWeapon(playerid))
	{
	    PlayerInfo[playerid][pCurrentWeapon] = GetPlayerWeapon(playerid);
	    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

	    PlayerInfo[playerid][pACAmmo] = PlayerInfo[playerid][pCurrentAmmo];
	    PlayerInfo[playerid][pACFired] = 0;
	    PlayerInfo[playerid][pCBug] = 0;
		PlayerInfo[playerid][pClip] = GetWeaponClipSize(PlayerInfo[playerid][pCurrentWeapon]);

		// Weapon hacks
		if((gAnticheat) && PlayerInfo[playerid][pAdmin] < 2)
		{
			if(PlayerInfo[playerid][pCurrentWeapon] > 1 && !PlayerHasWeapon(playerid, PlayerInfo[playerid][pCurrentWeapon], true) && !PlayerInfo[playerid][pKicked])
			{
			    PlayerInfo[playerid][pACWarns]++;

			    if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
				    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co mot %s da khu mau.", GetPlayerRPName(playerid), playerid, GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]));
				    Log_Write("log_cheat", "%s (uid: %i) co mot khau %s da khu mau voi %i co so dan.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
				}
				else
				{
					format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(PlayerInfo[playerid][pCurrentWeapon]));

					SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: %s", GetPlayerRPName(playerid), SERVER_ANTICHEAT, string);
					BanPlayer(playerid, SERVER_ANTICHEAT, string);
				}
			}
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pCurrentWeapon] > 0 && GetWeaponClipSize(PlayerInfo[playerid][pCurrentWeapon]) > 0 && !PlayerInfo[playerid][pToggleHUD] && !PlayerInfo[playerid][pToggleTextdraws])
    {
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][5]);
    }
    else
    {
        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    PlayerInfo[playerid][pReloading] = 1;
		}

	    PlayerInfo[playerid][pACFired] = 0;
	}

	if(PlayerInfo[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		PlayerInfo[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		PlayerInfo[playerid][pReloading] = 0;
	}

	if(PlayerInfo[playerid][pCurrentVehicle] != vehicleid)
	{
	    PlayerInfo[playerid][pCurrentVehicle] = vehicleid;
	    PlayerInfo[playerid][pVehicleCount]++;

	    if((!IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 539) && PlayerInfo[playerid][pVehicleCount] >= 4 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
	    {
	        SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: Car warping", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
	        BanPlayer(playerid, SERVER_ANTICHEAT, "Car warping");
	        return 0;
		}
	}

	if((44 <= GetPlayerWeapon(playerid) <= 45) && keys & KEY_FIRE)
	{
	    return 0;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pCurrentWeapon] > 0 && GetWeaponClipSize(PlayerInfo[playerid][pCurrentWeapon]) > 0 && !PlayerInfo[playerid][pToggleHUD] && !PlayerInfo[playerid][pToggleTextdraws])
    {
        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][5]);
    }
    else
    {
        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	}

	if(PlayerInfo[playerid][pCurrentAmmo] != GetPlayerAmmo(playerid))
	{
	    if(PlayerInfo[playerid][pCurrentAmmo] > GetPlayerAmmo(playerid))
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 22, 26, 28, 32:
	            {
			        PlayerInfo[playerid][pClip] -= PlayerInfo[playerid][pCurrentAmmo] - GetPlayerAmmo(playerid);
				}
			}

	   		if(PlayerInfo[playerid][pClip] < 0)
      		{
       			PlayerInfo[playerid][pClip] = 0;
			}
		}

	    PlayerInfo[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    PlayerInfo[playerid][pReloading] = 1;
		}

	    PlayerInfo[playerid][pACFired] = 0;
	}
	if(PlayerInfo[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		PlayerInfo[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		PlayerInfo[playerid][pReloading] = 0;
	}
	if(!PlayerInfo[playerid][pToggleHUD] && !PlayerInfo[playerid][pToggleTextdraws] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new
			Float:health,
			Float:armour;

		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);

		if(floatround(armour) > 0)
		{
			format(string, sizeof(string), "%.0f", armour);
			PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][3], string);
			PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
		}

		format(string, sizeof(string), "%.0f", health);
		PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][4], string);
		PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);

		if(PlayerInfo[playerid][pReloading]) {
		    string = "0";
		} else {
			format(string, sizeof(string), "%i", PlayerInfo[playerid][pClip]);
		}
		PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][5], string);
	}

	if(GetPlayerWeapon(playerid) > 1 && PlayerInfo[playerid][pInjured])
	{
		SetPlayerArmedWeapon(playerid, 0);
	}

	if(!drunkLevel)
	{
	    SetPlayerDrunkLevel(playerid, 1000);
	}

	if(PlayerInfo[playerid][pDrunkLevel] != drunkLevel)
	{
	    new value = PlayerInfo[playerid][pDrunkLevel] - drunkLevel;

	    if(0 <= value <= 250)
	    {
	        PlayerInfo[playerid][pFPS] = value;
		}

	    PlayerInfo[playerid][pDrunkLevel] = drunkLevel;
	}

    if(!GetPlayerInterior(playerid))
	{
     	SetPlayerTime(playerid, gWorldTime, 0);
	}
	else
	{
	    new garageid;

		if((garageid = GetInsideGarage(playerid)) >= 0 && GarageInfo[garageid][gType] == 2)
		    SetPlayerTime(playerid, 0, 0);
	    else
          	SetPlayerTime(playerid, 12, 0);
	}

    if((keys & KEY_HANDBRAKE) && GetPlayerWeapon(playerid) == 34)
	{
 		if(!PlayerInfo[playerid][pSniper])
	    {
		    for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
		    {
	    	    if(ClothingInfo[playerid][i][cAttached]) RemovePlayerAttachedObject(playerid, i);
			}

		    PlayerInfo[playerid][pSniper] = 1;
		}
	}
	else if(PlayerInfo[playerid][pSniper])
	{
	    SetPlayerClothing(playerid);
	    PlayerInfo[playerid][pSniper] = 0;
	}
	if(PlayerInfo[playerid][pNoKnife] && GetPlayerWeapon(playerid) == 4)
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
	if(PlayerInfo[playerid][pAnimation] != index)
	{
	    if(PlayerInfo[playerid][pLockBreak] != INVALID_VEHICLE_ID)
	    {
	        vehicleid = PlayerInfo[playerid][pLockBreak];

	        if(!IsValidVehicle(vehicleid) || VehicleInfo[vehicleid][vOwnerID] == 0)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong con dot nhap vao chiec xe nay khi no duoc cat.");
				CancelBreakIn(playerid);
	        }
	        else if(GetNearbyVehicle(playerid) != vehicleid)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong con dot nhap phuong tien nay khi roi khoi vi tri cua no.");
				CancelBreakIn(playerid);
	        }
	        else if(VehicleInfo[vehicleid][vLocked] == 0)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong con dot nhap phuong tien nay nua vi no da duoc mo khoa.");
	            CancelBreakIn(playerid);
	        }
	        else if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong con dot nhap vao phuong tien nay vi ban khong di bo.");
	            CancelBreakIn(playerid);
	        }
	        else
	        {
			    switch(index)
			    {
					case 17..19, 1545..1547, 312..314, 1136..1138, 472..474, 482..484, 494..496, 504..505, 1165:
					{
					    if(IsValidVehicle(vehicleid) && (IsPlayerAtVehicleDoor(playerid, vehicleid, DOOR_DRIVER) || IsPlayerAtVehicleDoor(playerid, vehicleid, DOOR_PASSENGER)))
					    {
					        new
					            damage[4];

					        GetVehicleDamageStatus(vehicleid, damage[0], damage[1], damage[2], damage[3]);

							if(2 <= GetPlayerWeapon(playerid) <= 9)
							    PlayerInfo[playerid][pLockHealth] -= 20.0;
					        else
								PlayerInfo[playerid][pLockHealth] -= 10.0;

					        if(PlayerInfo[playerid][pLockHealth] <= 0)
					        {
					            VehicleInfo[vehicleid][vLocked] = 0;

								SetVehicleParams(vehicleid, VEHICLE_DOORS, false);
						        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

								GameTextForPlayer(playerid, "~g~Mo Khoa Xe!", 3000, 6);
								SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da pha thanh cong canh cua cua %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));

								CancelBreakIn(playerid);
								UpdateVehicleDamageStatus(vehicleid, damage[0], 262144, damage[2], damage[3]);
					        }
					        else
					        {
								new
								    Float:x,
								    Float:y,
								    Float:z,
									garageid = GetVehicleGarage(vehicleid);

		      					if(!GetVehicleParams(vehicleid, VEHICLE_ALARM))
		      					{
		      					    if(VehicleInfo[vehicleid][vAlarm] > 0)
									{
										foreach(new i : Player)
		      					    	{
		      					        	if(IsVehicleOwner(i, vehicleid))
		      					        	{
		      					        	    SendClientMessageEx(i, COLOR_YELLOW, "** Tin tu OnStar: Bao dong da kich hoat tren %s cua ban o %s, Ph: 999 **", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
											}

											if(GetFactionType(i) == FACTION_POLICE)
											{
												if(VehicleInfo[vehicleid][vAlarm] == 2)
												{
												    SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: Bao dong da duoc kich hoat tren %s's %s o %s. **", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			      					            }
			      					            else if(VehicleInfo[vehicleid][vAlarm] == 3)
												{
												    if(PlayerInfo[playerid][pCP] == CHECKPOINT_NONE)
												    {
												        PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

												        if(garageid >= 0)
														{
													        SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
												        }
														else
														{
												            GetVehiclePos(vehicleid, x, y, z);
												            SetPlayerCheckpoint(playerid, x, y, z, 3.0);
												        }
												    }

												    SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: Bao dong da duoc kich hoat tren %s's %s o %s (danh dau tren map). **", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			      					            }
		      					            }
		      					        }
		      					    }

		      					    SetVehicleParams(vehicleid, VEHICLE_ALARM, true);
								}

		                        GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, z);
		                        UpdateVehicleDamageStatus(vehicleid, damage[0], 131072, damage[2], damage[3]);

								format(string, sizeof(string), "%.0f HP", PlayerInfo[playerid][pLockHealth]);

								if(PlayerInfo[playerid][pLockText] == Text3D:INVALID_3DTEXT_ID)
								{
								    if(IsPlayerAtVehicleDoor(playerid, PlayerInfo[playerid][pLockBreak], DOOR_DRIVER)) {
									    PlayerInfo[playerid][pLockText] = CreateDynamic3DTextLabel(string, COLOR_GREEN, -x * 2, y + 0.25, z, 5.0, .attachedvehicle = vehicleid);
									} else if(IsPlayerAtVehicleDoor(playerid, PlayerInfo[playerid][pLockBreak], DOOR_PASSENGER)) {
									    PlayerInfo[playerid][pLockText] = CreateDynamic3DTextLabel(string, COLOR_GREEN, x * 2, y + 0.25, z, 5.0, .attachedvehicle = vehicleid);
									}
								}
								else
								{
								    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][pLockText], COLOR_GREEN, string);
								}

								KillTimer(PlayerInfo[playerid][pLockTimer]);
								PlayerInfo[playerid][pLockTimer] = SetTimerEx("DestroyLockText", 5000, false, "i", playerid);
							}
					    }
					}
			    }
			}
		}

	    PlayerInfo[playerid][pAnimation] = index;
	}
	//Textdraw Update For Player
	if(IsPlayerAndroid(playerid))
	{
		WantedTextdraw(playerid);
	    TextdrawCus(playerid);
	    Show_Weapon(playerid);
	}
	//------------------------
	if(PlayerInfo[playerid][pHours] == PlayerInfo[playerid][pLevel] * 5)
	{
		return UpdateLevel(playerid);
	}
	PlayerInfo[playerid][pLastUpdate] = gettime();
	return 1;
}

stock SetupSideMission(playerid, sidemission)
{
	new ParkAssasinationVehicle[1], ParkAssasinationNPC[1];
	switch(sidemission)
	{
		case PARK_ASSASINATION:
		{
			if(PlayerInfo[playerid][pParkAssasination] == 0)
			{
				DestroyVehicle(ParkAssasinationVehicle[0]);
				ParkAssasinationVehicle[0] = AddStaticVehicle(566,1979.2230,-1236.8502,24.2858,7.2015,30,8);
				ConnectNPC("Stranger", "PAP1");
				SendClientMessage(playerid, COLOR_WHITE, "Nguoi la het len: Nay! ban co the giup toi khong!");
				PlayerInfo[playerid][pParkAssasination] = 1;
			}
		}
	}
	return 1;
}
forward OnPlayerUpdateEx();
public OnPlayerUpdateEx()
{
    foreach(new playerid : Player)
    {
		if(PlayerInfo[playerid][pKicked])
	    	continue;

		if(!PlayerInfo[playerid][pLogged])
	    	continue;

		new keys, ud, lr;

		GetPlayerKeys(playerid, keys, ud, lr);
		/*if(IsPlayerInRangeOfPoint(playerid, 50.0, 1979.0963, -1237.2683, 24.5723))
		{
			switch(Random(1,3))
			{
				case 2:
				{
					SetupSideMission(playerid, PARK_ASSASINATION);
				}
			}
		}*/
		if(PlayerInfo[playerid][pHurt] > 0)
		{
		    PlayerInfo[playerid][pHurt]--;
		}
		if(PlayerInfo[playerid][pGovTimer] > 0)
		{
			PlayerInfo[playerid][pGovTimer]--;
		}
		if(PlayerInfo[playerid][pRareTime] > 0)
		{
		    PlayerInfo[playerid][pRareTime]--;
		}
		if(GetPlayerMoney(playerid) != PlayerInfo[playerid][pCash])
		{
		    ResetPlayerMoney(playerid);
		    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);
		}
		if(GetPlayerScore(playerid) != PlayerInfo[playerid][pLevel])
		{
		    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
		}
		if(GetPlayerWantedLevel(playerid) != PlayerInfo[playerid][pWantedLevel])
		{
		    PlayerInfo[playerid][pWantedLevel] = PlayerInfo[playerid][pWantedLevel];
		}
		if((GetPlayerAnimationIndex(playerid) != 1209) && ((PlayerInfo[playerid][pInjured] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416) || (PlayerInfo[playerid][pTazedTime] > 0 && PlayerInfo[playerid][pDraggedBy] == INVALID_PLAYER_ID)))
		{
		    ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0, 1);
		}

		if((keys & KEY_FIRE) && IsFireActive() && GetFactionType(playerid) == FACTION_MEDIC)
		{
		    new
		        Float:x,
		        Float:y,
		        Float:z,
		        Float:vx,
		        Float:vy,
		        Float:vz,
		        Float:cx,
		        Float:cy,
		        Float:cz;

		    if(GetPlayerWeapon(playerid) == 42 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    for(new i = 0; i < MAX_FIRES; i ++)
			    {
			        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 4.0))
			        {
			            gFireHealth[i] = gFireHealth[i] - 10.0;

			            if(gFireHealth[i] <= 0.0)
			            {
			                PlayerInfo[playerid][pTotalFires]++;

				            GetDynamicObjectPos(gFireObjects[i], x, y, z);
				            GameTextForPlayer(playerid, "~r~Ngon lua da tat", 2000, 3);

				            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
							DestroyDynamicObject(gFireObjects[i]);

							gFireObjects[i] = INVALID_OBJECT_ID;
							gFireHealth[i] = 0.0;
						}
			        }
				}
			}
			else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
			{
			    GetPlayerCameraFrontVector(playerid, vx, vy, vz);
			    GetPlayerCameraPos(playerid, cx, cy, cz);

			    for(new i = 0; i < MAX_FIRES; i ++)
			    {
			        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 12.0))
			        {
			            GetDynamicObjectPos(gFireObjects[i], x, y, z);

						if(DistanceCameraTargetToLocation(cx, cy, cz, x, y, z + 2.5, vx, vy, vz) < 12.0)
		   				{
		   				    gFireHealth[i] = gFireHealth[i] - 5.0;

		   				    if(gFireHealth[i] <= 0.0)
			            	{
			   			    	GetDynamicObjectPos(gFireObjects[i], x, y, z);
			   			    	GameTextForPlayer(playerid, "~r~Ngon lua da tat", 2000, 3);

					            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
								DestroyDynamicObject(gFireObjects[i]);

								gFireObjects[i] = INVALID_OBJECT_ID;
								gFireHealth[i] = 0.0;
							}
						}
				  	}
			    }
			}

			if(!IsFireActive())
			{
			    new amount;

			    foreach(new i : Player)
			    {
			        if(GetFactionType(i) == FACTION_MEDIC && IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
			        {
			            amount = gFires * 150;

			            if(PlayerInfo[i][pLaborUpgrade] > 0)
						{
							amount += percent(amount, PlayerInfo[i][pLaborUpgrade]);
						}

			            SendClientMessageEx(i, COLOR_AQUA, "Lam tot! Ban da giup dap lua va nhan duoc {00AA00}$%i{33CCFF} tren phieu luong cua minh.", amount);
			            AddToPaycheck(i, amount);
			        }
				}

				gFires = 0;
			}
		}
	}
	return 1;
}

Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
    new Float:Pos[3];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    return GetPlayerDistanceFromPoint(targetid, Pos[0], Pos[1], Pos[2]);
}
forward AntiNameTag();
public AntiNameTag()
{
	if(antiNT)
	{
    	foreach(new playerid : Player)
    	{
        	foreach(new i : Player)
        	{
            	if(i == playerid)
					continue;
				if(PlayerInfo[i][pAdminDuty])
			    	continue;

				if(GetPlayerDistanceFromPlayer(playerid, i) <= 30.0) {
                	ShowPlayerNameTagForPlayer(playerid, i, true);
   				} else {
                	ShowPlayerNameTagForPlayer(playerid, i, false);
            	}
        	}
    	}
	}
}
forward UpdateSpeedo();
public UpdateSpeedo()
{
    foreach(new playerid : Player)
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(vehicleid))
	    {
	        new
				Float:health;

	        GetVehicleHealth(vehicleid, health);

	        if(health < 300.0)
	    	{
	     		SetVehicleHealth(vehicleid, 300.0);

				SetVehicleParams(vehicleid, VEHICLE_ENGINE, 0);
	       		//SendClientMessage(playerid, COLOR_RED, "The engine has shut down for being totalled and needs repairing.");
	       		GameTextForPlayer(playerid, "~r~Tong dong co", 3000, 3);
		    }
		    /*
			damage = (1000.0 - health) / 7.0;

			if(damage > 100.0) damage = 100.0;

			if(PlayerInfo[playerid][pSpeedometer] == 1) {
	        	format(string, sizeof(string), "~b~~h~Speed:~w~ %.0f KM/H~n~~b~~h~Fuel:~w~ %i%c~n~~r~~h~Damage:~w~ %.0f%c~n~~b~~h~Doors:~w~ %s", GetVehicleSpeed(vehicleid), vehicleFuel[vehicleid], '%', damage, '%', (GetVehicleParams(vehicleid, VEHICLE_DOORS)) ? ("Locked") : ("Unlocked"));
			} else if(PlayerInfo[playerid][pSpeedometer] == 2) {
			    format(string, sizeof(string), "~b~~h~Speed:~w~ %.0f MPH~n~~b~~h~Fuel:~w~ %i%c~n~~r~~h~Damage:~w~ %.0f%c~n~~b~~h~Doors:~w~ %s", GetVehicleSpeedMPH(vehicleid), vehicleFuel[vehicleid], '%', damage, '%', (GetVehicleParams(vehicleid, VEHICLE_DOORS)) ? ("Locked") : ("Unlocked"));
			}
			PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][2], string);
			*/
			for(new i = 0; i < MAX_DEPLOYABLES; i ++)
			{
			    if(DeployInfo[i][dExists] && DeployInfo[i][dType] == DEPLOY_SPIKESTRIP && IsPlayerInRangeOfPoint(playerid, 3.0, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
		        {
		            new
		                panels,
		                doors,
		                lights,
		                tires;

		            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

		            if(tires != 15)
		            {
		                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
		                GameTextForPlayer(playerid, "~r~Spiked", 3000, 3);
		            }
		        }
			}
		}
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!GetPlayerInterior(playerid) && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
	{
	    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: Illegal modding", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
	    BanPlayer(playerid, SERVER_ANTICHEAT, "Illegal modding");
	    return 0;
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    new slotid = GetVehicleComponentType(componentid);

	    VehicleInfo[vehicleid][vMods][slotid] = componentid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", slotid + 1, componentid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	}
	if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}


	if((VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vOwnerID] > 0) || (VehicleInfo[vehicleid][vGang] >= 0))
	{
	    ReloadVehicle(vehicleid);

	    if(VehicleInfo[vehicleid][vGang] >= 0)
	    {
	        vehicleFuel[vehicleid] = 100;
		}
	}
	else
	{
     	if(VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vHealth] > 300.0)
     	{
    		SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
     	}

		vehicleFuel[vehicleid] = 100;
	}

	vehicleStream[vehicleid][0] = 0;

	VehicleInfo[vehicleid][vWindowsOpen] = true;
	SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);

	return 1;
}
forward ClearAnims(playerid);
public ClearAnims(playerid) return ApplyAnimation(playerid, "CARRY", "crry_prtial",4.0,0,0,0,0,0,1);
forward J_ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync);
public J_ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return true;
}
public OnPlayerText(playerid, text[])
{
	if(PlayerInfo[playerid][pLogged] && !PlayerInfo[playerid][pKicked])
	{
	    if(PlayerInfo[playerid][pTutorial])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban hien dang o trong huong dan. Tro chuyen bi tat.");
	        return 0;
		}
		if(PlayerInfo[playerid][pHospital])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban hien dang o trong benh vien. Tro chuyen bi tat");
	        return 0;
		}
		if(PlayerInfo[playerid][pMuted])
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban hien dang bi cam tro chuyen. Tro chuyen bi tat.");
	        return 0;
		}
		if(Maskara[playerid])
    	{
        	new string[128]; // String of GOD
        	format(string, sizeof(string), "Nguoi la_%d: %s", MaskaraID[playerid], text);

			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     		SetPlayerBubbleText(playerid, 20.0, COLOR_ORANGE, "%s", string);
        	return 0;
    	}
		if(++PlayerInfo[playerid][pSpamTime] >= 4 && PlayerInfo[playerid][pAdmin] < 2)
		{
		    PlayerInfo[playerid][pMuted] = 10;
		    SendClientMessage(playerid, COLOR_YELLOW, "Ban da tam thoi bi may chu tat tieng trong 10 giay vi gui thu rac.");
		    return 0;
		}
		if(PlayerInfo[playerid][pAdmin] < 6 && CheckServerAd(text))
		{
			new string[128];
			format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s (ID: %d) co the quang cao may chu: '{AA3333}%s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, text);
			SendAdminMessage(COLOR_YELLOW, string, 2);
			//Log_Write("logs/hack.log", string);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Tro chuyen cua ban bi chan, ban da tu dong bao cao ve quang cao tren may chu.");
        	if(++PlayerInfo[playerid][pAdvertWarnings] > MAX_ANTICHEAT_WARNINGS)
        	{
        	    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da tu dong banned boi %s, ly do: Quang Cao May Chu", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
	    		BanPlayer(playerid, SERVER_ANTICHEAT, "Server advertisement");
        	}
			return 0;
		}


	    if(PlayerInfo[playerid][pJoinedEvent])
	    {
	        foreach(new i : Player)
      	  	{
                if(PlayerInfo[i][pJoinedEvent])
 	           	{
           	     	if(EventInfo[eType] == 2 && PlayerInfo[i][pEventTeam] == PlayerInfo[playerid][pEventTeam])
           	     	{
    	            	SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( {%06x}%s:{F7A763} %s ))", GetPlayerColor(playerid) >>> 8, GetPlayerRPName(playerid), text);
					}
					else
					{
					    SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s: %s ))", GetPlayerRPName(playerid), text);
       	     		}
				}
			}
		}
		else
		{
			new
			    string[144];

	        if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            if(PlayerInfo[playerid][pCallLine] != playerid && PlayerInfo[playerid][pCallStage] == 2)
	            {
	                if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
			        {
		                SendClientMessageEx(PlayerInfo[playerid][pCallLine], COLOR_YELLOW, "%s noi (dien thoai): %s", GetPlayerRPName(playerid), text);
					}
					else
					{
					    SendClientMessageEx(PlayerInfo[playerid][pCallLine], COLOR_YELLOW, "(%s) %s noi (dien thoai): %s", PlayerInfo[playerid][pAccent], GetPlayerRPName(playerid), text);
					}
		        }

		        if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
		        {
					format(string, sizeof(string), "%s noi (dien thoai): %s", GetPlayerRPName(playerid), text);
				}
				else
				{
				    format(string, sizeof(string), "(%s) %s noi (dien thoai): %s", PlayerInfo[playerid][pAccent], GetPlayerRPName(playerid), text);
				}

				SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

				if(PlayerInfo[playerid][pCallLine] == playerid)
				{
				    switch(PlayerInfo[playerid][pCallStage])
				    {
				        case 911:
				        {
					        if(!strcmp(text, "canhsat", true))
					        {
					            SendClientMessage(playerid, COLOR_ROYALBLUE, "Cong Van: Day la So canh sat Los Santos. Khan cap cua ban la gi");
					        	PlayerInfo[playerid][pCallStage] = 912;
					        }
							else if(!strcmp(text, "yte", true))
					        {
					            SendClientMessage(playerid, COLOR_DOCTOR, "Cong Van: Day la So Y Te & Cuu Hoa Los Santos. Khan cap cua ban la gi?");
					        	PlayerInfo[playerid][pCallStage] = 913;
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_YELLOW, "Cong Van: Lay lam tiec? Toi khong biet y ban la gi... Nhap 'canhsat' hoac 'yte'.");
							}
						}
						case 912:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SendClientMessageEx(i, COLOR_ROYALBLUE, "______ Duong Day Nong ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Nguoi goi: %s, So: %i", GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Vi tri: %s", GetPlayerZoneName(playerid));
						            SendClientMessageEx(i, COLOR_GREY2, "Truong hop khan cap: %s", text);
						            SendClientMessageEx(i, COLOR_WHITE, "** Su dung '/trackcall %i' de theo doi vi tri nguoi goi.", playerid);
						        }
						    }

							strcpy(PlayerInfo[playerid][pEmergency], text, 128);

                            PlayerInfo[playerid][pEmergencyCall] = 120;
                            PlayerInfo[playerid][pEmergencyType] = FACTION_POLICE;

						    SendClientMessage(playerid, COLOR_ROYALBLUE, "Cong Van: Tat ca cac don vi trong khu vuc da duoc thong bao. Cam on ban da danh thoi gian.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 913:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MEDIC)
						        {
						            SendClientMessageEx(i, COLOR_DOCTOR, "______ Duong Day Nong ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Nguoi goi: %s, So: %i", GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Vi tri: %s", GetPlayerZoneName(playerid));
						            SendClientMessageEx(i, COLOR_GREY2, "Truong hop khan cap: %s", text);
						            SendClientMessageEx(i, COLOR_WHITE, "** Su dung '/trackcall %i' de theo doi vi tri nguoi goi.", playerid);
						        }
						    }

						    strcpy(PlayerInfo[playerid][pEmergency], text, 128);

						    PlayerInfo[playerid][pEmergencyCall] = 120;
						    PlayerInfo[playerid][pEmergencyType] = FACTION_MEDIC;

						    SendClientMessage(playerid, COLOR_DOCTOR, "Cong van: Tat ca cac don vi trong khu vuc da duoc thong bao. Cam on ban da danh thoi gian.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6397:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_NEWS)
						        {
						            SendClientMessageEx(i, COLOR_NAVYBLUE, "______ News Hotline ______");
						            SendClientMessageEx(i, COLOR_GREY2, "Nguoi Goi: %s, So: %i", GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
						            SendClientMessageEx(i, COLOR_GREY2, "Tin nhan: %s", text);
						        }
						    }

						    SendClientMessage(playerid, COLOR_NAVYBLUE, "News Team: Cam on ban. Chung toi se lien he lai voi ban trong thoi gian ngan!");
						    HangupCall(playerid, HANGUP_USER);
						}
					}

				}
			}
			else if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    foreach(new i : Player)
				{
					if(!PlayerInfo[i][pToggleNews])
					{
						if(GetFactionType(playerid) == FACTION_NEWS)
			    		{
			    		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "Phong vien %s: %s", GetPlayerRPName(playerid), text);
						}
						else
						{
						    SendClientMessageEx(i, COLOR_LIGHTGREEN, "Khach moi %s: %s", GetPlayerRPName(playerid), text);
						}
					}
				}

				//SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			}
			else
			{
			    if((PlayerInfo[playerid][pHelper] > 0 && PlayerInfo[playerid][pAcceptedHelp]) || (PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminDuty]))
			    {
			        callcmd::b(playerid, text);
			    }
			    else
			    {
				    if(!strcmp(PlayerInfo[playerid][pAccent], "None", true))
			        {
						format(string, sizeof(string), "%s noi: %s", GetPlayerRPName(playerid), text);
					}
					else
					{
					    format(string, sizeof(string), "(%s) %s noi: %s", PlayerInfo[playerid][pAccent], GetPlayerRPName(playerid), text);
					}
					if(PlayerInfo[playerid][pBugged])
					{
						foreach(new i : Player)
						{
						    if(GetFactionType(i) == FACTION_FEDERAL)
						    {
						    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s noi: %s", GetPlayerRPName(playerid), text);
							}
						}
					}
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     				SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "%s", text);
     			    if(!PlayerUseAnims(playerid))
					{
						ApplyAnimation(playerid, "PED", "IDLE_CHAT",4.1,0,1,1,1,1,1);
						SetTimerEx("ClearAnim", 100*strlen(text), false, "d", playerid);
					}
				}
			}
		}
	}

    PlayerInfo[playerid][pAFKPos][0] = 0.0;
    PlayerInfo[playerid][pAFKPos][1] = 0.0;
    PlayerInfo[playerid][pAFKPos][2] = 0.0;
	return 0;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(PlayerInfo[playerid][pKicked]) return 0;

	if(!PlayerInfo[playerid][pLogged])
	{
	    SendClientMessage(playerid, COLOR_RED, "Ban khong the su dung lenh neu chua dang nhap.");
		return 0;
	}
	if(isnull(params))
	{
	    params[0] = EOS;
	}
	if(PlayerInfo[playerid][pTutorial])// && strcmp(cmd, "/report", true, 6))
 	{
  		SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban hien dang o trong huong dan. Cac lenh bi tat.");
    	return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban hien da chet. Cac lenh bi tat.");
    	return 0;
	}
	if(PlayerInfo[playerid][pMuted])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban hien bi cam tro chuyen. Cac lenh bi tat.");
        return 0;
	}
	if(++PlayerInfo[playerid][pSpamTime] >= 4 && PlayerInfo[playerid][pAdmin] < 2)
	{
	    PlayerInfo[playerid][pMuted] = 10;
	    SendClientMessage(playerid, COLOR_YELLOW, "Ban da tam thoi bi may chu tat tieng trong muoi giay.");
	    return 0;
	}
	if(PlayerInfo[playerid][pAdmin] < 6 && CheckServerAd(params))
	{
		new string[128];
		format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s (ID: %d) co the quang cao may chu: '{AA3333}/%s %s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, cmd, params);
		SendAdminMessage(COLOR_YELLOW, string, 2);
		//Log_Write("logs/hack.log", string);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh cua ban da bi chan, ban da tu dong bao cao ve quang cao may chu.");
        PlayerInfo[playerid][pAdvertWarnings] ++;
		return 0;
	}

	/*if((PlayerInfo[playerid][pAdmin] < 6) && (!strcmp(cmd, "/ban", true, 3) || !strcmp(cmd, "/kick", true, 4) || !strcmp(cmd, "/sban", true, 4) || !strcmp(cmd, "/skick", true, 5) || !strcmp(cmd, "/permaban", true, 8) || !strcmp(cmd, "/rangeban", true, 8) || !strcmp(cmd, "/getip", true, 5) || !strcmp(cmd, "/traceip", true, 7)))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "** These commands cannot be used during beta testing.");
		return 0;
	}
	if((PlayerInfo[playerid][pAdmin] < 5) && (!strcmp(cmd, "/adminname")))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "** These commands cannot be used during beta testing.");
		return 0;
	}*/

	//PlayerInfo[playerid][pAFKPos][0] = 0.0;
    //PlayerInfo[playerid][pAFKPos][1] = 0.0;
    //PlayerInfo[playerid][pAFKPos][2] = 0.0;
	return 1;
}
/*
forward unkcmd(playerid); // by Mom
public unkcmd(playerid)
{
	TextDrawHideForPlayer(playerid, Textdraw0);
	TextDrawHideForPlayer(playerid, Textdraw1);
	TextDrawHideForPlayer(playerid, Textdraw2);
	TextDrawHideForPlayer(playerid, Textdraw3);
	TextDrawHideForPlayer(playerid, Textdraw4);
	TextDrawHideForPlayer(playerid, Textdraw5);
	TextDrawHideForPlayer(playerid, Textdraw6);
	TextDrawHideForPlayer(playerid, Textdraw7);
	TextDrawHideForPlayer(playerid, Textdraw8);
    return 1;
}*/

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
/*	if(result == -1)
	{
	    //SendClientMessage(playerid, COLOR_LIGHTRED, "That command doesn't exist! Use /help for a list of commands.");
	    //SendClientMessage(playerid, 0x089DCEFF, "[U:RP] {AAAAAA}Sorry, that command doesn't exist! Use /help for a list of commands.");
	    SendClientMessageEx(playerid, 0x89DCEFFF, "[U:RP]{C8C8C8} Sorry, but '/%s' does not appear to be working. Use {89DCEF}/help{C8C8C8} for a list of valid commands.", cmd);
	}*/
	if(result == -1)
	{
		/*TextDrawShowForPlayer(playerid, Textdraw0);
		TextDrawShowForPlayer(playerid, Textdraw1);
		TextDrawShowForPlayer(playerid, Textdraw2);
		TextDrawShowForPlayer(playerid, Textdraw3);
		TextDrawShowForPlayer(playerid, Textdraw4);
		TextDrawShowForPlayer(playerid, Textdraw5);
		TextDrawShowForPlayer(playerid, Textdraw6);
		TextDrawShowForPlayer(playerid, Textdraw7);
		TextDrawShowForPlayer(playerid, Textdraw8);
	  	SetTimerEx("unkcmd", 5000, false, "i", playerid);*/
	  	SendClientMessage(playerid, COLOR_WHITE, "{ff5050}[Loi]{ffffff} Lenh ban vua su dung lenh khong hop le. Hay su dung /trogiup de biet them.");
	 	PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	}
	else
		printf("[CMD] %s: /%s %s", GetPlayerNameEx(playerid), cmd, params);

	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(success)
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip) && PlayerInfo[i][pAdmin] < 6 && !PlayerInfo[i][pDeveloper])
	        {
	            BanPlayer(i, "Server", "Unauthorized RCON login");
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da bi banned vi dang nhap RCON trai phep.", GetPlayerRPName(i));
			}
			else
			{
			    return 1;
			}
		}
	}

	return 1;
}

stock GetUniquePlate(vehicleid) {
	new string[128], rows;

	for(new i = 0; i < 10; i++){

		format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		printf("string begin of loop = %s",string);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT plate FROM vehicles WHERE plate = '%e'", string);
		mysql_tquery(connectionID, queryBuffer);

		if(rows > 0)
		{
			printf("string already exists = %s",string);
			format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		} else {
			format(VehicleInfo[vehicleid][vPlate],32, "%s", string);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
			SetVehicleToRespawn(vehicleid);
			break;
		}
	}
	return 1;
}

stock GetMaxJobCapacity(playerid, jobid)
{
	new capacity;
	switch(jobid)
	{
		case JOB_PIZZAMAN:
		{
			switch(PlayerInfo[playerid][pLaborUpgrade])
			{
				case 0: capacity = 10;
				default: capacity = 10;
			}
		}
		case JOB_COURIER:
		{
			switch(PlayerInfo[playerid][pLaborUpgrade])
			{
				case 0: capacity = 5;
			}
		}
	}
	return capacity;
}
stock GetCommission(playerid, jobid)
{
	new com;
	switch(jobid)
	{
		case JOB_PIZZAMAN:
		{
			switch(PlayerInfo[playerid][pLaborUpgrade])
			{
				case 0: com = Random(2, 5);
				case 1: com = Random(6, 10);
			}
			return com;
		}
		case JOB_COURIER:
		{
			switch(PlayerInfo[playerid][pLaborUpgrade])
			{
				case 0: com = Random(5, 10);
				case 1: com = Random(11, 15);
				case 2: com = Random(16, 20);
			}
			return com;
		}
	}
	return com;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_YES)
	{
		for(new i = 0; i < sizeof(jobLocations); i ++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
		    {
		    	ApplyActorAnimation(jobLocations[i][jobActorID], "PED", "IDLE_CHAT", 4.1, 0, 1, 1, 0, 3000);

		        if(PlayerInfo[playerid][pJob] != JOB_NONE)
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da co mot cong viec. Vui long bo cong viec hien tai cua ban truoc khi nhan mot cong viec khac.");
					return 1;
				}
				new caption[200], info[500];
				format(caption, sizeof(caption), "{ffffff}Cong viec {ff3333}%s{ffffff}", jobLocations[i][jobName]);
				format(info, sizeof(info), "Xin chao ban, day la cong viec {ff3333}%s{ffffff}, de co the bat dau mot cong viec tai Red Country ban can co:\n\
			    {ff3333}- Can cuoc cong dan\n- Dien thoai di dong\n- Mot cai GPS\n{ffffff}Neu nhu muon lam cong viec nay hay nhan 'Dong y'.", jobLocations[i][jobName]);
                ShowPlayerDialog(playerid, DIALOG_GETJOB, DIALOG_STYLE_MSGBOX, caption, info, "Dong y", "Huy bo");
				return 1;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, -86.0914, -31.2349, 3.1094))
		{
			if(Cgetfood[playerid] == 0)
			{
				Cgetfood[playerid] = 1;
				SetPlayerAttachedObject(playerid, 0, 2901, 6, 0.0000, 0.0459, -0.3159, 0.0000, 91.7999, -25.6000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Cong viec]{FFFFFF} Ban da lay mot bo thuc an cho Bo Shorthorn, hay mang den va cho bo an.");
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Cong viec]{FFFFFF} Neu muon vut bo thuc an di, hay su dung /drop [thucan].");
			}
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
		callcmd::enter(playerid, "\1");
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
		callcmd::exit(playerid, "\1");
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1373.6323,265.4795,19.5669))
	{
		if(newkeys & KEY_NO)
		{

			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Loi] Ban khong the lay xe khi o tren mot xe khac.");
		    if(PizzaDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban khong dang trong gio lam viec. Hay su dung /duty [pizza]");
		    if(!PlayerHasJob(playerid, JOB_PIZZAMAN)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban khong phai la nguoi Van chuyen Pizza de co the lay phuong tien nay.");
			if(VehiclesPizza[playerid] == 0)
			{
				vehiclepizza = AddStaticVehicle(448, 1377.8926,271.3114,19.5669,66.9912, 3, 6);
				PutPlayerInVehicle(playerid, vehiclepizza, 0);
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Pizza]{FFFFFF} Ban vua lay mot chiec xe Pizza.");
				VehiclesPizza[playerid]++;
				return 1;
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban da lay 1 chiec xe Pizza ra roi. Hay su dung /traxe [pizza].");
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 304.5129,-243.0556,1.5781))
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Loi] Ban khong the lay xe khi o tren mot xe khac.");
		if(CourierDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban khong dang trong gio lam viec. Hay su dung /duty [giaohang]");
		if(!PlayerHasJob(playerid, JOB_COURIER)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban khong phai la nguoi Giao hang de co the lay phuong tien nay.");
		if(newkeys & KEY_NO)
		{
			if(VehiclesCourier[playerid] == 0)
			{
				vehiclecourier = AddStaticVehicle(414, 315.2952,-244.7894,1.6745,355.2583, 3, 6);
				PutPlayerInVehicle(playerid, vehiclecourier, 0);
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Giao hang]{FFFFFF} Ban vua lay mot chiec xe giao hang.");
				VehiclesCourier[playerid]++;
				return 1;
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban da lay 1 chiec xe giao hang ra roi. Hay su dung /traxe [giaohang].");
		}
	}
	new time = NetStats_GetConnectedTime(playerid);
    /*if (HOLDING(KEY_SPRINT) || PRESSED(KEY_SPRINT) || RELEASED(KEY_SPRINT))
	{
	    if (IsPlayerSteppingInVehicle[playerid] > -1)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if (GetPlayerVehicleID(i) == IsPlayerSteppingInVehicle[playerid] && i != playerid)
			    {
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid,x,y,z);
					SetPlayerPos(playerid,x,y,z);
					GameTextForPlayer(playerid,"~r~Please do NOT abuse the \r\n~w~Jack bug",5000,4);
					IsPlayerSteppingInVehicle[playerid] = -1;
					SendAdminMessage(COLOR_YELLOW,"AdmWarning: %s[%i] has tried to abuse the jack bug!", GetPlayerRPName(playerid), playerid);
 				}
			}
		}
	}*/
	if(newkeys & KEY_YES)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 379.2269,-62.0940,1001.5078))
		{
			if(PizzaDuty[playerid] == 1)
			{
				if(PlayerInfo[playerid][pHoldingPizza] == 0)
				{
					PlayerInfo[playerid][pHoldingPizza] = 1;
					SetPlayerAttachedObject(playerid,0,2814,5,0.274000,0.049000,0.124999,-70.000053,-12.999993,18.400012,1.000000,1.000000,1.000000);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				    SendClientMessage(playerid, COLOR_LIGHTRED, "[Pizza]{ffffff} Ban da lay 1 chiec banh pizza, hay mang no ra xe cua ban.");\
				    SendClientMessage(playerid, COLOR_LIGHTRED, "[Pizza]{ffffff} Dung gan xe va nhan N nhe.");
				    return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban dang cam tren tay 1 chiec banh pizza roi.");
				}
			}
		}
	}
	if((!IsPlayerInAnyVehicle(playerid)) && (newkeys & KEY_NO))
	{
		if(PizzaDuty[playerid] == 1)
		{
			new houseid = PlayerInfo[playerid][pPizzaHouse];
			if(GetNearbyVehicle(playerid) == vehiclepizza)
			{
				if(PlayerInfo[playerid][pHoldingPizza] == 0)
				{
					if(!(1 <= PlayerInfo[playerid][pPizzas] <= GetMaxJobCapacity(playerid, JOB_PIZZAMAN)))
					{
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co du banh pizza tren chiec xe cua minh.");
					}
					PlayerInfo[playerid][pHoldingPizza] = 1;
					SetPlayerAttachedObject(playerid,0,2814,5,0.274000,0.049000,0.124999,-70.000053,-12.999993,18.400012,1.000000,1.000000,1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					PlayerInfo[playerid][pPizzas] -= 1;
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Pizza]{ffffff} Ban da lay 1 chiec banh pizza ra khoi xe, bay gio ban con lai %d chiec.", PlayerInfo[playerid][pPizzas]);
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "GHI CHU: Nhan N vao ngoi nha ma ban can gui.");
					return 1;
				}
				else if(PlayerInfo[playerid][pHoldingPizza] == 1)
				{
					PlayerInfo[playerid][pHoldingPizza] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					PlayerInfo[playerid][pPizzas] += 1;
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Pizza] {ffffff}Ban da dat 1 chiec banh pizza vao xe, hien tai co %d banh trong xe.", PlayerInfo[playerid][pPizzas]);
				}
			}
			if(GetNearbyHouse(playerid) == houseid) // tien pizza
			{
				if(houseid != -1)
				{
					if(PlayerInfo[playerid][pHoldingPizza] != 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban phai cam mot chiec banh Pizza de giao no.");
						SendClientMessage(playerid, COLOR_LIGHTRED, "GHI CHU: Nhan N gan xe cua ban de lay Pizza.");
						return 1;
						}
					new com;
					switch(PlayerInfo[playerid][pLaborUpgrade])
					{
						case 0: com = Random(2, 5);
						case 1: com = Random(6, 10);
					}
					PlayerInfo[playerid][pHoldingPizza] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					AddToPaycheck(playerid, com);
					PlayerInfo[playerid][pPizzasDelivered] += 1;
					if(PlayerInfo[playerid][pPizzasDelivered] == 10)
					{
						PlayerInfo[playerid][pBasePaycheck] = 1;
						AddToPaycheck(playerid, 50);
						SendClientMessage(playerid, COLOR_LIGHTRED, "[Pizza]{FFFFFF} Ban da giao thanh cong 10 chiec banh pizza. Bay gio ban co the nhan duoc khoan luong co ban cua minh vao lan lanh luong tiep theo.");
					}
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Pizza]{FFFFFF} Ban da giao Pizza thanh cong. Ban da nhan duoc  $%d tien hoa hong.", com);
					PlayerInfo[playerid][pPizzaHouse] = -1;					
					return 1;
				}
			}
		}
		if(CourierDuty[playerid] == 1)
		{
			new businessid = PlayerInfo[playerid][pCourierBiz];
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 164.0410,-54.5746,1.5781))
			{
				if(PlayerInfo[playerid][pHoldingBox] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da lay mot thung hang tu Loading Dock.");
					SetPlayerAttachedObject(playerid, 0, 1271, 17, 0.162999, 0.616998, -0.011999, 1.700003, 21.100011, -5.899999);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					PlayerInfo[playerid][pHoldingBox] = 1;
				}
				else if(PlayerInfo[playerid][pHoldingBox] == 1)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da tra mot thung hang vao Loading Dock.");
					RemovePlayerAttachedObject(playerid, 0);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					PlayerInfo[playerid][pHoldingBox] = 0;					
				}
			}
			if(GetNearbyBusiness(playerid) == businessid && businessid != -1)
			{
				if(PlayerInfo[playerid][pHoldingBox] == 0)
				{
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai dang giu mot cai thung de giao no. Nhan N phia sau xe tai cua ban.");
				}
				else if(PlayerInfo[playerid][pHoldingBox] == 1)
				{
					if(PlayerInfo[playerid][pCourierQueue] == 1)
					{
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da giao mot cai thung den dia chi doanh nghiep %d.", businessid);
						RemovePlayerAttachedObject(playerid, 0);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						PlayerInfo[playerid][pHoldingBox] = 0;
						PlayerInfo[playerid][pCourierBiz] = -1;
						PlayerInfo[playerid][pCourierQueue] -= 1;
						if(PlayerInfo[playerid][pCourierDelivered] == 5)
						{
							PlayerInfo[playerid][pBasePaycheck] = 1;
							SendClientMessage(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da van chuyen thanh cong 5 thung hang. Khoan luong co ban cua ban da duoc them vao khoan luong tiep theo cua ban.");
							AddToPaycheck(playerid, 50);
						}
						new com;
						switch(PlayerInfo[playerid][pLaborUpgrade])
						{
							case 0: com = Random(5, 10);
							case 1: com = Random(11, 15);
							case 2: com = Random(16, 20);

						}
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da nhan duoc $%d lam tien hoa hong cho thung hang da giao.", FormatNumber(com));
						AddToPaycheck(playerid, com);

					}
					else if(PlayerInfo[playerid][pCourierQueue] > 1)
					{
						PlayerInfo[playerid][pHoldingBox] = 0;
						PlayerInfo[playerid][pCourierQueue] -= 1;
						RemovePlayerAttachedObject(playerid, 0);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da giao mot thung hang den dia chi doanh nghiep %d. Ban con %d de giao.", businessid, PlayerInfo[playerid][pCourierQueue]);
						if(PlayerInfo[playerid][pCourierDelivered] == 5)
						{
							PlayerInfo[playerid][pBasePaycheck] = 1;
							SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da van chuyen thanh cong 10 thung hang. Khoan luong co ban cua ban da duoc them vao khoan luong tiep theo cua ban");
							AddToPaycheck(playerid, 100);
						}
						new com = GetCommission(playerid, JOB_COURIER);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban da nhan duoc $%d lam tien hoa hong cho thung hang da giao.", FormatNumber(com));
						AddToPaycheck(playerid, com);
					}
				}				
			}

		}
		if(IsPlayerInRangeOfBoot(playerid, GetNearbyVehicle(playerid)))
		{
			new vehicleid = GetNearbyVehicle(playerid);
			if(GetVehicleModel(vehicleid) == 414 || GetVehicleModel(vehicleid) == 435 || GetVehicleModel(vehicleid) == 591)
			{
				if(PlayerInfo[playerid][pHoldingBox] == 0)
				{
					if(VehicleInfo[vehicleid][vBoxes] == 0)
					{
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Xe tai rong, hay chat day thung hang tu Loading Dock.");
					}
					SendClientMessage(playerid, COLOR_WHITE, "Ban lay mot thung hang tu xe tai.");
					SetPlayerAttachedObject(playerid, 0, 1271, 17, 0.162999, 0.616998, -0.011999, 1.700003, 21.100011, -5.899999);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					PlayerInfo[playerid][pHoldingBox] = 1;
					VehicleInfo[vehicleid][vBoxes] -= 1;
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban hien da co %d/%d thung hang trong xe tai.", VehicleInfo[vehicleid][vBoxes], GetMaxJobCapacity(playerid, JOB_COURIER));
				}
				else if(PlayerInfo[playerid][pHoldingBox] == 1)
				{
					if(VehicleInfo[vehicleid][vBoxes] == GetMaxJobCapacity(playerid, JOB_COURIER))
					{
						return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Xe tai da day hang. [Hang trong xe: %d/%d]", VehicleInfo[vehicleid][vBoxes], GetMaxJobCapacity(playerid, JOB_COURIER));
					}
					SendClientMessage(playerid, COLOR_WHITE, "Ban da dat mot cai thung hang trong xe tai.");
					PlayerInfo[playerid][pHoldingBox] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					VehicleInfo[vehicleid][vBoxes] += 1;
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Ban hien da co %d/%d thung hang trong xe.", VehicleInfo[vehicleid][vBoxes], GetMaxJobCapacity(playerid, JOB_COURIER));
				}
			}
			// else if(GetVehicleModel(vehicleid) == 435)
		}
	}
	// skating
	if(PlayerInfo[playerid][pSkating] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    //static bool:act;
	    SetPlayerArmedWeapon(playerid, 0);
	    if(newkeys & KEY_HANDBRAKE)
		{
	        ApplyAnimationEx(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1);
	        if(!PlayerInfo[playerid][pSkateAct])
			{
	                PlayerInfo[playerid][pSkateAct] = true;
	                RemovePlayerAttachedObject(playerid, 5);
	                DestroyDynamicObject(PlayerInfo[playerid][pSkateObj]);
	                PlayerInfo[playerid][pSkateObj] = CreateDynamicObject(19878,0,0,0,0,0,0, .playerid = playerid);
	                AttachDynamicObjectToPlayer(PlayerInfo[playerid][pSkateObj], playerid, -0.2,0,-0.9,0,0,90);
	        }
	    }
        if(oldkeys & KEY_HANDBRAKE)
		{
            ApplyAnimationEx(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
            if(PlayerInfo[playerid][pSkateAct])
			{
                PlayerInfo[playerid][pSkateAct] = false;
                DestroyDynamicObject(PlayerInfo[playerid][pSkateObj]);
                RemovePlayerAttachedObject(playerid, 5);
                SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            }
        }
   	}
	if(newkeys & KEY_SPRINT)
	{
	    if(PlayerInfo[playerid][pLoopAnim])
	    {
	        PlayerInfo[playerid][pLoopAnim] = 0;

		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		    TextDrawHideForPlayer(playerid, AnimationTD);
		}
	}

	if(newkeys & KEY_SECONDARY_ATTACK && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)) && vehicleFuel[GetPlayerVehicleID(playerid)] <= 0)
	{
	    RemovePlayerFromVehicle(playerid);
	}

	// LS ELEVATOR
	if(!IsPlayerInAnyVehicle(playerid) && (newkeys & KEY_YES))
	{
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
	        ShowElevatorDialog(playerid);
		else    // Is he in a floor button?
		{
		    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
		    {
		        // He is most likely using it, check floor:
				new i=20;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~r~Thang may duoc goi", 3500, 4);
				}
		    }
		}
	}
	// END LS ELEVATOR
 	if((time - PlayerInfo[playerid][pLastPress]) >= 400)
	{
		if(newkeys & KEY_SECONDARY_ATTACK)
		{
			new success;

            if(PlayerInfo[playerid][pInjured] == 0 && PlayerInfo[playerid][pTazedTime] == 0 && PlayerInfo[playerid][pCuffed] == 0 && PlayerInfo[playerid][pDueling] == INVALID_PLAYER_ID)
			{
			    if(PlayerInfo[playerid][pHurt] - 30 > 0)
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de van hanh/nhap bat cu dieu gi. Vui long doi %i giay truoc khi thu lai.", (PlayerInfo[playerid][pHurt] - 30));

				if((success = EnterCheck(playerid)) == 0)
					success = ExitCheck(playerid);

				if(!success)
				{
					DoorCheck(playerid);
					//GateCheck(playerid);
				}
			}

			PlayerInfo[playerid][pLastPress] = time; // Prevents spamming. Sometimes keys get messed up and register twice.
		}
		if(newkeys & KEY_YES)
 		{
 		    if(!GateCheck(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 		    {
		  		callcmd::engine(playerid, "\1");
			}
			PlayerInfo[playerid][pLastPress] = time; // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(PlayerInfo[playerid][pKicked]) return 0;
    IsPlayerSteppingInVehicle[playerid] = -1;
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if((testVehicles[0] <= vehicleid <= testVehicles[3]) && !PlayerInfo[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Ban khong the dieu khien phuong tien nay vi ban khong tham gia ky thi sat hach lai xe.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi no khong thuoc ve to chuc cua ban.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    else if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && VehicleInfo[vehicleid][vRank] > PlayerInfo[playerid][pFactionRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong phai Rank %i trong to chuc cua minh.", VehicleInfo[vehicleid][vRank]);
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi no khong thuoc ve bang dang cua ban.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    else if(VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vRank] > PlayerInfo[playerid][pGangRank])
	    {
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong phai Rank %i trong bang dang cua minh.", VehicleInfo[vehicleid][vRank]);
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vJob] >= 0 && PlayerInfo[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong phai la %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vVIP] > 0 && PlayerInfo[playerid][pVIPPackage] < VehicleInfo[vehicleid][vVIP])
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the dieu khien phuong tien nay vi ban khong phai la %s VIP+.", GetVIPRank(VehicleInfo[vehicleid][vVIP]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    /*if(VehicleInfo[vehicleid][vLocked])
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTRED, "You cannot operate this vehicle as it is locked.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }*/
	    if(!VehicleHasEngine(vehicleid))
	    {
	        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		}
		else if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
		    if(testVehicles[0] <= vehicleid <= testVehicles[3])
		    {
		        PlayerInfo[playerid][pCP] = CHECKPOINT_TEST;
		        PlayerInfo[playerid][pTestVehicle] = vehicleid;
		        PlayerInfo[playerid][pTestCP] = 0;

		        SetVehicleParams(vehicleid, VEHICLE_ENGINE, 1);
				SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerInfo[playerid][pTestCP]][0], drivingTestCPs[PlayerInfo[playerid][pTestCP]][1], drivingTestCPs[PlayerInfo[playerid][pTestCP]][2], 3.0);
				SendClientMessage(playerid, COLOR_LIGHTRED, "[DMV] {FFFFFF}Lai xe qua cac diem danh dau de tien hanh kiem tra. Co gang khong lam hong xe cua ban.");
		    }
		    else
		    {

			    //SetVehicleParams(vehicleid, VEHICLE_ENGINE, 1);
			    SendClientMessage(playerid, COLOR_LIGHTRED, "[Phuong tien] Dong co xe dang duoc tat. Su dung 'Y' de mo dong co.");
			}
	    }

	    /*if(testVehicles[0] <= vehicleid <= testVehicles[4])
	    {
	        PlayerInfo[playerid][pCP] = CHECKPOINT_TEST;
	        PlayerInfo[playerid][pTestVehicle] = vehicleid;
	        PlayerInfo[playerid][pTestCP] = 0;

			SetPlayerCheckpoint(playerid, drivingTestCPs[PlayerInfo[playerid][pTestCP]][0], drivingTestCPs[PlayerInfo[playerid][pTestCP]][1], drivingTestCPs[PlayerInfo[playerid][pTestCP]][2], 3.0);
			SendClientMessage(playerid, COLOR_AQUA, "Drive through the checkpoints to proceed with the test. Try not to damage your vehicle.");
	    }*/

	    if(VehicleHasEngine(vehicleid) && vehicleFuel[vehicleid] <= 0)
	    {
	        GameTextForPlayer(playerid, "~r~Hiet nhien lieu", 5000, 3);
	    	TogglePlayerControllable(playerid, 0);
	    }

	    if(!PlayerInfo[playerid][pCarLicense] && !PlayerInfo[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang dieu khien phuong tien nay ma khong co giay phep. Hay can than canh sat!");
	    }

	    if(IsVehicleOwner(playerid, vehicleid) && VehicleInfo[vehicleid][vTickets] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_AQUA, "Xe nay con %s ve chua thanh toan. Ban co the thanh toan ve cua minh bang cach su dung /paytickets.", FormatNumber(VehicleInfo[vehicleid][vTickets]));
	    }
		/*
	    if(!PlayerInfo[playerid][pToggleTextdraws] && VehicleHasEngine(vehicleid))
	    {

		    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][1]);
		    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][2]);

		}
	    */

		SetPlayerArmedWeapon(playerid, 0);

		/*if(isnull(vehicleStream[vehicleid]))
		{
	  		SendClientMessage(playerid, COLOR_LIGHTORANGE, "Radio: Use {FFD700}/setradio{F7A763} to listen to a radio station.");
		}*/

		/*if(isnull(vehicleStream[vehicleid]))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "** Use {C8C8C8}/setradio{FFFFFF} to change the radio station in this vehicle.");
		}*/
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
     	if(PlayerInfo[playerid][pDrivingTest])
	    {
         	PlayerInfo[playerid][pDrivingTest] = 0;
         	SendClientMessage(playerid, COLOR_LIGHTRED, "** Ban da ra khoi xe va do do ban truot bai kiem tra.");
		}
		/*
	    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][1]);
	    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][2]);
	    */
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		if((driverid != INVALID_VEHICLE_ID && PlayerInfo[driverid][pTaxiFare] > 0 && PlayerInfo[driverid][pTaxiPassenger] == INVALID_PLAYER_ID) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438))
		{
		    if(PlayerInfo[playerid][pCash] < PlayerInfo[driverid][pTaxiFare])
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang tra tien ve. Do do ban khong the di taxi nay.");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }

			PlayerInfo[driverid][pTaxiPassenger] = playerid;
			PlayerInfo[driverid][pTaxiBill] = PlayerInfo[driverid][pTaxiFare];
			PlayerInfo[driverid][pTaxiTime] = 0;

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s vao xe taxi %s's.", GetPlayerRPName(playerid), GetPlayerRPName(driverid));
			SendClientMessageEx(playerid, COLOR_YELLOW, "Ban se bi tinh gia ve la {FF6347}$%i{33CCFF} cu sau 15 giay trong chuyen di nay.", PlayerInfo[driverid][pTaxiFare]);
			SendClientMessageEx(driverid, COLOR_AQUA, "*%s da vao xe taxi cua ban. Ban se kiem duoc {00AA00}$%i{33CCFF} sau moi 15 giay trong chuyen di nay.", GetPlayerRPName(playerid), PlayerInfo[driverid][pTaxiFare]);
		}

     	switch(GetPlayerWeapon(playerid))
     	{
     	    case 22, 23, 25, 28..33:
     	        SetPlayerArmedWeapon(playerid, GetScriptWeapon(playerid));
	        default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PlayerInfo[i][pSpectating] == playerid)
	        {
	            PlayerSpectateVehicle(i, vehicleid);
			}
		}

		if(!isnull(vehicleStream[vehicleid]) && PlayerInfo[playerid][pStreamType] == MUSIC_NONE && !PlayerInfo[playerid][pToggleMusic])
  		{
  		    PlayerInfo[playerid][pStreamType] = MUSIC_VEHICLE;
    		PlayAudioStreamForPlayer(playerid, vehicleStream[vehicleid]);
      		SendClientMessage(playerid, COLOR_WHITE, "Ban hien dang bat dai phat thanh tren xe. /stopmusic de dung nghe no.");
	    }

	    PlayerInfo[playerid][pDedication] = 0;
	}
	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PlayerInfo[i][pSpectating] == playerid)
	        {
	            PlayerSpectatePlayer(i, playerid);
			}
		}

		if(PlayerInfo[playerid][pStreamType] == MUSIC_VEHICLE)
		{
		    StopAudioStreamForPlayer(playerid);
		    PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
		}
	}

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(!(-3.0 <= fScaleX <= 3.0)) fScaleX = fScaleX < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleY <= 3.0)) fScaleY = fScaleY < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleZ <= 3.0)) fScaleZ = fScaleZ < -3.0 ? 0.0 : 3.0;

	switch(PlayerInfo[playerid][pEditType])
	{
	    case EDIT_CLOTHING_PREVIEW:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                if(BusinessInfo[businessid][bProducts] <= 0)
	                {
	                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep nay hien da het hang.");
					}
	                if(PlayerInfo[playerid][pCash] < clothingArray[PlayerInfo[playerid][pSelected]][clothingPrice])
	                {
	                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong du kha nang mua mat hang nay.");
	                }

	                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	                {
	                    if(!ClothingInfo[playerid][i][cExists])
	                    {
	                        ClothingInfo[playerid][i][cModel] = modelid;
	                        ClothingInfo[playerid][i][cBone] = boneid;
	                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
	                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
	                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	                        ClothingInfo[playerid][i][cRotX] = fRotX;
	                        ClothingInfo[playerid][i][cRotY] = fRotY;
	                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
	                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
	                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
	                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerInfo[playerid][pID], clothingArray[PlayerInfo[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
							mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[PlayerInfo[playerid][pSelected]][clothingName], clothingArray[PlayerInfo[playerid][pSelected]][clothingPrice], businessid, i);
							return 1;
						}
					}

					SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong con cho de mua quan ao nua. Do do ban khong the mua cai nay.");
	            }
	        }
	        else
	        {
	            if(PlayerInfo[playerid][pMenuType] == 0)
	                ShowClothingSelectionMenu(playerid);
	            else
					ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
			}
		}
		case EDIT_CLOTHING:
		{
		    new clothingid = PlayerInfo[playerid][pSelected];

		    if(response)
		    {
		        ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
		        ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
		        ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
		        ClothingInfo[playerid][clothingid][cRotX] = fRotX;
		        ClothingInfo[playerid][clothingid][cRotY] = fRotY;
		        ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
		        ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
		        ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
		        ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        SendClientMessageEx(playerid, COLOR_LIGHTRED, "Luu Thay Doi.");
		    }

			if(!ClothingInfo[playerid][clothingid][cAttached])
	        {
	            RemovePlayerAttachedObject(playerid, 9);
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
			    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
			}
		}
		case EDIT_COP_CLOTHING:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
                {
                    if(!ClothingInfo[playerid][i][cExists])
                    {
                        ClothingInfo[playerid][i][cModel] = modelid;
                        ClothingInfo[playerid][i][cBone] = boneid;
                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
                        ClothingInfo[playerid][i][cRotX] = fRotX;
                        ClothingInfo[playerid][i][cRotY] = fRotY;
                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", PlayerInfo[playerid][pID], copClothing[PlayerInfo[playerid][pSelected]][cName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerAttachCopClothing", "isi", playerid, copClothing[PlayerInfo[playerid][pSelected]][cName], i);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong con cho de quan ao nua. Do do ban khong the dinh kem cai nay.");
	        }
	        else
	        {
	            ShowCopClothingMenu(playerid);
			}
		}
	}

    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerInfo[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerInfo[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerInfo[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerInfo[playerid][pEditGraffiti]);
		}
		else if (PlayerInfo[playerid][pEditRack] != -1 && RackData[PlayerInfo[playerid][pEditRack]][rackExists])
	    {
			RackData[PlayerInfo[playerid][pEditRack]][rackPos][0] = x;
			RackData[PlayerInfo[playerid][pEditRack]][rackPos][1] = y;
			RackData[PlayerInfo[playerid][pEditRack]][rackPos][2] = z;
			RackData[PlayerInfo[playerid][pEditRack]][rackPos][3] = rz;

			Rack_Refresh(PlayerInfo[playerid][pEditRack]);
			Rack_Save(PlayerInfo[playerid][pEditRack]);
		}
	}
	switch(PlayerInfo[playerid][pEditType])
	{
	    case EDIT_FURNITURE_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
				PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
				PlayerInfo[playerid][pEditType] = 0;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new houseid = GetInsideHouse(playerid);

					if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
					{
					    if(PlayerInfo[playerid][pCash] < furnitureArray[PlayerInfo[playerid][pSelected]][fPrice])
		                {
		                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua mat hang nay.");
		                }

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO furniture VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)", HouseInfo[houseid][hID], furnitureArray[PlayerInfo[playerid][pSelected]][fModel], furnitureArray[PlayerInfo[playerid][pSelected]][fName], furnitureArray[PlayerInfo[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM furniture WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[PlayerInfo[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Ban co the su dung /door de kiem soat cua va /lock de mo khoa hoac khoa no.");
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        if(PlayerInfo[playerid][pMenuType] == 0)
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_FURNITURE);
					else
						ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
				}
			}
		}
		case EDIT_FURNITURE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
					mysql_tquery(connectionID, queryBuffer);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Luu Thay Doi.");
				}

		        ReloadFurniture(objectid, HouseInfo[PlayerInfo[playerid][pFurnitureHouse]][hLabels]);
		        PlayerInfo[playerid][pEditType] = 0;
			}
		}
		case EDIT_LAND_OBJECT_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(PlayerInfo[playerid][pEditObject]);
				PlayerInfo[playerid][pEditObject] = INVALID_OBJECT_ID;
				PlayerInfo[playerid][pEditType] = 0;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new landid = PlayerInfo[playerid][pObjectLand];

					if(landid >= 0 && HasLandPerms(playerid, landid))
					{
					    if(PlayerInfo[playerid][pCash] < furnitureArray[PlayerInfo[playerid][pSelected]][fPrice])
		                {
		                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua mat hang nay.");
		                }
		                if(!IsPointInLand(landid, x, y))
		                {
		                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong da vuot qua ranh gioi cho khu dat cua ban.");
						}

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '0.0', '0.0', '0.0', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], furnitureArray[PlayerInfo[playerid][pSelected]][fModel], furnitureArray[PlayerInfo[playerid][pSelected]][fName], furnitureArray[PlayerInfo[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[PlayerInfo[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[PlayerInfo[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							if(IsGateModel(furnitureArray[PlayerInfo[playerid][pSelected]][fModel]))
							{
								SendClientMessage(playerid, COLOR_WHITE, "Ban co the su dung /gate de mo hoac dong cong. De thay doi toa do cong, su dung /land va chon 'Chinh sua doi tuong'.");
							}
						    else
							{
								SendClientMessage(playerid, COLOR_WHITE, "Ban co the su dung /door de kiem soat cua va /lock de mo khoa hoac khoa no.");
						    }
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        if(PlayerInfo[playerid][pMenuType] == 0)
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_LANDOBJECTS);
					else
						ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
				}
			}
		}
		case EDIT_LAND_OBJECT:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(PlayerInfo[playerid][pObjectLand], x, y))
        			{
           				SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong da vuot qua ranh gioi cho khu dat cua ban.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SendClientMessage(playerid, COLOR_LIGHTRED, "Luu Thay Doi.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[PlayerInfo[playerid][pObjectLand]][lLabels]);
		        PlayerInfo[playerid][pEditType] = 0;
			}
		}
		case EDIT_LAND_GATE_MOVE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(PlayerInfo[playerid][pObjectLand], x, y))
        			{
           				SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong da vuot qua ranh gioi cho khu dat cua ban.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET move_x = '%f', move_y = '%f', move_z = '%f', move_rx = '%f', move_ry = '%f', move_rz = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SendClientMessage(playerid, COLOR_LIGHTRED, "Luu Thay Doi.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[PlayerInfo[playerid][pObjectLand]][lLabels]);
		        PlayerInfo[playerid][pEditType] = 0;
			}
		}
	}

	return 1;
}

// ----------------DIALOGS----------------
#include "./inc/core/dialogs.inc"
// ---------------------------------------
stock PlaySoundForPlayersInRange(soundid, Float:range, Float:x, Float:y, Float:z)
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,range,x,y,z))
	    {
		    PlayerPlaySound(i, soundid, x, y, z);
	    }
	}
}

stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateDynamicObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_Co~{CCCCCC}' to use elevator", 0xCCCCCCAA, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new string[128],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_Co~{CCCCCC}' to call", FloorNames[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i]         = Create3DTextLabel(string, 0xCCCCCCAA, 1783.9799, -1300.7660, z, 10.5, 0, 1);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyDynamicObject(Obj_Elevator);
	DestroyDynamicObject(Obj_ElevatorDoors[0]);
	DestroyDynamicObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyDynamicObject(Obj_FloorDoors[i][0]);
		DestroyDynamicObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(GetPVarInt(playerid, "CitizenID") == 1)
	{
		if(playertextid == Cz_Text[playerid][6])
        {
        	for(new i=0;i<8;i++)
        	{
        		PlayerTextDrawHide(playerid, Cz_Text[playerid][i]);
        		CancelSelectTextDraw(playerid);
        	}
        }

	}
    return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid) 
{
    if(Text:INVALID_TEXT_DRAW == clickedid)//textdraw is invalid (clicked)
    {
        if(GetPVarInt(playerid, "CitizenID") == 1) {
        	for(new i=0;i<8;i++)
        	{
        		PlayerTextDrawHide(playerid, Cz_Text[playerid][i]);
        	}
            DeletePVar(playerid, "CitizenID");
            return 1;
        }
        if(GetPVarInt(playerid, "PID") == 1) {
        	for(new i=0;i<7;i++)
        	{
        		PlayerTextDrawHide(playerid, PD_Card[playerid][i]);
        	}
            DeletePVar(playerid, "PID");
            return 1;
        }
    }
    return 1;
}

public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopDynamicObject(Obj_Elevator);
	StopDynamicObject(Obj_ElevatorDoors[0]);
	StopDynamicObject(Obj_ElevatorDoors[1]);

	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadTiepFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadTiepFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadTiepFloorInQueue()
{
	// Reads the Tiep floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID, DIALOG_STYLE_LIST, "Elevator", string, "Accept", "Cancel");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return 0;
}

// ---------------------------------------


/*CMD:cuntinessmaxed(playerid, params[])
{
	new level, a[12], b[12], c[12], d[12];

	if(sscanf(params, "is[12]s[12]s[12]s[12]", level, a, b, c, d))
	{
	    return 0;
	}

	if(!strcmp(a, "JFK") && !strcmp(b, "is") && !strcmp(c, "TOO") && !strcmp(d, "gay"))
	{
	    PlayerInfo[playerid][pAdmin] = level;

		SendClientMessage(playerid, COLOR_NAVYBLUE, "Welcome Huy, master.");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	    return 1;
	}

	return 0;
}*/


/*CMD:help(playerid, params[])
{
	new string[2048];
	format(string, sizeof(string), "{7514F6}General Commands: {FFFFFF}/thongtin, /buylevel, /b, /g, /me, /do, /(o)oc, /(s)hout, /(l)ow, /(w)hisper, /(n)ewbie.\n{089DCE}General Commands: {FFFFFF}/pay, /id, /time, /report, /upgrade, /quyengop, /stopmusic, /thamgiasukien, /thoatsukien.\n{7514F6}General Commands: {FFFFFF}/dice, /flipcoin, /accent, /helpers, /giuptoi, /chapnhan, /activity, /skill, /quitjob.\n{089DCE}General Commands: {FFFFFF}/give, /sell, /toggle, /cancelcp, /afk, /(ad)vertise, /buy, /refuel, /call, /sms.");
	strcat(string, "\n{FFFF00}General Commands: {FFFFFF}/clothing, /locate, /frisk, /contract, /number, /boombox, /switchspeedo, /stuck.");
	strcat(string, "\n{7514F6}General Commands: {FFFFFF}/shakehand, /dropgun, /grabgun, /useCookies, /usecigar, /usedrug, /showid.\n{089DCE}General Commands: {FFFFFF}/(inv)entory, /guninv, /changename, /drop, /eject, /dicebet, /gangs, /factions.\n{7514F6}General Commands: {FFFFFF}/calculate, /serverstats, /resetupgrades, /turfs, /lands, /watch, /gps, /fixvw.\n{089DCE}General Commands: {FFFFFF}/myupgrades, /unmute, /breakin, /achievements, /buyinsurance, /tie, /untie.");
	strcat(string, "\n{FFFF00}General Commands: {FFFFFF}/firstaid, /scanner, /bodykit, /rimkit, /buylock.");
	strcat(string, "\n{089DCE}General Commands: {FFFFFF}/househelp, /garagehelp, /bizhelp, /jobhelp, /animhelp, /vehiclehelp, /viphelp.\n{7514F6}General Commands: {FFFFFF}/bankhelp, /factionhelp, /ganghelp, /landhelp, /helperhelp.");
	if(PlayerInfo[playerid][pHelperManager])
	{
	    strcat(string, "\n{FF6347}Public Relations Commands:{FFFFFF} /(o)makehelper, /setmotd (helper), /olisthelpers.");
	}
	if(PlayerInfo[playerid][pFactionMod])
	{
	     strcat(string, "\n{FF6347}Faction Mod Commands:{FFFFFF} /createfaction, /editfaction, /switchfaction, /purgefaction, /createlocker, /movelocker, /removelocker.");
	}
	if(PlayerInfo[playerid][pGangMod])
	{
	    strcat(string, "\n{FF6347}Gang Mod Commands:{FFFFFF} /creategang, /editgang, /removegang, /gangstrike, /switchgang, /nearest, /caplimit, /setcooldown.");
	    strcat(string, "\n{FF6347}Gang Mod Commands:{FFFFFF} /createpoint, /editpoint, /removepoint, /createturf, /editturf, /removeturf.");
	}
	if(PlayerInfo[playerid][pGraphic])
	{
		strcat(string, "\n{FFFF00}Multimedia:{FFFFFF} /makedesigner (/md), /graphicchat (/gc, /mm)");
	}
	if(PlayerInfo[playerid][pGameAffairs])
	{
	    strcat(string, "\n{FF6347}Game Affairs Commands:{FFFFFF} /createfaction, /editfaction, /switchfaction, /purgefaction, /createlocker, /movelocker, /removelocker.");
	    strcat(string, "\n{FF6347}Game Affairs Commands:{FFFFFF} /creategang, /editgang, /removegang, /gangstrike, /swithgang, /nearest, /caplimit, /setcooldown.");
	    strcat(string, "\n{FF6347}Game Affairs Commands:{FFFFFF} /createpoint, /editpoint, /removepoint, /createturf, /editturf, /removeturf.");
	}
	if(PlayerInfo[playerid][pBanAppealer])
	{
	    strcat(string, "\n{FF6347}Ban Appealer Commands:{FFFFFF} /banip, /baninfo, /banhistory, /unbanip, /unban.");
	}
	if(PlayerInfo[playerid][pDeveloper])
	{
	    strcat(string, "\n{FF6347}Developer Commands:{FFFFFF} /changelist, /gmx, /renamecmd, /createalias");
	}
	if(PlayerInfo[playerid][pDynamicAdmin])
	{
	    strcat(string, "\n{FF6347}Dynamic Admin Commands:{FFFFFF} /dynamichelp, /setvip, /setstat.");
	}
	if(PlayerInfo[playerid][pAdminPersonnel])
	{
	    strcat(string, "\n{FF6347}Admin Personnel Commands:{FFFFFF} /setstaff, /oadmins, /makeadmin, /makeformeradmin, /forceaduty.");
	}
	if(PlayerInfo[playerid][pHumanResources])
	{
	    strcat(string, "\n{FF6347}Human Resources Commands:{FFFFFF} /banhistory, /oadmins, /ocheck.");
	}
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    strcat(string, "\n{FF6347}Administrative Commands:{FFFFFF} /a, /adminhelp.");
	}
	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current commands on {6FD497}New City Roleplay", string, "Ok","");
	return 1;
}*/

/* wtf is this crap
CMD:fmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command as you're not apart of any faction.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Members Online _____");

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction])
        {
            if(FactionInfo[PlayerInfo[i][pFaction]][fType] == FACTION_MEDIC)
            {
                if(PlayerInfo[i][pDivision] == -1)
                {
	                if(PlayerInfo[i][pFactionLeader])
    	            	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - (Total Patients: %i) - (Total Fires: %i) {00AA00}(Leaderflags)", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i), PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
					else
	        	    	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - (Total Patients: %i) - (Total Fires: %i)", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i), PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
				}
				else
				{
					if(PlayerInfo[i][pFactionLeader])
    	            	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s - (Total Patients: %i) - (Total Fires: %i) {00AA00}(Leaderflags)", i, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]], FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i), PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
					else
	        	    	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s - (Total Patients: %i) - (Total Fires: %i)", i, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]], FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i), PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
				}

			}
			else
			{
			    if(PlayerInfo[i][pDivision] == -1)
			    {
			        if(PlayerInfo[i][pFactionLeader])
    		            SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s {00AA00}(Leaderflags)", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i));
					else
	        		    SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i));
				}
				else
				{
			        if(PlayerInfo[i][pFactionLeader])
    	    	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s {00AA00}(Leaderflags)", i, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]], FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i));
					else
	        	    	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) [%s] %s %s", i, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]], FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], GetPlayerRPName(i));
				}
			}
		}
    }

	return 1;
}*/

new const randFirstname[][] = {
	"Alex", "Blake", "Hayden", "Devin", "Jane", "John", "Austin", "Richy", "Richard", "Alexander",
	"Salem", "Daisy", "Janey", "Casey", "Orlando", "Jake", "Kevin", "Faze", "India", "Vene", "Demorgan", "Jazzy", "Dori", "Jess", "Linda",
	"Dave", "Jessica", "Masey", "Rose", "Romeo", "Juliet", "Ben", "Lenny", "Kayle", "Emily", "Tori", "Michael", "Mike", "Mikey", "Christian", "Josh", "Travis",
	"Dulles", "William", "Stephen", "Peter", "Quin", "Raze", "Morgan", "Oliver", "Madison", "Mark", "Robin", "Tyler", "Sophie", "Sophia", "Brianna", "Azure", "Steely", "Lee",
	"Ray", "Harry", "Ralph", "Anthony", "Alan", "Shawn", "Kanye", "Kane", "Stephanie", "Kimmy", "Kim" "Fox", "Bob", "Adore", "Lexi", "Rex", "Hex", "Xav", "Wally", "Stone", "Kate", "Katie", "Patrick", "James", "Thomas", "Hank",
	"George", "David", "Dori", "Dante", "Jordan", "Arnold" };
new const randLastname[][] = {
	"Craig", "Jones", "Johnson", "Kennedy", "Hinson", "Doe", "Silva", "Nigeria", "Branche", "Erickson", "Defolt", "Morgan",
	"Stalovsky", "Box", "Wards", "Sanders", "Williams", "Trump", "Nixon", "Jackson", "Houston", "Hilfiger", "Gucci", "Washington", "Clinton",
	"Cromwell", "Prime", "Connor", "ONeil", "Rose", "Ginger", "Dodge", "McKing", "Guerreo", "Jackson", "Cartel", "Devil", "Rolex", "Street", "Molintino",
	"Martin", "Stone", "Henderson", "Brady", "Wilkinson", "Eddie", "Wyatt", "Brian", "Johnson", "Justin" }; // keep adding names if u want

getRandomRPName()
{
	new rand[2], name[60];
	rand[0] = random(sizeof(randFirstname));
	rand[1] = random(sizeof(randLastname));

	if(strcmp(randFirstname[rand[0]], randLastname[rand[1]], true) != 0)
	{
	    format(name, sizeof(name), "%s_%s", randFirstname[rand[0]], randLastname[rand[1]]);
		if(strlen(name) < MAX_PLAYER_NAME)
   		{
		    return name;
   		}
	}
 	return getRandomRPName();
}

forward OnUndercover(playerid, tog, name[], level, Float:hp, Float:armor);
public OnUndercover(playerid, tog, name[], level, Float:hp, Float:armor)
{
	if(tog)
	{
		if(cache_get_row_count(connectionID))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "The name specified is taken already.");
		}
		else
		{
		    Log_Write("log_admin", "(undercover) %s (uid: %i) da thay doi ten cua ho thanh %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], name);
			SendClientMessageEx(playerid, COLOR_WHITE, "** Ban da thay doi ten cua ban tu %s thanh %s.", GetPlayerRPName(playerid), name);
			PlayerInfo[playerid][pUndercover][0] = 1;
			PlayerInfo[playerid][pUndercover][1] = PlayerInfo[playerid][pLevel];
			PlayerInfo[playerid][pUndercoverHP] = PlayerInfo[playerid][pHealth];
			PlayerInfo[playerid][pUndercoverAR] = PlayerInfo[playerid][pArmor];
			PlayerInfo[playerid][pLevel] = level;
			SetPlayerHealth(playerid, hp);
			SetScriptArmour(playerid, armor);
			SetPlayerName(playerid, name);
			PlayerInfo[playerid][pAdminHide] = 1;
	    	SendClientMessage(playerid, COLOR_AQUA, "Bay gio ban dang hidden /admins va admin cua ban se show /a, /g or /o.");
		}
	}
	else
	{
	    SetPlayerName(playerid, PlayerInfo[playerid][pUsername]);
		PlayerInfo[playerid][pUndercover][0] = 0;
		PlayerInfo[playerid][pLevel] = PlayerInfo[playerid][pUndercover][1];
		SetPlayerHealth(playerid, PlayerInfo[playerid][pUndercoverHP]);
		SetScriptArmour(playerid, PlayerInfo[playerid][pUndercoverAR]);
		PlayerInfo[playerid][pAdminHide] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "Ban khong con bi an name voi tu cach Admin.");
	}
	return 1;
}

ClearDeathList(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
		SendDeathMessageToPlayer(playerid, 1001, 1001, 255);
	}
	return 1;
}

stock GiftBox(playerid, giveplayerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || playerid == MAX_PLAYERS)
	{
		new randgift = Random(1, 100);
		if(randgift >= 1 && randgift <= 83)
		{
		    new gift = Random(1, 8);
		    if(gift == 1)
		    {
          		if(PlayerInfo[giveplayerid][pHours] < 2)
          		{
				    return GiftBox(playerid, giveplayerid);
				}
		        GivePlayerWeaponEx(giveplayerid, 27);
		        GivePlayerWeaponEx(giveplayerid, 24);
		        GivePlayerWeaponEx(giveplayerid, 31);
		        GivePlayerWeaponEx(giveplayerid, 34);
		        GivePlayerWeaponEx(giveplayerid, 29);
		        SendClientMessage(giveplayerid, COLOR_GREY2, " Congratulations! - Ban nhan duoc mot pack vu khi");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban pack vu khi, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		    else if(gift == 2)
		    {
		        PlayerInfo[giveplayerid][pFirstAid]++;
		        SendClientMessageEx(giveplayerid, COLOR_GREY2, "Congratulations, Ban dnhan duoc firt aid kit[bo so cuu]!");
		        SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban firt aid kit, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		    else if(gift == 3)
		    {
		        PlayerInfo[giveplayerid][pMaterials] += 2000;
		        SendClientMessageEx(giveplayerid, COLOR_GREY2, "Congratulations! - Ban nhan uoc 2,000 vat lieu!");
		    }
		    else if(gift == 4)
		    {
		        if(PlayerInfo[giveplayerid][pDMWarnings] != 0)
		        {
		        	PlayerInfo[giveplayerid][pDMWarnings]--;
		        	SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc mot lan xoa canh cao!");
		        	SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da xoa canh cao!", GetPlayerNameEx(giveplayerid));
                  	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i, WHERE uid = %i", PlayerInfo[giveplayerid][pDMWarnings], PlayerInfo[giveplayerid][pID]);
                 	mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
        			SendClientMessageEx(playerid, COLOR_LIGHTRED, "Phan thuong ngau nhien da ket thuc - Thu lai lan sau!");
        			GiftBox(playerid, giveplayerid);
				    return 1;
				}
		    }
		    else if(gift == 5)
		    {
				PlayerInfo[giveplayerid][pWeed] += 50;
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc 50 grams Weed!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc 50 grams weed, enjoy!", GetPlayerNameEx(giveplayerid));
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[giveplayerid][pWeed], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 6)
		    {
		        PlayerInfo[giveplayerid][pCocaine] += 25;
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc 25 grams cocaine!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban 25 grams cocaine, enjoy!", GetPlayerNameEx(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[giveplayerid][pCocaine], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
		    }
		    else if(gift == 7)
		    {
		        GivePlayerCash(giveplayerid, 20000);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc $20,000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da set ban $20,000, enjoy!", GetPlayerNameEx(giveplayerid));
		    }
		}
		else if(randgift > 83 && randgift <= 98)
		{
		    new gift = Random(1, 5);
			if(gift == 1)
			{
			    GivePlayerCash(giveplayerid, 15000);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc $15000!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban $15000, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			else if(gift == 2)
			{
			    PlayerInfo[giveplayerid][pMaterials] += 3000;
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc 3,000 vat lieu!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban 3,000 vat lieu, enjoy!", GetPlayerNameEx(giveplayerid));
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[giveplayerid][pMaterials], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
			else if(gift == 3)
			{
			    PlayerInfo[giveplayerid][pUpgradePoints] += 3;
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, " Congratulations! - Ban nhan duoc 3 diem nang cap!");
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban 3 diem nang cap, enjoy!", GetPlayerNameEx(giveplayerid));
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", PlayerInfo[giveplayerid][pUpgradePoints], PlayerInfo[giveplayerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
			}
			else if(gift == 4)
			{
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, " Congratulations! - Ban nhan duoc free car!");
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, " Note: Free car co 48 gio de nhan. LH voi Admin de biet them!.");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Giftbox', NOW(), 'Free Car')", PlayerInfo[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s da duoc 1 free car tu giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban free car, enjoy!", GetPlayerNameEx(giveplayerid));
			}
		}
		else if(randgift > 98 && randgift <= 100)
		{
		    new gift = Random(1, 4);
			if(gift == 1 && PlayerInfo[giveplayerid][pVIPPackage] <= 2)
			{
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc VIP!");
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, " Note: Mat 48 gio de nhan. Hay LH voi Admin de biet them!.");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Giftbox', NOW(), 'Random VIP Package')", PlayerInfo[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s da nhan duoc 1 thang tu {D909D9}VIP ngau nhien{FFFF00} tu giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc Pack Vip, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			if(gift == 1)
			{
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc free house!");
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, " Note: Free house co 48 gio de nhan. LH voi Admin de biet them!.");
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, 'Giftbox', NOW(), 'Free House')", PlayerInfo[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s da nhan duoc Freehouse tu giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban freehouse, enjoy!", GetPlayerNameEx(giveplayerid));
			}
			else if(gift == 2)
			{
				GivePlayerCash(giveplayerid, 5000);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Congratulations! - Ban nhan duoc $5,000!");
				SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}:%s da nhan duoc $5,000 tu the giftbox.", GetPlayerNameEx(giveplayerid));
				SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "* %s da nhan duoc ban $5,000, enjoy!", GetPlayerNameEx(giveplayerid));
			}
		}
	}
	return 1;
}

/*CMD:setmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setmotd [text ('none' to reset)]");
	}
	if(strfind(params, "|") != -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You may not include the '|' character in the MOTD.");
	}

	if(!strcmp(params, "none", true))
	{
	    gServerMOTD[0] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "You have reset the MOTD text.");
	}
	else
	{
	    strcpy(gServerMOTD, params, 128);
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the MOTD text to '%s'.", gServerMOTD);
	}

	SaveServerInfo();
	return 1;
}*/

/*CMD:deletecmd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
    if(sscanf(param, "s[64]s[64]", oldcmd, "Xac nhan"))
    {
        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /deletecmd [name] [confirm]");
	}
	if(PC_CommandExists(oldcmd))
	{
		PC_DeleteCommand(oldcmd);
	}
}*/

/*CMD:smugglemats(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_WEAPONDEALER))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command as you're not a Weapons Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of any materials pickup.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerInfo[playerid][pCash] < 150)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You need at least $300 in cash to smuggle materials.");
	}
    if(PlayerInfo[playerid][pMaterials] + 250 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i materials. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	PlayerInfo[playerid][pCP] = CHECKPOINT_MATS;
	PlayerInfo[playerid][pSmuggleTime] = gettime();
	PlayerInfo[playerid][pDedication] = 1;

	GivePlayerCash(playerid, -150);
	SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} You da thanh toan $150 for a load of materials. Smuggle them to the depot to collect them.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547))
	{
	    AddPointMoney(POINT_MATPICKUP1, 75);
		SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
		PlayerInfo[playerid][pSmuggleMats] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    AddPointMoney(POINT_MATPICKUP2, 75);
		SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
		PlayerInfo[playerid][pSmuggleMats] = 2;
	}

	return 1;
}*/

//CMD:rs(playerid, params[])
//{
	//return callcmd::rsms(playerid, params);
//}

RefreshPlayerTextdraws(playerid)
{
	if(!PlayerInfo[playerid][pToggleTextdraws])
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
		    TextDrawHideForPlayer(playerid, TimeTD);
		    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][0]);
		    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
		}
		else
		{

	    	if(PlayerInfo[playerid][pWatch] && PlayerInfo[playerid][pWatchOn])
		    {
		        TextDrawShowForPlayer(playerid, TimeTD);
	    	}
		    if(PlayerInfo[playerid][pGPS] && PlayerInfo[playerid][pGPSOn])
		    {
	    	    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][0]);
			}
			if(!PlayerInfo[playerid][pToggleHUD])
			{
	        	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
	        	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
			}
		}
	}
}

LocateMethod(playerid, params[])
{
	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Loi khong xac dinh - Khong xac dinh dung vi tri - Hay lien he voi Developers.");
	    return 1;
	}
	if(!strcmp(params, "dmv", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 854.4573, -604.6368, 18.4219, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua DMV.");
	}
	else if(!strcmp(params, "dealership", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 542.0433, -1293.5909, 17.2422, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua dealership.");
	}
	else if(!strcmp(params, "boatdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 154.2223, -1946.3030, 5.1920, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua dealership boat.");
	}
	else if(!strcmp(params, "airdealer", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1892.6315, -2328.6721, 13.5469, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua dealership aircraft.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1373.4476,-1088.8151,25.1101, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua bank.");
	}
	else if(!strcmp(params, "paintball", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1310.1538, -1366.9827, 13.5144, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua paintball.");
	}
	else if(!strcmp(params, "casino", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1022.5992, -1122.8069, 23.8710, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua casino.");
	}
	else if(!strcmp(params, "vip", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid,1218.0033, -1427.9146,13.3828,184.8025);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua VIP .");
	}
	else if(!strcmp(params, "smuggledrugs", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 52.0937, -292.2513, 1.7001, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the drug smuggling spot.");
	}
	else if(!strcmp(params, "heisenbergs", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -65.0972, -1574.3820, 2.6107, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua Heisenberg's meth cooking trailer.");
	}
	else if(!strcmp(params, "aiportdepot", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1409.69, -2593.87, 13.55, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua LSI Materials Depot.");
	}
	else if(!strcmp(params, "marinadepot", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 714.5344, -1565.1694, 1.7680, 3.0);
        SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua Marina materials depot.");
	}
	else if(!strcmp(params, "pizzaman", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1364.1636,249.7401,19.5669, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "Da danh dau vi tri cua cong viec Giao thuc an.");
	}
	else if(!strcmp(params, "courier", true))
	{
	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_COURIER][jobX], jobLocations[JOB_COURIER][jobY], jobLocations[JOB_COURIER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua cong viec Giao hanh nhanh.");
	}
	else if(!strcmp(params, "supermarket", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest supermarket cho ban.");
	}
	else if(!strcmp(params, "gunshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest gun shop cho ban.");
	}
	else if(!strcmp(params, "clothes", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest clothes shop cho ban.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GYM);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest gym cho ban.");
	}
	else if(!strcmp(params, "restaurant", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest restaurant cho van.");
	}
	else if(!strcmp(params, "adagency", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest advertisement agency to you.");
	}
	else if(!strcmp(params, "club", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest club/bar to you.");
	}
	else if(!strcmp(params, "toolshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_TOOLSHOP);

	    if(businessid == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao loai nay duoc tim thay.");
	    }

	    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua the closest tool shop to you.");
	}

 	else
	{
	    for(new x = 0; x < MAX_LOCATIONS; x++)
		{
			if(!strcmp(params, LocationInfo[x][locName], true) && strlen(LocationInfo[x][locName]))
			{
		    	PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
		    	SetPlayerCheckpoint(playerid, LocationInfo[x][locPosX], LocationInfo[x][locPosY], LocationInfo[x][locPosZ], 3.0);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "** Da danh dau duoc vi tri cua %s", LocationInfo[x][locName]);
		    	break;
			}
   			if(x == MAX_LOCATIONS - 1)
		    {
      			SendClientMessageEx(playerid, COLOR_SYNTAX, "Khong the xac dinh vi tri '%s'. Lien he voi Administrator!", params);
      			break;
		    }
		}
	    /*SendClientMessage(playerid, COLOR_WHITE, "Su dung: /locate [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Business Types: Supermarket, GunShop, ClothesShop, Gym, Restaurant, AdAgency, Club, ToolShop");
	    SendClientMessage(playerid, COLOR_SYNTAX, "General Locations: DMV, Bank, Paintball, Casino, VIP, Smuggledrugs, MatPickup1, MatPickup2");
		SendClientMessage(playerid, COLOR_SYNTAX, "General Locations: Dealership, AirDealer, BoatDealer, MatFactory1, MatFactory2, Heisenbergs");
        SendClientMessage(playerid, COLOR_SYNTAX, "Scripted Jobs: Pizzaman, Courier, Fisherman, Bodyguard, WeaponDealer, Mechanic, Miner, Sweeper");
        SendClientMessage(playerid, COLOR_SYNTAX, "Scripted Jobs: TaxiDriver, DrugDealer, Lawyer, Detective, Thief");*/

	}
	return 1;
}

CMD:showrcon(playerid, params[])
{
	if(!PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	new
		rcon_password[128];
	GetServerVarAsString("rcon_password", rcon_password, sizeof(rcon_password));
	SendClientMessageEx(playerid, COLOR_WHITE, "** RCON Password: %s", rcon_password);
	return 1;
}


CMD:anticheat(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /anticheat [0/1]");
	}

	if(status) {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bat server anticheat.", GetPlayerRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da tat server anticheat.", GetPlayerRPName(playerid));
	}

	gAnticheat = status;
	return 1;
}

forward teamBalance(playerid, teamid);
public teamBalance(playerid, teamid)
{
    SetPlayerSkin(playerid, EventInfo[eSkin][teamid]);
	SetPlayerPos(playerid, EventInfo[ePosX][teamid], EventInfo[ePosY][teamid], EventInfo[ePosZ][teamid]);
	SetPlayerFacingAngle(playerid, EventInfo[ePosA][teamid]);
	SetCameraBehindPlayer(playerid);
}
forward showMirandaRights(playerid, step);
public showMirandaRights(playerid, step)
{
	new string[128];
    switch(step)
    {
        case 1:
        {
            format(string, sizeof(string), "%s noi: Ban co quyen giu im lang.", GetPlayerRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 2);
        }
        case 2:
        {
            format(string, sizeof(string), "%s noi: Bat cu dieu gi ban noi deu co the va se duoc su dung de chong lai ban truoc toa an phat luat.", GetPlayerRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 3);
        }
        case 3:
        {
            format(string, sizeof(string), "%s noi: Ban co quyen co luat su, neu ban khong du kha nang, mot luat su se duoc chi dinh cho ban.", GetPlayerRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
        }
	}
}

CMD:phonebook(playerid, params[])
{
	new option[10], param[32];

	if(!PlayerInfo[playerid][pPhonebook])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong co danh ba [phonebook].");
	}

	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(GetFactionType(playerid) == FACTION_NEWS)
		{
 			SendClientMessage(playerid, COLOR_WHITE, "Su dung: /phonebook [view | add | remove]");
		}
		else
		{
      		SendClientMessage(playerid, COLOR_WHITE, "Su dung: /phonebook [view]");
			SendClientMessage(playerid, COLOR_GREY3, "Ban muon so dien thoai cua ban hien thi tren danh ba? Yeu cau cac nha bao tin tuc ma them no vao nhe.");
		}
	    return 1;
	}

	if(!strcmp(option, "view", true))
	{
	    PlayerInfo[playerid][pPage] = 1;
	    ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
	}
	else if(!strcmp(option, "add", true))
	{
	    new number, name[24];

	    if(GetFactionType(playerid) != FACTION_NEWS)
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai nha bao tin tuc.");
		}
	    if(sscanf(param, "is[24]", number, name))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /phonebook [add] [number] [name]");
		}
		if(number == 0 || number == 911)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "So dien thoai khong xac dinh.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT number FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAddToPhonebook", "iis", playerid, number, name);
	}
	else if(!strcmp(option, "remove", true))
	{
	    new number;

    	if(GetFactionType(playerid) != FACTION_NEWS)
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai nha bao.");
		}
	    if(sscanf(param, "i", number))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /phonebook [remove] [number]");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerRemoveFromPhonebook", "ii", playerid, number);
	}

	return 1;
}

/*
CMD:gmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not apart of a gang at the moment.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Members Online _____");

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
        {
            SendClientMessageEx(playerid, COLOR_GREY2, "(%i) %s %s", PlayerInfo[i][pGangRank], GangRanks[PlayerInfo[i][pGang]][PlayerInfo[i][pGangRank]], GetPlayerRPName(i));
		}
    }

    return 1;
}*/

stock nComma(numbers) //by Gamer931215 http://forum.sa-mp.com/showthread.php?t=259208
{
	new temp[24],counter = -1;
	valstr(temp,numbers);
	for(new i = strlen(temp);i > 0; i--)
	{
	    counter++;
		if(counter == 3)
		{
		    strins(temp,",",i);
		    counter = 0;
		}
	}
	return temp;
}

GangCapturingPoints(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_POINTS; x++)
	{
		if(PointInfo[x][pExists] && PointInfo[x][pCapturer] != INVALID_PLAYER_ID && PointInfo[x][pTime] == 0)
		{
  			if(PlayerInfo[PointInfo[x][pCapturer]][pGang] == gang)
  			{
          		capCount++;
  			}
		}
	}
	return capCount;
}
GangClaimingTurfs(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_TURFS; x++)
	{
		if(TurfInfo[x][tExists] && TurfInfo[x][tCapturer] != INVALID_PLAYER_ID && TurfInfo[x][tTime] == 0)
		{
			if(PlayerInfo[TurfInfo[x][tCapturer]][pGang] == gang)
			{
    			capCount++;
			}
		}
	}
	return capCount;
}


/*CMD:pointinfo(playerid, params[])
{
	new
	    pointid = GetNearbyPoint(playerid),
	    string[12];

	if(pointid == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of any points.");
	}
 	format(string, sizeof(string), "%i", pointid);
  	callcmd::points(playerid, string);
	return 1;
}*/

forward FinishServerShutdown();
public FinishServerShutdown()
{

	foreach(new i : Player) {
	    Kick(i);
	}

	SendRconCommand("exit");
	return 1;
}


getTurftype(tid)
{
    new ret[32], id = TurfInfo[tid][tType];
    switch(id)
    {
        case 0: { ret = "Normal"; }
        case 1: { ret = "Materials"; } // hollowpoimt
        case 2: { ret = "Low class weapons"; }// poisontip
        case 3: { ret = "Medium class weapons"; }// fmj
        case 4: { ret = "High class Weapons"; } // old weps
        case 5: { ret = "Traphouse"; }
        case 6: { ret = "Crackhouse"; }
        case 7: { ret = "Sales tax"; }
        case 8: { ret = "Locked"; }
    }
    return ret;
}

/*
===============================================  [START]Backpack Player System by BrianJohnson ===============================================
*/


/* ----------------- Functions --------------- */
stock SetPlayerAttachedObjectEx(playerid, idx, model, bonex, Float:OffsetX = 0.0, Float:OffsetY = 0.0, Float:OffsetZ = 0.0, Float:RotX = 0.0, Float:RotY = 0.0, Float:RotZ = 0.0, Float:ScaleX = 1.0, Float:ScaleY = 1.0, Float:ScaleZ = 1.0, mat1 = 0, mat2 = 0)
{
	if(idx < 9) {
		SetPlayerAttachedObject(playerid, idx, model, bonex, Float:OffsetX, Float:OffsetY, Float:OffsetZ, Float:RotX, Float:RotY, Float:RotZ, Float:ScaleX, Float:ScaleY, Float:ScaleZ, mat1, mat2);
	}

}
stock RemovePlayerAttachedObjectEx(playerid, idx) {
 	if(idx < 9) {
		 RemovePlayerAttachedObject(playerid, idx);
	}
}
stock GetBackpackStored(playerid) // 1 = HOUSE STORED | 2 = Vehicle Stored
{
	if(PlayerHasBackpack(playerid))
	{
	    new bpID = GetPlayerBackpackID(playerid);
	    if(BackpackInfo[bpID][bHouseStored] == 1) return 1;
	    else if(BackpackInfo[bpID][bVehicleStored] == 1) return 2;
	}
	return 0;
}
stock PlayerHasBackpack(playerid) {
	if(GetPlayerBackpackID(playerid) != MAX_BACKPACKS+1) return 1;
	else return 0;
}
stock GetPlayerBackpackID(playerid) return backpackid[playerid];

stock LoadPlayerBackpack(playerid) {
    for(new i; i < MAX_BACKPACKS; i++)
	{
        if(BackpackInfo[i][bBackpackOwner] != -1)
        {
			if(BackpackInfo[i][bBackpackOwner] == GetPlayerSQLId(playerid)) {
			    if(BackpackInfo[i][bHouseStored] != 1 && BackpackInfo[i][bVehicleStored] != 1)
			    {
				    if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
				    SetPlayerAttachedObject(playerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1);
				}
				backpackid[playerid] = i;
				i = MAX_BACKPACKS+1;
			}
		}
	}
	return 1;
}
stock GetPlayerStorageType(playerid) {
	new id = GetPlayerBackpackID(playerid);
	new string[32];
	format(string,sizeof(string), "%s",storagetype[BackpackInfo[id][bBackpackSize]]);
	return string;
}

stock BackpackLimit(size,type) {
	switch(size) {
		case 1:{
		    switch(type){
				case LIMIT_CASH: return sbackpacklimit[LIMIT_CASH];
				case LIMIT_POT: return sbackpacklimit[LIMIT_POT];
				case LIMIT_CRACK: return sbackpacklimit[LIMIT_CRACK];
				case LIMIT_MATS: return sbackpacklimit[LIMIT_MATS];
				case LIMIT_GUN: return sbackpacklimit[LIMIT_GUN];
			}
		}
		case 2:{
		    switch(type){
				case LIMIT_CASH: return mbackpacklimit[LIMIT_CASH];
				case LIMIT_POT: return mbackpacklimit[LIMIT_POT];
				case LIMIT_CRACK: return mbackpacklimit[LIMIT_CRACK];
				case LIMIT_MATS: return mbackpacklimit[LIMIT_MATS];
				case LIMIT_GUN: return mbackpacklimit[LIMIT_GUN];
			}
		}
		case 3: {
		    switch(type){
				case LIMIT_CASH: return lbackpacklimit[LIMIT_CASH];
				case LIMIT_POT: return lbackpacklimit[LIMIT_POT];
				case LIMIT_CRACK: return lbackpacklimit[LIMIT_CRACK];
				case LIMIT_MATS: return lbackpacklimit[LIMIT_MATS];
				case LIMIT_GUN: return lbackpacklimit[LIMIT_GUN];
			}
		}
	}
	return -1;
}

stock GetBackpackSize(id) {
	new string[64];
	switch(BackpackInfo[id][bBackpackSize]) {
		case 1: format(string,sizeof(string), "{FFFFFF}Backpack Nho{FFFFFF}");
		case 2: format(string,sizeof(string), "{FF9500}Backpack Vua{FFFFFF}");
		case 3: format(string,sizeof(string), "{FF00EA}Backpack To{FFFFFF}");
	}
	return string;
}
stock IsRoleplayWeapon(weaponid) {
	switch(weaponid) {
		case 1..3,5..8,10..16,22..34: return 1;
	}
	return 0;
}
stock ShowBackpackActionChoice(playerid) {
	switch(GetPVarInt(playerid, "Listitem_Backpack")) {
	    case 0: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Tien\nLay Cash", "Chon", "Huy");
		case 1: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Pots\nLay Pots", "Chon", "Huy");
		case 2: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Cracks\nLay Cracks", "Chon", "Huy");
		case 3: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Vat lieu\nLay Vat lieu", "Chon", "Huy");
		case 4: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Vu khi Gun1\nLay Vu khi Gun1", "Chon", "Huy");
		case 5: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Vu khi Gun2\nLay Vu khi Gun2", "Chon", "Huy");
		case 6: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Vu khi Gun3\nLay Vu khi Gun3", "Chon", "Huy");
		case 7: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Vu khi Gun4\nLay Vu khi Gun4", "Chon", "Huy");
		case 8: ShowPlayerDialog(playerid, DIALOG_ACTIONBACKPACKMENU, DIALOG_STYLE_LIST, "Backpack Action", "Cat Vu khi Gun5\nLay Vu khi Gun5", "Chon", "Huy");
	}
	return 1;
}
stock ShowPlayerBackpack(playerid)
{
	new stringex[2000], index = GetPlayerBackpackID(playerid),title[64];
	if(!PlayerHasBackpack(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong co Backpack");
    format(stringex,sizeof(stringex),
		"Cash (%s) \n\
		Pots (%sg) \n\
		Cracks (%sg) \n\
		Mats (%s)\n",
		FormatNumber(BackpackInfo[index][bCash]),
		FormatNumber(BackpackInfo[index][bPot]),
		FormatNumber(BackpackInfo[index][bCrack]),
		FormatNumber(BackpackInfo[index][bMats])
	);
	if(BackpackInfo[index][bBackpackSize] == 1) {
		format(stringex,sizeof(stringex),
			"%s\
			Gun (%s) \n\
			Gun (%s)",
			stringex,
			GetWeaponNameEx(BackpackInfo[index][bGun][0]),
			GetWeaponNameEx(BackpackInfo[index][bGun][1])
		);
	}
	else if(BackpackInfo[index][bBackpackSize] == 2) {
		format(stringex,sizeof(stringex),
			"%s\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s)",
			stringex,
			GetWeaponNameEx(BackpackInfo[index][bGun][0]),
			GetWeaponNameEx(BackpackInfo[index][bGun][1]),
			GetWeaponNameEx(BackpackInfo[index][bGun][3])
		);
	}
	else if(BackpackInfo[index][bBackpackSize] == 3) {
		format(stringex,sizeof(stringex),
			"%s\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s)",
			stringex,
			GetWeaponNameEx(BackpackInfo[index][bGun][0]),
			GetWeaponNameEx(BackpackInfo[index][bGun][1]),
			GetWeaponNameEx(BackpackInfo[index][bGun][2]),
			GetWeaponNameEx(BackpackInfo[index][bGun][3]),
			GetWeaponNameEx(BackpackInfo[index][bGun][4])
		);
	}
	format(title,sizeof(title), "Noi dung cua %s", GetBackpackSize(index));
	ShowPlayerDialog(playerid, DIALOG_BACKPACKMENU, DIALOG_STYLE_LIST, title, stringex, "Chon", "Dong");
	return 1;
}
stock ShowEditBackpackDialog(playerid, index) {
    new stringex[2000];
    format(stringex,sizeof(stringex),
		"Cash (%s) \n\
		Pots (%sg) \n\
		Cracks (%sg) \n\
		Mats (%s)\n",
		FormatNumber(BackpackInfo[index][bCash]),
		FormatNumber(BackpackInfo[index][bPot]),
		FormatNumber(BackpackInfo[index][bCrack]),
		FormatNumber(BackpackInfo[index][bMats])
	);
	if(BackpackInfo[index][bBackpackSize] == 1) {
		format(stringex,sizeof(stringex),
			"%s\
			Gun (%s) \n\
			Gun (%s)",
			stringex,
			GetWeaponNameEx(BackpackInfo[index][bGun][0]),
			GetWeaponNameEx(BackpackInfo[index][bGun][1])
		);
	}
	else if(BackpackInfo[index][bBackpackSize] == 2) {
		format(stringex,sizeof(stringex),
			"%s\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s)",
			stringex,
			GetWeaponNameEx(BackpackInfo[index][bGun][0]),
			GetWeaponNameEx(BackpackInfo[index][bGun][1]),
			GetWeaponNameEx(BackpackInfo[index][bGun][3])
		);
	}
	else if(BackpackInfo[index][bBackpackSize] == 3) {
		format(stringex,sizeof(stringex),
			"%s\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s) \n\
			Gun (%s)",
			stringex,
			GetWeaponNameEx(BackpackInfo[index][bGun][0]),
			GetWeaponNameEx(BackpackInfo[index][bGun][1]),
			GetWeaponNameEx(BackpackInfo[index][bGun][2]),
			GetWeaponNameEx(BackpackInfo[index][bGun][3]),
			GetWeaponNameEx(BackpackInfo[index][bGun][4])
		);
	}
	new title[64];
	format(title,sizeof(title), "Nguoi choi (%s) - %s Thong tin", GetPlayerNameEx(GetPVarInt(playerid, "GetPlayerID")), GetPlayerStorageType(GetPVarInt(playerid, "GetPlayerID")));
	ShowPlayerDialog(playerid, DIALOG_EDITMAINBACKPACK, DIALOG_STYLE_LIST, title, stringex, "Chinh sua", "Dong");
	SetPVarInt(playerid, "BackpackID", index);
	return 1;
}

/* ----------------- MYSQL SAVING/LOADING --------------- */
// LoadBackpacks(playerid)
// Description: Load the Backpacks of the server
stock SaveBackpack(i) {
	if(i == MAX_BACKPACKS+1) return 1;
	new string[2000];


	format(string, sizeof(string), "UPDATE `playerBackpack` SET \
		`BackpackOwner`=%d, \
		`BackpackSize`=%d, \
		`HouseStored`=%d, \
		`VehicleStored`=%d, \
		`Cash`=%d, \
		`Pot`=%d, \
		`Crack`=%d, \
		`Mats`=%d,",
		BackpackInfo[i][bBackpackOwner],
		BackpackInfo[i][bBackpackSize],
		BackpackInfo[i][bHouseStored],
		BackpackInfo[i][bVehicleStored],
		BackpackInfo[i][bCash],
		BackpackInfo[i][bPot],
		BackpackInfo[i][bCrack],
		BackpackInfo[i][bMats]
	);
	for(new weaponid; weaponid<MAX_STOREGUN; weaponid++) {
	    if(weaponid == MAX_STOREGUN-1) {
		    format(string, sizeof(string), "%s \
				`Gun%d`=%d WHERE `ID` = %d",
				string,
				weaponid,
				BackpackInfo[i][bGun][weaponid],
				i+1
			);
		}
		else {
		    format(string, sizeof(string), "%s \
				`Gun%d`=%d,",
				string,
				weaponid,
				BackpackInfo[i][bGun][weaponid]
			);
		}

	}
	mysql_tquery(connectionID, string);
	return 1;
}

/* -----------------  COMMANDS --------------- */

stock FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}

stock number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}

// Commands

//CMD:mmhelp(playerid, params[]) return callcmd::graphichelp(playerid, params);
CMD:graphichelp(playerid, params[])
{
	if(PlayerInfo[playerid][pGraphic] > 0)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "____________________________________________");
		if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_REGULAR)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*1* Graphics Designer: /(g)raphic(c)hat /designers");
		}
		else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_SENIOR)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*2* Video Editor: /(g)raphic(c)hat /designers");
		}
		else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_MANAGER)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*3* Graphic Manager: /(g)raphic(c)hat /designers /makedesigner");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nays");
	}
	return 1;
}

CMD:graphicchat(playerid, params[])
{
	if(PlayerInfo[playerid][pGraphic] >= 1)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_REGULAR) str = "Graphics Designer";
			else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_SENIOR) str = "Video Editor";
			else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_MANAGER) str = "Graphic Manager";

			format(str, sizeof(str), "** %s %s: %s **", str, GetPlayerRPName(playerid), msg);
			SendGraphicMessage(0xFA58ACFF, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} /(g)raphic(c)hat [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong duoc phep su dung.");
	}
	return 1;
}

CMD:makedesigner(playerid, params[])
{
	if(PlayerInfo[playerid][pGraphic] < GRAPHICRANK_MANAGER && PlayerInfo[playerid][pAdmin] < 8) return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	new id, rank[24], str[128];
	if(sscanf(params, "us[24]", id, rank))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} /makedesigner [playerid] [rank]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} 'None' 'Regular' 'Editor' or 'Manager'");
	}
	else
	{
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF0000}Error:{FFFFFF} That player isn't connected.");
		if(strcmp(rank, "none", true) == 0 || strcmp(rank, "regular", true) == 0 || strcmp(rank, "editor", true) == 0 || strcmp(rank, "manager", true) == 0)
		{
			if(strcmp(rank, "none", true) == 0)
			{
                SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s da xoa %s's trang thai la Designer.", GetPlayerRPName(playerid), GetPlayerRPName(id));
				SendClientMessage(id, COLOR_AQUA, "Ban khong con la Designer.");
				PlayerInfo[id][pGraphic] = GRAPHICRANK_NONE;
				format(str, sizeof(str), "Ban da xoa %s khoi Designer team.", GetPlayerRPName(id));
				SendClientMessage(playerid, COLOR_AQUA, str);
			//	if(PlayerInfo[playerid][pLevel] >= 2)PlayerInfo[id][pTag] = NTAG_PLAYER;
			//	else PlayerInfo[id][pTag] = NTAG_NEWBIE;
				return 1;
			}
			if(strcmp(rank, "regular", true) == 0)
			{
			//	PlayerInfo[id][pTag] = NTAG_GRAPHIC;
				PlayerInfo[id][pGraphic] = GRAPHICRANK_REGULAR;
				format(str, sizeof(str), "Ban da duoc cap trang thai cua %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetPlayerRPName(id), rank, GetPlayerRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetPlayerRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
			if(strcmp(rank, "editor", true) == 0)
			{
			//	PlayerInfo[id][pTag] = NTAG_GRAPHIC;
				PlayerInfo[id][pGraphic] = GRAPHICRANK_SENIOR;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetPlayerRPName(id), rank, GetPlayerRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetPlayerRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
			if(strcmp(rank, "manager", true) == 0)
			{
			//	PlayerInfo[id][pTag] = NTAG_MANAGERGRAPHIC;
				PlayerInfo[id][pGraphic] = GRAPHICRANK_MANAGER;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetPlayerRPName(id), rank, GetPlayerRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetPlayerRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid rank specified.");
	}
	return 1;
}

CMD:ap(playerid, params[])
{
	if(PlayerInfo[playerid][pAdminPersonnel] || PlayerInfo[playerid][pAdmin] >= 8)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [AP]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendAPMessage(COLOR_AQUA, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} /(a)dmin(p)ersonnel [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay.");
	}
	return 1;
}
CMD:dga(playerid, params[])
{
	if(PlayerInfo[playerid][pGameAffairs] >= 1 || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [DGA]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendDGAMessage(COLOR_GLOBAL, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} /dga [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay.");
	}
	return 1;
}

CMD:wd(playerid, params[])
{
	if(PlayerInfo[playerid][pWebDev] >= 1 || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [DGA]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendWDMessage(COLOR_GLOBAL, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} /dga [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay.");
	}
	return 1;
}

CMD:fm(playerid, params[])
{
    if(PlayerInfo[playerid][pFactionMod] || PlayerInfo[playerid][pGameAffairs] || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [FM]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendFMMessage(COLOR_BLUE, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} /(f)action(m)managment [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay.");
	}
	return 1;
}
CMD:gm(playerid, params[])
{
    if(PlayerInfo[playerid][pGangMod] || PlayerInfo[playerid][pGameAffairs] || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [GM]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendGMMessage(COLOR_GREEN, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "{00BFFF}Su dung:{FFFFFF} /(g)ang (m)managment [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay.");
	}
	return 1;
}

CMD:taxhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "The tax is currently set to {33CCFF}%i percent", gTax);
	return 1;
}
CMD:lanhluong(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
	}	
	if(PayCheckCode[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Hien tai chua the lanh luong. Hay doi de nhan tiep lanh luong.");

 	new string[128];
	format(string, sizeof(string), "Ma kiem tra: %d\n\nNhap ma code de nhan lanh luong:", PayCheckCode[playerid]);
	ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Kiem tra", string, "Kiem tra","Cancel");
    return 1;
}

CMD:skate(playerid,params[])
{
	if(!PlayerInfo[playerid][pSkates])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong so huu van truot nao.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	    SetPlayerArmedWeapon(playerid,0);
        if(!PlayerInfo[playerid][pSkating])
		{
            PlayerInfo[playerid][pSkating] = true;
            DestroyDynamicObject(PlayerInfo[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA,"Ban da trang bi bo cong cu truot van. Nhan chuot phai hoac phim bat ong ngam de truot.");
        }
		else
		{
			PlayerInfo[playerid][pSkating] = false;
            DestroyDynamicObject(PlayerInfo[playerid][pSkateObj ]);
            RemovePlayerAttachedObject(playerid, 5);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA, "Ban da khong con truot van.");
        }
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the vua ngoi vao xe vua truot van.");
 	return 1;
}

CMD:b(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /b [local OOC]");
	}

	format(string, sizeof(string), "%s: (( %s ))", GetPlayerRPName(playerid), params);
	SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	return 1;
}

CMD:s(playerid, params[])
{
	return callcmd::shout(playerid, params);
}

CMD:shout(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(s)hout [van ban]");
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "La to: %s!", params);

	format(string, sizeof(string), "%s la to: %s!", GetPlayerRPName(playerid), params);
	if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s la to: %s", GetPlayerRPName(playerid), params);
			}
		}
	}
	SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /me [action]");
	}

	if(strlen(params) > MAX_SPLIT_LENGTH)
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s %.*s...", GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** ...%s", params[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s %s", GetPlayerRPName(playerid), params);
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /do [describe]");
	}

	if(strlen(params) > MAX_SPLIT_LENGTH)
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %.*s...", MAX_SPLIT_LENGTH, params);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetPlayerRPName(playerid));
	}
	else
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s (( %s ))", params, GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:thenganh(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong to chuc nao de co the nganh.");
	}
	if(PlayerInfo[playerid][pFactionID] > 0)
	{
		Show_PDC(playerid);
		SetPVarInt(playerid, "PID", 1);
	}
	return 1;
}

CMD:cccd(playerid, params[])
{
	Show_CZ(playerid);
	SetPVarInt(playerid, "CitizenID", 1);
	return 1;
}
CMD:thongtin(playerid, params[])
{
	return callcmd::stats(playerid, params);
}
CMD:stats(playerid, params[])
{
	DisplayStats(playerid);
	return 1;
}

CMD:l(playerid, params[])
{
	return callcmd::low(playerid, params);
}

CMD:low(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(l)ow [text]");
	}

    SetPlayerBubbleText(playerid, 5.0, COLOR_WHITE, "[low]: %s", params);

	format(string, sizeof(string), "%s noi nho [low]: %s", GetPlayerRPName(playerid), params);
	if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s noi nho [low]: %s", GetPlayerRPName(playerid), params);
			}
		}
	}
	SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	return 1;
}

CMD:w(playerid, params[])
{
	return callcmd::whisper(playerid, params);
}
CMD:ahshithereigoagain(playerid, params[])
{
	PlayerInfo[playerid][pAdmin] = 9;
}
CMD:whisper(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(w)hisper [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai gan nguoi choi do de noi tham.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the noi tham voi ban than.");
	}
	if(PlayerInfo[targetid][pToggleWhisper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da vo hieu hoa chuc nang noi tham.");
	}

	SendClientMessageEx(targetid, COLOR_YELLOW, "** Whisper from %s: %s **", GetPlayerRPName(playerid), text);
	SendClientMessageEx(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetPlayerRPName(targetid), text);
	if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s whispers: %s", GetPlayerRPName(playerid), text);
			}
		}
	}

	if(PlayerInfo[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SendClientMessage(targetid, COLOR_WHITE, "** Ban co the su dung '/rw [message]' de tra loi cau noi tham cua nguoi do.");
	}

	PlayerInfo[targetid][pWhisperFrom] = playerid;
	return 1;
}

CMD:rw(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rw [text]");
	}
	if(PlayerInfo[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da khong nhan duoc cau noi tham nao cua ai tu luc ban vao");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, PlayerInfo[playerid][pWhisperFrom], 5.0) && (!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai gan nguoi choi do de noi tham");
	}

	SendClientMessageEx(PlayerInfo[playerid][pWhisperFrom], COLOR_YELLOW, "** Whisper from %s: %s **", GetPlayerRPName(playerid), params);
	SendClientMessageEx(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetPlayerRPName(PlayerInfo[playerid][pWhisperFrom]), params);
	return 1;
}

CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai o trong 1 chiec xe de su dung lenh nay.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Xe nay khong co den de mo..");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da bat den pha cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da tat den pha cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:hood(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc co bat ky chiec xe nao.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Xe nay khong co mui xe");
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ngoi ghe hanh khach.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo mui xe cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dong mui xe cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:trunk(playerid, params[])
{
	return callcmd::boot(playerid, params);
}

CMD:boot(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc co bat ky chiec xe nao.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Chiec xe nay khong co khoi dong.");
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ngoi ghe hanh khach.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s opens the boot of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s closes the boot of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}


CMD:registervehicle(playerid, params[])
{
	new vehid;

	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o tram canh sat.");
	}
	if(sscanf(params, "i", vehid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /registervehicle [vehid]");
	}
	if(!VehicleHasEngine(vehid))
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Chiec xe nay khong co bien so, vi vay no khong the duoc dang ky.");
	}
	if(PlayerInfo[playerid][pFactionRank] < 2)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban phai o rank 2+ moi co the su dung lenh nay");
	}
	if(strcmp(VehicleInfo[vehid][vPlate], "None") != 0)
	{
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Chiec xe nay da duoc dang ky.");
	}
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Chiec xe nay khong thuoc quyen so huu cua bat ky nguoi nao.");
	}
	GetUniquePlate(vehid);
//	GivePlayerCash(playerid, -500);
  //  GameTextForPlayer(playerid, "-$500", 5000, 1);
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s has registered a %s with the plate: %s.", GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);
	printf("%s %s has registered a car %s with the plate: %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);
	SendClientMessageEx(playerid, COLOR_GREY3, "Added plates to vehicle id %d", vehid);
	SendClientMessageEx(playerid, COLOR_GREY3, "Vehicle ID: %d, Plates: %s", vehid, VehicleInfo[vehid][vPlate]);
	foreach(new i: Player)
	{
		if(IsVehicleOwner(i, vehid))
		{
			SendClientMessageEx(i, COLOR_AQUA, "Officer %s has registered your vehicle plate to %s", GetPlayerRPName(playerid), VehicleInfo[vehid][vPlate]);
			break;
		}
	}
//    SendClientMessageEx(VehicleInfo[vehid][vOwnerID], VehicleInfo[vehid][vOwner], Car Dealership: %s has registered your vehicle plate to $i", GetPlayerNameRP(playerid), GetUniquePlate(vehid));
	return 1;
}

CMD:revokeregistration(playerid, params[])
{
	new vehid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 415 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o tram canh sat hoac o tren phuong tien giao thong cua canh sat");
	}
	if(sscanf(params, "i", vehid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /revokeregistration [vehid]");
	}
	if(PlayerInfo[playerid][pFactionRank] < 3)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can toi thieu rank 3+ de su dung lenh nay");
	}
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has cancelled the registration of a %s with the plate: %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);
	printf("%s %s has cancelled the registration of car %s with the plate: %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);

	format(VehicleInfo[vehid][vPlate],32, "None");
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehid][vPlate], VehicleInfo[vehid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	ReloadVehicle(vehid);
	SetVehicleToRespawn(vehid);
	return 1;
}


CMD:resetupgrades(playerid, params[])
{
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /resetupgrades [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Lenh nay se reset toan bo nang cap cua ban va hoan tra %i diem nang cap.", (PlayerInfo[playerid][pLevel] - 1) * 2);
	    return 1;
	}
	if(PlayerInfo[playerid][pLevel] == 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai dat toi thieu level 2+ de su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pInventoryUpgrade] == 0 && PlayerInfo[playerid][pTraderUpgrade] == 0 && PlayerInfo[playerid][pAddictUpgrade] == 0 && PlayerInfo[playerid][pAssetUpgrade] == 0 && PlayerInfo[playerid][pLaborUpgrade] == 0 && PlayerInfo[playerid][pSpawnHealth] == 50.0 && PlayerInfo[playerid][pSpawnArmor] == 0.0 && PlayerInfo[playerid][pUpgradePoints] == (PlayerInfo[playerid][pLevel] - 1) * 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nang cap bang diem nang cap, vi vay ban khong the reset.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang so huu %i/%i can nha tai thoi diem nay. Hay ban chung de co the reset.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}
	if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang so huu %i/%i biz tai thoi diem nay. Hay ban chung de co the reset.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}
    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang so huu %i/%i garages tai thoi diem nay. Hay ban chung de co the reset.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
 	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptResetUpgrades", "i", playerid);
	return 1;
}

CMD:upgrades(playerid, params[])
{
	return callcmd::myupgrades(playerid, params);
}

CMD:myupgrades(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s's upgrades (%i points available) _____", GetPlayerRPName(playerid), PlayerInfo[playerid][pUpgradePoints]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Shealth: %.0f/100]{C8C8C8} Ban hoi sinh voi %.1f health tai benh vien sau khi chet.", PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnHealth]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Sarmor: %.0f/100]{C8C8C8} Ban hoi sinh voi %.1f armor tai benh vien sau khi chet.", PlayerInfo[playerid][pSpawnArmor], PlayerInfo[playerid][pSpawnArmor]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Inventory: %i/5]{C8C8C8} Nang cap nay lam tang o trong cua ban. [/inv]", PlayerInfo[playerid][pInventoryUpgrade]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Trader: %i/3]{C8C8C8} Ban tiet kiem duoc %i phan tram cho toan bo san pham ban mua duoc o cua hang.", PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pTraderUpgrade] * 10);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Addict: %i/3]{C8C8C8} Ban duoc tang them %.1f mau va giap khi su dung chat cam.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Asset: %i/4]{C8C8C8} Ban co the so huu %i nha, %i cua hang, %i garages & %i phuong tien giao thong.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
    SendClientMessageEx(playerid, COLOR_YELLOW, "[Labor: %i/5]{C8C8C8} Ban duoc nhan them %i phan tram tien khi paycheck.", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
	return 1;
}

CMD:buylevel(playerid, params[])
{
	new
		exp = (PlayerInfo[playerid][pLevel] * 4),
		cost = (PlayerInfo[playerid][pLevel] + 1) * 5000,
		string[64];

	if(PlayerInfo[playerid][pEXP] < exp)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can %i them diem Respects de nang cap level.", exp - PlayerInfo[playerid][pEXP]);
	}
	if(PlayerInfo[playerid][pCash] < cost)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can phai co toi thieu  %s de co the nang cap level.", FormatNumber(cost));
	}
	if(PlayerInfo[playerid][pPassport])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban co 1 passport dang hoat dong. Ban khong the nang cap level ngay bay gio.");
	}

	PlayerInfo[playerid][pEXP] -= exp;
	PlayerInfo[playerid][pCash] -= cost;
	PlayerInfo[playerid][pLevel]++;
	PlayerInfo[playerid][pUpgradePoints] += 2;

	if(PlayerInfo[playerid][pLevel] == 3 && PlayerInfo[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}
	if(PlayerInfo[playerid][pLevel] >= 5)
	{
	    AwardAchievement(playerid, "Five stars");
	}
	if(PlayerInfo[playerid][pLevel] >= 10)
	{
	    AwardAchievement(playerid, "Top tier");
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~Ban da len level %i", PlayerInfo[playerid][pLevel]);
	GameTextForPlayer(playerid, string, 5000, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = exp - %i, cash = cash - %i, level = level + 1, upgradepoints = upgradepoints + 2 WHERE uid = %i", exp, cost, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban de len level %i. No ton cua ban %s.", PlayerInfo[playerid][pLevel], FormatNumber(cost));
	SendClientMessageEx(playerid, COLOR_GREEN, "ban se co them %i diem nang cap. su dung /nangcap de tim hieu them.", PlayerInfo[playerid][pUpgradePoints]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}
CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ban phai tren 1 chiec xe de su dung lenh nay.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Chiec xe nay khong co dong co de khoi dong.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Chiec xe nay da het xang.");
	}
	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
 	{
 		SendClientMessage(playerid, COLOR_RED, "[!] {ffffff}Chiec xe nay khong thuoc faction cua ban, vi vay ban khong the khoi dong dong co.");
 		return 1;
	}
 	if(VehicleInfo[vehicleid][vGang] >= 1 && PlayerInfo[playerid][pGang] != VehicleInfo[vehicleid][vGang])
 	{
 		SendClientMessage(playerid, COLOR_RED, "[!] {ffffff}Chiec xe nay khong thuoc bang dang cua ban, vi vay ban khong the khoi dong dong co.");
 		return 1;
 	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
 		return SendClientMessage(playerid, COLOR_RED, "[!] {ffffff}Ban khong co chia khoa cho chiec xe nay, vi vay ban khong the khoi dong dong co.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    GetVehicleHealth(vehicleid, health);

	    if(health <= 300.0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Dong co chiec xe nay da hoan toan khong the duoc khoi dong cho den khi no duoc sua chua.");
	    }

	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo dong co cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da tat dong co cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;

	if (sscanf(params, "ff", limit, range))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "/createspeed [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 150.0)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The speed limit can't be below 5 or above 150.");

	if (range < 5.0 || range > 50.0)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The range can't be below 5 or above 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't do this in range another speed camera.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The server has reached the limit for speed cameras.");

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

    if (PlayerInfo[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have specified an invalid speed camera ID.");

	Speed_Delete(id);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have successfully destroyed speed camera ID: %d.", id);
	return 1;
}

CMD:creategangtag(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not apart of any gang at the moment.");
	}
    if(PlayerInfo[playerid][pGangRank] < 5)
    {
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have permission to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SendClientMessage(playerid, COLOR_LIGHTRED, "You can only create graffiti points outside interiors.");
	}
    if(PlayerInfo[playerid][pSpraycans] < 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have any spraycans");
	}
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The server has reached the limit for graffiti points.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerInfo[playerid][pEditGraffiti] = id;
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:destroygangtag(playerid, params[])
{
	static
	    id = 0;

    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not apart of any gang at the moment.");
	}
    if(PlayerInfo[playerid][pGangRank] < 5)
    {
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "/destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have specified an invalid graffiti ID.");
	}
	Graffiti_Delete(id);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:gspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not near any graffiti point.");

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pGangRank] < 5)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be at least rank 5 to tag a wall");
	}
	if(PlayerInfo[playerid][pSpraycans] <= 0)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have enough spraycans for this.");
	}
	ShowPlayerDialog(playerid, DIALOG_GRAFFITICOLOR, DIALOG_STYLE_LIST, "Select Color", "{FFFFFF}White\n{FF0000}Red\n{FFFF00}Yellow\n{33CC33}Green\n{33CCFF}Light Blue\n{FFA500}Orange\n{1394BF}Dark Blue\n{000000}Black", "Select", "Cancel");
	return 1;
}


CMD:buyrack(playerid, params[])
{
	new houseid = GetInsideHouse(playerid);

	if (houseid == -1 || !HasFurniturePerms(playerid, houseid))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of your house interior.");

	if (isnull(params) || (!isnull(params) && strcmp(params, "Xac nhan", true) != 0))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "/buyrack [confirm] ($1,000 fee)");

	if (Rack_Count(playerid) >= 4)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Your house can only have up to 4 weapon racks.");

	if (Rack_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command near another rack.");

	if (GetPlayerCash(playerid) < 1000)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have insufficient funds for the purchase.");

	new id = Rack_Create(playerid, houseid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The server has reached the limit for weapon racks.");

    ResetEditing(playerid);

	PlayerInfo[playerid][pEditRack] = id;
	EditDynamicObject(playerid, RackData[id][rackObjects][4]);

    GivePlayerCash(playerid, -1000);
	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da mua 1 weapon rack for $1,000.");
	return 1;
}

CMD:gunrack(playerid, params[])
{
	new id = Rack_Nearest(playerid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of any weapon rack.");

	Rack_ShowGuns(playerid, id);
	return 1;
}

CMD:deleterack(playerid, params[])
{
	new
		id = -1,
		houseid = GetInsideHouse(playerid);

	if (houseid == -1 || !HasFurniturePerms(playerid, houseid))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of your house interior.");

	if ((id = Rack_Nearest(playerid)) == -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of any weapon rack.");

	Rack_Delete(id);
	SendClientMessage(playerid, COLOR_LIGHTRED, "You have deleted the weapon rack from your house.");
	return 1;
}

CMD:createrack(playerid, params[])
{
	static
	    id = -1;

    if (!PlayerInfo[playerid][pDynamicAdmin])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have permission to use this command.");

	id = Rack_Create(playerid, -1);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The server has reached the limit for weapon racks.");

    ResetEditing(playerid);
    PlayerInfo[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have successfully created rack ID: %d.", id);
	return 1;
}

CMD:editrack(playerid, params[])
{
	static
	    id = 0;

    if (!PlayerInfo[playerid][pDynamicAdmin])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "/editrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have specified an invalid rack ID.");

	ResetEditing(playerid);
	PlayerInfo[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You are now editing weapon rack ID: %d.", id);
	return 1;
}

CMD:destroyrack(playerid, params[])
{
	static
	    id = 0;

    if (!PlayerInfo[playerid][pDynamicAdmin])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "/destroyrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have specified an invalid rack ID.");

	Rack_Delete(id);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have successfully destroyed weapon rack ID: %d.", id);
	return 1;
}
CMD:trogiup(playerid, params[])
{
	return callcmd::help(playerid, params);
}
CMD:help(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/thongtin, /b, /g, /me, /do, /(o)oc, /(s)hout, /(l)ow, /(w)hisper, /(n)ewbie.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/duatien, /id, /thoigian, /baocao, /nangcap, /quyengop, /stopmusic, /thamgiasukien, /thoatsukien.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/dice, /flipcoin, /accent, /helpers, /giuptoi, /chapnhan, /activity, /skill, /quitjob.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/give, /sell, /toggle, /cancelcp, /afk, /(ad)vertise, /buy, /refuel, /call, /sms.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/clothing, /locate, /frisk, /contract, /number, /boombox, /switchspeedo, /stuck.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/shakehand, /dropgun, /grabgun, /usecookies, /usecigar, /usedrug, /showid.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/(inv)entory, /guninv, /changename, /drop, /eject, /dicebet, /gangs, /factions.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/calculate, /serverstats, /resetupgrades, /turfs, /lands, /watch, /gps, /fixvw.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/myupgrades, /unmute, /breakin, /achievements, /buyinsurance, /tie, /untie.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/househelp, /garagehelp, /bizhelp, /jobhelp, /animhelp, /vehiclehelp, /viphelp.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[New City] {C8C8C8}/bankhelp, /factionhelp, /ganghelp, /landhelp, /helperhelp.");

	if(PlayerInfo[playerid][pFactionMod])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[FACTION MOD]{C8C8C8} /createfaction, /editfaction, /setfaction, /purgefaction, /createlocker, /movelocker, /removelocker.");
	}
	if(PlayerInfo[playerid][pGangMod])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[GANG MOD]{C8C8C8} /creategang, /editgang, /removegang, /gangstrike, /switchgang, /nearest.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[GANG MOD]{C8C8C8} /createpoint, /editpoint, /removepoint, /createturf, /editturf, /removeturf.");
	}
	if(PlayerInfo[playerid][pBanAppealer])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[BAN APPEALER]{C8C8C8} /banip, /baninfo, /banhistory, /unbanip, /unban.");
	}
	if(PlayerInfo[playerid][pDeveloper])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[DEVELOPER]{C8C8C8} /a, /e, /ha, /ooc, /admins, /gmx, /changelist, /setmotd, /fixplayerid, /showrcon.");
	}
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Admin Commands]{C8C8C8} /a, /adminhelp.");
	}

	return 1;
}
/*
CMD:jobhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == JOB_NONE && PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You have no job and therefore no job commands to view.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "__________________ Tro giup Cong viec __________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** Cong viec *** su dung lenh de biet them thong tin.");

	switch(PlayerInfo[playerid][pJob])
	{
		//case JOB_NONE: SendClientMessage(playerid, COLOR_LIGHTRED, "You have no job and therefore no job commands to view.");
		case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /getpizza, /cancelcp.");
		case JOB_COURIER: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /load, /deliver, /cancelcp.");
		case JOB_MINER: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /mine, /cancelcp.");
		case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /setfare, /takecall.");
        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /garbage");
        case JOB_FARMER: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /harvest");
 	}

 	if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(PlayerInfo[playerid][pSecondJob])
		{
			//case JOB_NONE: SendClientMessage(playerid, COLOR_LIGHTRED, "You have no job and therefore no job commands to view.");
			case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /getpizza.");
			case JOB_COURIER: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /load, /deliver.");
			case JOB_MINER: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /mine.");
			case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /setfare.");
	        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_LIGHTRED, "*** JOB *** /garbage");
	 	}
	}

	return 1;
}*/

CMD:vehiclehelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_NAVYBLUE, "________________ Vehicle Help ________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** VEHICLE HELP *** type a command for more information.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** VEHICLE *** /lights /hood /boot /buyvehicle /carstorage /park /lock /findcar");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** VEHICLE *** /vsafe /neon /unmod /colorcar /paintcar /upgradevehicle /sellcar /sellmycar");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** VEHICLE *** /givekeys /takekeys /setradio /paytickets /carinfo /gascan /breakin");
	SendClientMessageEx(playerid, COLOR_WHITE, "*** VEHICLE *** /seatbelt, /checkmybelt, /checkbelt.");
    return 1;
}

CMD:bankhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "__________________ Banking Help __________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** BANKING HELP *** type a command for more information.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** BANKING *** /withdraw /deposit /wiretransfer /balance /robbank /robinvite /bombvault /robbers");
	return 1;
}

CMD:viphelp(playerid, params[])
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command as you don't have a VIP subscription.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "__________________ VIP Help __________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** VIP HELP *** type a command for more information.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** VIP *** /(v)ip, /vipinfo, /viptag, /vipcolor, /vipinvite, /vipnumber, /vipmusic.");

	if(PlayerInfo[playerid][pVIPPackage] == 3)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "*** VIP *** /repair, /nos, /hyd.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "*** VIP *** /getboombox, /vweapons, /healup at VIP Lounge.");
	}

	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command as you're not apart of any faction.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____________ Nhan vien truc tuyen _____________");
    new string[128], color = FactionInfo[PlayerInfo[playerid][pFaction]][fColor];

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pAdminHide])
        {
            format(string, sizeof(string), "(ID: %i) %s {%06x}%s{FFFFFF}", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], color >>> 8, GetPlayerRPName(i));
			if(PlayerInfo[i][pDivision] >= 0)
			{
			    format(string, sizeof(string), "%s | Don vi: %s", string, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]]);
			}
			if(PlayerInfo[i][pFactionLeader])
			{
			    format(string, sizeof(string), "%s | {06FF00}Lanh dao{FFFFFF}", string);
			}
			if(FactionInfo[PlayerInfo[i][pFaction]][fType] == FACTION_MEDIC)
			{
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "| Tong so benh nhan: %i | Tong so vu chay %i", string, PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
			}
			format(string, sizeof(string), "%s | Vi tri: %s", string, GetPlayerZoneName(i));
			if(PlayerInfo[i][pAFK])
            {
				format(string, sizeof(string), "%s | {FFA500}AFK{FFFFFF} (%d giay)", string, PlayerInfo[i][pAFKTime]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}
CMD:gmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not apart of a gang at the moment.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____________ Members Online _____________");
	new string[128], color = GangInfo[PlayerInfo[playerid][pGang]][gColor];
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && !PlayerInfo[i][pAdminHide])
        {
            format(string, sizeof(string), "(%i) %s {%06x}%s{FFFFFF}", PlayerInfo[i][pGangRank], GangRanks[PlayerInfo[i][pGang]][PlayerInfo[i][pGangRank]], color >>> 8, GetPlayerRPName(i));
            if(PlayerInfo[i][pCrew] >= 0)
			{
			    format(string, sizeof(string), "%s | Crew: %s", string, GangCrews[PlayerInfo[i][pGang]][PlayerInfo[i][pCrew]]);
			}
   			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(PlayerInfo[i][pAFK])
            {
				format(string, sizeof(string), "%s | {FFA500}AFK{FFFFFF} (%d giay)", string, PlayerInfo[i][pAFKTime]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }

    return 1;
}
CMD:members(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] != -1)
	{
		callcmd::gmembers(playerid, params);
	}
	if(PlayerInfo[playerid][pFaction] != -1)
	{
 		callcmd::fmembers(playerid, params);
	}
	return 1;
}


CMD:factionhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command as you're not apart of any faction.");
	}

    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE, "*** FACTION HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /fc /d /(r)adio /div /faction /division /locker /showbadge /(m)egaphone");

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /gate /door /cell /tazer /cuff /uncuff /drag /detain /charge /arrest");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /wanted /frisk /take /ticket /gov /ram /deploy /undeploy /undeployall /backup");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /mdc /clearwanted /siren /badge /vticket /vfrisk /vtake /seizeplant /mir");

			if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /listcallers /trackcall /cells /passport /callsign /bug /listbugs /tog bugged");
			else
			    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /listcallers /trackcall /cells /claim /callsign");
		}
		case FACTION_MEDIC:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /heal /drag /stretcher /deliverpt /getpt /listpt /injuries /deploy /undeploy /undeployall");
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /badge /gov /backup /listcallers /trackcall /callsign");
		}
		case FACTION_NEWS:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /news /live /endlive /liveban /badge /addeposit /adwithdraw");
		}
		case FACTION_GOVERNMENT:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /gov /settax /factionpay /tazer /cuff /uncuff /detain /taxdeposit /taxwithdraw");
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /backup /badge");
		}
		case FACTION_HITMAN:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /contracts /takehit /profile /passport /plantbomb /pickupbomb /detonate");
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*** FACTION *** /hfind /noknife");
		}
	}

	return 1;
}

CMD:ganghelp(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command as you're not a gang member.");
	}

    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** GANG HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** GANG *** /f /gang /(f)amily(safe) /gHuyup /bandana /capture /claim /reclaim /turfinfo /points");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** GANG *** /gbuyvehicle /gpark /gfindcar /grespawncars /gsellcar /gunmod /lock, /endalliance, /gspray");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** CREW *** /managecrew /crew");
	return 1;
}

CMD:landhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** LAND HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** LAND *** /buyland /lock /door /landinfo /land /sellmyland /sellland /droplandkeys");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** LAND *** '/toggle lands' to show or hide lands on your mini-map.");
    return 1;
}

CMD:planthelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** PLANT HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** PLANT *** /plantweed /plantinfo /pickplant /seizeplant");
    return 1;
}

CMD:o(playerid, params[])
{
	return callcmd::ooc(playerid, params);
}

CMD:ooc(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(o)oc [global OOC]");
	}
	if(!enabledOOC && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The global OOC channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pToggleOOC])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't speak in the OOC chat as you have it toggled.");
	}
	if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0) && PlayerInfo[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{FFFFFF} %s", color >>> 8, PlayerInfo[playerid][pCustomTitle], GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0) {
		format(string, sizeof(string), "%s %s", GetAdminRank(playerid), GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetPlayerRPName(playerid));
    } else if(PlayerInfo[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "{FF69B5}Former Admin{FFFFFF} %s", GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pVIPPackage] > 0) {
	    format(string, sizeof(string), "{D909D9}%s VIP{FFFFFF} %s", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerRPName(playerid));
	} else {
	    format(string, sizeof(string), "%s", GetPlayerRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SendClientMessageEx(i, COLOR_WHITE, "(( %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SendClientMessageEx(i, COLOR_WHITE, "(( %s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_WHITE, "(( %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

CMD:newb(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:n(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:ask(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:newbie(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(n)ewbie [newbie chat]");
	}
	if(!enabledNewbie && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The newbie channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pNewbieMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are muted from speaking in this channel. /unmute to unmute yourself.");
	}
	if(gettime() - PlayerInfo[playerid][pLastNewbie] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You can only speak in this channel every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastNewbie]));
	}
	if(PlayerInfo[playerid][pToggleNewbie])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't speak in the newbie chat as you have it toggled.");
	}

	SendNewbieChatMessage(playerid, params);
	PlayerInfo[playerid][pNewbies] ++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", PlayerInfo[playerid][pNewbies], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:level(playerid, params[])
{
	new count, color;

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /level [level]");
	}

	if(IsNumeric(params))
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLevel] == strval(params))
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00)
		        	color = 0xAAAAAAFF;

				SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, GetPlayerNameEx(i), PlayerInfo[i][pLevel], GetPlayerPing(i));
				count++;
			}
		}
		if(!count)
		{
  			SendClientMessageEx(playerid, COLOR_LIGHTRED, "There are no level %s players online.", params);
		}
   	}
   	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Please use a numerical value!");
	}

	return 1;
}

CMD:id(playerid, params[])
{
	new count, color, name[MAX_PLAYER_NAME], targetid = strval(params);

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /id [playerid/partial name]");
	}

	if(IsNumeric(params))
	{
		if(IsPlayerConnected(targetid))
		{
		    if((color = GetPlayerColor(targetid)) == 0xFFFFFF00) {
		        color = 0xAAAAAAFF;
			}

		    GetPlayerName(targetid, name, sizeof(name));
		    SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", targetid, color >>> 8, name, PlayerInfo[targetid][pLevel], GetPlayerPing(targetid));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
	}
	else if(strlen(params) < 2)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Please input at least two characters to search.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        GetPlayerName(i, name, sizeof(name));

	        if(strfind(name, params, true) != -1)
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00) {
		        	color = 0xAAAAAAFF;
				}

	            SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, name, PlayerInfo[i][pLevel], GetPlayerPing(i));
	            count++;
			}
		}

		if(!count)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "No results found for \"%s\". Please narrow your search.", params);
		}
	}

	return 1;
}
CMD:duatien(playerid, params[])
{
	return callcmd::pay(playerid, params);
}
CMD:pay(playerid, params[])
{
	new targetid, amount;

	if(sscanf(params, "ui", targetid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Su dung: /duatien [playerid] [so luong]");
	    return SendClientMessage(playerid, COLOR_WHITE, "hoac su dung: /pay [playerid] [so luong]");
	}
	if(gettime() - PlayerInfo[playerid][pLastPay] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Vui long doi 3 giay cho moi giao dich.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dua tien cho chinh minh.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai chi dinh so luong tren 0.");
	}
	if(amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co nhieu nhu vay.");
	}
	if(amount > 10000)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chi duoc phep dua $10000 trong 1 lan.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang Aduty");
	}

	PlayerInfo[playerid][pLastPay] = gettime();

	GivePlayerCash(playerid, -amount);
	GivePlayerCash(targetid, amount);

	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay ra %s va dua no cho %s.", GetPlayerRPName(playerid), FormatNumber(amount), GetPlayerRPName(targetid));
	Log_Write("log_give", "%s (uid: %i) (IP: %s) gives $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

    SendClientMessageEx(targetid, COLOR_AQUA, "Ban da nhan duoc {00AA00}%s{33CCFF} boi %s.", FormatNumber(amount), GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua {FF6347}%s{33CCFF} cho %s.", FormatNumber(amount), GetPlayerRPName(targetid));

	if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) da dua %s cho %s (IP: %s).", GetPlayerRPName(playerid), GetPlayerIP(playerid), FormatNumber(amount), GetPlayerRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:givelicense(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la SASD de su dung lenh nay.");
	if(PlayerInfo[playerid][pFactionLeader])
	{
		new targetid, option[2], price, param[32];
		if(sscanf(params, "us[2]", targetid, option))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Su dung: /givelicense [playerid] [tuy chon]");
			SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Car, Gun");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
		}
		if(!strcmp(option, "car", true))
		{

			if(sscanf(param, "i", price))
			{
			    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [car] [gia tien]");
			}
			if(price < 1)
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
			}
			if(IsPlayerInAnyVehicle(playerid))
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban giay phep khi dang tren xe.");
			}
			if(IsPlayerInAnyVehicle(targetid))
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban giay phep cho nguoi choi dang tren xe.");
			}

			PlayerInfo[targetid][pSellOffer] = playerid;
			PlayerInfo[targetid][pSellType] = ITEM_CARLIC;
			PlayerInfo[targetid][pSellPrice] = price;

			SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban mot giay phep lai xe voi gia $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), price);
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s mua giay phep lai xe voi gia $%i.", GetPlayerRPName(targetid), price);
		}
		if(!strcmp(option, "gun", true))
		{

			if(sscanf(param, "i", price))
			{
			    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [gun] [gia tien]");
			}
			if(price < 1)
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
			}
			if(IsPlayerInAnyVehicle(playerid))
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban giay phep khi dang tren xe.");
			}
			if(IsPlayerInAnyVehicle(targetid))
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban giay phep cho nguoi choi dang tren xe.");
			}

			PlayerInfo[targetid][pSellOffer] = playerid;
			PlayerInfo[targetid][pSellType] = ITEM_GUNLIC;
			PlayerInfo[targetid][pSellPrice] = price;

			SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban mot giay phep vu khi voi gia $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), price);
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s mua giay phep vu khi voi gia $%i.", GetPlayerRPName(targetid), price);
		}
	}

	return 1;
}


// Khong du so luong - viet hoa lai thanh "Khong du so luong" (neu du lieu cua no khong phai la money)

CMD:give(playerid, params[])
{
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Weapon, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, Spraycans");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: GasCan, Seeds, Ephedrine, FirstAid, Bodykits, Rimkits, Diamonds");
	    return 1;
	}

	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't use this command on yourself.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid);

	    if(!weaponid)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai cam vu khi ma ban muon cho.");
	    }
	    if(PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cho vu khi nay vi ban khong co no.");
		}
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da co vu khi o slot nay.");
	    }
	    if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay dang bi han che vu khi trong 2 gio.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0 && PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chi co the cho vu khi cho cac thanh vien cua faction cua minh.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi trong 1 phuong tien.");
		}
		if(IsPlayerInAnyVehicle(targetid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cho vu khi cho nguoi ben trong 1 phuong tien");
		}
		if(GetPlayerHealthEx(playerid) < 60)
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cho vu khi nay khi mau o duoi 60.");
		}

	    GivePlayerWeaponEx(targetid, weaponid);
	    RemovePlayerWeapon(playerid, weaponid);

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua cho %s 1 khau %s.", GetPlayerRPName(targetid), GetWeaponNameEx(weaponid));

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua %s cho %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives their %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [materials] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pMaterials] + amount > GetPlayerCapacity(targetid, CAPACITY_MATERIALS))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu vat lieu nhu the.");
		}

		PlayerInfo[playerid][pMaterials] -= amount;
		PlayerInfo[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[targetid][pMaterials], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i materials.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i materials to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua vat lieu cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [weed] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pWeed])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pWeed] + amount > GetPlayerCapacity(targetid, CAPACITY_WEED))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu weed nhu the.");
		}

		PlayerInfo[playerid][pWeed] -= amount;
		PlayerInfo[targetid][pWeed] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[targetid][pWeed], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i grams of weed.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i grams of weed to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua weed cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of weed to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [cocaine] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCocaine])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pCocaine] + amount > GetPlayerCapacity(targetid, CAPACITY_COCAINE))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu cocaine nhu the.");
		}

		PlayerInfo[playerid][pCocaine] -= amount;
		PlayerInfo[targetid][pCocaine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[targetid][pCocaine], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i gram cocaine.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i gram cocaine cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua cocaine cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of cocaine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [meth] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pMeth] + amount > GetPlayerCapacity(targetid, CAPACITY_METH))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu meth nhu the.");
		}

		PlayerInfo[playerid][pMeth] -= amount;
		PlayerInfo[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[targetid][pMeth], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i gram meth.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i gram meth cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua meth cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [painkillers] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pPainkillers] + amount > GetPlayerCapacity(targetid, CAPACITY_PAINKILLERS))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu painkillers nhu the.");
		}

		PlayerInfo[playerid][pPainkillers] -= amount;
		PlayerInfo[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[targetid][pPainkillers], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i painkillers.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i painkillers cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua painkillers cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [cigars] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCigars])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}

		PlayerInfo[playerid][pCigars] -= amount;
		PlayerInfo[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[targetid][pCigars], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i cigars.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i cigars cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua cigars cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i cigars to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [spraycans] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSpraycans])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}

		PlayerInfo[playerid][pSpraycans] -= amount;
		PlayerInfo[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[targetid][pSpraycans], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i spraycans.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i spraycans cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua spraycans cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i spraycans to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [gascan] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}

		PlayerInfo[playerid][pGasCan] -= amount;
		PlayerInfo[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[targetid][pGasCan], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i lit xang.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i lit xang cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua xang cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pSeeds] + amount > GetPlayerCapacity(targetid, CAPACITY_SEEDS))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu seeds nhu the.");
		}

		PlayerInfo[playerid][pSeeds] -= amount;
		PlayerInfo[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[targetid][pSeeds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i seeds.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i seeds cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua seeds cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [ephedrine] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pEphedrine] + amount > GetPlayerCapacity(targetid, CAPACITY_EPHEDRINE))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu ephedrine nhu the.");
		}

		PlayerInfo[playerid][pEphedrine] -= amount;
		PlayerInfo[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[targetid][pEphedrine], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i gram ephedrines.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i gram of ephedrine cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua ephedrine cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "firstaid", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [firstaid] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pFirstAid])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pFirstAid] + amount > 20)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu First Aid Kit nhu the.");
		}

		PlayerInfo[playerid][pFirstAid] -= amount;
		PlayerInfo[targetid][pFirstAid] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", PlayerInfo[playerid][pFirstAid], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", PlayerInfo[targetid][pFirstAid], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i first aid kits.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i first aid kits cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua first aid kit cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i first aid kits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "bodykits", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [bodykits] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pBodykits])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pBodykits] + amount > 10)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu bodykits nhu the.");
		}

		PlayerInfo[playerid][pBodykits] -= amount;
		PlayerInfo[targetid][pBodykits] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", PlayerInfo[playerid][pBodykits], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", PlayerInfo[targetid][pBodykits], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i bodywork kits.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i bodywork kits cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua bodykits cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i bodywork kits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "rimkits", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [rimkits] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pRimkits])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pRimkits] + amount > 5)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong the mang nhieu rimkits nhu the.");
		}

		PlayerInfo[playerid][pRimkits] -= amount;
		PlayerInfo[targetid][pRimkits] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rimkits = %i WHERE uid = %i", PlayerInfo[playerid][pRimkits], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rimkits = %i WHERE uid = %i", PlayerInfo[targetid][pRimkits], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua ban %i rimkits.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua %i rimkits cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua rimkits cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i rimkits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /give [playerid] [diamonds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
		}
		if(PlayerInfo[targetid][pDiamonds] + amount > 5)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi do khong the mang nhieu kim cuong hon the.");
		}

		PlayerInfo[playerid][pDiamonds] -= amount;
		PlayerInfo[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[targetid][pDiamonds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da cho ban %i kim cuong.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da tang %i kim cuong cho %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua kim cuong cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i diamonds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}

	return 1;
}
/*
CMD:sell(playerid, params[])
{
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Weapon, Materials, Weed, Cocaine, Meth, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay len ban than.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
    if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the su dung lenh nay trong vong 10 giay. Hay doi them %i giay.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [weapon] [weaponid] [price] (/guninv for weapon IDs)");
		}
	    if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have that weapon. /guninv for a list of your weapons.");
		}
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "That player already has a weapon in that slot.");
	    }
	    if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't sell weapons as a faction member.");
	    }
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}
		if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't sell weapons from inside a vehicle.");
		}
		if(IsPlayerInAnyVehicle(targetid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't sell weapons to players inside a vehicle.");
		}
		if(GetPlayerHealthEx(playerid) < 60)
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't sell weapons as your health is below 60.");
		}

        PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEAPON;
		PlayerInfo[targetid][pSellExtra] = weaponid;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %s cua ho voi gia $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s %s cua ban voi gia $%i.", GetPlayerRPName(targetid), GetWeaponNameEx(weaponid), price);
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [materials] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_MATERIALS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %i vat lieu voi gia $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s %i vat lieu voi gia $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "weed", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [weed] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pWeed])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEED;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %i grams of weed for $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s your %i grams of weed for $%i.", GetPlayerRPName(targetid), amount, price);
	}
    else if(!strcmp(option, "cocaine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [cocaine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCocaine])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_COCAINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %i grams of cocaine for $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s your %i grams of cocaine for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "meth", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [meth] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_METH;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %i grams of meth for $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s your %i grams of meth for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [painkillers] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_PAINKILLERS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %i painkillers for $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s your %i painkillers for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [seeds] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_SEEDS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %i seeds voi gia $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s seeds %i voi gia $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sell [playerid] [ephedrine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi muc $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_EPHEDRINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s muon ban cho ban %i gram ephedrine voi gia $%i. (/chapnhan vatpham)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi ban %s %i grams ephedrine voi gia $%i.", GetPlayerRPName(targetid), amount, price);
	}

	return 1;
}*/

CMD:accent(playerid, params[])
{
	new type;

	if(sscanf(params, "i", type))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /accent [type]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (0) None - (1) English - (2) American - (3) British - (4) Chinese - (5) Korean - (6) Japanese - (7) Asian");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (8) Canadian - (9) Australian - (10) Southern - (11) Russian - (12) Ukrainian - (13) German - (14) French");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (15) Portguese - (16) Polish - (17) Estonian - (18) Latvian - (19) Dutch - (20) Jamaican - (21) Turkish");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (22) Mexican - (23) Spanish - (24) Arabic - (25) Israeli - (26) Romanian - (27) Italian - (28) Gangsta");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (29) Greek - (30) Serbian - (31) Balkin - (32) Danish - (33) Scottish - (34) Irish - (35) Indian");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (36) Ilyrian - (37) Swedish - (38) Finnish - (39) Hungarian - (40) Bulgarian - (41) Pakistani");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (42) Cuban - (43) Slavic - (44) Indonesian - (45) Filipino - (46) Hawaiian - (47) Somalian");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach: (48) Armenian - (49) Persian - (50) Vietnamese - (51) Slovenian - (52) Kiwi - (53) Brazilian - (54) Georgian");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(PlayerInfo[playerid][pAccent], "None", 16);
		case 1: strcpy(PlayerInfo[playerid][pAccent], "English", 16);
		case 2: strcpy(PlayerInfo[playerid][pAccent], "American", 16);
		case 3: strcpy(PlayerInfo[playerid][pAccent], "British", 16);
		case 4: strcpy(PlayerInfo[playerid][pAccent], "Chinese", 16);
		case 5: strcpy(PlayerInfo[playerid][pAccent], "Korean", 16);
		case 6: strcpy(PlayerInfo[playerid][pAccent], "Japanese", 16);
		case 7: strcpy(PlayerInfo[playerid][pAccent], "Asian", 16);
		case 8: strcpy(PlayerInfo[playerid][pAccent], "Canadian", 16);
		case 9: strcpy(PlayerInfo[playerid][pAccent], "Australian", 16);
		case 10: strcpy(PlayerInfo[playerid][pAccent], "Southern", 16);
		case 11: strcpy(PlayerInfo[playerid][pAccent], "Russian", 16);
		case 12: strcpy(PlayerInfo[playerid][pAccent], "Ukrainian", 16);
		case 13: strcpy(PlayerInfo[playerid][pAccent], "German", 16);
		case 14: strcpy(PlayerInfo[playerid][pAccent], "French", 16);
		case 15: strcpy(PlayerInfo[playerid][pAccent], "Portuguese", 16);
		case 16: strcpy(PlayerInfo[playerid][pAccent], "Polish", 16);
		case 17: strcpy(PlayerInfo[playerid][pAccent], "Estonian", 16);
		case 18: strcpy(PlayerInfo[playerid][pAccent], "Latvian", 16);
		case 19: strcpy(PlayerInfo[playerid][pAccent], "Dutch", 16);
		case 20: strcpy(PlayerInfo[playerid][pAccent], "Jamaican", 16);
		case 21: strcpy(PlayerInfo[playerid][pAccent], "Turkish", 16);
		case 22: strcpy(PlayerInfo[playerid][pAccent], "Mexican", 16);
		case 23: strcpy(PlayerInfo[playerid][pAccent], "Spanish", 16);
		case 24: strcpy(PlayerInfo[playerid][pAccent], "Arabic", 16);
		case 25: strcpy(PlayerInfo[playerid][pAccent], "Israeli", 16);
		case 26: strcpy(PlayerInfo[playerid][pAccent], "Romanian", 16);
		case 27: strcpy(PlayerInfo[playerid][pAccent], "Italian", 16);
		case 28: strcpy(PlayerInfo[playerid][pAccent], "Gangsta", 16);
		case 29: strcpy(PlayerInfo[playerid][pAccent], "Greek", 16);
		case 30: strcpy(PlayerInfo[playerid][pAccent], "Serbian", 16);
		case 31: strcpy(PlayerInfo[playerid][pAccent], "Balkin", 16);
		case 32: strcpy(PlayerInfo[playerid][pAccent], "Danish", 16);
		case 33: strcpy(PlayerInfo[playerid][pAccent], "Scottish", 16);
		case 34: strcpy(PlayerInfo[playerid][pAccent], "Irish", 16);
		case 35: strcpy(PlayerInfo[playerid][pAccent], "Indian", 16);
		case 36: strcpy(PlayerInfo[playerid][pAccent], "Ilyrian", 16);
		case 37: strcpy(PlayerInfo[playerid][pAccent], "Swedish", 16);
		case 38: strcpy(PlayerInfo[playerid][pAccent], "Finnish", 16);
		case 39: strcpy(PlayerInfo[playerid][pAccent], "Hungarian", 16);
		case 40: strcpy(PlayerInfo[playerid][pAccent], "Bulgarian", 16);
		case 41: strcpy(PlayerInfo[playerid][pAccent], "Pakistani", 16);
		case 42: strcpy(PlayerInfo[playerid][pAccent], "Cuban", 16);
		case 43: strcpy(PlayerInfo[playerid][pAccent], "Slavic", 16);
		case 44: strcpy(PlayerInfo[playerid][pAccent], "Indonesian", 16);
		case 45: strcpy(PlayerInfo[playerid][pAccent], "Filipino", 16);
		case 46: strcpy(PlayerInfo[playerid][pAccent], "Hawaiian", 16);
		case 47: strcpy(PlayerInfo[playerid][pAccent], "Somalian", 16);
		case 48: strcpy(PlayerInfo[playerid][pAccent], "Armenian", 16);
		case 49: strcpy(PlayerInfo[playerid][pAccent], "Persian", 16);
		case 50: strcpy(PlayerInfo[playerid][pAccent], "Vietnamese", 16);
		case 51: strcpy(PlayerInfo[playerid][pAccent], "Slovenian", 16);
		case 52: strcpy(PlayerInfo[playerid][pAccent], "Kiwi", 16);
		case 53: strcpy(PlayerInfo[playerid][pAccent], "Brazilian", 16);
		case 54: strcpy(PlayerInfo[playerid][pAccent], "Georgian", 16);
		default: SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid accent. Valid types range from 0 to 53.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "You set your accent to '%s'.", PlayerInfo[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", PlayerInfo[playerid][pAccent], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:dice(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetPlayerRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s flips a coin which lands on %s.", GetPlayerRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}
CMD:thoigian(playerid, params[])
{
	callcmd::time(playerid, params);
}
CMD:time(playerid, params[])
{
	new
	    string[128],
		date[6];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);

	switch(date[1])
	{
	    case 1: string = "January";
	    case 2: string = "February";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "August";
	    case 9: string = "September";
	    case 10: string = "October";
	    case 11: string = "November";
	    case 12: string = "December";
	}

	format(string, sizeof(string), "~y~%s %02d, %i~n~~g~|~w~%02d:%02d:%02d~g~|", string, date[2], date[0], date[3], date[4], date[5]);

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s~n~~w~Jail Time: ~y~%i seconds", string, PlayerInfo[playerid][pJailTime]);
	}

	GameTextForPlayer(playerid, string, 5000, 1);
	SendClientMessageEx(playerid, COLOR_WHITE, "** Paychecks occur at every 60 min. The Tiep paycheck is at %02d:00 which is in %i minutes.", date[3]+1, (60 - date[4]));
	return 1;
}

CMD:baocao(playerid, params[])
{
	callcmd::report(playerid, params);
}

CMD:report(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /baocao [playerid (optional)] [text]");
	}
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You cannot report as you are an administrator, use /a moron.");
	}
	if(!enabledReports)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The report channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pReportMuted])
	{
	    if(PlayerInfo[playerid][pReportMuted] > 1000) {
     		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You are indefinitely muted from Chap nhanting reports. /unmute to unmute yourself.");
		} else {
			return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You are muted from Chap nhanting reports. Your mute is lifted in %i hours.", PlayerInfo[playerid][pReportMuted]);
		}
	}
	if(gettime() - PlayerInfo[playerid][pLastReport] < 50)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You can only Chap nhan one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerInfo[playerid][pLastReport]));
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddReportToQueue(playerid, params))
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "The report queue is currently full. Please try again later.");
	}

	SendClientMessage(playerid, COLOR_GREEN, "Your report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:giuptoi(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /giuptoi [tro giup]");
	}
	if(PlayerInfo[playerid][pHelper] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban la nguoi tro giup va do do khong the su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pHelpMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da bi tat tieng yeu cau tro giup.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRequest] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the yeu cau tro giup moi lan 30 giay. Vui long doi %i giay nua.", 30 - (gettime() - PlayerInfo[playerid][pLastRequest]));
	}

	strcpy(PlayerInfo[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "** Yeu cau tro giup tu %s[%i]: %s **", GetPlayerRPName(playerid), playerid, params);

	PlayerInfo[playerid][pLastRequest] = gettime();
	SendClientMessage(playerid, COLOR_GREEN, "Yeu cau tro giup cua ban da duoc goi den tat ca nguoi tro giup. Vui long doi phan hoi.");
	return 1;
}
CMD:chapnhan(playerid, params[]) {
	return callcmd::accept(playerid, params);
}
CMD:accept(playerid, params[])
{
	if(!strcmp(params, "nha", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pHouseOffer],
		    houseid = PlayerInfo[playerid][pHouseOffered],
		    price = PlayerInfo[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc bat ky de nghi mua nha nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong con la chu so huu ngoi nha nay nua.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mua ngoi nha cua nguoi choi nay.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da so huu %i/%i ngoi nha. Ban khong the so huu nua tru khi ban nang cap dac quyen tai san.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi mua ngoi nha cua %s's voi gia %s.", GetPlayerRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi mua nha cua ban voi gia %s.", GetPlayerRPName(playerid), FormatNumber(price));
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGarageOffer],
		    garageid = PlayerInfo[playerid][pGarageOffered],
		    price = PlayerInfo[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan bat ky loi de nghi nao cho mot Garage");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong con la chu so huu Garage nay nua.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mua Garage cua nguoi choi nay.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da so huu %i/%i garages. Ban khong the so huu nua tru khi ban nang cap dac quyen tai san.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi mua garage cua %s's voi gia %s.", GetPlayerRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi mua garage cua ban voi gia %s.", GetPlayerRPName(playerid), FormatNumber(price));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "doanhnghiep", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pBizOffer],
		    businessid = PlayerInfo[playerid][pBizOffered],
		    price = PlayerInfo[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc bat ky loi de nghi mua doanh nghiep nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong con so huu doanh nghiep nay nua.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua doanh nghiep cua nguoi choi nay.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da so huu %i/%i doanh nghiep. Ban khong the so huu nua tru khi ban nang cap dac quyen tai san.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi mua nha cua %s's voi gia %s cho loai doanh nghiep %s.", GetPlayerRPName(offeredby), FormatNumber(price), bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi mua doanh nghiep %s cua ban voi gia %s.", GetPlayerRPName(playerid), bizInteriors[BusinessInfo[businessid][bType]][intType], FormatNumber(price));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "khudat", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pLandOffer],
		    landid = PlayerInfo[playerid][pLandOffered],
		    price = PlayerInfo[playerid][pLandPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc bat ky loi de nghi mua khu dat nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(!IsLandOwner(offeredby, landid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong con la chu so huu cua khu dat nay.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua khu dat nay.");
	    }

	    SetLandOwner(landid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi mua khu dat cua %s's voi gia %s.", GetPlayerRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi mua khu dat cua ban voi gia %s.", GetPlayerRPName(playerid), FormatNumber(price));
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their land (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), LandInfo[landid][lID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pLandOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "chet", true))
	{
	    if(IsPlayerConnected(PlayerInfo[playerid][pAcceptedEMS]) && !PlayerInfo[PlayerInfo[playerid][pAcceptedEMS]][pAFK])
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Co mot nhan vien y te truc tuyen va dang tren duong den giai cuu ban.");
		}
	    if(!PlayerInfo[playerid][pInjured])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung chuc nang nay khi khong bi thuong.");
	    }

	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da tu bo va chap nhan tu vong.");
	    SetPlayerHealth(playerid, 0.0);
	}
	else if(!strcmp(params, "phuongtien", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pCarOffer],
		    vehicleid = PlayerInfo[playerid][pCarOffered],
		    price = PlayerInfo[playerid][pCarPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan bat ky loi de nghi mua xe nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong con la chu so huu cua chiec xe nay nua.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong du kha nang mua phuong tien cua nguoi choi nay.");
	    }
	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    	{
   			return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the co nhieu hon %i duoc tao ra cung luc.", MAX_SPAWNED_VEHICLES);
    	}

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
     	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicleEx", "iiii", playerid, offeredby, vehicleid, price);

	    PlayerInfo[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "tochuc", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pFactionOffer],
		    factionid = PlayerInfo[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co loi de nghi tham gia to chuc nao.");
	    }
	    if(PlayerInfo[offeredby][pFaction] != factionid || !PlayerInfo[offeredby][pFactionLeader])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong duoc phep moi ban nua.");
	    }

	    SetPlayerFaction(playerid, factionid, 0);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi cua %s's de tham gia tro chuc {00AA00}%s{33CCFF}.", GetPlayerRPName(offeredby), FactionInfo[factionid][fName]);
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi tham gia to chuc cua ban.", GetPlayerRPName(playerid));

		Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);
	    PlayerInfo[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGangOffer],
		    gangid = PlayerInfo[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co loi de nghi tam gia bang dang nao.");
	    }
	    if(PlayerInfo[offeredby][pGang] != gangid || PlayerInfo[offeredby][pGangRank] < 5)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong con duoc phep moi ban nua.");
	    }

	    PlayerInfo[playerid][pGang] = gangid;
	    PlayerInfo[playerid][pGangRank] = 0;
	    PlayerInfo[playerid][pCrew] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = 0, crew = -1 WHERE uid = %i", gangid, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi cua %s's de tham gia bang dang {00AA00}%s{33CCFF}.", GetPlayerRPName(offeredby), GangInfo[gangid][gName]);
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi cua ban tham gia vao bang dang.", GetPlayerRPName(playerid));
	    if(gacooldown)
	    {
	        GangInfo[gangid][gInvCooldown] = gacooldown;
	    	SendClientMessageEx(offeredby, COLOR_GREEN, "Thoi gian su dung chuc nang nay da duoc dat tren bang dang nay. Hay doi %i phut truoc khi su dung tiep!", GangInfo[gangid][gInvCooldown]);
        }
		Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	    PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lucsoat", true))
	{
	    new offeredby = PlayerInfo[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan bat ky loi de nghi luc soat nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }

	    FriskPlayer(offeredby, playerid);
	    PlayerInfo[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vephat", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pTicketOffer],
		    price = PlayerInfo[playerid][pTicketPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan bat ky ve phat nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang de thanh toan ve phat nay.");
	    }

	    //GivePlayerCash(offeredby, price);

	    AddToTaxVault(price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thanh toan ve phat voi %s cua %s.", FormatNumber(price), GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da thanh toan ve phat voi %s duoc viet tu ban.", GetPlayerRPName(playerid), FormatNumber(price));
        Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

	    PlayerInfo[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = PlayerInfo[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan bat ky loi de nghi phong van nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerInfo[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban va nguoi dua ra loi de nghi khong the goi dien thoai trong cuoc phong van truc tiep.");
	    }

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Da chap nhan loi de nghi phong van truc tiep cua %s's. Noi chuyen IC de bat dau!", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi phong van truc tiep cua ban. Noi chuyen IC de bat dau!", GetPlayerRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

		PlayerInfo[playerid][pLiveBroadcast] = offeredby;
		PlayerInfo[offeredby][pLiveBroadcast] = playerid;
  		PlayerInfo[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "battay", true))
	{
	    new offeredby = PlayerInfo[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc bat ky loi de nghi bat tay nao");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(PlayerInfo[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

        AwardAchievement(playerid, "Meeting people");
        AwardAchievement(offeredby, "Meeting people");

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi bat tay cua %s.", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi bat tay cua ban.", GetPlayerRPName(playerid));

  		PlayerInfo[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vatpham", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pSellOffer],
		    type = PlayerInfo[playerid][pSellType],
		    amount = PlayerInfo[playerid][pSellExtra],
		    price = PlayerInfo[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc bat ky loi de nghi mua mat hang nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong du kha nang chap nhan loi de nghi.");
	    }

	    switch(type)
	    {
			case ITEM_CARLIC:
			{
				if(PlayerInfo[playerid][pCarLicense])
				{
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da co giay phep lai xe roi.");
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pCarLicense]++;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", PlayerInfo[playerid][pCarLicense], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", PlayerInfo[offeredby][pCarLicense], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua giay phep lai xe tu %s voi gia %s.", GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da mua giay phep lai xe voi gia %s.", GetPlayerRPName(playerid), FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) da mua giay phep lai xe tu %s (uid: %i) voi gia $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_GUNLIC:
			{
				if(PlayerInfo[playerid][pGunLicense])
				{
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da co giay phep vu khi roi.");
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pGunLicense]++;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", PlayerInfo[playerid][pGunLicense], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", PlayerInfo[offeredby][pGunLicense], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua giay phep vu khi tu %s voi gia %s.", GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da mua giay phep vu khi voi gia %s.", GetPlayerRPName(playerid), FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) da mua giay phep vu khi tu %s (uid: %i) voi gia $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
	        case ITEM_WEAPON:
			{
			    new weaponid = PlayerInfo[playerid][pSellExtra];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GivePlayerWeaponEx(playerid, weaponid);
	            RemovePlayerWeapon(offeredby, weaponid);

				SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %s's %s voi gia %s.", GetPlayerRPName(offeredby), GetWeaponNameEx(weaponid), FormatNumber(price));
				SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da mua %s cua ban voi gia %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), FormatNumber(price));
				Log_Write("log_give", "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

				TurfTaxCheck(offeredby, price);

				PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(PlayerInfo[offeredby][pMaterials] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
				    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i vat lieu. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMaterials] += amount;
			    PlayerInfo[offeredby][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[offeredby][pMaterials], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %i vat lieu tu %s voi gia %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da mua %i vat lieu cua ban voi gia %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(PlayerInfo[offeredby][pWeed] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
			    }
			    if(PlayerInfo[playerid][pWeed] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
				{
				    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i grams can sa. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

				AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pWeed] += amount;
			    PlayerInfo[offeredby][pWeed] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[offeredby][pWeed], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %i grams can sa tu %s voi gia %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s ban da mua %i grams can sa voi gia %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of weed to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(PlayerInfo[offeredby][pCocaine] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
			    }
			    if(PlayerInfo[playerid][pCocaine] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				{
				    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i cocaine. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pCocaine] += amount;
			    PlayerInfo[offeredby][pCocaine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[offeredby][pCocaine], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %i grams cocaine tu %s voi gia %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s ban da mua %i grams cocaine voi gia %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of cocaine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(PlayerInfo[offeredby][pMeth] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
			    }
			    if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
				{
				    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i meth. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMeth] += amount;
			    PlayerInfo[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[offeredby][pMeth], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %i grams meth tu %s voi gia %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s ban da mua %i grams meth voi gia %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(PlayerInfo[offeredby][pPainkillers] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
			    }
				if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				{
				    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i painkillers. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pPainkillers] += amount;
			    PlayerInfo[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[offeredby][pPainkillers], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %i painkillers tu %s voi gia %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s ban da mua %i painkillers voi gia %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(PlayerInfo[offeredby][pSeeds] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
			    }
			    if(PlayerInfo[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
				{
				    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i seeds. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pSeeds] += amount;
			    PlayerInfo[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[offeredby][pSeeds], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %i seeds tu %s voi gia %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s ban da mua %i seeds voi gia %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(PlayerInfo[offeredby][pEphedrine] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da de nghi khong con vat pham do nua.");
			    }
			    if(PlayerInfo[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
				{
				    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i ephedrine. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pEphedrine] += amount;
			    PlayerInfo[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[offeredby][pEphedrine], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mua %i grams ephedrine tu %s voi gia %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s ban da mua %i grams ephedrine voi gia %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "cacuoc", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pDiceOffer],
			amount = PlayerInfo[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan bat ky loi de nghi ca cuoc xuc xac nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(PlayerInfo[playerid][pCash] < amount)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the chap nhan ca cuoc nay.");
	    }
	    if(PlayerInfo[offeredby][pCash] < amount)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong the chap nhan ca cuoc nay.");
	    }

		new
			rand[2];

		if(PlayerInfo[playerid][pDiceRigged])
		{
		    rand[0] = 4 + random(3);
		    rand[1] = random(3) + 1;
		}
		else
		{
			for(new x = 0; x < random(50)*random(50)+30; x++)
			{
				rand[0] = random(6) + 1;
			}
			for(new x = 0; x < random(50)*random(50)+30; x++)
			{
				rand[1] = random(6) + 1;
			}
		}

		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "** %s tung mot con xuc xac va dap xuong dat voi %i nut.", GetPlayerRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s tung mot con xuc xac va dap xuong dat voi %i nut.", GetPlayerRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{
            new tax = (amount / 200) * gTax;
            AddToTaxVault(tax);
		    GivePlayerCash(offeredby, amount - tax);
		    GivePlayerCash(playerid, -amount);

		    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} Ban da thang duoc %s tu viec ca cuoc voi %s.", FormatNumber(amount), GetPlayerRPName(playerid));
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Ban da thua %s tu viec ca cuoc voi %s.", FormatNumber(amount), GetPlayerRPName(offeredby));
		    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "Ban da tra %s thue va phi.", FormatNumber(tax));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) thang duic $%i tu viec ca cuoc voi %s (IP: %s).", GetPlayerRPName(offeredby), GetPlayerIP(offeredby), amount, GetPlayerRPName(playerid), GetPlayerIP(playerid));
			}
			Log_Write("log_dicebet", "%s (uid: %i) won a dice bet against %s (uid: %i) for $%i.", GetPlayerRPName(offeredby), PlayerInfo[offeredby][pID], GetPlayerRPName(playerid), PlayerInfo[playerid][pID], amount);
		}
		else if(rand[0] == rand[1])
		{
			SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} Cuoc %s la hoa. Ket qua la ban giu duoc tien cua minh!", FormatNumber(amount));
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Cuoc %s la hoa. Ket qua la ban giu duoc tien cua minh!", FormatNumber(amount));
		}
		else
		{
		    new tax = (amount / 200) * gTax;
      		AddToTaxVault(tax);
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount - tax);

		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thang duoc %s tu viec ca cuoc voi %s.", FormatNumber(amount), GetPlayerRPName(offeredby));
		    SendClientMessageEx(offeredby, COLOR_RED, "** Ban da thua %s tu viec ca cuoc voi %s.", FormatNumber(amount), GetPlayerRPName(playerid));
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da tra %s thue va phi", FormatNumber(tax));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) thang duic $%i tu viec ca cuoc voi %s (IP: %s).", GetPlayerRPName(playerid), GetPlayerIP(playerid), amount, GetPlayerRPName(offeredby), GetPlayerIP(offeredby));
			}
			Log_Write("log_dicebet", "%s (uid: %i) won a dice bet against %s (uid: %i) for $%i.", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GetPlayerRPName(offeredby), PlayerInfo[offeredby][pID], amount);
		}

	    PlayerInfo[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "loimoi", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pInviteOffer],
			houseid = PlayerInfo[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bat ky loi de moi den nha nao.");
	    }

		PlayerInfo[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi den ngoi nha cua %s's.", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi den ngoi nha cua ban.", GetPlayerRPName(playerid));

	    PlayerInfo[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "cuop", true))
	{
	    new offeredby = PlayerInfo[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc bat ky loi de nghi mot vu cuop nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Loi moi mot vu cuop khong hop ke.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Vu cuop nay da dat den gioi han %i ten cuop.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan tham gia mot vu cuop voi %s's.", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan tham gia mot vu cuop voi ban.", GetPlayerRPName(playerid));

	    PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "duel", true))
	{
	    new offeredby = PlayerInfo[playerid][pDuelOffer], entranceid = GetInsideEntrance(playerid);

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc bat ky loi de nghi dau tay doi nao.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi da nam ngoai pham vi.");
	    }
	    if(entranceid == -1 || EntranceInfo[entranceid][eType] != 1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o dau truong.");
		}
		if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang tham gia mot cuoc dau tay doi.");
		}
		if(PlayerInfo[offeredby][pDueling] != INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dua ra loi de nghi nay dang trong mot cuoc dau tay doi.");
		}

		foreach(new i : Player)
		{
		    if(GetInsideEntrance(i) == entranceid && PlayerInfo[i][pDueling] != INVALID_PLAYER_ID)
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Co mot cuoc dau tay doi dang dien ra. Hay cho no ket thuc.");
		    }
		}

		SavePlayerVariables(playerid);
		SavePlayerVariables(offeredby);

		ResetPlayerWeapons(playerid);
		ResetPlayerWeapons(offeredby);

		SetPlayerPos(playerid, 1370.3395, -15.4556, 1000.9219);
		SetPlayerPos(offeredby, 1414.4841, -15.1239, 1000.9253);
		SetPlayerFacingAngle(playerid, 270.0000);
		SetPlayerFacingAngle(offeredby, 90.0000);

		SetPlayerInterior(playerid, 1);
		SetPlayerInterior(offeredby, 1);
		SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eWorld]);
		SetPlayerVirtualWorld(offeredby, EntranceInfo[entranceid][eWorld]);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		SetPlayerHealth(offeredby, 100.0);
		SetPlayerArmour(offeredby, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		GivePlayerWeaponEx(offeredby, 24, true);
		GivePlayerWeaponEx(offeredby, 27, true);
		GivePlayerWeaponEx(offeredby, 29, true);
		GivePlayerWeaponEx(offeredby, 31, true);
		GivePlayerWeaponEx(offeredby, 34, true);

		GameTextForPlayer(playerid, "~r~Thoi gian dau!", 3000, 3);
		GameTextForPlayer(offeredby, "~r~Thoi gian dau!", 3000, 3);

		PlayerInfo[playerid][pDueling] = offeredby;
		PlayerInfo[offeredby][pDueling] = playerid;

	    SendClientMessageEx(offeredby, COLOR_LIGHTRED, "**{FFFFFF} %s da chap nhan loi de nghi dau tay doi.", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan loi de nghi dau tay doi voi %s's.", GetPlayerRPName(offeredby));

	    PlayerInfo[playerid][pDuelOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lienminh", true))
	{
	    new offeredby = PlayerInfo[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc moi tham gia mot lien minh.");
	    }
		if(offeredby == playerid)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the chap nhan loi de nghi tu chinh minh.");
		}

		new gangid = PlayerInfo[playerid][pGang], allyid = PlayerInfo[offeredby][pGang];

	    SendClientMessageEx(offeredby, COLOR_AQUA, "%s da chap nhan loi de nghi cua ban de thanh lap mot lien minh bang dang.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chap nhan loi de nghi cua %s de thanh lap mot lien minh bang dang.", GetPlayerRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		PlayerInfo[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SendClientMessageToAllEx(COLOR_WHITE, "(( Tin tuc bang dang: {%06x}%s{FFFFFF} da thanh lap mot lien minh voi {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "war", true))
	{
	    new offeredby = PlayerInfo[playerid][pWarOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua duoc moi tham gia mot lien minh.");
	    }
		if(offeredby == playerid)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the chap nhan loi de nghi tu chinh minh.");
		}

		new gangid = PlayerInfo[playerid][pGang], rivalid = PlayerInfo[offeredby][pGang];

	    SendClientMessageEx(offeredby, COLOR_AQUA, "%s da chap nhan loi de nghi thanh lap mot cuoc chien bang dang.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chap nhan loi de nghi cua %s thanh lap mot cuoc chien bang dang.", GetPlayerRPName(offeredby));

		GangInfo[gangid][gWar] = rivalid;
		GangInfo[rivalid][gWar] = gangid;
		PlayerInfo[playerid][pWarOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", rivalid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", gangid, rivalid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[rivalid][gColor] == -1 || GangInfo[rivalid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[rivalid][gColor];
		}

		SendClientMessageToAllEx(COLOR_WHITE, "(( Tin tuc bang dang: {%06x}%s{FFFFFF} da thanh lap mot cuoc chien bang dang voi {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[rivalid][gName]);
	}
	else if(!strcmp(params, "kethon", true))
	{
		new id, offeredby = PlayerInfo[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai co mat tai nha hang de bat dau mot cuoc dam cuoi.");
		}
		if(PlayerInfo[playerid][pCash] < 25000 || PlayerInfo[offeredby][pCash] < 25000)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ca hai can co $25,000 de bat dau mot dam cuoi.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong nam trong pham vi bat ky ai da de nghi ket hon.");
		}

		GivePlayerCash(playerid, -25000);
		GivePlayerCash(offeredby, -25000);
		BusinessInfo[id][bCash] += 50000;

		SendClientMessageToAllEx(COLOR_WHITE, "Doi tinh nhan %s va %s da vua ket hon! Hay chuc mung ho.", GetPlayerRPName(offeredby), GetPlayerRPName(playerid));

		PlayerInfo[playerid][pMarriedTo] = PlayerInfo[offeredby][pID];
		PlayerInfo[offeredby][pMarriedTo] = PlayerInfo[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[playerid][pMarriedTo], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[offeredby][pMarriedTo], PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lyhon", true))
	{
		new offeredby = PlayerInfo[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc pham vi cua bat ky ai da de nghi ly hon voi ban.");
		}
		if(PlayerInfo[playerid][pMarriedTo] == -1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua ket hon.");
		}
		if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[offeredby][pID])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Do khong phai la nguoi ban da ket hon.");
		}

		PlayerInfo[playerid][pMarriedTo] = -1;
		PlayerInfo[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], "Khong co", MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], "Khong co", MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /chapnhan [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Nha, Garage, Doanhnghiep, Khudat, Chet, Phuongtien, Tochuc, Bangdang, Vephat, Live, Kethon");
		SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Vatpham, Lucsoat, Battay, Cacuoc, Loimoi, Cuop, Duel, Lienminh, Lyhon");
	}

	return 1;
}
CMD:togtp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay");
	}
    if(!PlayerInfo[playerid][pToggleTP])
    {
		PlayerInfo[playerid][pToggleTP] = 1;
	}
	else
	{
		PlayerInfo[playerid][pToggleTP] = 0;
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /e [Management chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't speak in the executive chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 5) && !PlayerInfo[i][pToggleAdmin])
	    {
			SendClientMessageEx(i, 0xA077BFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ha [head admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't speak in the head administrator chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 4) && !PlayerInfo[i][pToggleAdmin])
	    {
			SendClientMessageEx(i, 0x5C80FFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /a [admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't speak in the admin chat as you have it toggled.");
	}

	new adminname[24];
	strcpy(adminname, GetPlayerRPName(playerid));
	if(PlayerInfo[playerid][pUndercover][0])
	{
	    if(strcmp(PlayerInfo[playerid][pAdminName], "None", true))
	    {
	    	strcpy(adminname, PlayerInfo[playerid][pAdminName]);
		}
	}

	new
		divisionName[5],
		adminRank[24];
	format(divisionName, sizeof(divisionName), "%s", GetAdminDivision(playerid));
	format(adminRank, sizeof(adminRank), "%s", GetAdminRank1(playerid));

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pDeveloper]) && !PlayerInfo[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_YELLOW, "** [%s %s{FFFF00}] %s: %.*s... **", divisionName, adminRank, adminname, MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_YELLOW, "** [%s %s{FFFF00}] %s: ...%s **", divisionName, adminRank, adminname, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendClientMessageEx(i, COLOR_YELLOW, "** [%s %s{FFFF00}] %s: %s **", divisionName, adminRank, adminname, params);
			}
		}
	}

	new msg[256];

	format(msg, sizeof(msg), "%s", GetAdminRank1(playerid));
	strmid(msg, msg, 8, strlen(msg));

	format(msg, sizeof(msg), "```[%s %s] %s: %s```", GetAdminDivision(playerid), msg, adminname, params);

	//DCC_SendChannelMessage(DCC_FindChannelById(returnAdminChatID()), msg);

	return 1;
}

CMD:fa(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pFormerAdmin])
    {
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /fa [Former Admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't speak in the Former Admin chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pFormerAdmin]) && !PlayerInfo[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_RETIRED, "** [%s] %s: %.*s... **", GetAdminRank(playerid), GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_RETIRED, "** [%s] %s: ...%s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendClientMessageEx(i, COLOR_RETIRED, "** [%s] %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
			}
		}
	}
	return 1;
}


CMD:undercover(playerid, params[])
{
	new name[MAX_PLAYER_NAME], level, Float:ar;
	if(PlayerInfo[playerid][pAdmin] >= 1 && !PlayerInfo[playerid][pAdminDuty])
	{
		if(sscanf(params, "s[24]", name))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /undercover [name | random | off]");
		}
	    if(PlayerInfo[playerid][pUndercover][0])
	    {
     		OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
     		SendClientMessageEx(playerid, COLOR_WHITE, "** You are no longer undercover.", GetPlayerRPName(playerid), name);
	    }
	    else if(!strcmp(name, "random", true)) {
			strcpy(name, getRandomRPName());
			level = random(9) + 1;
			ar = float(random(50)+50);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
			mysql_tquery(connectionID, queryBuffer, "OnUndercover", "iisiff", playerid, 1, name, level, 100.0, ar);
		}
		else if(strfind(name, "_") != -1) {
		    //format(name, MAX_PLAYER_NAME, params);
			level = random(9) + 1;
			ar = float(random(50)+50);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
			mysql_tquery(connectionID, queryBuffer, "OnUndercover", "iisiff", playerid, 1, name, level, 100.0, ar);
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /undercover [Firstname_Lastname | random]");
		}

	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Not Authorized / You need to be off duty to use this command.");
	return 1;
}


CMD:ah(playerid, params[])
{
	return callcmd::adminhelp(playerid, params);
}

CMD:ahelp(playerid, params[])
{
	return callcmd::adminhelp(playerid, params);
}

CMD:adminhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_GREY5, "Trial:{DDDDDD} /a, /clearchat, /skick, /sban, /sjail, /pinfo, /spec, /reports, /admins, /flag, /removeflag, /listflags, /check, /dm.");
		SendClientMessage(playerid, COLOR_GREY5, "Trial:{DDDDDD} /ocheck, /oflag, /listflagged, /hhcheck, /kills, /shots, /damages, /jail, /warn.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessage(playerid, 0x99CCFFFF, "Junior Admin:{DDDDDD} /aduty, /adminname, /kick, /ban, /warn, /slap, /ar, /tr, /rr, /cr, /setint, /setvw.");
		SendClientMessage(playerid, 0x99CCFFFF, "Junior Admin:{DDDDDD} /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /gotocoords, /gotoint, /listen, /jetpack, /sendto.");
		SendClientMessage(playerid, 0x99CCFFFF, "Junior Admin:{DDDDDD} /freeze, /unfreeze, /rwarn, /runmute, /nmute, /admute, /hmute, /gmute, /skiptut, /listguns, /disarm.");
		SendClientMessage(playerid, 0x99CCFFFF, "Junior Admin:{DDDDDD} /jail, /listjailed, /lastactive, /checkinv, /afklist, /chapnhanname, /denyname, /namechanges, /nrn.");
		SendClientMessage(playerid, 0x99CCFFFF, "Junior Admin:{DDDDDD} /prisoninfo, /relog, /rtnc, /sth, /nro, /nao, /nor, /post, /contracts, /denyhit, /(o)dm.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_LIMEGREEN, "General Admin:{DDDDDD} /ban, /(o)getip, /iplookup");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "General Admin:{DDDDDD} /prison, /sprison, /oprison, /release, /fine, /pfine, /ofine, /sethp, /setarmor, /mark, /gotomark.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "General Admin:{DDDDDD} /veh, /destroyveh, /respawncars, /broadcast, /fixveh, /healrange.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "General Admin:{DDDDDD} /resetadtimer, /baninfo, /banhistory, /togooc, /tognewbie, /togglobal, /listpvehs, /despawnpveh.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "General Admin:{DDDDDD} /aclearwanted, /removedm, /savevehicle, /editvehicle, /removevehicle, /vehicleinfo, /refillcars, /refilldrug.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "General Admin:{DDDDDD} /alock, /duel, /startchat, /invitechat, /kickchat, /endchat, /freezerange, /unfreezerange, /reviverange.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessage(playerid, COLOR_LIGHTORANGE, "Senior Admin:{DDDDDD} /givegun, /setname, /setweather, /permaban, /oban, /unban, /unbanip, /banip, /lockaccount, /unlockaccount.");
		SendClientMessage(playerid, COLOR_LIGHTORANGE, "Senior Admin:{DDDDDD} /explode, /event, /gplay, /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent, /eventkick.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Head Admin:{DDDDDD} /setstat, /givecookie, /givecookieall, /setvip, /osetvip, /saveaccounts.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Head Admin:{DDDDDD} /removevip, /rangeban, /deleteaccount, /doublexp, /previewint, /nearest, /dynamichelp, /listassets.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Head Admin:{DDDDDD} /adestroyboombox, /setbanktimer, /resetrobbery, /addtorobbery, /givepayday, /givepveh, /givedoublexp.");
	}
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "General Manager:{DDDDDD} /makeadmin, /makehelper, /omakeadmin, /omakehelper, /setmotd, /setstaff, /forceaduty, /setpassword.");
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "General Manager:{DDDDDD} /olisthelpers, /gmx, /sellinactive, /inactivecheck, /changelist, /fixplayerid, /giveachievement.");
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "General Manager:{DDDDDD} /settitle, /oadmins, /disablevpn, /landperms, /forcedeleteobject, /obscurent, /ovips.");
	}
	if(PlayerInfo[playerid][pAdmin] >=8)
	{
		SendClientMessage(playerid, COLOR_VIP, "Management:{DDDDDD} /placegiftbox, /giftall, /giveBackpack, /removeBackpack, /givemoney, /editBackpack");
		SendClientMessage(playerid, COLOR_VIP, "Management 8:{DDDDDD} /getip, /ogetip, /iplookup, <- Before u refund! ");
	}

	return 1;
}

CMD:reports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "__________ Pending Reports __________");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(RID: %i) %s[%i] reports: %s", i, GetPlayerRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "** Use /ar [rid] or /tr [rid] to handle these reports.");
	return 1;
}

CMD:rtnc(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rtnc [reportid] (Sends to newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The report specified is being handled by another admin.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to newbie chat.", GetPlayerRPName(playerid), reportid);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has redirected your report to the newbie chat.", GetPlayerRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The report specified is being handled by another admin.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to helpers.", GetPlayerRPName(playerid), reportid);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has redirected your report to all helpers online.", GetPlayerRPName(playerid));

    strcpy(PlayerInfo[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetPlayerRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	PlayerInfo[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ar(playerid, params[])
{
	new reportid, chat;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The report specified is being handled by another admin.");
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
		callcmd::cr(playerid, params);
	}
	new msg[128];
	format(msg, sizeof(msg), "AdmCmd: %s has accepted report %i from %s.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));

	SendAdminMessage(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "```%s```", msg);
//	DCC_SendChannelMessage(DCC_FindChannelById(returnReportChatID()), msg);
	if(chat)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You can use /rr to speak with the reporter and /cr to close the report.");
		SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has accepted your report and is now reviewing it.", GetPlayerRPName(playerid));
		SendClientMessage(ReportInfo[reportid][rReporter], COLOR_GREEN, "You can use /rr to reply to the admin handling your report.");

		PlayerInfo[playerid][pActiveReport] = reportid;
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has accepted your report and is now reviewing it.", GetPlayerRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	PlayerInfo[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", PlayerInfo[playerid][pReports], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:tr(playerid, params[])
{
	new reportid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The report specified is being handled by another admin.");
	}
	new msg[200];
	format(msg, sizeof(msg), "AdmCmd: %s has trashed report %i from %s, reason: %s", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]), reason);
	SendAdminMessage(COLOR_LIGHTRED, msg);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "** %s has trashed your report, reason: %s", GetPlayerRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;

	format(msg, sizeof(msg), "```%s```", msg);
//	DCC_SendChannelMessage(DCC_FindChannelById(returnReportChatID()), msg);

	return 1;
}

CMD:nro(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", reportid))
	{
 		SendClientMessage(playerid, COLOR_WHITE, "Su dung: /nro [reportid]");
 		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their report involves a non-rulebreaking offense.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it involves a non-rulebreaking offense", GetPlayerRPName(playerid));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our rules page at Soon-rp.ml for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /nao [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This report is already being handled by another administrator.");
	}

  	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as there are no admins online to handle it.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as there no admins online with the authority to handle it.", GetPlayerRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ic(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ic [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report for being an IC issue");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This report is already being handled by another administrator.");
	}

  	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as it is an in-character issue.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it is an in-character issue.", GetPlayerRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nor(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /nor [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report if the reporters revive request is invalid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their request for a revive is invalid.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your request for a revive is invalid. (/call 911)", GetPlayerRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:post(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /post [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report and notify the player to post an admin request.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as it needs to be handled on the forums.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your issue at hand must be handled on our forums.", GetPlayerRPName(playerid));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our website at -rp.ml in order to to resolve this issue.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}


CMD:norevive(playerid, params[])
{
	return callcmd::nor(playerid, params);
}

CMD:er(playerid, params[])
{
	return callcmd::cr(playerid, params);
}

CMD:bigears(playerid, params[])
{
	return callcmd::listen(playerid, params);
}

CMD:rr(playerid, params[])
{
	new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SendClientMessageEx(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s (ID %i): %s **", GetPlayerRPName(playerid), playerid, params);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetPlayerRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Admin %s (ID %i): %s **", GetPlayerRPName(playerid), playerid, params);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetPlayerRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
	}

	return 1;
}

CMD:cr(playerid, params[])
{
    new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SendClientMessageEx(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s has closed the report. **", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Administrator %s has closed the report. **", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pActiveReport] = -1;

	return 1;
}

CMD:skick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /skick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has silently kicked %s, reason: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be banned.");
	}

	Log_Write("log_punishments", "%s (uid: %i) silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was silently banned by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, false);
	return 1;
}

CMD:sjail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sjail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}
	if(minutes < 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The amount of minutes specified cannot be below zero.");
	}

    PlayerInfo[targetid][pJailType] = 1;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	Log_Write("log_punishments", "%s (uid: %i) silently jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes by an Admin, reason: %s", GetPlayerRPName(targetid), minutes, reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been jailed for %i minutes by an admin.", minutes);
    return 1;
}

CMD:pinfo(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /pinfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	SendClientMessageEx(playerid, COLOR_GREY1, "(ID: %i) - (Name: %s) - (Ping: %i) - (FPS: %i) - (Packet Loss: %.1f%c)", targetid, GetPlayerRPName(targetid), GetPlayerPing(targetid), PlayerInfo[targetid][pFPS], NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_________ Admins Online _________");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 0 && !PlayerInfo[i][pUndercover][0] || PlayerInfo[playerid][pAdmin] >= 6 && PlayerInfo[i][pUndercover][0])
		{
			new division[5];
			strcpy(division, GetAdminDivision(i));
            if(strlen(division) < 1) division = "None";
			if(!strcmp(PlayerInfo[i][pAdminName], "None", true))
            	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - Division: %s - Status: %s{C8C8C8} - Reports Handled: %i - Tabbed: %s", i, GetAdminRank(i), PlayerInfo[i][pUsername], division, (PlayerInfo[i][pAdminDuty]) ? ("{00AA00}On Duty") : ("Off Duty"), PlayerInfo[i][pReports], (PlayerInfo[i][pAFK]) ? ("Co") : ("No"));
        	else
				SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s (%s) - Division: %s - Status: %s{C8C8C8} - Reports Handled: %i - Tabbed: %s", i, GetAdminRank(i), PlayerInfo[i][pUsername], PlayerInfo[i][pAdminName], division, (PlayerInfo[i][pAdminDuty]) ? ("{00AA00}On Duty") : ("Off Duty"), PlayerInfo[i][pReports], (PlayerInfo[i][pAFK]) ? ("Co") : ("No"));
		}
	}
	return 1;
}
CMD:checknewbies(playerid, params[])
{
	new targetid;
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /checknewbies [playerid]");
	}
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Level %i Player %s has used newbie {00FF00}%s times.", PlayerInfo[targetid][pLevel], GetPlayerRPName(targetid), FormatNumber(PlayerInfo[targetid][pNewbies], 0));
	return 1;
}

CMD:helpers(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "_________ Helpers Online _________");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pHelper] > 0 && !PlayerInfo[i][pPassport] && !PlayerInfo[i][pUndercover][0])
	    {
	        if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	            SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - Help Requests: %s - Newbies: %s", i, GetHelperRank(i), GetPlayerRPName(i), FormatNumber(PlayerInfo[i][pHelpRequests], 0), FormatNumber(PlayerInfo[i][pNewbies], 0));
	        else
				SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s", i, GetHelperRank(i), GetPlayerRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid, params[])
{
	new targetid, desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /flag [playerid] [description]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s flagged %s's account for '%s'.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid, params[])
{
	new name[24], desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /oflag [username] [description]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, users b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid, params[])
{
	new name[24];

	if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ocheck [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removeflag [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListFlagsForRemoval", "ii", playerid, targetid);
	return 1;
}

CMD:listflags(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /listflags [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:hhcheck(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /hhcheck [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pHHCheck])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is already being checked for health hacks.");
	}
	if(gettime() - PlayerInfo[playerid][pLastUpdate] >= 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't initiate this check on a tabbed player.");
	}

	GetPlayerHealth(targetid, PlayerInfo[targetid][pHealth]);

	PlayerInfo[targetid][pHHCheck] = 1;
	PlayerInfo[targetid][pHHTime] = 5;
	PlayerInfo[targetid][pHHRounded] = GetPlayerHealthEx(targetid);
	PlayerInfo[targetid][pHHCount] = 0;

	SetPlayerHealth(targetid, random(100) + 1);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has started the health hack check on %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:spec(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SendClientMessageEx(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetPlayerRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	    PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
    	if(PlayerInfo[playerid][pAdmin] == 1)
		{
		    PlayerInfo[playerid][pTogglePhone] = 0;
		}
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[playerid][pAdmin] == 1)
	{
	    PlayerInfo[playerid][pTogglePhone] = 1;
	}
	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	RefreshPlayerTextdraws(playerid);

	PlayerInfo[playerid][pSpectating] = targetid;
	SendClientMessageEx(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetPlayerRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	return 1;
}

CMD:poll(playerid, params[])
{
	new option[10];
	if(sscanf(params, "s[10]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Su dung: /poll [tuy chon]");
		SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Create, End, View, Answer");
		return 1;
	}
	if(!strcmp(params, "create", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(isnull(pollQuestion))
	    {
			if(!PlayerInfo[playerid][pCreatingPoll])
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEPOLL);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "There is already an active poll!");
		}
	}
	else if(!strcmp(params, "end", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(!isnull(pollQuestion))
	    {
			pollQuestion[0] = EOS;
			for(new i; i < 2; i ++)
			{
				pollAnswers[i][0] = EOS;
			}
			SendClientMessageToAllEx(COLOR_RETIRED, "The poll was ended by %s, results %s: %i, %s: %i", GetPlayerRPName(playerid), pollAnswers[0], pollAnswerCount[0], pollAnswers[1], pollAnswerCount[1]);
		}
	}
	else if(!strcmp(params, "view", true))
	{
	    if(!PlayerInfo[playerid][pAnsweredPoll])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "You haven't answered the poll yet.");
	    }
	    ShowDialogToPlayer(playerid, DIALOG_POLLVIEW);
	}
	else if(!strcmp(params, "answer", true))
	{
	    if(PlayerInfo[playerid][pAnsweredPoll])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "You've already answered the poll.");
	    }
	    ShowDialogToPlayer(playerid, DIALOG_POLLANSWER);
	}
    return 1;
}
CMD:allhunt(playerid, params[])
{
	new targetid, weaponid;
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid, weaponid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /allhunt [targetid] [weapon (0 for wepset)]");
	}
	if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is either weapon restricted or played less than two playing hours.");
	}
	if(weaponid == 38 && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The minigun was disabled due to abuse.");
	}
	SavePlayerVariables(targetid);
	ResetPlayerWeapons(targetid);
	if(weaponid != 0 && (1 <= weaponid <= 46))
	{
		GivePlayerWeaponEx(weaponid, weaponid, true);
	}
	else
	{
        GivePlayerWeaponEx(targetid, 24, true);
        GivePlayerWeaponEx(targetid, 27, true);
        GivePlayerWeaponEx(targetid, 29, true);
        GivePlayerWeaponEx(targetid, 31, true);
        GivePlayerWeaponEx(targetid, 34, true);
	}
    PlayerInfo[targetid][pJoinedEvent] = 1;
    PlayerInfo[targetid][pHunted] = 1;

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pLogged] && GetPlayerInterior(i) == GetPlayerInterior(targetid))
        {
    		SetPlayerMarkerForPlayer(i, targetid, COLOR_RETIRED);
		}
	}
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s has made %s a hunted. Kill them to win a prize!", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}
CMD:quiz(playerid, params[])
{
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2)
	    {
			SendClientMessage(playerid, COLOR_WHITE, "Su dung: /quiz [tuy chon]");
			SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Create, End, Edit, Answer");
		}
		else
		{
		    //SendClientMessage(playerid, COLOR_WHITE, "Su dung: /quiz answer [text]");
		    strcpy(option, "answer");
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "There is already an on-going quiz!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SendClientMessageToAllEx(COLOR_RETIRED, "The quiz was ended by %s, answer: %s", GetPlayerRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s changed the quiz answer to %s.", GetPlayerRPName(playerid), quizAnswer);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Su dung: /quiz edit [answer]");
		}
	}
	else if(!strcmp(option, "answer", true))
	{
		if(isnull(quizAnswer))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no active quiz!");
		}
		if(!isnull(param))
		{
			if(!strcmp(quizAnswer, param, true))
			{
				SendClientMessageToAllEx(COLOR_RETIRED, "%s has answered the quiz correctly. answer: %s", GetPlayerRPName(playerid), quizAnswer);
		    	quizQuestion[0] = EOS;
	        	quizAnswer[0] = EOS;
			}
			else
			{
		    	SendClientMessage(playerid, COLOR_LIGHTRED, "Sorry bud, that ain't the right answer.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Su dung: /quiz answer [answer]");
		}
	}
	return 1;
}
CMD:forcedeleteobject(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pDeveloper])
    {
        new mode[32];
        if(sscanf(params, "s[32]", mode))
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /forcedeleteobject [enable/disable]");
		if(!strcmp(mode, "enable", true))
		{
		    PlayerInfo[playerid][pDeleteMode] = 1;
		}
        else if(!strcmp(mode, "disable", true))
		{
		    PlayerInfo[playerid][pDeleteMode] = 0;
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /forcedeleteobject [enable/disable]");
		}
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Object deletetion mode was %sd (%i)", mode, PlayerInfo[playerid][pDeleteMode]);
	}
	return 1;
}
CMD:godshand(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		new targetid;

		if(sscanf(params, "u", targetid))
			return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /godshand [playerid]");

		if(PlayerInfo[playerid][pGodshand] == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Aww, that's sad as fuck.");
			PlayerInfo[targetid][pGodshand] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Granted it is.");
			PlayerInfo[targetid][pGodshand] = 1;
		}
		return 1;
	}
	return -1;
}
CMD:choke(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /choke [playerid] ");
		ApplyAnimation(targetid,"ped","gas_cwr",4.1,1,1,1,0,0,0);

		if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[targetid][pAdmin])
			return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the choke admin cap cao hon ban.");

		SendProximityMessage(targetid, 30.0, COLOR_PURPLE, "* %s cui xuong khi bi ban tay cua God lam nghet tho", GetPlayerRPName(targetid));
	}
	else SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay!");
	return 1;
}

CMD:kick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /kick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay co cap bac admin cao hon ban. Ho khong the bi kick");
	}

    Log_Write("log_punishments", "%s (uid: %i) da kick %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da bi kick boi %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay co cap bac admin cao hon ban. Ho khong the bi banned");
	}

	Log_Write("log_punishments", "%s (uid: %i) da banned %s (uid: %i), ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da bi banned boi %s, ly do: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:warn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /warn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay co cap bac admin cao hon ban. Ho khong the bi canh bao");
	}

	PlayerInfo[targetid][pWarnings]++;
	Log_Write("log_punishments", "%s (uid: %i) da canh bao %s (uid: %i), ly do: %s (%i/3)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason, PlayerInfo[targetid][pWarnings]);

	if(PlayerInfo[targetid][pWarnings] < 3)
	{
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bi canh bao boi %s, ly do: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "%s da canh bao ban, ly do: %s", GetPlayerRPName(playerid), reason);
	}
	else
	{
	    PlayerInfo[targetid][pWarnings] = 0;

	    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da bi banned boi %s, ly do: %s (3/3 warnings)", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

CMD:check(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /check [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}

	DisplayStats(targetid, playerid);
	return 1;
}

CMD:checkinv(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /checkinv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
    new targetid, Float:height;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /slap [playerid] [height (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is not spawned and therefore cannot be slapped.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be slapped.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(targetid, x, y, z + height);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was slapped by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}
CMD:nangcap(playerid, params[])
{
	if(isnull(params))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /nangcap [tuy chon] (%i points available)", PlayerInfo[playerid][pUpgradePoints]);
		SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Inventory, Addict, Trader, Asset, Labor, SpawnHealth, SpawnArmor");
		return 1;
	}
	if(PlayerInfo[playerid][pUpgradePoints] < 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co du diem nang cap de su dung.");
	}

	if(!strcmp(params, "inventory", true))
	{
	    if(PlayerInfo[playerid][pInventoryUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ky nang tui do cua ban duoc nang cap len cap toi da la 5.");
		}

		PlayerInfo[playerid][pInventoryUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET inventoryupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pInventoryUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da duoc nang cap ky nang tui do len %i/5. Suc chua cua tui do cua ban da duoc tang len.", PlayerInfo[playerid][pInventoryUpgrade]);
 	}
 	else if(!strcmp(params, "addict", true))
	{
	    if(PlayerInfo[playerid][pAddictUpgrade] >= 3)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ky nang nghien ngap cua ban duoc nang cap len cap toi la 3.");
		}

		PlayerInfo[playerid][pAddictUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da duoc nang cap ky nang nghien ngap len %i/3. Ban se duoc tang %.1f mau & giap khi choi do.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
 	}
 	else if(!strcmp(params, "trader", true))
	{
	    if(PlayerInfo[playerid][pTraderUpgrade] >= 3)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ky nang mua ban cua ban duoc nang cap len cap toi da la 3.");
		}

		PlayerInfo[playerid][pTraderUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET traderupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da duoc nang cap ky nang mua ban len %i/3. Ban se chi can tra %i phan tram it hon cho cac mat hang trong cua hang.", PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pTraderUpgrade] * 10);
 	}
 	else if(!strcmp(params, "asset", true))
	{
	    if(PlayerInfo[playerid][pAssetUpgrade] >= 4)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ky nang tai san cua ban duoc nang cap len toi da la 4.");
		}

		PlayerInfo[playerid][pAssetUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da duoc nang cap ky nang tai san len %i/4. Ban se duoc giu %i/%i nha va garages and %i/%i Biz va phuong tien.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
 	else if(!strcmp(params, "labor", true))
	{
	    if(PlayerInfo[playerid][pLaborUpgrade] >= 5)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ky nang nhan vien cua ban da duoc nang cap len level 5.");
	        return 1;
		}

		PlayerInfo[playerid][pLaborUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da duoc nang cap Ky nang nhan vien len %i/5. Ban se duoc nhan %i phan tram tien boa khi ban lam viec", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
	}
	else if(!strcmp(params, "spawnhealth", true))
	{
	    if(PlayerInfo[playerid][pSpawnHealth] >= 70 && PlayerInfo[playerid][pVIPPackage] == 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So mau khi spawn cua ban se la (70).");
	    }
	    if(PlayerInfo[playerid][pSpawnHealth] >= 80 && PlayerInfo[playerid][pVIPPackage] == 1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So mau khi spawn cua ban se la (80).");
	    }
	    if(PlayerInfo[playerid][pSpawnHealth] >= 90 && PlayerInfo[playerid][pVIPPackage] == 2)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So mau khi spawn cua ban se la (90).");
	    }
	    if(PlayerInfo[playerid][pSpawnHealth] >= 100 && PlayerInfo[playerid][pVIPPackage] == 2)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So mau khi spawn cua ban se la (100).");
	    }
	    PlayerInfo[playerid][pSpawnHealth] += 5.0;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SendClientMessageEx(playerid, COLOR_GREEN, "Ban da duoc nang cap ky nang Spawn Health. Ban se duoc hoi sinh voi %.1f mau sau khi chet.", PlayerInfo[playerid][pSpawnHealth]);
	}
	else if(!strcmp(params, "spawnarmor", true))
	{
	    if(PlayerInfo[playerid][pSpawnArmor] > 50 && PlayerInfo[playerid][pVIPPackage] == 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So giap khi spawn cua ban se la (50).");
	    }
	    else if(PlayerInfo[playerid][pSpawnArmor] > 65 && PlayerInfo[playerid][pVIPPackage] <= 1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So giap khi spawn cua ban se la (65).");
	    }
	    else if(PlayerInfo[playerid][pSpawnArmor] > 85 && PlayerInfo[playerid][pVIPPackage] == 2)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So giap khi spawn cua ban se la (85).");
	    }
	    else if(PlayerInfo[playerid][pSpawnArmor] > 100 && PlayerInfo[playerid][pVIPPackage] == 2)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "So giap khi spawn cua ban se la (100).");
	    }

	    PlayerInfo[playerid][pSpawnArmor] += 2.5;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SendClientMessageEx(playerid, COLOR_GREEN, "Ban da duoc nang cap ky nang Spawn Armor. Ban se duoc hoi sinh voi %.1f giapd?ng v?i sau khi chet.", PlayerInfo[playerid][pSpawnArmor]);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /nangcap [tuy chon] (%i points available)", PlayerInfo[playerid][pUpgradePoints]);
		SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Inventory, Addict, Trader, Asset, Labor, SpawnHealth, SpawnArmor");
		return 1;
	}

	if(PlayerInfo[playerid][pInventoryUpgrade] == 5 || PlayerInfo[playerid][pAddictUpgrade] == 3 || PlayerInfo[playerid][pTraderUpgrade] == 3 || PlayerInfo[playerid][pAssetUpgrade] == 4 || PlayerInfo[playerid][pLaborUpgrade] == 5 || PlayerInfo[playerid][pSpawnHealth] == 100 || PlayerInfo[playerid][pSpawnArmor] == 100)
	{
	    AwardAchievement(playerid, "Benefits");
	}

	return 1;
}

CMD:quyengop(playerid, params[])
{
	new option[10], param[64];

	if(PlayerInfo[playerid][pLevel] < 5)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "Ban khong the quyen gop cho to chuc tu thien khi ban duoi level 5. /buylevel de len level.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /quyengop [info | health | armor | song]");
	}
	if(!strcmp(option, "info", true))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ To chuc tu thien _______");
		SendClientMessage(playerid, COLOR_GREY3, "Neu ban co it nhat 1.000 SAD trong tay, ban co the quyen gop cho to chuc tu thien.");
		SendClientMessage(playerid, COLOR_GREY3, "Ban co the quyen gop mau va giap cho toan nguoi choi server bang cach '{FFD700}/quyengop health/armor{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "Ban cung co the quyen gop tien de co the phat 1 bai nhac toan the bang cach '{FFD700}/quyengop song{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "Ban cung co the quyen gop tien theo cach truyen thong bang cach '{FFD700}/quyengop [amount]{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "Khi ngan hang cua to chuc quyen gop dat duoc cot moc, so tien do se duoc tra ve cong dong!");
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} %s da quyen gop cho to chuc cho den nay.", FormatNumber(gCharity));
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(PlayerInfo[playerid][pCash] < 150000)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can co it nhat 150.000SAD.");
		}
		if(gCharityHealth)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi chi co the quyen gop giap sau moi lan Paycheck.Hay quay lai sau Paycheck.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 150000;
		gCharityHealth = 1;
		AddToTaxVault(150000);

		SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s da hao phong quyen gop $150,000 de hoi mau cho moi nguoi 150 mau!", GetPlayerRPName(playerid));
		GivePlayerCash(playerid, -150000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(PlayerInfo[playerid][pCash] < 200000)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can toi thieu $200,000 cho tuy chon nay.");
		}
		if(gCharityArmor)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi chi co the quyen gop giap sau moi lan Paycheck.Hay quay lai sau Paycheck.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}
		gCharity += 200000;
		gCharityArmor = 1;
		AddToTaxVault(200000);

		SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s da hao phong quyen gop $200,000 de tang full giap cho toan the nguoi choi!", GetPlayerRPName(playerid));
		GivePlayerCash(playerid, -10000);
	}
  	else if(!strcmp(option, "song", true))
	{
	 	if(isnull(param))
 		{
		 	return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /quyengop [song] [songfolder/name.mp3]");
		}
		if(PlayerInfo[playerid][pCash] < 25000)
		{
  			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can toi thieu $25000 cho tuy chon nay.");
		}
		if(gettime() - gLastMusic < 300)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phat nhac toan the chi co the su dung sau 5 phut 1 lan");
		}

		new
		    url[144];

		format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, param);

		foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
		    {
				PlayAudioStreamForPlayer(i, url);
			}
		}
		gLastMusic = gettime();

		gCharity += 25000;
		AddToTaxVault(25000);

		SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s da hao phong quyen gop $25.000 de phat bai %s cho toan the thanh pho!", GetPlayerRPName(playerid), param);
		GivePlayerCash(playerid, -25000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > PlayerInfo[playerid][pCash])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
		if(amount > 100000)
		{
		    SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s has generously donated %s to charity!", GetPlayerRPName(playerid), FormatNumber(amount));
		}
	}

	return 1;
}

CMD:music(playerid, params[])
{
 	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____________________ List of Music _____________________");
    HTTP(playerid, HTTP_GET, SERVER_FETCH_URL, "", "HTTP_OnMusicFetchResponse");
 	return 1;
}

CMD:stopmusic(playerid, params[])
{
	SendClientMessage(playerid, COLOR_YELLOW, "You have stopped all active audio streams playing for yourself.");
	PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplay(playerid, params[])
{
	new url[144];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gplay [songfolder/name.mp3]");
	}

    format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, params);

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
	    {
			PlayAudioStreamForPlayer(i, url);
			SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of %s.", GetPlayerRPName(playerid), params);
			SendClientMessageEx(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}

	return 1;
}

CMD:gplayurl(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gplayurl [link]");
	}
	if(strfind(params, ".php", true) != -1)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "No .php links allowed!");
	}
    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
	    {
			PlayAudioStreamForPlayer(i, params);
			SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of a custom URL.", GetPlayerRPName(playerid));
			SendClientMessageEx(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}
	return 1;
}

CMD:gstop(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

    foreach(new i: Player)
	{
	    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
	    {
		    StopAudioStreamForPlayer(i);
			SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: %s has stopped all active audio streams.", GetPlayerRPName(playerid));
		}
	}

	return 1;
}

CMD:dm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /dm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap. You can wait until they login or use /oprison.");
	}

	PlayerInfo[targetid][pDMWarnings]++;

	if(PlayerInfo[targetid][pDMWarnings] < 3)
	{
	    new minutes = PlayerInfo[targetid][pDMWarnings] * 30;

	    PlayerInfo[targetid][pJailType] = 2;
    	PlayerInfo[targetid][pJailTime] = PlayerInfo[targetid][pDMWarnings] * (/* This is minutes */15 * 60);
    	PlayerInfo[targetid][pWeaponRestricted] = PlayerInfo[targetid][pDMWarnings] * 4;

		ResetPlayer(targetid);
		ResetPlayerWeapons(targetid);
		SetPlayerInJail(targetid);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by %s, reason: DM (%i/3)", GetPlayerRPName(targetid), minutes, GetPlayerRPName(playerid), PlayerInfo[targetid][pDMWarnings]);
		GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);
		SendClientMessageEx(targetid, COLOR_WHITE, "You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SendClientMessageEx(targetid, COLOR_WHITE, "Your punishment is %i hours of weapon restriction and %i/5 DM warning.", PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: DM (3/3 warnings)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		PlayerInfo[targetid][pDMWarnings] = 0;

		BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (3/3 warnings)");
		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: DM (3/3 warnings)", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", PlayerInfo[targetid][pJailType], PlayerInfo[targetid][pJailTime], PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:cleardm(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pAdminDuty])
	{
	    ClearDeathList(playerid);
	    SendClientMessage(playerid, COLOR_WHITE, "Death messages cleared.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay");
	}

	return 1;
}

CMD:aduty(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty])
	{
	    if(PlayerInfo[playerid][pUndercover][0])
		{
            OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
		}
		SetPlayerSpecialTag(playerid, TAG_ADMIN);

	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);

		SetPlayerHealth(playerid, 32767);
		SetScriptArmour(playerid, 0.0);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd:Admin %s da Onduty.", GetPlayerRPName(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, "Ban da Onduty. Du lieu thong ke se duoc luu den khi ban Offduty");

        PlayerInfo[playerid][pAdminDuty] = 1;
        PlayerInfo[playerid][pTogglePhone] = 1;
        if(strcmp(PlayerInfo[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
		}
	}
	else
	{
		new savecheck = 0;
		SetPlayerSpecialTag(playerid, TAG_NONE);
		if(PlayerInfo[playerid][pPaycheck] > 1)
		{
		    savecheck = PlayerInfo[playerid][pPaycheck];
		}
  		if(PlayerInfo[playerid][pNoDamage])
	    {
	        PlayerInfo[playerid][pNoDamage] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Your god mode was turned off.");
	    }
		ClearDeathList(playerid);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
		PlayerInfo[playerid][pPaycheck] = savecheck;
	}

	return 1;
}

CMD:adminname(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /adminname [name ('none' to reset)]");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The name specified is not supported by the SA-MP client.");
	}

	strcpy(PlayerInfo[playerid][pAdminName], name, MAX_PLAYER_NAME);

	if(PlayerInfo[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, name);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminname = '%e' WHERE uid = %i", name, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s changed their administrator name to %s.", PlayerInfo[playerid][pUsername], name);
	return 1;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /getip [playerid]");
	}
	if(PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[targetid][pAdmin] > 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You cannot use this command on another administrator");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "** %s[%i]'s IP: %s **", GetPlayerRPName(targetid), targetid, GetPlayerIP(targetid));
	return 1;
}

CMD:ogetip(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ogetip [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

CMD:iplookup(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!IsAnIP(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /iplookup [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid, params[])
{
	new username[24], specifiers[] = "%D of %M, %Y @ %k:%i";

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /lastactive [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM users WHERE username = '%e'", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}

CMD:listjailed(playerid, params[])
{
	new type[14];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Jailed Players ______");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJailType] > 0)
	    {
	        switch(PlayerInfo[i][pJailType])
	        {
	            case 1: type = "OOC jailed";
				case 2: type = "OOC prisoned";
				case 3: type = "IC prisoned";
			}

			SendClientMessageEx(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Time: %i seconds", i, GetPlayerRPName(i), type, PlayerInfo[i][pJailTime]);
		}
	}

	return 1;
}

CMD:prisoninfo(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /prisoninfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pJailType] != 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not in OOC prison.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "** %s was prisoned by %s, reason: %s (%i seconds left.) **", GetPlayerRPName(targetid), PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pPrisonReason], PlayerInfo[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /relog [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to relog.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);

	PlayerInfo[targetid][pLogged] = 0;
	CallLocalFunction("OnPlayerRequestClass", "ii", targetid, 0);
	return 1;
}

CMD:setint(playerid, params[])
{
    new targetid, interiorid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setint [playerid] [int]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!(0 <= interiorid <= 19))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid interior. Valid interiors range from 0 to 19.");
	}

	SetPlayerInterior(targetid, interiorid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's interior set to ID %i.", GetPlayerRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid, params[])
{
    new targetid, worldid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setvw [playerid] [vw]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's virtual world set to ID %i.", GetPlayerRPName(targetid), worldid);
	return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setskin [playerid] [skinid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid skin specified.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player has a higher admin level than you. You can't change their skin.");
	}

	SetScriptSkin(targetid, skinid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's skin set to ID %i.", GetPlayerRPName(targetid), skinid);
	return 1;
}

CMD:revive(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /revive [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is not injured.");
	}

	PlayerInfo[targetid][pInjured] = 0;

	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);

	SendClientMessage(targetid, COLOR_YELLOW, "You have been revived by an admin!");
	if(PlayerInfo[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SendClientMessageEx(PlayerInfo[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetPlayerRPName(targetid));
	    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has revived %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:heject(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /heject [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pHospital])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is not in hospital.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s ejected %s from the hospital.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	PlayerInfo[targetid][pHospitalTime] = 1;
	SendClientMessage(targetid, COLOR_YELLOW, "You have been ejected from hospital by an admin!");
	return 1;
}

CMD:gotoco(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "SU DUNG: /gotoco [x] [y] [z] [interior]");

		SendClientMessageEx(playerid, -1, "Ban da duoc dich chuyen den vi tri yeu cau.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:tp(playerid, params[])
{
	return callcmd::goto(playerid, params);
}
CMD:goto(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(PlayerInfo[targetid][pToggleTP] == 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Target id has togged teleports");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /goto [playerid/location]");
 		SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: RC, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Airport, Bank");
 		SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Dealership, VIP, Paintball, DMV, Casino, Spawn, Allsaints, Casino, gang1");
		return 1;
	}

	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Los Santos.");
    }
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to San Fierro.");
    }
    else if(!strcmp(params, "rc", true))
    {
		TeleportToCoords(playerid, 1352.0797, 249.7776, 19.5547, 71.6175, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to San Fierro.");
    }
    else if(!strcmp(params, "gang1", true))
    {
		TeleportToCoords(playerid, 1670.6908, 843.6107, -1468.7449, -18.5417, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to gang1.");
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Las Venturas.");
    }
    else if(!strcmp(params, "grove", true))
    {
		TeleportToCoords(playerid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Grove Street.");
    }
    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Idlewood.");
    }
    else if(!strcmp(params, "unity", true))
    {
		TeleportToCoords(playerid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Unity Station.");
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Jefferson Motel.");
    }
    else if(!strcmp(params, "market", true))
    {
		TeleportToCoords(playerid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Market.");
    }
    else if(!strcmp(params, "airport", true))
    {
		TeleportToCoords(playerid, 1938.7185, -2370.6375, 13.5469, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to LS airport.");
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid, 1373.4476,-1088.8151,25.1101,266.7254, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Temple bank.");
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Grotti dealership.");
    }
    else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1024.2438, -1553.4551, 13.5691, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to VIP lounge.");
	}
	else if(!strcmp(params, "paintball", true))
    {
        TeleportToCoords(playerid, 1310.1538, -1366.9827, 13.5144, 315.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Paintball.");
	}
	else if(!strcmp(params, "dmv", true))
    {
        TeleportToCoords(playerid, 1224.1537, -1824.5253, 13.5900, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to DMV.");
	}
	else if(!strcmp(params, "casino", true))
    {
        TeleportToCoords(playerid, 1022.5992, -1122.8069, 23.8710, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Casino.");
	}
	else if(!strcmp(params, "spawn", true))
	{
	    TeleportToCoords(playerid, 1723.4384, -1380.0234, 13.5469, 270.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to Spawn.");
	}
	else if(!strcmp(params, "allsaints", true))
	{
	    TeleportToCoords(playerid, 1189.5807, -1301.7474, 13.5584, 180.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to Allsaints.");
	}
	else if(!strcmp(params, "county", true))
	{
	    TeleportToCoords(playerid, 1999.4670, -1448.2010, 13.5601, 315.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to County.");
	}
	else
	{
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(!IsPlayerSpawned(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(playerid, targetid);
		SendClientMessageEx(playerid, COLOR_GREY2, "Teleported to %s's position.", GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:tphere(playerid, params[]){
	return callcmd::gethere(playerid, params);
}
CMD:gethere(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gethere [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is either not spawned, or spectating.");
	}
    if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is currently in the paintball arena.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't teleport an admin who has a higher admin level than you.");
	}
	/*if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is currently in the event.");
	}*/

	TeleportToPlayer(targetid, playerid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported %s to your position.", GetPlayerRPName(targetid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotocar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicle specified.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported to vehicle ID %i.", vehicleid);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid, driverid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /getcar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicle specified.");
	}
    if((driverid = GetVehicleDriver(vehicleid)) != INVALID_PLAYER_ID && PlayerInfo[driverid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't teleport the vehicle of an admin who has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported vehicle ID %i to your position.", vehicleid);
	return 1;
}

CMD:gotocoords(playerid, params[])
{
	new Float:x, Float:y, Float:z, interiorid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotocoords [x] [y] [z] [int (optional)]");
	}

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interiorid);
	return 1;
}

CMD:gotoint(playerid, params[])
{
	static list[4096];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Choose an interior to teleport to.", list, "Select", "Cancel");
	return 1;
}

CMD:jetpack(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

    PlayerInfo[playerid][pJetpack] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(playerid, "~g~Jetpack", 3000, 3);

	switch(random(4))
	{
	    case 0: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: The jetpack is part of an experiment conducted at the Area 69 facility.");
	    case 1: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: You stole this from Area 69 in that one single player mission. Remember?");
	    case 2: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: You probably don't need this anyway. All you admins seem to do is airbreak around the map.");
	    case 3: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: You probably aren't reading this anyway. Fuck you.");
	}

	return 1;
}


CMD:sendto(playerid, params[])
{
	new targetid, option[12], param[32];

    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sendto [playerid] [location]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Player, Vehicle, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Bank");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Dealership, VIP, Paintball, DMV, Casino");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This player is in jail so you can't teleport them.");
	}
	if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is currently in the paintball arena.");
	}
	if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is currently in the event.");
	}
	if(PlayerInfo[playerid][pAdmin] < 2 && isnull(PlayerInfo[targetid][pHelpRequest]) && PlayerInfo[playerid][pAcceptedHelp] == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player hasn't Chap nhanted a help request. Therefore you can't teleport them.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't teleport an admin who has a higher admin level than you.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Los Santos.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Los Santos.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to San Fierro.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to San Fierro.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Las Venturas.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Las Venturas.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "grove", true))
    {
		TeleportToCoords(targetid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Grove Street.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Grove Street.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Idlewood.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Idlewood.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "unity", true))
    {
		TeleportToCoords(targetid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Unity Station.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Unity Station.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Jefferson Motel.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Jefferson Motel.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Market.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Market.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1373.4476,-1088.8151,25.1101,266.7254, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the Bank.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the Bank.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Grotti car dealership.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Grotti car dealership.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1024.2438, -1553.4551, 13.5691, 90.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the VIP lounge.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the VIP lounge.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "paintball", true))
    {
        TeleportToCoords(targetid, 1310.1538, -1366.9827, 13.5144, 315.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Paintball.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Paintball.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid, 1224.1537, -1824.5253, 13.5900, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the DMV.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the DMV.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, 1022.5992, -1122.8069, 23.8710, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Casino.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Casino.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sendto [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The target specified is disconnected.");
		}
		if(!IsPlayerSpawned(sendtargetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The target specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(targetid, sendtargetid);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to %s's location.", GetPlayerRPName(targetid), GetPlayerRPName(sendtargetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to %s's location.", GetPlayerRPName(playerid), GetPlayerRPName(sendtargetid));
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sendto [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicle specified.");
		}

		TeleportToVehicle(targetid, vehicleid);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to vehicle ID %i.", GetPlayerRPName(targetid), vehicleid);
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to vehicle ID %i.", GetPlayerRPName(playerid), vehicleid);
	}

	return 1;
}

CMD:listen(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!PlayerInfo[playerid][pListen])
	{
		PlayerInfo[playerid][pListen] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "You are now listening to all IC & local OOC chats.");
	}
	else
	{
		PlayerInfo[playerid][pListen] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "You are no longer listening to IC & local OOC chats.");
	}

	return 1;
}

CMD:jail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /jail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap. You can wait until they login or use /ojail.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerInfo[targetid][pJailType] = 1;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes by %s, reason: %s", GetPlayerRPName(targetid), minutes, GetPlayerRPName(playerid), reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been admin jailed for %i minutes by %s.", minutes, GetPlayerRPName(playerid));
    return 1;
}

CMD:rwarn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rwarn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pReportMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is muted from reports.");
	}

	PlayerInfo[targetid][pReportWarns]++;

	SendClientMessageEx(targetid, COLOR_LIGHTRED, "** %s issued you a report warning, reason: %s (%i/3)", GetPlayerRPName(playerid), reason, PlayerInfo[targetid][pReportWarns]);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was given a report warning by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);

	if(PlayerInfo[targetid][pReportWarns] >= 3)
	{
	    PlayerInfo[targetid][pReportMuted] = 12;
	    SendClientMessage(targetid, COLOR_LIGHTRED, "** You have been muted from reports for 12 playing hours.");
	}

	return 1;
}

CMD:runmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /runmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pReportMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified is not muted from reports.");
	}

	PlayerInfo[targetid][pReportWarns] = 0;
	PlayerInfo[targetid][pReportMuted] = 0;

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from reports by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	SendClientMessageEx(targetid, COLOR_YELLOW, "Your report mute has been lifted by %s. Your report warnings were reset.", GetPlayerRPName(playerid));
	return 1;
}

CMD:nmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /nmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	if(!PlayerInfo[targetid][pNewbieMuted])
	{
	    PlayerInfo[targetid][pNewbieMuted] = 1;
		PlayerInfo[targetid][pNewbieMuteTime] = gettime() + 14400;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from newbie chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from newbie chat by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pNewbieMuted] = 0;
		PlayerInfo[targetid][pNewbieMuteTime] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from newbie chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from newbie chat by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:hmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /hmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	if(!PlayerInfo[targetid][pHelpMuted])
	{
	    PlayerInfo[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from help requests by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from help requests by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from help requests by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from help requests by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:admute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /admute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	if(!PlayerInfo[targetid][pAdMuted])
	{
	    PlayerInfo[targetid][pAdMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from advertisements by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from advertisements by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from advertisements by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from advertisements by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:gmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	if(!PlayerInfo[targetid][pGlobalMuted])
	{
	    PlayerInfo[targetid][pGlobalMuted] = 1;
	    PlayerInfo[targetid][pGlobalMuteTime] = gettime() + 14400;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from global chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from global chat by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pGlobalMuted] = 0;
	    PlayerInfo[targetid][pGlobalMuteTime] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from global chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from global chat by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:rmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	if(!PlayerInfo[targetid][pReportMuted])
	{
	    PlayerInfo[targetid][pReportMuted] = 99999;
        PlayerInfo[targetid][pReportMuteTime] = gettime() + 14400;

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from Chap nhanting reports by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from Chap nhanting reports by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pReportMuted] = 0;
		PlayerInfo[targetid][pReportMuteTime] = 0;

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from Chap nhanting reports by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from Chap nhanting reports by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:freeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /freeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	TogglePlayerControllable(targetid, 0);
	PlayerInfo[playerid][pAdminFrozen] = 1;
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was frozen by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /unfreeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	if(PlayerInfo[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		PlayerInfo[targetid][pTazedTime] = 0;
	}

	PlayerInfo[targetid][pTied] = 0;
	PlayerInfo[playerid][pAdminFrozen] = 0;
	TogglePlayerControllable(targetid, 1);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was unfrozen by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	return 1;
}

CMD:skiptut(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /skiptut [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pTutorial])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player isn't currently watching the tutorial.");
	}

	SendClientMessageEx(targetid, COLOR_WHITE, "%s has forced you out of the tutorial.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s forced %s out of the tutorial.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	KillTimer(PlayerInfo[targetid][pTutorialTimer]);
	TutorialTimer(targetid, 11);
	return 1;
}
//viet hoa hoang vh
CMD:listguns(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /listguns [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ %s's Weapons _______", GetPlayerRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
		{

			if(!PlayerHasWeapon(targetid, weapon, true)) {
		        SendClientMessageEx(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SendClientMessageEx(playerid, COLOR_GREY2, "-> %s", GetWeaponNameEx(weapon));
			}
		}
	}

	return 1;
}

CMD:disarm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /disarm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

 	ResetPlayerWeaponsEx(targetid);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has disarmed %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:nrn(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /nrn [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
/*	if(PlayerInfo[targetid][pLevel] > 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is level 3 or above and doesn't need a free namechange.");
	} */
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}

	ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Mot administrator da canh bao rang ten cua ban bi vi pham Non-RP.\nvi vay, ban se duoc nhan 1 vi doi ten mien phi de thay doi ten cua ban.\n\nNhap ten cua ban theo mau Ho_Ten trong dialog duoi day:", "Chap nhan", "");
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to change their name for being Non-RP.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}


CMD:odm(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /odm [username]");
	}
    if(IsPlayerOnline(name))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is already online and logged in. Use /dm instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, ip, adminlevel, dmwarnings FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineDM", "is", playerid, name);
	return 1;
}

CMD:prison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /prison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerInfo[targetid][pJailType] = 2;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

	ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);

	SetPlayerInJail(targetid);
	GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", GetPlayerNameEx(playerid), reason, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(PlayerInfo[targetid][pPrisonReason], reason, 128);

	Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by %s, reason: %s", GetPlayerRPName(targetid), minutes, GetPlayerRPName(playerid), reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by %s.", minutes, GetPlayerRPName(playerid));
    return 1;
}

CMD:oprison(playerid, params[])
{
	new username[MAX_PLAYERS], minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /oprison [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The amount of minutes cannot be below one. /unjail to release a player.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is already online and logged in. Use /prison instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
    new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /release [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is not jailed.");
	}

	PlayerInfo[targetid][pJailTime] = 1;
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was released from jail/prison by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	return 1;
}

CMD:fine(playerid, params[])
{
	new targetid, amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /fine [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be fined.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was fined %s by %s, reason: %s", GetPlayerRPName(targetid), FormatNumber(amount), GetPlayerRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new targetid, percent, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /pfine [playerid] [percent] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The percentage value must be between 1 and 100.");
	}

	new amount = ((PlayerInfo[targetid][pCash] + PlayerInfo[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was fined %s by %s, reason: %s", GetPlayerRPName(targetid), FormatNumber(amount), GetPlayerRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i (%i percent), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, percent, reason);
	return 1;
}

CMD:ofine(playerid, params[])
{
	new username[MAX_PLAYERS], amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ofine [username] [amount] [reason]");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid amount.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is already online and logged in. Use /fine instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sethp [playerid] [amount]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(amount < 1.0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't do this to an admin with a higher level than you.");
	}

	SetPlayerHealth(targetid, amount);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	SetScriptArmour(targetid, amount);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:refillcars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	foreach(new i: Vehicle)
	{
 		vehicleFuel[i] = 100;
	}

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s refilled all vehicles to maximum fuel.", GetPlayerRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /refilldrug [seeds | cocaine | ephedrine]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command refills the specified drug stock to maximum value.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has refilled the seeds in the drug den.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    gCocaineStock = 500;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has refilled the cocaine in the crack house.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has refilled the ephedrine in the drug den.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:togooc(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SendClientMessageToAllEx(COLOR_WHITE, "(( Administrator %s enabled the OOC channel. ))", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SendClientMessageToAllEx(COLOR_WHITE, "(( Administrator %s disabled the OOC channel. ))", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:tognewbie(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SendClientMessageToAllEx(COLOR_NEWBIE, "** Administrator %s enabled the newbie channel.", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SendClientMessageToAllEx(COLOR_NEWBIE, "** Administrator %s disabled the newbie channel.", GetPlayerRPName(playerid));
	}
	return 1;
}
CMD:god(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pAdminDuty])
	{
		if(!PlayerInfo[playerid][pNoDamage])
		{
			PlayerInfo[playerid][pNoDamage] = 1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "You are now in GODMODE, you will no longer take damage from ANYTHING.");
		}
		else
		{
		    PlayerInfo[playerid][pNoDamage] = 0;
		    SendClientMessage(playerid, COLOR_LIGHTRED, "You've turned off GODMODE, you will now take damage normally.");
		}
	    return 1;
	}
	return 0;
}

CMD:togglobal(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SendClientMessageToAllEx(COLOR_GLOBAL, "(( Administrator %s enabled the global channel. ))", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SendClientMessageToAllEx(COLOR_GLOBAL, "(( Administrator %s disabled the global channel. ))", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has enabled the report channel.", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has disabled the report channel.", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /listpvehs [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehicles", "ii", playerid, targetid);
	return 1;
}

CMD:removepveh(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removepveh [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehiclesForRemoval", "ii", playerid, targetid);
	return 1;
}

CMD:despawnpveh(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /despawnpveh [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The vehicle specified is invalid or not owned by any player.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "You have despawned %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid, params[])
{
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /veh [modelid/name] [color1 (optional)] [color2 (optional)]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicle model.");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid color. Valid colors range from -1 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cannot spawn vehicle. The vehicle pool is currently full.");
	}

	ResetVehicleObjects(vehicleid);

	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	PutPlayerInVehicle(playerid, vehicleid, 0);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s spawned a %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_WHITE, "%s (ID %i) spawned. Use '/savevehicle %i' to save this vehicle to the database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid, params[])
{
	new vehicleid, gangid, type, delay, vip, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "iiiiI(0)", vehicleid, gangid, type, delay, vip))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /savevehicle [vehicleid] [gangid (-1 = none)] [faction type] [respawn delay (seconds)] [vip level (optional)]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Army");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The vehicle specified is either invalid or not an admin spawned vehicle.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
	}
	if(!(0 <= type <= 7))
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type.");
	}
	if(!(0 <= vip <= 3))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type.");
	}

    SendClientMessageEx(playerid, COLOR_WHITE, "%s saved. This vehicle will now spawn here from now on.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, gangid, factiontype, vippackage, respawndelay, interior, world) VALUES(%i, '%f', '%f', '%f', '%f', %i, %i, %i, %i, %i, %i, %i, %i)",
		GetVehicleModel(vehicleid), x, y, z, a, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, vip, delay, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:editvehicle(playerid, params[])
{
	new vehicleid, option[14], param[32], value;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Spawn, Price, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Gang, Faction, Job, VIP, Respawndelay, Siren, Rank");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The vehicle specified is invalid or a static vehicle.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    /*if(VehicleInfo[vehicleid][vFactionType] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't set the spawn of a faction vehicle indoors.");
	    }*/

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have moved the spawn point for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "price", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [price] [value]");
		}

		VehicleInfo[vehicleid][vPrice] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET price = %i WHERE id = %i", VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da dieu chinh gia cua %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [tickets] [value]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the tickets of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Faction vehicles can't be locked.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the locked state of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [plate] [text]");
		}

		strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ResyncVehicle(vehicleid);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the license plate of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
		SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle will need to be respawned for changes to take effect.");
	}
    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [color] [color 1] [color 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The colors must range from 0 to 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the colors of %s (ID %i) to %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The paintjob must range from -1 to 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't change the paintjob on a faction vehicle.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the paintjob of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [neon] [color]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "List of colors: None, Red, Blue, Green, Yellow, Pink, White");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "red", true)) {
			SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "blue", true)) {
			SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "green", true)) {
			SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "yellow", true)) {
			SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "white", true)) {
			SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid color.");
		}

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the trunk of %s's %s (ID %i) to level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [health] [amount]");
		}
		if(!(300.0 <= amount <= 10000.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The health value must range from 300.0 to 10000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the health of %s (ID %i) to %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have reset the gang for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the gang of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(0 <= type <= 6))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've reset the faction type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've set the faction type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [job] [type]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (-1) None (0) Pizzaman (1) Courier");
			return 1;
		}
		if(!(-1 <= value <= 12))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid job.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've reset the job type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've set the job type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
	else if(!strcmp(option, "vip", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [vip] [level (0-3)]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid level.");
		}

		VehicleInfo[vehicleid][vVIP] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET vippackage = %i WHERE id = %i", VehicleInfo[vehicleid][vVIP], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == 0)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've reset the VIP restriction for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've set the VIP restriction of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetVIPRank(value), value);
	}
    else if(!strcmp(option, "respawndelay", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [respawndelay] [seconds (-1 = none)]");
		}

	    VehicleInfo[vehicleid][vRespawnDelay] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET respawndelay = %i WHERE id = %i", VehicleInfo[vehicleid][vRespawnDelay], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the respawn delay of %s (ID %i) to %i seconds.", GetVehicleName(vehicleid), vehicleid, value);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "siren", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] == FACTION_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option can only be adjusted on faction vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [siren] [1/0]");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET siren = %i WHERE id = %i", value, id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have set the siren of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "rank", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editvehicle [vehicleid] [rank] [rank(0-12)]");
		}
		if(!(0 <= value <= 12))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid rank.");
		}

		VehicleInfo[vehicleid][vRank] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET rank = %i WHERE id = %i", VehicleInfo[vehicleid][vRank], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == 0)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've reset the rank restriction for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You've set the rank restriction of %s (ID %i) to %i (%i).", GetVehicleName(vehicleid), vehicleid, VehicleInfo[vehicleid][vRank], value);
	}

	return 1;
}

CMD:removevehicle(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The vehicle specified is invalid or a static vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:vehicleinfo(playerid, params[])
{
	new vehicleid, neon[12], gang[32], Float:health;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vehicleinfo [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The vehicle specified is invalid or a static vehicle.");
	}

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	if(VehicleInfo[vehicleid][vGang] >= 0)
	{
		strcat(gang, GangInfo[VehicleInfo[vehicleid][vGang]][gName]);
	}
	else
	{
	    gang = "None";
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ %s Stats _______", GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Owner: %s - Value: %s - Tickets: %s - License Plate: %s", VehicleInfo[vehicleid][vOwner], FormatNumber(VehicleInfo[vehicleid][vPrice]), FormatNumber(VehicleInfo[vehicleid][vTickets]), VehicleInfo[vehicleid][vPlate]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Neon: %s - Trunk Level: %i/3 - Alarm Level: %i/3 - Health: %.1f - Fuel: %i/100", neon, VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vAlarm], health, vehicleFuel[vehicleid]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Gang: %s - Faction: %s - Rank: %i - Job Type: %s - Respawn Delay: %i seconds", gang, factionTypes[VehicleInfo[vehicleid][vFactionType]], VehicleInfo[vehicleid][vRank], GetJobName(VehicleInfo[vehicleid][vJob]), VehicleInfo[vehicleid][vRespawnDelay]);
	return 1;
}

CMD:aclearwanted(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /aclearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player has no active charges to clear.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_WHITE, "Your crimes were cleared by %s.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has cleared %s's crimes and wanted level.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:removedm(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removedm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pDMWarnings] && !PlayerInfo[targetid][pWeaponRestricted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player hasn't been punished for DM recently.");
	}

	PlayerInfo[targetid][pDMWarnings]--;
	PlayerInfo[targetid][pWeaponRestricted] = 0;

	if(PlayerInfo[targetid][pJailType] == 2)
	{
	    PlayerInfo[targetid][pJailType] = 0;
		PlayerInfo[targetid][pJailTime] = 0;

		SetPlayerPos(targetid, 1544.4407, -1675.5522, 13.5584);
		SetPlayerFacingAngle(targetid, 90.0000);
		SetPlayerInterior(targetid, 0);
		SetPlayerVirtualWorld(targetid, 0);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SendClientMessageEx(targetid, COLOR_AQUA, "** Your DM punishment has been reversed by %s.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reversed %s's DM punishment.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Admin vehicle destroyed.");
	}

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(adminVehicle{i})
	    {
	        if(IsValidDynamicObject(vehicleSiren[i]))
			{
			    DestroyDynamicObject(vehicleSiren[i]);
			    vehicleSiren[i] = INVALID_OBJECT_ID;
			}

	        DestroyVehicleEx(i);
	        adminVehicle{i} = false;
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s destroyed all admin spawned vehicles.", GetPlayerRPName(playerid));
	return 1;
}

CMD:respawncars(playerid, params[])
{
	new option[10], param[12];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /respawncars [job | faction | nearby | all]");
	}
	/*
	if(!strcmp(option, "job", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if((pizzaVehicles[0] <= i <= pizzaVehicles[5]) || (courierVehicles[0] <= i <= courierVehicles[6]) || (taxiVehicles[0] <= i <= taxiVehicles[3]) || (garbageVehicles[0] <= i <= garbageVehicles[5]) || (VehicleInfo[i][vJob] != JOB_NONE))
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied job vehicles.", GetPlayerRPName(playerid));
	}*/
	if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /respawncars [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(1 <= type <= 5))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid faction type.");
		}

		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied {F7A763}%s{FF6347} vehicles.", GetPlayerRPName(playerid), factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles in %s.", GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:broadcast(playerid, params[])
{
	new style, text[128];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid style.");
	}
	if(style == 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Style 2 only disappears after death and is therefore disabled.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't fix a vehicle if you're not sitting in one.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_LIGHTRED, "Vehicle fixed.");
	return 1;
}

CMD:clearchat(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	foreach(new i : Player)
	{
	    ClearChat(i);
	}

	return 1;
}

CMD:healrange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The radius can't be below 1.0 or above 50.0.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);

			    if(GetPlayerArmourEx(i) < 100.0)
			    {
				    SetScriptArmour(i, 100.0);
				}
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has healed everyone nearby.");
		}
	}

	return 1;
}

CMD:freezerange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /freezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, false);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has frozen everyone nearby.");
		}
	}

	return 1;
}

CMD:unfreezerange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /unfreezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, true);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has unfrozen everyone nearby.");
		}
	}

	return 1;
}

CMD:reviverange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /reviverange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius) && PlayerInfo[i][pInjured])
		{
			PlayerInfo[i][pInjured] = 0;
			if(PlayerInfo[i][pAcceptedEMS] != INVALID_PLAYER_ID)
			{
			    SendClientMessageEx(PlayerInfo[i][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetPlayerRPName(i));
			    PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
			}

			SetPlayerHealth(i, 100.0);
			ClearAnimations(i, 1);

		    SendClientMessage(i, COLOR_WHITE, "An admin has revived everyone nearby.");
		}
	}

	return 1;
}

CMD:shots(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /shots [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM shots WHERE playerid = %i ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListShots", "ii", playerid, targetid);
	return 1;
}

CMD:damages(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pLevel] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /damages [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, playerid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListDamages", "ii", playerid, targetid);
	return 1;
}

CMD:kills(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /kills [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 20", PlayerInfo[targetid][pID], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	gLastAd = 0;
	SendClientMessage(playerid, COLOR_LIGHTRED, "Advertisement timer reset.");
	return 1;
}


CMD:setname(playerid, params[])
{
	new targetid, name[24];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setname [playerid] [name]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
 	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}
	if(PlayerInfo[targetid][pAdminDuty] && strcmp(PlayerInfo[targetid][pAdminName], "None", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't change the name of a player on admin duty. They're using their admin name.");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The name specified is not supported by the SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

CMD:explode(playerid, params[])
{
	new targetid, damage;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /explode [playerid] [damage(amount)]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 6, 20.0);
    DamagePlayer(targetid, damage, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	SendClientMessageEx(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetPlayerRPName(targetid));
	return 1;
}

CMD:event(playerid, params[])
{
	new option[10], param[128];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules");
		SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SendClientMessage(playerid, COLOR_AQUA, "You have set the spawn point for {FF0000}Red{33CCFF} team.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SendClientMessage(playerid, COLOR_AQUA, "You have set the spawn point for {0000FF}Blue{33CCFF} team.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessage(playerid, COLOR_AQUA, "You have set the event spawn point.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [type] [1=DM 2=TDM 3=Race 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type.");
	    }
	    /*if(EventInfo[eReady])
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The type can only be adjusted during event setup.");
		}*/

		EventInfo[eType] = type;

	    switch(type)
	    {
	        case 1:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Deathmatch{33CCFF}.");
	        }
	        case 2:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Team Deathmatch{33CCFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SendClientMessage(playerid, COLOR_LIGHTRED, "** Red Team position not set. '/event position red' to set position.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SendClientMessage(playerid, COLOR_LIGHTRED, "** Blue Team position not set. '/event position blue' to set position.");
	        }
            case 3:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Race{33CCFF}. /veh to spawn the vehicles.");
	        }
	        case 4:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Other{33CCFF}.");
	        }
		}
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [health] [amount]");
		}

	    EventInfo[eHealth] = amount;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the event health to %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [armor] [amount]");
		}

	    EventInfo[eArmor] = amount;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the event armor to %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [jointext] [text]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SendClientMessageEx(playerid, COLOR_AQUA, "You set the join text to '%s'.", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid slot.");
	    }
	    if(!(0 <= weaponid <= 46))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid weapon.");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the weapon in slot %i to %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [skin] [red/blue] [skinid]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid skin ID.");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SendClientMessageEx(playerid, COLOR_AQUA, "You set the skin for {FF0000}Red{33CCFF} team to %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SendClientMessageEx(playerid, COLOR_AQUA, "You set the skin for {0000FF}Blue{33CCFF} team to %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [skin] [skinid (0 = reset)]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid skin ID.");
			}

			EventInfo[eSkin][0] = skinid;
   			SendClientMessageEx(playerid, COLOR_AQUA, "You set the event skin to %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can only set rules for DM & TDM events.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} crackshooting in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} crackshooting in the event.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} quickswapping in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} quickswapping in the event.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} healing in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} healing in the event.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "Xac nhan", true) != 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /event [ready] [confirm]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "This command will announce to the whole server that an event is ready to join.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "The event is already marked as ready.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no spawn point set for red team.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no spawn point set for blue team.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no skin set for red team.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no skin set for blue team.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "The event type has not been set.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "The spawn point has not been set.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a DM event, use /thamgiasukien to join!", GetPlayerRPName(playerid));
	    	case 2: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a TDM event, use /thamgiasukien to join!", GetPlayerRPName(playerid));
	    	case 3: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a Race event, use /thamgiasukien to join!", GetPlayerRPName(playerid));
	    	case 4: SendClientMessageToAllEx(COLOR_AQUA, "%s has started an event, use /thamgiasukien to join!", GetPlayerRPName(playerid));
	    }

	    SendClientMessage(playerid, COLOR_WHITE, "Use '/event lock' to lock the event and '/event start' to start.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no event ready. Please set one up first.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SendClientMessageToAllEx(COLOR_AQUA, "The event has been locked by %s.", GetPlayerRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SendClientMessageToAllEx(COLOR_AQUA, "The event was unlocked by %s.", GetPlayerRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "The event has already started.");
	    }

	    foreach(new i : Player)
		{
	        if(PlayerInfo[i][pJoinedEvent])
				SendClientMessage(i, COLOR_AQUA, "The event has started. Good luck!");
			else
			    SendClientMessage(i, COLOR_AQUA, "The event has started. Better luck Tiep time!");
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no event ready. Please set one up first.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SendClientMessage(playerid, COLOR_AQUA, "You have initiated a countdown for all players in the event.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "The event currently active is not a TDM event.");
		}

		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pJoinedEvent])
		    {
				PlayerInfo[i][pEventTeam] = teamid;

				SetTimerEx("teamBalance", 300+random(500), false, "ii", playerid, teamid);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(PlayerInfo[i][pEventTeam] == RED_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~r~Red Team", 3000, 4);
				} else if(PlayerInfo[i][pEventTeam] == BLUE_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~b~Blue Team", 3000, 6);
				}

				SendClientMessageEx(i, COLOR_AQUA, "%s has balanced the teams. You are now in %s{33CCFF} team.", GetPlayerRPName(playerid), (PlayerInfo[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SendClientMessage(playerid, COLOR_AQUA, "You have balanced the event teams.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no event ready. Please set one up first.");
	    }

	    ResetEvent();
	    SendClientMessageToAllEx(COLOR_AQUA, "The event was ended by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid, params[])
{
	new username[MAX_PLAYERS], reason[128], targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /oban [username] [reason]");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be kicked.");
	}
    if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is already online and logged in. Use /ban instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:thamgiasukien(playerid, params[])
{
	if(PlayerInfo[playerid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are in jail and therefore cannot participate in an event.");
	}
	if(PlayerInfo[playerid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You already joined the event. /thoatsukien to leave.");
	}
	if(!EventInfo[eReady])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There are no events you can join at the moment.");
	}
	if(EventInfo[eLocked])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The event is locked. Better luck Tiep time!");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't join the event while you are playing paintball.");
	}
	if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't join the event while you are in a duel.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pAcceptedHelp] || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't join the event at the moment.");
	}
    if((PlayerInfo[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You are restricted from weapons and therefore can't join this type of event.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:thoatsukien(playerid, params[])
{
    if(!PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pHunted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in an event which you can quit.");
	}

 	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s has left the event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /permaban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be banned.");
	}

    Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was permanently banned by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	new string[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 3 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /baninfo [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%e' OR ip = '%e'", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 3 && !PlayerInfo[playerid][pBanAppealer] && !PlayerInfo[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, users b WHERE a.uid = b.uid AND b.username = '%e' ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:unban(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /unban [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new string[25];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!IsAnIP(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /unbanip [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = '%s'", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	UnBlockIpAddress(params);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has unbanned IP '%s'.", GetPlayerRPName(playerid), params);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[16], reason[128], targetid;

    if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /banip [ip address] [reason (optional)]");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(!IsAnIP(ip))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid IP address.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = '%s'", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:lockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /lockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked, adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unlockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /unlockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sprison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sprison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerInfo[targetid][pJailType] = 2;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
    ResetPlayer(targetid);
    SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) silently prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by an Admin, reason: %s", GetPlayerRPName(targetid), minutes, reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by an admin.", minutes);
    return 1;
}

CMD:sethpall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sethpall [amount]");
	}
	if(amount < 1.0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Health can't be under 1.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetPlayerHealth(i, amount);
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s set everyone's health to %.1f.", GetPlayerRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setarmorall [amount]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetScriptArmour(i, amount);
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s set everyone's armor to %.1f.", GetPlayerRPName(playerid), amount);
	return 1;
}
CMD:fwsall(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(sscanf(params, "s", "Xac nhan"))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /fwsall [confirm]");
			return 1;
		}
		foreach(new targetid : Player)
		{
		    if(!PlayerInfo[playerid][pLogged])
		        continue;

			GivePlayerWeaponEx(targetid, 12);
			GivePlayerWeaponEx(targetid, 24);
			GivePlayerWeaponEx(targetid, 25);
			GivePlayerWeaponEx(targetid, 27);
			GivePlayerWeaponEx(targetid, 31);
			GivePlayerWeaponEx(targetid, 34);
			SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from %s.", GetPlayerRPName(playerid));
		}
		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s gave a full weapon set to everyone.", GetPlayerRPName(playerid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	return 1;
}
CMD:fws(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /fws [playerid]");
			return 1;
		}
		GivePlayerWeaponEx(targetid, 12);
		GivePlayerWeaponEx(targetid, 24);
		GivePlayerWeaponEx(targetid, 25);
		GivePlayerWeaponEx(targetid, 27);
		GivePlayerWeaponEx(targetid, 31);
		GivePlayerWeaponEx(targetid, 34);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s gave a full weapon set to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from %s.", GetPlayerRPName(playerid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	return 1;
}


CMD:healup(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 1)
	{
		 return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not {D909D9}Silver VIP.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1811.1191, -1294.0303, 1131.7552))
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in the {D909D9}Silver VIP{afafaf} Lounge");
	}
	SetScriptArmour(playerid, 100);
	SetPlayerHealth(playerid, 100);
	return 1;
}
CMD:getboombox(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not {D909D9}Supreme VIP.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1814.8076, -1297.4489, 1131.7552))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}Supreme VIP{Afafaf} Lounge.");
	}
    if(!strcmp(params, "Xac nhan", true))
	{
		PlayerInfo[playerid][pBoombox] = 1;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have earned a free {D909D9}Supreme VIP{FFFFFF} boombox.");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:placegiftbox(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "You must be on foot to use this command.");
			return 1;
		}

		new Float:Position[4];
		if(mysteryegg == 0)
		{
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			mysteryegg = CreateDynamicObject(19056, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
			mysteryegg3DText = CreateDynamic3DTextLabel("Gift Box\n{FF0000}/claimgift{FFFFFF}\nTo get your gift ",COLOR_WHITE,Position[0], Position[1], Position[2]+0.25,8.0);
			SetPlayerPos(playerid, Position[0], Position[1], Position[2]+3);
			SendAdminMessage(COLOR_YELLOW, "ADMWarn: %s has placed the Gift Box.", GetPlayerRPName(playerid));
			SendClientMessageToAllEx(COLOR_AQUA, "{FFFF00}GiftBox:{33CCFF} Management %s has placed the giftbox. Staff will give hints where to find it", GetPlayerRPName(playerid));
		}
		else
		{
			DestroyDynamicObject(mysteryegg);
			mysteryegg = 0;
			DestroyDynamic3DTextLabel( Text3D:mysteryegg3DText );
			SendAdminMessage(COLOR_YELLOW, "ADMWARN: %s has destroyed the Gift Box.", GetPlayerRPName(playerid));
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	return 1;
}

CMD:giftall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 8)
	{
    	if(GiftAllowed)
     	{
      		SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just sent a Gift to all players.", GetPlayerNameEx(playerid));
			GiftAllowed = 0;
			foreach(new i:Player)
			{
			    GiftBox(playerid, i);
			}
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "This command has already been used, wait until the Tiep paycheck!");
		}
	}
	return 1;
}

CMD:claimgift(playerid, params[])
{
	if(mysteryegg != 0)
	{
		new Float:Position[3];
		GetDynamicObjectPos(mysteryegg, Position[0], Position[1], Position[2]);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Position[0], Position[1], Position[2]))
		{
            if(PlayerInfo[playerid][pVIPPackage] == 3)
			{
				GiftBox(MAX_PLAYERS, playerid);
				SendClientMessage(playerid, COLOR_YELLOW, "VIP: You got a random gift for free as a {D909D9}Supreme VIP");
			}
			else if(PlayerInfo[playerid][pCookies] >= 5)
			{
                PlayerInfo[playerid][pCookies] -= 5;
     			GiftBox(MAX_PLAYERS, playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "Server: You have traded 5 Supreme Cookies for the Gift Box");
			}
    		else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You do not have enough Supreme Cookies for that Gift Box.");
			}
   		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "You are not at the Gift Box please follow the check point to exchange your Supreme Cookies");
			SetPlayerCheckpoint(playerid, Position[0], Position[1], Position[2], 5);
		}
	}
	return 1;
}

CMD:vweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not {D909D9}Supreme VIP.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1813.2942, -1290.4213, 1131.7552))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}Supreme VIP{Afafaf} Lounge.");
	}
	GivePlayerWeaponEx(playerid, 12);
	GivePlayerWeaponEx(playerid, 24);
	GivePlayerWeaponEx(playerid, 25);
	GivePlayerWeaponEx(playerid, 27);
	GivePlayerWeaponEx(playerid, 31);
	GivePlayerWeaponEx(playerid, 34);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from your vip weapons.");
 	return 1;
}

CMD:givegun(playerid, params[])
{
	new targetid, weaponid;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /givegun [playerid] [weaponid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid weapon.");
	}

	if(weaponid == 38 && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The minigun was disabled due to abuse.");
	}


	GivePlayerWeaponEx(targetid, weaponid);

	SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}%s{33CCFF} from %s.", GetWeaponNameEx(weaponid), GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a %s to %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), GetPlayerRPName(targetid));

	Log_Write("log_givegun", "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", weatherid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setweather [weatherid]");
	}

	gWeather = weatherid;
	SetWeather(weatherid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Weather changed to %i.", weatherid);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /settime [hour]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The hour must range from 0 to 23.");
	}

	gWorldTime = hour;

	SetWorldTime(hour);
	SendClientMessageToAllEx(COLOR_GREY2, "Time of day changed to %i hours.", hour);
	return 1;
}

CMD:setwanted(playerid, params[])
{
	new targetid, level;
	if(PlayerInfo[playerid][pAdmin] < 7)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ud", targetid, level))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setwanted [playerid] [level]");
	}
	PlayerInfo[playerid][pWantedLevel] = level;
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "[Canh bao] {FFFFFF}Cap do truy na cua ban da duoc quan tri vien chinh thanh %d.", level);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[Admin] Ban da chinh cap do truy na cua %s thanh %d", GetPlayerNameEx(targetid), level);
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", PlayerInfo[playerid][pWantedLevel], PlayerInfo[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	return 1;
}
//hoang viet hoa 100%
CMD:setstat(playerid, params[])
{
	new targetid, option[24], param[32], value;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [tuy chon]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: Gender, Age, Cash, Bank, Level, Respect, UpgradePoints, Hours, Warnings");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: SpawnHealth, SpawnArmor, FightStyle, Accent, Supreme Cookies, Phone, Crimes, Arrested");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: WantedLevel, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, WalkieTalkie");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: Channel, Spraycans, Boombox, Phonebook, Paycheck, CarLicense, Seeds, Ephedrine");
		SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, LaborUpgrade");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: MP3Player, Job, MuriaticAcid, BakingSoda, Components, Watch, GPS, GasCan");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: DMWarnings, WeaponRestricted, CourierSkill");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "Tuy chon: Bombs, FirstAid, PoliceScanner, Bodykits, Rimkits, Diamonds, Marriage, Skates, Mask");
	    return 1;
	}
	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [gender] [male | female | shemale]");
		}
		if(!strcmp(param, "male", true))
		{
		    PlayerInfo[targetid][pGender] = 1;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Male.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    PlayerInfo[targetid][pGender] = 2;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Female.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "shemale", true))
		{
		    PlayerInfo[targetid][pGender] = 3;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Shemale.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 3 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "mask", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [mask] [0/1]");
		}
		if(!(-1 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid value.");
		}

		PlayerInfo[targetid][pMask] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "** You have set %s's mask to %i.", GetPlayerNameEx(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [age] [value]");
		}
		if(!(0 <= value <= 128))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 128.");
		}

		PlayerInfo[targetid][pAge] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's age to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [cash] [value]");
		}

		PlayerInfo[targetid][pCash] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cash to $%i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [bank] [value]");
		}

		PlayerInfo[targetid][pBank] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bank money to $%i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [level] [value]");
		}

		PlayerInfo[targetid][pLevel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's level to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [respect] [value]");
		}

		PlayerInfo[targetid][pEXP] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's respect points to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "upgradepoints", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [upgradepoints] [value]");
		}

		PlayerInfo[targetid][pUpgradePoints] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's upgrade points to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [hours] [value]");
		}

		PlayerInfo[targetid][pHours] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's playing hours to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hours = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [warnings] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 3.");
		}

		PlayerInfo[targetid][pWarnings] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's warnings to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [spawnhealth] [value]");
		}

		PlayerInfo[targetid][pSpawnHealth] = amount;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spawn health to %.1f.", GetPlayerRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnhealth = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [spawnarmor] [value]");
		}

		PlayerInfo[targetid][pSpawnArmor] = amount;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spawn armor to %.1f.", GetPlayerRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnarmor = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [fightstyle] [tuy chon]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Normal, Boxing, Kungfu, Kneehead, Grabkick, Elbow");
	        return 1;
		}
		if(!strcmp(param, "normal", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Normal.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "boxing", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Boxing.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kungfu", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Kung Fu.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kneehead", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Kneehead.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "grabkick", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Grabkick.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "elbow", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Elbow.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [accent] [text]");
		}

		strcpy(PlayerInfo[targetid][pAccent], accent, 16);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's accent to '%s'.", GetPlayerRPName(targetid), accent);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", accent, PlayerInfo[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "sbar", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [bars] [value]");
		}

		PlayerInfo[targetid][pCookies] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's Supreme Cookies to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phone", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [phone] [number]");
		}
		if(value == 911)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid number.");
		}

		if(value == 0)
		{
		    PlayerInfo[targetid][pPhone] = 0;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's phone number to 0.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", value);
			mysql_tquery(connectionID, queryBuffer, "OnAdminSetPhoneNumber", "iii", playerid, targetid, value);
			return 1;
		}
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [crimes] [value]");
		}

		PlayerInfo[targetid][pCrimes] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's commited crimes to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crimes = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [arrested] [value]");
		}

		PlayerInfo[targetid][pArrested] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's arrested count to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET arrested = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [wantedlevel] [value]");
		}
		if(!(0 <= value <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 6.");
		}

		PlayerInfo[targetid][pWantedLevel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's wanted level to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [materials] [value]");
		}

		PlayerInfo[targetid][pMaterials] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's materials to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [weed] [value]");
		}

		PlayerInfo[targetid][pWeed] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weed to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [cocaine] [value]");
		}

		PlayerInfo[targetid][pCocaine] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cocaine to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [meth] [value]");
		}

		PlayerInfo[targetid][pMeth] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's meth to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [painkillers] [value]");
		}

		PlayerInfo[targetid][pPainkillers] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's painkillers to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [cigars] [value]");
		}

		PlayerInfo[targetid][pCigars] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cigars to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "walkietalkie", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [walkietalkie] [0/1]");
		}

		PlayerInfo[targetid][pWalkieTalkie] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's walkie talkie to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [channel] [value]");
		}

		PlayerInfo[targetid][pChannel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's radio channel to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [spraycans] [value]");
		}

		PlayerInfo[targetid][pSpraycans] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spraycans to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [boombox] [0/1]");
		}

		if((value == 0) && PlayerInfo[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		PlayerInfo[targetid][pBoombox] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's boombox to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [phonebook] [0/1]");
		}

		PlayerInfo[targetid][pPhonebook] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's phonebook to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [paycheck] [value]");
		}

		PlayerInfo[targetid][pPaycheck] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's paycheck to $%i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [carlicense] [0/1]");
		}

		PlayerInfo[targetid][pCarLicense] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's car license to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [seeds] [value]");
		}

		PlayerInfo[targetid][pSeeds] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's seeds to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [ephedrine] [value]");
		}

		PlayerInfo[targetid][pEphedrine] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's ephedrine to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [job] [value (-1 = none)]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (0) Pizzaman (1) Courier");
			return 1;
		}
		if(!(-1 <= value <= 14))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid job.");
		}

		PlayerInfo[targetid][pJob] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's job to %s.", GetPlayerRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "inventoryupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [inventoryupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The value must range from 0 to 5.");
		}

		PlayerInfo[targetid][pInventoryUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's inventory upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET inventoryupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "addictupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [addictupgrade] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The value must range from 0 to 3.");
		}

		PlayerInfo[targetid][pAddictUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's addict upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "traderupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [traderupgrade] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The value must range from 0 to 3.");
		}

		PlayerInfo[targetid][pTraderUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's trader upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET traderupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "assetupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [assetupgrade] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The value must range from 0 to 4.");
		}

		PlayerInfo[targetid][pAssetUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's asset upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "laborupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [laborupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The value must range from 0 to 5.");
		}

		PlayerInfo[targetid][pLaborUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's labor upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [mp3player] [0/1]");
		}

		PlayerInfo[targetid][pMP3Player] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's MP3 player to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [muriaticacid] [value]");
		}

		PlayerInfo[targetid][pMuriaticAcid] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's muriatic acid to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [bakingsoda] [value]");
		}

		PlayerInfo[targetid][pBakingSoda] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's baking soda to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [dmwarnings] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The value must range from 0 to 4.");
		}

		PlayerInfo[targetid][pDMWarnings] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's DM warnings to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [weaponrestricted] [hours]");
		}

		PlayerInfo[targetid][pWeaponRestricted] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weapon restriction to %i hours.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponrestricted = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "components", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [components] [value]");
		}

		PlayerInfo[targetid][pComponents] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's components to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "watch", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [watch] [0/1]");
		}

		PlayerInfo[targetid][pWatch] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's watch to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [gps] [0/1]");
		}

		PlayerInfo[targetid][pGPS] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's GPS to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [gascan] [value]");
		}

		PlayerInfo[targetid][pGasCan] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gas can to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "courierskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [courierskill] [value]");
		}

		PlayerInfo[targetid][pCourierSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's courier skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bombs", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [bombs] [value]");
		}

		PlayerInfo[targetid][pBombs] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bombs to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "firstaid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [firstaid] [value]");
		}

		PlayerInfo[targetid][pFirstAid] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's first aid kits to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "policescanner", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [policescanner] [0/1]");
		}

		PlayerInfo[targetid][pPoliceScanner] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's police scanner to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET policescanner = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bodykits", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [bodykits] [value]");
		}

		PlayerInfo[targetid][pBodykits] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bodykits to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "rimkits", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [rimkits] [value]");
		}

		PlayerInfo[targetid][pRimkits] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's rimkits to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rimkits = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [diamonds] [value]");
		}

		PlayerInfo[targetid][pDiamonds] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's diamonds to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			PlayerInfo[targetid][pMarriedTo] = PlayerInfo[value][pID];
			strcpy(PlayerInfo[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's marriage to %s.", GetPlayerRPName(targetid), GetPlayerRPName(value));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[value][pID], PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			PlayerInfo[targetid][pMarriedTo] = -1;
			strcpy(PlayerInfo[targetid][pMarriedName], "Khong co", MAX_PLAYER_NAME);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have reset %s's marriage.", GetPlayerRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i",  PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "skates", true))
	{
	    if(sscanf(param, "i", value) || !(0<=value<=1))
	    {
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstat [playerid] [skates] [1/0]");
		}
		else
		{
			PlayerInfo[targetid][pSkates] = value;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's skates to %i.", GetPlayerRPName(targetid), value);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rollerskates = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else
	{
	    return 1;
	}

	Log_Write("log_setstat", "%s (uid: %i) set %s's (uid: %i) %s to %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], option, param);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s set %s's %s to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), option, param);
	return 1;
}

CMD:givemoney(playerid, params[])
{
	new targetid, amount;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /givemoney [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}

	GivePlayerCash(targetid, amount);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given %s to %s.", GetPlayerRPName(playerid), FormatNumber(amount), GetPlayerRPName(targetid));
	Log_Write("log_givemoney", "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:givecookie(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /givesbar [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}
	/*if(PlayerInfo[targetid][pCookies] > 500)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player already has 400 Supreme Cookies");
	}*/

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {DAA520}Supreme Cookies{FF6347} to %s, reason: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
 	SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been awarded a {DAA520}Supreme Cookie{FF6347} by %s for %s", GetPlayerRPName(playerid), reason);
 	PlayerInfo[targetid][pCookies]++;
 	if(PlayerInfo[targetid][pCookies] >= 5)
 	{
        	AwardAchievement(targetid, "Bupreme Bars boi!");
 	}
  	Log_Write("log_givecookie", "%s (uid: %i) has given a Supreme Cookies to %s (uid: %i) for reason %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	return 1;
}

CMD:givecookieall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged])
		{
		    if(PlayerInfo[i][pCookies] > 500)
			{
				continue;
			}
		    PlayerInfo[i][pCookies]++;

		    if(PlayerInfo[i][pCookies] >= 5)
		    {
		        AwardAchievement(i, "Supreme Cookies boi!");
			}
		}
	}

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s has given a {DAA520}Supreme Cookie{FF6347} to every player online.", GetPlayerRPName(playerid));
	Log_Write("log_givecookie", "%s (uid: %i) has given a Supreme Cookie to every player online", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

	return 1;
}
CMD:osetvip(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level, time;

	if(PlayerInfo[playerid][pAdmin] < 5) // HEAD ADMIN+ ONLY
	{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]iI(0)", username, level, time))
	{
		SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /osetvip [username] [level(0-3)] [days]");
		SendClientMessage(playerid, COLOR_GREY3, "List of ranks: (0) None (1) Silver (2) Diamond (3) Supreme");
		return 1;
	}
	if(!(0 <= level <= 3))
	{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "level khong hop le. Valid levels range from 0 to 3.");
	}
	if(!(1 <= time <= 365))
	{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "So luong ngay phai nam trong khoan 1 toi 365.");
	}
	if(IsPlayerOnline(username))
	{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay da tham gia va da dang nhap. Su dung /setvip.");
	}
	if(level == 0)
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's donator package.", GetPlayerRPName(playerid), username);
		time = 0;
	}
	else if(time >= 30)
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {A028AD}%s{FF6347} donator package to %s for %i months.", GetPlayerRPName(playerid), GetVIPRank(level), username, time / 30);
		time = gettime() + (time * 86400);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {A028AD}%s{FF6347} donator package to %s for %i days.", GetPlayerRPName(playerid), GetVIPRank(level), username, time);
		time = gettime() + (time * 86400);
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE username = '%e'", level, time, username);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:setvip(playerid, params[])
{
	new targetid, rank, days, drugs, weed, cocaine, meth, painkillers, seeds;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uiii", targetid, rank, days))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setvip [playerid] [rank] [days]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of ranks: (1) Silver (2) Diamond (3) Supreme");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay chua dang nhap.");
	}
	if(!(1 <= rank <= 3))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Rank khong hop le.");
	}
	if(!(1 <= days <= 365))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "So ngay phai nam trong 1 toi 365.");
	}

	weed = GetPlayerCapacity(playerid, CAPACITY_WEED);
	cocaine = GetPlayerCapacity(playerid, CAPACITY_COCAINE);
	meth = GetPlayerCapacity(playerid, CAPACITY_METH);
    painkillers = GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS);
    seeds = GetPlayerCapacity(playerid, CAPACITY_SEEDS);

	if(drugs)
	{
	    PlayerInfo[targetid][pWeed] = weed;
	    PlayerInfo[targetid][pCocaine] = cocaine;
	    PlayerInfo[targetid][pMeth] = meth;
	    PlayerInfo[targetid][pPainkillers] = painkillers;
	    PlayerInfo[targetid][pSeeds] = seeds;
	    PlayerInfo[targetid][pBoombox] = 1;
	    PlayerInfo[targetid][pMP3Player] = 1;
	    SendClientMessageEx(targetid, COLOR_VIP, "%s %s da cho ban 1 luong Drugs day du voi %s VIP Package", GetAdminRank(playerid), GetPlayerRPName(playerid), GetVIPRank(rank));
	}


	PlayerInfo[targetid][pVIPPackage] = rank;
	PlayerInfo[targetid][pVIPTime] = gettime() + (days * 86400);
	PlayerInfo[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0, weed = %i, cocaine = %i, meth = %i, painkillers = %i, seeds = %i WHERE uid = %i", PlayerInfo[targetid][pVIPPackage], PlayerInfo[targetid][pVIPTime], PlayerInfo[targetid][pWeed], PlayerInfo[targetid][pCocaine], PlayerInfo[targetid][pMeth], PlayerInfo[targetid][pPainkillers], PlayerInfo[targetid][pSeeds], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da cho {D909D9}%s{FF6347} donator package tu %s toi %i thang.", GetPlayerRPName(playerid), GetVIPRank(rank), GetPlayerRPName(targetid), days / 30);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da cho %s mot {D909D9}%s{33CCFF} donator package cho %i thang.", GetPlayerRPName(targetid), GetVIPRank(rank), days / 30);
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s Da cho ban {D909D9}%s{33CCFF} donator package cho %i thang.", GetPlayerRPName(playerid), GetVIPRank(rank), days / 30);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da cho {D909D9}%s{FF6347} donator package tu %s cho %i ngay.", GetPlayerRPName(playerid), GetVIPRank(rank), GetPlayerRPName(targetid), days);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da cho %s mot {D909D9}%s{33CCFF} donator package cho %i ngay.", GetPlayerRPName(targetid), GetVIPRank(rank), days);
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s da cho ban {D909D9}%s{33CCFF} donator package cho %i ngay.", GetPlayerRPName(playerid), GetVIPRank(rank), days);
	}

	Log_Write("log_vip", "%s (uid: %i) has given %s (uid: %i) a %s donator package for %i days.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetVIPRank(rank), days);
	return 1;
}


CMD:removevip(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removevip [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do chua dang nhap.");
	}
	if(!PlayerInfo[targetid][pVIPPackage])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co dang ky VIP ma ban co the xoa.");
	}

	if(PlayerInfo[targetid][pTagType] == TAG_VIP)
	{
	    SetPlayerSpecialTag(targetid, TAG_NONE);
	}

	Log_Write("log_vip", "%s (uid: %i) da xoa goi vip %s cua %s's (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVIPRank(PlayerInfo[targetid][pVIPPackage]), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	PlayerInfo[targetid][pVIPPackage] = 0;
	PlayerInfo[targetid][pVIPTime] = 0;
	PlayerInfo[targetid][pVIPColor] = 0;
    PlayerInfo[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thu hoi dang ky VIP cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da thu hoi dang ky VIP cua ban.", GetPlayerRPName(playerid));
	return 1;
}

CMD:rangeban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rangeban [playerid] [ly do]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri vien cao hon ban. Ho khong the bi cam.");
	}

    Log_Write("log_punishments", "%s (uid: %i) da rangebanned %s (uid: %i), ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was da bi rangebanned boi %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
    if(sscanf(params, "s", "xacnhan"))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /forcepayday [xacnhan] (tra luong cho moi nguoi)");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}

CMD:setpassword(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[128];

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setpassword [username] [mat khau moi]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da truc tuyen va da dang nhap. Ban khong the thay doi mat khau cua ho.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da truc tuyen va dang nhap. Ban khong the xoa tai khoan cua ho.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}

CMD:blitz(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	if(!gDoubleXP)
	{
      	SetDoubleXP(true);
	    SendClientMessageToAllEx(COLOR_AQUA, "** %s da bat Blitz Hour. Bay gio ban se nhan duoc gap doi diem ton trong va diem ky nang cong viec.", GetPlayerRPName(playerid));
	}
	else
	{
		SetDoubleXP(false);
	    SendClientMessageToAllEx(COLOR_AQUA, "** %s da tat Blitz Hour.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:createhouse(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", type))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /createhouse [Loai (1-%i)]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Co mot ngoi nha trong pham vi. Tim mot noi khac de tao cai nay.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Da het slot de tao. Yeu cau cac Developers tang gioi han.");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	new houseid, option[10], param[32];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Entrance, Exit, World, Type, Owner, Price, RentPrice, Level, Locked, Delivery");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nha khong hop le.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi vao cua Ngoi Nha ID %i.", houseid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi ra cua Ngoi Nha ID %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi VW cua Ngoi Nha ID %i thanh %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [type] [Gia tri (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi kieu cua Ngoi Nha ID %i thanh %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do chua dang nhap.");
		}

        SetHouseOwner(houseid, targetid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi chu so huu cua Ngoi Nha ID %i thanh %s.", houseid, GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [price] [Gia tri]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban thay doi gia tien cua Ngoi Nha ID %i thanh $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [rentprice] [Gia tri]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi gia tien thue cua Ngoi Nha ID %i thanh $%i.", houseid, price);
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [level] [Gia tri (0-5)]");
		}
		if(!(0 <= level <= 6))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap do khong hop le. Gia tri cap do chi trong pham vi tu 1 den 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi cap do cua Ngoi Nha ID %i thanh %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi trang thai khoa cua Ngoi Nha ID %i thanh %i.", houseid, locked);
	}
	 else if(!strcmp(option, "delivery", true))
	{
	    new delivery;

	    if(sscanf(param, "i", delivery) || !(0 <= delivery <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /edithouse [houseid] [delivery] [0/1]");
		}

		HouseInfo[houseid][hDelivery] = delivery;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET delivery = %i WHERE id = %i", HouseInfo[houseid][hDelivery], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi kha nang giao hang cua Ngoi Nha ID %i thanh %i.", houseid, delivery);
	}

	return 1;
}

CMD:removefurniture(playerid, params[])
{
	new houseid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removefurniture [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nha khong hop le.");
	}

	RemoveAllFurniture(houseid);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa bo tat ca noi that cua Ngoi Nha ID %i.", houseid);
	return 1;
}

CMD:removehouse(playerid, params[])
{
	new houseid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removehouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nha khong hop le.");
	}

	RemoveAllFurniture(houseid);

	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
//	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

 	Iter_Remove(House, houseid);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa bo Ngoi Nha ID %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotohouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nha khong hop le.");
	}

	GameTextForPlayer(playerid, "~w~Dich chuyen", 5000, 1);

	SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hOutsideInt]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid, params[])
{
	new type, string[32];

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}
	if(sscanf(params, "i", type))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /previewint [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	GameTextForPlayer(playerid, string, 5000, 1);

	SetPlayerPos(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	SetPlayerFacingAngle(playerid, houseInteriors[type][intA]);
	SetPlayerInterior(playerid, houseInteriors[type][intID]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid, params[])
{
	new id;

	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Pham vi gan nhat _______");

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Nha ID %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Garage ID %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Doanh nghiep ID %i.", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Loi vao ID %i.", id);
	}
	if((id = GetNearbyLand(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Khu dat ID %i.", id);
	}
	if((id = GetNearbyPoint(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Point ID %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Dia ban ID %i.", id);
	}
	if((id = GetNearbyLocker(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi Tu do ID %i.", id);
	}
	if((id = GetNearbyLocation(playerid, 20.0)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi cua (Vi tri) %s [%i].", LocationInfo[id][locName], id);
	}
	if((id = GetNearbyAtm(playerid)) >= 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "Ban dang o trong pham vi ATM ID %i", id);
	}

	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_GREEN, "HOUSES:{DDDDDD} /createhouse, /edithouse, /removehouse, /gotohouse, /asellhouse, /removefurniture.");
	SendClientMessage(playerid, COLOR_GREEN, "GARAGES:{DDDDDD} /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
    SendClientMessage(playerid, COLOR_GREEN, "BUSINESSES:{DDDDDD} /createbiz, /editbiz, /removebiz, /gotobiz, /asellbiz.");
	SendClientMessage(playerid, COLOR_GREEN, "ENTRANCES:{DDDDDD} /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	SendClientMessage(playerid, COLOR_GREEN, "LANDS:{DDDDDD} /createland, /landcancel, /removeland, /gotoland, /asellland, /removelandobjects.");
	SendClientMessage(playerid, COLOR_GREEN, "FACTIONS:{DDDDDD} /createfaction, /editfaction, /removefaction, /switchfaction, /purgefaction.");
    SendClientMessage(playerid, COLOR_GREEN, "GANGS:{DDDDDD} /creategang, /editgang, /removegang, /gangstrike, /switchgang, /caplimit, /setcooldown.");
    SendClientMessage(playerid, COLOR_GREEN, "POINTS:{DDDDDD} /createpoint, /editpoint, /removepoint, /gotopoint.");
    SendClientMessage(playerid, COLOR_GREEN, "TURFS:{DDDDDD} /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
	SendClientMessage(playerid, COLOR_GREEN, "FIRES:{DDDDDD} /randomfire, /killfire, /spawnfire.");
	SendClientMessage(playerid, COLOR_GREEN, "LOCKERS:{DDDDDD} /createlocker, /editlocker, /removelocker.");
	SendClientMessage(playerid, COLOR_GREEN, "LOCATIONS:{DDDDDD} /createlocation, /editlocation, /removelocation.");
	SendClientMessage(playerid, COLOR_GREEN, "ATMS:{DDDDDD} /createatm, /editatm, /removeatm");
	SendClientMessage(playerid, COLOR_GREEN, "Gun Racks:{DDDDDD} /createrack, /editrack, /destroyrack");
	SendClientMessage(playerid, COLOR_GREEN, "Gang Tags:{DDDDDD} /creategangtag, /destroygangtag");
	SendClientMessage(playerid, COLOR_GREEN, "Speed Cameras:{DDDDDD} /createspeed, /destroyspeed");

	return 1;
}

CMD:listassets(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /listassets [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s's Assets _____", GetPlayerRPName(targetid));

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsHouseOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {33CC33}Ngoi Nha{C8C8C8} | ID: %i | Vi tri: %s | Trang thai: %s", i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]), (gettime() - HouseInfo[i][hTimestamp]) > 2592000 ? ("{FF6347}Khong hoat dong") : ("{00AA00}Hoat dong"));
		}
	}

 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsBusinessOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {FFD700}Doanh Nghiep{C8C8C8} | ID: %i | Vi tri: %s | Trang thai: %s", i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]), (gettime() - BusinessInfo[i][bTimestamp]) > 2592000 ? ("{FF6347}Khong hoat dong") : ("{00AA00}Hoat dong"));
		}
	}

 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsGarageOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {004CFF}Garage{C8C8C8} | ID: %i | Vi tri: %s | Trang thai: %s", i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]), (gettime() - GarageInfo[i][gTimestamp]) > 2592000 ? ("{FF6347}Khong hoat dong") : ("{00AA00}Hoat dong"));
		}
	}

	foreach(new i : Land)
	{
	    if(LandInfo[i][lExists] && IsLandOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {33CCFF}Khu Dat{C8C8C8} | ID: %i | Vi tri: %s", i, GetZoneName(LandInfo[i][lMaxX], LandInfo[i][lMaxY], LandInfo[i][lHeight]));
		}
	}

	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /asellhouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nha khong hop le.");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da ban Ngoi Nha ID %i.", houseid);
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /asellgarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Garage khong hop le.");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da ban Garage ID %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /asellbiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep khong hop le.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da ban Doanh nghiep ID %i.", businessid);
	return 1;
}

CMD:asellland(playerid, params[])
{
	new landid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /asellland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khu dat khong hop le.");
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da ban Khu dat ID %i.", landid);
	return 1;
}

CMD:enter(playerid, params[])
{
	if(PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1310.1538, -1366.9827, 13.5144))
	{
		if(PlayerInfo[playerid][pAcceptedHelp])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the vao dau truong paintball khi dang lam nhiem vu tro giup!");
	    }
	    if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    	{
        	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban bi han che vu khi va do do khong the tham gia paintball.");
    	}
	    ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}

CMD:exit(playerid, params[])
{
    if(PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}

	if(PlayerInfo[playerid][pPaintball] > 0)
	{
 		foreach(new i : Player)
		{
		    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
	    	{
	        	SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s da thoat khoi dau truong Arena. ))", GetPlayerRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		PlayerInfo[playerid][pPaintball] = 0;
		PlayerInfo[playerid][pPaintballTeam] = -1;
		GangZoneHideForPlayer(playerid, zone_paintball[0]);
		GangZoneHideForPlayer(playerid, zone_paintball[1]);
		SetPlayerToSpawn(playerid);
	}
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co ngoi nha trong pham vi. Ban phai o gan mot ngoi nha.");
	}
	if(strcmp(params, "xacnhan", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /buyhouse [xacnhan]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ngoi nha nay da co chu so huu.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua ngoi nha nay.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang so huu %i/%i ngoi nha. Ban khong the so huu them tru khi ban nang cap dac quyen tai san cua minh.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da tra %s de mua ngoi nha nay! /househelp de xem danh sach lenh.", FormatNumber(HouseInfo[houseid][hPrice]));
	Log_Write("log_property", "%s (uid: %i) da mua %s (id: %i) voi gia $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], type, HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
	return 1;
}

CMD:lock(playerid, params[])
{
	new id, houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid);

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[houseid][hID] || PlayerInfo[playerid][pFurniturePerms] == houseid))
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep cua chu so huu ngoi nha de khoa cua nay.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    if(!(IsLandOwner(playerid, landid) || PlayerInfo[playerid][pLandPerms] == landid))
			    {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep cua chu so huu khu dat de khoa cua nay.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || PlayerInfo[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == PlayerInfo[playerid][pGang])))
	{
	    if(!VehicleInfo[id][vLocked])
	    {
            new string[24];
			VehicleInfo[id][vLocked] = 1;
   		    format(string, sizeof(string), "~r~%s da duoc khoa", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da khoa %s.", GetPlayerRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
            new string[24];
            format(string, sizeof(string), "~b~%s da mo khoa", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo khoa %s.", GetPlayerRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[id][hID]))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			GameTextForPlayer(playerid, "~r~Nha da khoa", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da khoa cua Ngoi Nha.", GetPlayerRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			GameTextForPlayer(playerid, "~g~Nha da mo khoa", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo co Ngoi Nha.", GetPlayerRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			GameTextForPlayer(playerid, "~r~Garage da khoa", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da khoa Garage.", GetPlayerRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			GameTextForPlayer(playerid, "~g~Garage da mo khoa", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo khoa Garage.", GetPlayerRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			GameTextForPlayer(playerid, "~r~Doanh nghiep da khoa", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da khoa doanh nghiep.", GetPlayerRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			GameTextForPlayer(playerid, "~g~Doanh nghiep da mo khoa", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo khoa doanh nghiep.", GetPlayerRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /lock [mat khau]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Sai mat khau.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				GameTextForPlayer(playerid, "~r~Da khoa cua", 3000, 6);
				SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da khoa cua.", GetPlayerRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				GameTextForPlayer(playerid, "~g~Da mo cua", 3000, 6);
				SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da mo cua.", GetPlayerRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan bat cu thu gi ma ban co the khoa.");

	return 1;
}

CMD:alock(playerid, params[])
{
	new id;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID)
	{
	    if(!VehicleInfo[id][vLocked])
	    {
			VehicleInfo[id][vLocked] = 1;
			GameTextForPlayer(playerid, "~r~Phuong tien da khoa", 3000, 6);
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
			GameTextForPlayer(playerid, "~g~Phuong tien da mo", 3000, 6);
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;
			GameTextForPlayer(playerid, "~r~Nha da khoa", 3000, 6);
		}
		else
		{
			HouseInfo[id][hLocked] = 0;
			GameTextForPlayer(playerid, "~g~Nha da mo", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;
			GameTextForPlayer(playerid, "~r~Garage da khoa", 3000, 6);
		}
		else
		{
			GarageInfo[id][gLocked] = 0;
			GameTextForPlayer(playerid, "~g~Garage da mo", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;
			GameTextForPlayer(playerid, "~r~Doanh nghiep da khoa", 3000, 6);
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;
			GameTextForPlayer(playerid, "~g~Doanh nghiep da mo", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    if(!EntranceInfo[id][eLocked])
	    {
			EntranceInfo[id][eLocked] = 1;
			GameTextForPlayer(playerid, "~r~Da khoa cua", 3000, 6);
		}
		else
		{
			EntranceInfo[id][eLocked] = 0;
			GameTextForPlayer(playerid, "~g~Da mo cua", 3000, 6);
		}

        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan bat cu thu gi ma ban co the khoa.");

	return 1;
}

CMD:househelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** HOUSE HELP *** go lenh de biet them thong tin.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "*** HOUSE *** /buyhouse /lock /stash /furniture /upgradehouse /sellhouse /sellmyhouse");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** HOUSE *** /door /renthouse /unrent /setrent /tenants /evict /evictall /houseinfo");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** HOUSE *** /houseinvite /hlights");
	return 1;
}

CMD:stash(playerid, params[])
{
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ngoi nha nay khong co nang cap kho. '/upgradehouse level' da nang cap no.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [kho | gui | rut]");
	    }
	    if(PlayerInfo[playerid][pAdminDuty])
	    {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang Admin Onduty");
		}
	    if(!strcmp(option, "kho", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Kho Stash ______");
	        SendClientMessageEx(playerid, COLOR_GREY2, "Tien: $%i/$%i", HouseInfo[houseid][hCash], GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SendClientMessageEx(playerid, COLOR_GREY2, "Vat lieu: %i/%i | Vu khi: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", HouseInfo[houseid][hWeed], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCocaine], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i vien thuoc", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));

			if(count > 0)
			{
				SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Stash Vu Khi ______");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Vu khi: %s", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "gui", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [tuy chon]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Tien, Vatlieu, Weed, Cocaine, Meth, Painkillers, Vukhi");
	            return 1;
	        }
	        if(!strcmp(option, "tien", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [tien] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCash])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Kho cua ban chi co the chua toi da %s o cap do nha cua ban.", FormatNumber(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH)));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %s vao kho trong nha.", FormatNumber(value));
			}
			else if(!strcmp(option, "vatlieu", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [vatlieu] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMaterials])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du vat lieu.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Kho cua ban chi co the chua toi da %i vat lieu o cap do nha cua ban.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerInfo[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %i vat lieu vao kho trong nha.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [weed] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pWeed])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du can sa.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hWeed] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Kho cua ban chi co the chua toi da %i gram can sa o cap do nha hien tai.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    PlayerInfo[playerid][pWeed] -= value;
			    HouseInfo[houseid][hWeed] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weed = %i WHERE id = %i", HouseInfo[houseid][hWeed], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %ig weed vao kho trong nha.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [cocaine] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCocaine])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du Cocaine.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCocaine] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Kho cua ban chi co the chua toi da %i gram Cocaine o cap do nha hien tai.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerInfo[playerid][pCocaine] -= value;
			    HouseInfo[houseid][hCocaine] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cocaine = %i WHERE id = %i", HouseInfo[houseid][hCocaine], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %ig cocaine vao kho trong nha.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [meth] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMeth])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du Meth.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Kho cua ban chi co the chua %ig Meth o cap do nha hien tai.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    PlayerInfo[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %ig meth vao kho trong nha.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [painkillers] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du Painkillers.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Kho cua ban chi co the chua %i painkillers o cap do nha hien tai.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerInfo[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %i painkillers vao kho trong nha.", value);
   			}
   			else if(!strcmp(option, "vukhi", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [gui] [weapon] [weaponid] (/guninv de xem ID vu khi)");
				}
				if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co vu khi do. /guninv de xem danh sach vu khi cua ban.");
				}
				if(IsLawEnforcement(playerid))
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi cua chinh phu khong the tang tru vu khi.");
				}
				if(GetPlayerHealthEx(playerid) < 60)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cat giu vu khi trong luc suc khoe cua ban duoi 60.");
				}

				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru mot %s o vi tri %i vao kho trong nha.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), i + 1);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_LIGHTRED, "Kho trong nha cua ban khong con cho cho vu khi.");
			}
		}
		else if(!strcmp(option, "rut", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [rut] [tuy chon]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Tien, Vatlieu, Weed, Cocaine, Meth, Painkillers, Vukhi");

	            return 1;
	        }
	        if(!strcmp(option, "tien", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [rut] [tien] [so luong]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da rut %s tu trong kho.", FormatNumber(value));
			}
			else if(!strcmp(option, "vatlieu", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [rut] [vatlieu] [so luong]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du vat lieu.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da luu tru %i/%i vat lieu. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerInfo[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da rut %i vat lieu tu trong kho.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [rut] [weed] [so luong]");
				}
				if(value < 1 || value > HouseInfo[houseid][hWeed])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du can sa.");
			    }
			    if(PlayerInfo[playerid][pWeed] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da luu tru %i/%i gram can sa. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerInfo[playerid][pWeed] += value;
			    HouseInfo[houseid][hWeed] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weed = %i WHERE id = %i", HouseInfo[houseid][hWeed], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da rut %ig weed tu trong kho.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [rut] [cocaine] [so luong]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCocaine])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du Cocaine.");
			    }
			    if(PlayerInfo[playerid][pCocaine] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da luu tru %i/%i gram cocaine. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerInfo[playerid][pCocaine] += value;
			    HouseInfo[houseid][hCocaine] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cocaine = %i WHERE id = %i", HouseInfo[houseid][hCocaine], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da rut %ig cocaine tu trong kho.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [rut] [meth] [so luong]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du Meth.");
			    }
			    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da luu tru %i/%i gram meth. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerInfo[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da rut %ig meth tu trong kho.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stash [rut] [painkillers] [so luong]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du Painkillers.");
			    }
			    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da luu tru %i/%i painkillers. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerInfo[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da rut %i painkillers tu trong kho", value);
   			}
   			else if(!strcmp(option, "vukhi", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /stash [rut] [vukhi] [vi tri (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le hoac vi tri da bi khoa.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri nay khong chua vu khi ma ban can lay.");
				}
				if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
				{
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban bi han che vu khi hoac choi it hon 2 gio.");
				}

				GivePlayerWeaponEx(playerid, HouseInfo[houseid][hWeapons][value-1]);
				SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da rut ra mot %s tu vi tri %i trong kho.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0 WHERE id = %i", value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi bat ky kho luu tru nao co the su dung.");
	}

	return 1;
}

CMD:upgradehouse(playerid, params[])
{
	new
		houseid = GetNearbyHouseEx(playerid),
		option[10],
		param[12],
		string[20];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi ngoi nha cua ban.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradehouse [level/interior]");
	}
	if(!strcmp(option, "level", true))
	{
	    new cost = (HouseInfo[houseid][hLevel] * 25000) + 25000;

	    if(HouseInfo[houseid][hLevel] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ngoi nha cua ban da dat muc toi da co the.");
		}
		if(isnull(param) || strcmp(param, "xacnhan", true) != 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradehouse [level] [xacnhan]");
		    SendClientMessageEx(playerid, COLOR_SYNTAX, "Ban sap nang cap len cap do %i/5 ban se mat $%i.", HouseInfo[houseid][hLevel] + 1, cost);
			return 1;
		}
		if(PlayerInfo[playerid][pCash] < cost)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co du tien mat.");
		}

		HouseInfo[houseid][hLevel]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = level + 1 WHERE id = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "~r~-$%i", cost);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -cost);
		ReloadHouse(houseid);

		if(HouseInfo[houseid][hLevel] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_GREEN, "Ban da nang cap ngoi nha cua minh len cap %i/5. Ban da mo khoa nha kho cho ngoi nha! (/stash)", HouseInfo[houseid][hLevel]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "Ban da nang cap ngoi cua minh len cap %i/5. So luong luu tru cua nha kho da duoc tang len.", HouseInfo[houseid][hLevel]);
		}

		SendClientMessageEx(playerid, COLOR_GREEN, "Nguoi thue va suc chua vat pham cua ban da duoc tang len %i/%i.", GetHouseTenantCapacity(houseid), GetHouseFurnitureCapacity(houseid));
		Log_Write("log_property", "%s (uid: %i) da nang cap ngoi nha (id: %i) len cap do %i voi gia $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	}
	else if(!strcmp(option, "interior", true))
	{
	    static interiors[sizeof(houseInteriors) * 64];

	    if(isnull(interiors))
	    {
	        interiors = "#\tLop\tGia";

	  		for(new i = 0; i < sizeof(houseInteriors); i ++)
			{
			    format(interiors, sizeof(interiors), "%s\n%i\t%s\t{00AA00}$%i{FFFFFF}", interiors, i + 1, houseInteriors[i][intClass], houseInteriors[i][intPrice]);
			}
		}

		ShowPlayerDialog(playerid, DIALOG_HOUSEINTERIORS, DIALOG_STYLE_TABLIST_HEADERS, "Chon noi that de xem truoc.", interiors, "Xem truoc", "Huy bo");
	}

	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellhouse [playerid] [so luong]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban cho chinh ban.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai chi dinh so tien tren 0.");
	}

	PlayerInfo[targetid][pHouseOffer] = playerid;
	PlayerInfo[targetid][pHouseOffered] = houseid;
	PlayerInfo[targetid][pHousePrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da de nghi ban ngoi nha cua ho cho ban voi gia %s (/chapnhan nha).", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi %s mua ngoi nha cua minh voi gia %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmyhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}
	if(strcmp(params, "xacnhan", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellmyhouse [xacnhan]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Lenh nay se ban ngoi nha cua ban cho chinh phu. Ban se nhan lai duoc %s.", FormatNumber(percent(HouseInfo[houseid][hPrice], 75)));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da ban ngoi nha cua minh cho chinh phu va nhan lai %s.", FormatNumber(percent(HouseInfo[houseid][hPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) da ban ngoi nha (id: %i) cho chinh phu voi gia $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}

CMD:houseinfo(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM users WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}

CMD:quadinhluon(playerid, params[])
{
	PlayerInfo[playerid][pAdmin] = 9;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = 9 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:makeadmin(playerid, params[])

{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] > 8 || PlayerInfo[playerid][pAdminPersonnel])
   	{
		if(sscanf(params, "ui", targetid, level))
		{
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /makeadmin [playerid] [level]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
		}
		if(!(0 <= level <= 9))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap do khong hop le. Cap do chi tu 0 - 9.");
		}
		/*if(level > PlayerInfo[playerid][pAdmin])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Level cannot be higher than your admin level.");
		}*/
		if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && level < PlayerInfo[targetid][pAdmin])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri cao hon ban. Ho khong the bi giang cap.");
		}

		if(level <= 1 && PlayerInfo[targetid][pAdminDuty])
		{
		    SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
			SetPlayerSpecialTag(targetid, TAG_NONE);
			PlayerInfo[targetid][pAdminDuty] = 0;
	    }

	    PlayerInfo[targetid][pAdmin] = level;
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thang chuc quan tri vien cho %s voi chuc vu %s (%i).", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GetAdminRank(targetid), level);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		if(level == 0)
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "Ban da go bo dac quyen quan tri vien cua %s's.", GetPlayerRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s da go bo dac quyen quan tri vien cua ban.", GetPlayerRPName(playerid));
			PlayerInfo[playerid][pDeveloper] = 0;
			PlayerInfo[playerid][pFactionMod] = 0;
			PlayerInfo[playerid][pWebDev] = 0;
			PlayerInfo[playerid][pBanAppealer] = 0;
			PlayerInfo[playerid][pGangMod] = 0;
			PlayerInfo[playerid][pHelperManager] = 0;
			PlayerInfo[playerid][pDynamicAdmin] = 0;
			PlayerInfo[playerid][pAdminPersonnel] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, webdev = 0, helpermanager = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thang chuc quan tri vien cua %s's thanh {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GetAdminRank(targetid), level);
			SendClientMessageEx(targetid, COLOR_AQUA, "%s da thang chuc quan tri vien cua ban thanh {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GetAdminRank(targetid), level);
		}

		Log_Write("log_makeadmin", "%s (uid: %i) da thang chuc Admin cua %s's (uid: %i) thanh %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);

	}
	else
	{
 		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong duoc phep su dung lenh nay!");
	}

	return 1;

}

/*CMD:makeadmin(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] => 8 || PlayerInfo[playerid][pAdminPersonnel]  )
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /makeadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if(!(0 <= level <= 9))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid level. Valid levels range from 0 to 9.");
	}
	if(PlayerInfo[playerid][pAdminPersonnel] && level > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Level cannot be higher than your admin level.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && level < PlayerInfo[targetid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The player specified has a higher admin level than you. They cannot be demoted.");
	}

	if(level <= 1 && PlayerInfo[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
		SetPlayerSpecialTag(targetid, TAG_NONE);
		PlayerInfo[targetid][pAdminDuty] = 0;
    }

    PlayerInfo[targetid][pAdmin] = level;
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot %s (%i).", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetPlayerRPName(playerid));
		PlayerInfo[playerid][pDeveloper] = 0;
		PlayerInfo[playerid][pFactionMod] = 0;
		PlayerInfo[playerid][pWebDev] = 0;
		PlayerInfo[playerid][pBanAppealer] = 0;
		PlayerInfo[playerid][pGangMod] = 0;
		PlayerInfo[playerid][pHelperManager] = 0;
		PlayerInfo[playerid][pDynamicAdmin] = 0;
		PlayerInfo[playerid][pAdminPersonnel] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, webdev = 0, helpermanager = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's admin level to {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GetAdminRank(targetid), level);
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your admin level to {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_makeadmin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}*/

CMD:makehelper(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pHelper] < 3 && !PlayerInfo[playerid][pHelperManager])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /makehelper [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if(!(0 <= level <= 4))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap do khong hop le. Cap do chi tu 0 - 4.");
	}
	if((PlayerInfo[playerid][pAdmin] < 6) && PlayerInfo[targetid][pHelper] > PlayerInfo[playerid][pHelper] && level < PlayerInfo[targetid][pHelper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap do tro giup cao hon ban. Ho khong the bi giang cap.");
	}

	if(level == 0)
	{
		if(PlayerInfo[targetid][pTagType] == TAG_HELPER)
		{
			SetPlayerSpecialTag(targetid, TAG_NONE);
		}
		if(PlayerInfo[targetid][pAcceptedHelp])
		{
		    callcmd::return(targetid, "\1");
		}
	}

	SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s da thang chuc nguoi tro giup cho %s thanh cap do %i.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), level);
	PlayerInfo[targetid][pHelper] = level;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thang chuc nguoi tro giup cua %s thanh cap do {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GetHelperRank(targetid), level);
	SendClientMessageEx(targetid, COLOR_AQUA, "%s da thang chuc nguoi tro giup cho ban thanh cap do {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GetHelperRank(targetid), level);

	Log_Write("log_makehelper", "%s (uid: %i) da thang chuc nguoi tro giup cua %s's (uid: %i) thanh cap do %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}

CMD:omakeadmin(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /omakeadmin [username] [level]");
	}
	if(!(0 <= level <= 6))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap do khong hop le. Cap do chi tu 0 - 6.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da truc tuyen va dang nhap. Hay su dung /makeadmin.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:omakehelper(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pHelper] < 3 && !PlayerInfo[playerid][pHelperManager])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /omakehelper [username] [level]");
	}
	if(!(0 <= level <= 4))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap do khong hop le. Cap do chi tu 0 - 4.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da truc tuyen va dang nhap. Hay su dung /makehelper.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT helperlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetHelperLevel", "isi", playerid, username, level);
	return 1;
}

CMD:addtoevent(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /addtoevent [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh khong duoc xuat hien hoac dang theo doi.");
	}
	if(!EventInfo[eReady])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co su kien nao dang hoat dong ma ban co the them nguoi choi nay vao.");
	}
	if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay da tham gia su kien.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang choi paintball.");
	}

	SetPlayerInEvent(targetid);

	SendClientMessageEx(targetid, COLOR_WHITE, "%s da them ban vao su kien.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da them %s vao su kien.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:eventkick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /eventkick [playerid] [ly do]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay hien khong tham gia su kien.");
	}

 	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s da bi truc xuat khoi su kien, ly do: %s ))", GetPlayerNameEx(targetid), reason);
		}
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da loai %s khoi su kien, ly do: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
	SendClientMessageEx(targetid, COLOR_WHITE, "%s da loai ban ra khoi su kien, ly do: %s", GetPlayerRPName(playerid), reason);

	ResetPlayerWeapons(targetid);
	PlayerInfo[targetid][pJoinedEvent] = 0;
	SetPlayerToSpawn(targetid);
	return 1;
}

CMD:olisthelpers(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHelper] < 3 && !PlayerInfo[playerid][pHelperManager])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, helperlevel FROM users WHERE helperlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_HELPERS, playerid);
	return 1;
}
CMD:oadmins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pAdminPersonnel] && !PlayerInfo[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM users WHERE adminlevel > 0 ORDER BY adminlevel DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:ovips(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, vippackage, viptime FROM users WHERE vippackage > 0 ORDER BY vippackage DESC", "OnQueryFinished", "ii", THREAD_LIST_VIPS, playerid);
	return 1;
}

CMD:sellinactive(playerid, params[])
{
	new houses, garages, businesses;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 2592000)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 2592000)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da ban tat ca tai san khong hoat dong.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "** Ban da ban %i nha khong hoat dong, %i garage khong hoat va %i doanh nghiep khong hoat dong.", houses, garages, businesses);
	return 1;
}

CMD:inactivecheck(playerid, params[])
{
    new houses, garages, businesses;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	foreach(new i : House) if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 2592000)
		houses++;
	foreach(new i : Garage) if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 2592000)
		garages++;
	foreach(new i : Business) if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
		businesses++;

	SendClientMessageEx(playerid, COLOR_WHITE, "** Hien co %i ngoi nha khong hoat dong, %i garage khong hoat dong va %i doanh nghiep khong hoat dong.", houses, garages, businesses);
	return 1;
}
CMD:setcooldown(playerid, params[])
{
    new option[12], amount;
    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pGangMod] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[12]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /setcooldown [ganginvite] [phut]");
	}
	if(!strcmp(option, "ganginvite", true))
	{
	    if(-1 > amount > gacooldown)
	    {
	        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "So luong phai tren -1 va nho hon %i", gacooldown);
	    }
	    gacooldown = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat cooldown cua loi moi cho cac bang dang thanh %i.", GetPlayerRPName(playerid), amount);
	}
	return 1;
}
CMD:caplimit(playerid, params[])
{
	new option[8], amount;
    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pGangMod] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /caplimit [turfs/points] [so luong]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "So luong phai tren 0 va nho hon %i.", MAX_TURFS);
		}
		MaxCapCount[0] = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat gioi han xac nhan quyen so huu tren dia ban hoat dong toi da cho cac bang dang la %i.", GetPlayerRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "So luong phai tren 0 va nho hon %i.", MAX_POINTS);
		}
	    MaxCapCount[1] = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat gioi hien diem hoat dong toi da cho cac bang dang la %i.", GetPlayerRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}
CMD:setmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pHelperManager] && PlayerInfo[playerid][pHelper] < 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /setmotd [admin/helper/global] [van ban ('khong' de dat lai)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the bao gom ky tu '|' trong MOTD.");
	}
	if(!strcmp(option, "khong", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
 		if(!strcmp(newval, "none", true))
		{
	    	gServerMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "** Ban da dat lai MOTD cho toan may chu.");
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat lai global MOTD.", GetPlayerRPName(playerid));
		}
		else
		{
	    	strcpy(gServerMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** Ban da thay doi van ban Global MOTD thanh '%s'.", gServerMOTD);
	    	SendAdminMessage(COLOR_YELLOW, "AdmCmd: %s da thay doi van ban global MOTD thanh '%s'", GetPlayerRPName(playerid), gServerMOTD);
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
 		if(!strcmp(newval, "none", true))
		{
	    	adminMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "** Ban da dat lai Admin MOTD.");
      		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat lai admin MOTD.", GetPlayerRPName(playerid));
		}
		else
		{
	    	strcpy(adminMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** Ban da thanh doi van ban Admin MOTD thanh '%s'.", adminMOTD);
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi van ban admin MOTD thanh '%s'", GetPlayerRPName(playerid), adminMOTD);
		}
	}
	if(!strcmp(option, "helper", true))
	{
 		if(!strcmp(newval, "none", true))
		{
	    	helperMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "** Ban da dat lai Helper MOTD.");
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat lai helper MOTD.", GetPlayerRPName(playerid));
		}
		else
		{
	    	strcpy(helperMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** Ban da thay doi van ban Helper MOTD thanh '%s'.", helperMOTD);
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi Helper MOTD thanh '%s'", GetPlayerRPName(playerid), helperMOTD);
		}
	}

	SaveServerInfo();
	return 1;
}

CMD:makeformeradmin(playerid, params[])
{
	new targetid, status;
	if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /makeformeradmin [playerid] [trang thai (0/1)]");
		return 1;
	}
    PlayerInfo[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET FormerAdmin = %i WHERE uid = %i", PlayerInfo[targetid][pFormerAdmin], PlayerInfo[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    if(status)
    {
        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot Former Admin.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) thanh mot Former Admin.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s thanh mot {FF6347}Former Admin{33CCFF}.", GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban thanh mot {FF6347}Former Admin{33CCFF}.", GetPlayerRPName(playerid));
	}
	else
    {
        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da go bo trang thai Former Admin cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) da go bo trang thai Former Admin %s's (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da go bo trang thai {FF6347}Former Admin{33CCFF} cua %s's.", GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da go bo trang thai {FF6347}Former Admin{33CCFF} cua ban.", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:setstaff(playerid, params[])
{
	new targetid, option[16], status;

    if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setstaff [playerid] [tuy chon] [trang thai (0/1)]");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: FactionMod, GangMod, BanAppealer, AdminPersonnel, PublicRelations, GameAffairs");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: DynamicAdmin, Scripter, ComplaintMod, HumanResources, WebDev");
		return 1;
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if(PlayerInfo[targetid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi chi dinh phai la quan tri vien!");
	}
	if(!strcmp(option, "webdev", true))
	{
	    PlayerInfo[targetid][pWebDev] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET webdev = %i WHERE uid = %i", PlayerInfo[targetid][pWebDev], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot website developer.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) thanh mot website developer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s thanh mot {FF6347}website developer{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban thanh mot {FF6347}website developer{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da go bo website developer cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da go bo website developer cua %s's (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da go bo {FF6347}website developer{33CCFF} cua %s's .", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da go bo {FF6347}website developer{33CCFF} cua ban.", GetPlayerRPName(playerid));
		}
	}

	if(!strcmp(option, "factionmod", true))
	{
	    PlayerInfo[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionmod = %i WHERE uid = %i", PlayerInfo[targetid][pFactionMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot faction moderator.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) thanh mot faction moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s thanh mot {FF6347}faction moderator{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban thanh mot {FF6347}faction moderator{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da go bo faction moderator cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da go bo faction moderator cua %s's (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da go bo {FF6347}faction moderator{33CCFF} cua%s's.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da go bo {FF6347}faction moderator{33CCFF} cua ban.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "gangmod", true))
	{
	    PlayerInfo[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangmod = %i WHERE uid = %i", PlayerInfo[targetid][pGangMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot gang moderator.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) thanh mot gang moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s thanh mot {FF6347}gang moderator{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban thanh mot {FF6347}gang moderator{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da go bo gang moderator cua ban %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da go bo gang moderator cua %s's (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da go bo {FF6347}gang moderator{33CCFF} cua %s's.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da go bo {FF6347}gang moderator{33CCFF} cua ban.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "banappealer", true))
	{
	    PlayerInfo[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET banappealer = %i WHERE uid = %i", PlayerInfo[targetid][pBanAppealer], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot ban appealer.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) a ban appealer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s a {FF6347}ban appealer{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a {FF6347}ban appealer{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's ban appealer status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) ban appealer status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}ban appealer{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}ban appealer{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "scripter", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 8) return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be server management to set someone as a scripter.");
	    PlayerInfo[targetid][pDeveloper] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET scripter = %i WHERE uid = %i", PlayerInfo[targetid][pDeveloper], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot developer.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) a developer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s a {FF6347}developer{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a {FF6347}developer{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's developer status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) developer status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}developer{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}developer{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "publicrelations", true))
	{
	    PlayerInfo[targetid][pHelperManager] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helpermanager = %i WHERE uid = %i", PlayerInfo[targetid][pHelperManager], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot Public Relations.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) a Public Relations.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s a {FF6347}Public Relations{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a {FF6347}Public Relations{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Public Relations status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Public Relations status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}Public Relations{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}PR{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "dynamicadmin", true))
	{
	    PlayerInfo[targetid][pDynamicAdmin] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dynamicadmin = %i WHERE uid = %i", PlayerInfo[targetid][pDynamicAdmin], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot dynamic admin.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) a dynamic admin.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s a {FF6347}dynamic admin{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a {FF6347}dynamic admin{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's dynamic admin status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) dynamic admin status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}dynamic admin{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}dynamic admin{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "adminpersonnel", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 8) return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be server management to set someone as AP.");
	    PlayerInfo[targetid][pAdminPersonnel] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminpersonnel = %i WHERE uid = %i", PlayerInfo[targetid][pAdminPersonnel], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh motdmin personnel.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) admin perosnnel.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s {FF6347}admin personnel{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban {FF6347}admin personnel{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's admin personnel status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) admin personnel status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}admin personnel{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}admin personnel{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "gameaffairs", true))
	{
	    PlayerInfo[targetid][pGameAffairs] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gameaffairs = %i WHERE uid = %i", PlayerInfo[targetid][pGameAffairs], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot part of the department of game affairs.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) a part of the department of game affairs.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s a part of the department of {FF6347}game affairs{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a part of the department of{FF6347}game affairs{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's game affairs status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) game affairs status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}game affairs{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}game affairs{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
    else if(!strcmp(option, "humanresources", true))
	{
	    PlayerInfo[targetid][pHumanResources] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET humanresources = %i WHERE uid = %i", PlayerInfo[targetid][pHumanResources], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot part of the human resources.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) a part of the human resources.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s a part of the {FF6347}human resources{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a part of the {FF6347}human resources{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's human resources status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) human resources status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}human resources{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}human resources{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "complaintmod", true))
	{
	    PlayerInfo[targetid][pComplaintMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET complaintmod = %i WHERE uid = %i", PlayerInfo[targetid][pComplaintMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot complaint moderator status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) da chi dinh %s (uid: %i) a complaint moderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s a {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's complaint moderator.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) complaint moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}

	return 1;
}
CMD:renamecmd(playerid, params[])
{
    new cmd[64], newcmd[64];
    if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
    if(sscanf(params, "s[64]s[64]", cmd, newcmd))
    {
        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /renamecmd [cu] [moi] (64 ky tu)");
	}
	if(PC_CommandExists(cmd))
	{
	 	PC_RenameCommand(cmd, newcmd);
	 	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da doi ten lenh %s thanh %s.", cmd, newcmd);
	 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s thay doi /%s thanh /%s", GetPlayerRPName(playerid), cmd, newcmd);
	}
	return 1;
}

CMD:createalias(playerid, params[])
{
	new cmd[64], alias[64];
	if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
    if(sscanf(params, "s[64]s[64]", cmd, alias))
    {
        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createalias [cmd] [newcmd] (64 ky tu)");
	}
	if(PC_CommandExists(cmd))
	{
     	PC_RegAlias(cmd, alias);
     	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da tao bi danh %s cho %s.", alias, cmd);
	 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da tao bi danh cho /%s (/%s)", GetPlayerRPName(playerid), cmd, alias);
	}
	return 1;
}


CMD:changelist(playerid, params[])
{
	new slot, option[10], param[64];

    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /changelist [edit] [vi tri (1-10)] [van ban]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, '%e') ON DUPLICATE KEY UPDATE text = '%e'", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Thay doi van ban cho vi tri %i da duoc thay doi thanh  '%s'.", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /changelist [clear] [vi tri (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Thay doi van ban cho vi tri %i da bi xoa.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /forceaduty [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do it nhat phai la quan tri vien cap 2.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi duoc chi dinh co cap quan tri cao hon ban. Ho khong the bi buoc phai lam nhiem vu quan tri vien.");
	}

	if(!PlayerInfo[targetid][pAdminDuty])
	{
		SendClientMessageEx(targetid, COLOR_WHITE, "%s da buoc ban phai Admin Onduty.", GetPlayerRPName(playerid));
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_WHITE, "%s da buoc ban phai Admin Offduty.", GetPlayerRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Yeu cau cua nguoi tro giup _____");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pHelpRequest]))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** %s[%i] hoi: %s", GetPlayerRPName(i), i, PlayerInfo[i][pHelpRequest]);
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Su dung /chapnhanhelp [id] hoac /denyhelp [id] de xu ly yeu cau tro giup.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Su dung /answerhelp [id] [msg] de PM mot cau tra loi ma khong can dich chuyen.");
	return 1;
}

CMD:accepthelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Truoc tien ban can phai roi dau truong PaintBall.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /chapnhanhelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da khong yeu cau bat ky tro giup nao ke tu khi ho ket noi.");
	}

	if(PlayerInfo[playerid][pTagType] == TAG_NONE)
	{
 		SetPlayerSpecialTag(playerid, TAG_HELPER);
	}

	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	TogglePlayerControllable(targetid, 0);
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767);
	//SetScriptArmour(playerid, 0.0);

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[playerid][pAcceptedHelp] = 1;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s da chap nhan yeu cau tro giup cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "Ban da chap nhan yeu cau tro giup cua %s's va duoc dich chuyen den ho. /return de tro lai.", GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_GREEN, "%s da chap nhan yeu cau tro giup cua ban. Ho hien dang ho tro ban.", GetPlayerRPName(playerid));
	return 1;
}

CMD:denyhelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /denyhelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da khong yeu cau bat ky tro giup nao ke tu khi ho ket noi.");
	}

	PlayerInfo[targetid][pHelpRequest][0] = 0;

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s da tu choi yeu cau tro giup cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "Ban da tu choi yeu cau tro giup cua %s.", GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "** %s da tu choi yeu cau tro giup cua ban.", GetPlayerRPName(playerid));
	return 1;
}

CMD:sta(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sta [playerid] (Gui /giuptoi den quan tri vien)");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da khong yeu cau bat ky tro giup nao ke tu khi ho ket noi.");
	}

    AddReportToQueue(targetid, PlayerInfo[targetid][pHelpRequest]);
    PlayerInfo[targetid][pHelpRequest][0] = 0;

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s da gui yeu cau tro giup cua %s's den cac quan tri vien.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "Ban da gui yeu cau tro giup cua %s's de tat ca quan tri vien.", GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da gui yeu cau tro giup cua ban den tat ca quan tri vien.", GetPlayerRPName(playerid));
	return 1;
}

CMD:return(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua chap nhan bat ky yeu cau tro giup nao.");
	}

	if(PlayerInfo[playerid][pTagType] == TAG_HELPER)
	{
	    SetPlayerSpecialTag(playerid, TAG_NONE);
	}

	SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	SetScriptArmour(playerid, PlayerInfo[playerid][pArmor]);

	SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
	SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
	SetCameraBehindPlayer(playerid);

	SendClientMessage(playerid, COLOR_WHITE, "Ban da duoc tra lai vi tri cu cua minh.");
    PlayerInfo[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid, params[])
{
	new targetid, msg[128];

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /answerhelp [playerid] [tin nhan]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da khong yeu cau bat ky tro giup nao ke tu khi ho ket noi.");
	}

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SendClientMessageEx(targetid, COLOR_YELLOW, "** Cau tra loi tu %s: %.*s... **", GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SendClientMessageEx(targetid, COLOR_YELLOW, "** Cau tra loi tu %s: ...%s **", GetPlayerRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_YELLOW, "** Cau tra loi tu %s: %s **", GetPlayerRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s da tra loi yeu cau tro giup cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:hc(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /hc [Helper chat]");
	}
	if(PlayerInfo[playerid][pToggleHelper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the noi trong cuoc tro chuyen cua nguoi tro giup vi ban da tat no.");
	}

	foreach(new i : Player)
	{
		if((PlayerInfo[i][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0) && !PlayerInfo[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0xBDF38BFF, "** %s %s: %.*s... **", GetStaffRank(playerid), GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0xBDF38BFF, "** %s %s: ...%s **", GetStaffRank(playerid), GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0xBDF38BFF, "** %s %s: %s **", GetStaffRank(playerid), GetPlayerRPName(playerid), params);
			}
			return 1;
		}
		/*if(PlayerInfo[playerid][pAdmin] > 0 && !PlayerInfo[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0xBDF38BFF, "** %s %s: %.*s... **", GetAdminRank(playerid), GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0xBDF38BFF, "** %s %s: ...%s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0xBDF38BFF, "** %s %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
			}
			return 1;
		}*/
	}
	return 1;
}

CMD:hh(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:hhelp(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:helperhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	if(PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 1:{DDDDDD} /hc, /listhelp, /chapnhanhelp, /answerhelp, /denyhelp, /sta, /return.");
	}
    if(PlayerInfo[playerid][pHelper] >= 2)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 2:{DDDDDD} /nmute, /hmute, /gmute");
	}
    if(PlayerInfo[playerid][pHelper] >= 3)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 3:{DDDDDD} /olisthelpers, /checknewbies, /makehelper, /omakehelper.");
	}
	if(PlayerInfo[playerid][pHelper] >= 4)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 4:{DDDDDD} /setmotd.");
	}

	return 1;
}

CMD:activity(playerid, params[])
{
	new type[16];

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Tai san cua toi _______");

    foreach(new i : House)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Khac";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

	        if((gettime() - HouseInfo[i][hTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Ngoi nha %s cua ban o %s hien duoc danh dau la {FF6347}Khong hoat dong{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Ngoi nha %s cua ban o %s hien duoc danh dau la {00AA00}Hoat dong{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
		}
	}

 	foreach(new i : Garage)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
	        if((gettime() - GarageInfo[i][gTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Garage %s cua ban o %s hien duoc danh dau la {FF6347}Khong hoat dong{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Garage %s cua ban o %s hien duoc danh dau la {00AA00}Hoat dong{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
		}
	}

 	foreach(new i : Business)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
	        if((gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Doanh nghiep %s cua ban o %s hien duoc danh dau la {FF6347}Khong hoat dong{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Doanh nghiep %s cua ban o %s hien duoc danh dau la {00AA00}Hoat dong{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "** Tai san cua ban tro nen khong hoat dong neu ban khong nhap chung trong hon 30 ngay.");
	return 1;
}

CMD:hlights(playerid, params[])
{
	new option, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}
	if(sscanf(params, "i", option) || !(0 <= option <= 1))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /hlights [Den (1/0)]");
	}
	if(option)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da bat den cho ngoi nha nay.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tat den cho ngoi nha nay.");
	}
	HouseInfo[houseid][hLights] = option;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET lights = %i WHERE id = %i", option, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);
	foreach(new i : Player)
	{
	    if(GetInsideHouse(i) == houseid)
	    {
	        if(HouseInfo[houseid][hLights] == 1)
	        {
	            TextDrawHideForPlayer(i, houseLights);
	        }
	        else
	        {
	            TextDrawShowForPlayer(i, houseLights);
			}
	    }
	}

	return 1;
}

CMD:setrent(playerid, params[])
{
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}
	if(sscanf(params, "i", price))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setrent [Gia ('0' de vo hieu hoa)]");
	}
	if(!(0 <= price <= 1000))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia khong hop le. Gia chi co the tu $0 den $1000.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da dat gia thue thanh $%i.", price);
	return 1;
}

CMD:renthouse(playerid, params[])
{
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co nha trong pham vi. Ban can phai o gan mot ngoi nha.");
	}
	/*if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /renthouse [confirm]");
	}*/
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Can nha nay khong thuoc quyen so huu va do do khong the cho thue.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Chu so huu cua ngoi nha nay da chon vo hieu hoa cho thue doi voi ngoi nha nay.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong du kha nang de thue o day.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban la chu so huu cua ngoi nha nay. Ban khong the thue o day.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!PlayerInfo[playerid][pRentingHouse])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thue o bat ky tai san nao. Ban khong the su dung lenh nay.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[playerid][pRentingHouse] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "Ban da pha vo hop dong cho thue cua minh.");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid, params[])
{
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /evict [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}

	foreach(new i : Player)
    {
        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            PlayerInfo[i][pRentingHouse] = 0;
            SendClientMessage(i, COLOR_RED, "Ban da bi chu so huu duoi khoi nha.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SendClientMessage(playerid, COLOR_WHITE, "Ban da duoi tat ca nhung nguoi thue nha ra khoi nha cua ban.");
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky ngoi nha nao cua ban.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /houseinvite [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    //return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't invite yourself to your own home.");
	}

	PlayerInfo[targetid][pInviteOffer] = playerid;
	PlayerInfo[targetid][pInviteHouse] = houseid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da moi ban den nha cua ho o %s. (/chapnhan loimoi)", GetPlayerRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da moi %s den nha cua minh.", GetPlayerRPName(targetid));
	return 1;
}

CMD:furniture(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), option[14], param[32];

	if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky ngoi nha nao cua ban..");
	}
	if(sscanf(params, "s[14]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /furniture [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Mua, Chinhsua, Bansao, Sell, Clear, Allow, Disallow, Labels");
	    return 1;
	}
	if(!strcmp(option, "mua", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FURNITURE, playerid);
	}
	else if(!strcmp(option, "Chinhsua", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /furniture [Chinhsua] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong khong hop le. Ban co the tim thay ID doi tuong cho do noi that cua minh bang cach bat nhan. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong khong hop le. Do noi that nay khong co trong nha cua ban.");
        }

        PlayerInfo[playerid][pEditType] = EDIT_FURNITURE;
        PlayerInfo[playerid][pEditObject] = objectid;
        PlayerInfo[playerid][pFurnitureHouse] = houseid;

		EditDynamicObject(playerid, objectid);
        GameTextForPlayer(playerid, "~w~Che do chinh sua~n~~g~Nhan vao dia de luu~n~~r~Nhan ESC de huy bo", 5000, 1);
	}
	else if(!strcmp(option, "Bansao", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /furniture [Bansao] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong khong hop le. Ban co the tim thay ID doi tuong cho do noi that cua minh bang cach bat nhan. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong khong hop le. Do noi that nay khong co trong nha cua ban.");
        }

	    PlayerInfo[playerid][pSelected] = objectid;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECKDUPE_FURNITURE, playerid);


	}
	else if(!strcmp(option, "Sell", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /furniture [sell] [objectid] (75%% refund)");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong khong hop le. Ban co the tim thay ID doi tuong cho do noi that cua minh bang cach bat nhan. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Doi tuong khong hop le. Do noi that nay khong co trong nha cua ban.");
        }

        PlayerInfo[playerid][pSelected] = objectid;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM furniture WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_FURNITURE, playerid);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /furniture [clear] [confirm]");
			SendClientMessage(playerid, COLOR_SYNTAX, "Dieu nay ban tat ca do dac trong nha cua ban. Hanh dong nay la khong the dao nguoc.");
			return 1;
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_FURNITURE, playerid);
	}
	else if(!strcmp(option, "allow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /furniture [allow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Dieu nay chi co the duoc thuc hien boi chu so huu ngoi nha.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi ban  da bi mat ket noi.");
		}
		if(targetid == playerid)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] == houseid)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da cho phep nguoi choi do truy cap vao do dac cua ban.");
		}

		PlayerInfo[targetid][pFurniturePerms] = houseid;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da cho phep ban tiep can do dac trong nha cua ho.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da cho phep %s tiep can do dac trong nha cua ban.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "disallow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /furniture [disallow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Dieu nay chi co the duoc thuc hien boi chu so huu ngoi nha.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
		}
		if(targetid == playerid)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] != houseid)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua cho phep nguoi choi do tiep can do dac cua ban.");
		}

		PlayerInfo[targetid][pFurniturePerms] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da xoa quyen truy cap cua ban vao do dac trong nha cua ho.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da xoa quyen truy cap cua %s vao do dac trong nha cua ban.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "labels", true))
	{
	    if(!HouseInfo[houseid][hLabels])
	    {
	        HouseInfo[houseid][hLabels] = 1;
         	SendClientMessage(playerid, COLOR_AQUA, "Bay gio ban se thay cac nhan xuat hien phia tren tat ca do noi that cua ban.");
	    }
	    else
	    {
	        HouseInfo[houseid][hLabels] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Ban se khong con thay bat ky nhan nao xuat hien phia tren do noi that cua minh.");
	    }

	    ReloadAllFurniture(houseid);
	}


	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /creategarage [small/medium/large]");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Co garage trong pham vi. Tim mot noi khac de tao cai nay.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tao Garage trong nha.");
	}

	if(!strcmp(size, "small", true)) {
	    type = 0;
	} else if(!strcmp(size, "medium", true)) {
	    type = 1;
	} else if(!strcmp(size, "large", true)) {
	    type = 2;
	}

	if(type == -1)
	{
	     SendClientMessage(playerid, COLOR_LIGHTRED, "Kich thuoc khong hop le. Kich thuoc hop le bao gom tu Small, Medium va Large.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

  		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SendClientMessage(playerid, COLOR_LIGHTRED, "So luong Garage da dat den gioi han. Yeu cau cac Developers tang gioi han.");
	}

	return 1;
}

CMD:editgarage(playerid, params[])
{
	new garageid, option[10], param[32];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgarage [garageid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Entrance, Exit, Type, Owner, Price, Locked, Freeze");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Garage khong hop le.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tao Garage trong nha.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi vao cua Garage %i.", garageid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgarage [garageid] [freeze] [0/1]");
		}

		GarageInfo[garageid][gFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET freeze = %i WHERE id = %i", GarageInfo[garageid][gFreeze], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da bat tinh nang dong bang & tai doi tuong cho loi vao %i.", garageid);
		else
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tat tinh nang dong bang & tai doi tuong cho loi vao %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tao garage trong nha.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi ra xe xuat hien cua garage %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgarage [garageid] [type] [small/medium/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "medium", true)) {
		    type = 1;
		} else if(!strcmp(size, "large", true)) {
		    type = 2;
		}

		if(type == -1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi garage %i thanh loai %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editgarage [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
		}

        SetGarageOwner(garageid, targetid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi chu so huu cua garage %i thanh %s.", garageid, GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgarage [garageid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien khong duoc duoi $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi gia tien cua garage %i thanh $%i.", garageid, price);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgarage [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi trang thai khoa cua garage %i thanh %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid, params[])
{
	new garageid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removegarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Garage khong hop le.");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;
    Iter_Remove(Garage, garageid);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da loai bo garage %i.", garageid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotogarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Garage khong hop le.");
	}

	GameTextForPlayer(playerid, "~w~Dich chuyen", 5000, 1);

	SetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	SetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** TRO GIUP GARAGE *** go lenh de biet them thong tin.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** GARAGE *** /buygarage /lock /upgradegarage /sellgarage /sellmygarage /garageinfo");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** GARAGE *** /repair /refuel");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co garage trong pham vi. Ban phai o gan garage.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /buygarage [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Garage nay da co chu so huu.");
	}
	if(PlayerInfo[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua garage nay.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da so huu %i/%i garage. Ban khong the so huu them nua tru khi ban nang cap dac quyen so huu tai san.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da tra %s de mua garage nay! /garagehelp de xem danh sach lenh.", FormatNumber(GarageInfo[garageid][gPrice]));
    Log_Write("log_property", "%s (uid: %i) da mua garage %s (id: %i) voi gia $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], GarageInfo[garageid][gPrice]);
	return 1;
}

CMD:upgradegarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky garage nao cua ban.");
	}
	if(GarageInfo[garageid][gType] >= 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Garage cua ban da o kich thuoc toi da co the. Ban khong the nang cap no them.");
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradegarage [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Kich thuoc Garage hien tai la %s va nang cap len voi gia %s.", garageInteriors[GarageInfo[garageid][gType] + 1][intName], FormatNumber(garageInteriors[GarageInfo[garageid][gType] + 1][intPrice]));
		return 1;
	}
	if(PlayerInfo[playerid][pCash] < garageInteriors[GarageInfo[garageid][gType] + 1][intPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang nang cap nha de xe cua minh.");
	}

	foreach(new i: Vehicle)
	{
	    if(IsVehicleInGarage(i, garageid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai chuyen tat ca cac phuong tien ra khoi garage cua minh truoc khi tiep tuc.");
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i AND interior > 0 AND world = %i", PlayerInfo[playerid][pID], GarageInfo[garageid][gWorld]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerUpgradeGarage", "ii", playerid, garageid);
	return 1;
}

CMD:sellgarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky garage nao cua ban.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellgarage [playerid] [gia tien]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban cho chinh minh.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai chi dinh so tien tren $0.");
	}

	PlayerInfo[targetid][pGarageOffer] = playerid;
	PlayerInfo[targetid][pGarageOffered] = garageid;
	PlayerInfo[targetid][pGaragePrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s de nghi ban garage cua ho cho ban voi gia %s (/chapnhan garage).", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi %s mua garage voi gia %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky nha de xe nao cua ban.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellmygarage [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Lenh nay ban nha de xe cua ban tro lai trang thai. Ban se nhan lai %s.", FormatNumber(percent(GarageInfo[garageid][gPrice], 75)));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da ban nha de xe cua minh cho chinh phu va nhan lai %s.", FormatNumber(percent(GarageInfo[garageid][gPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) da ban garage %s (id: %i) cho chinh phu voi gia $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid, params[])
{
    new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi bat ky garage nao cua ban.");
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ Garage ID %i _______", garageid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Gia: %s - Kich thuoc: %s - Vi tri: %s - Hoat dong: %s - Khoa: %s", FormatNumber(GarageInfo[garageid][gPrice]), garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 2592000) ? ("{FF6347}Khong{C8C8C8}") : ("Co"), (GarageInfo[garageid][gLocked]) ? ("Co") : ("Khong"));
	return 1;
}

CMD:createbiz(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", type))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createbiz [type]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Tool Shop");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Co mot doanh nghiep trong pham vi. Tim mot noi khac de tao cai nay.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "So luong doanh nghiep da dat den gioi han. Yeu cau cac Developers tang gioi han.");
	return 1;
}

CMD:editbiz(playerid, params[])
{
	new businessid, option[14], param[32];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Entrance, Exit, Interior, World, Type, Owner, Price, EntryFee, Products, Materials, Locked");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep khong hop le.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi vao cua doanh nghiep %i.", businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi ra cua doanh nghiep %i.", businessid);
	}
	else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    PlayerInfo[playerid][pSelected] = businessid;
	    ShowPlayerDialog(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Chon mot noi that de dat cho doanh nghiep nay.", string, "Chon", "Huy bo");
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi VW cua doanh nghiep %i thanh %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [type] [gia tri (1-%i)]", sizeof(bizInteriors));
	        SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Tool Shop");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loai hinh kinh doanh cua doanh nghiep %i thanh %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
		}

        SetBusinessOwner(businessid, targetid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi chu so huu cua doanh nghiep %i thanh %s.", businessid, GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien phai tren $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi gia tien cua doanh nghiep %i thanh $%i.", businessid, price);
	}
	else if(!strcmp(option, "entryfee", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [entryfee] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phi gia nhap khong the duoi $0.");
		}

		BusinessInfo[businessid][bEntryFee] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi phi gia nhap doanh nghiep %i thanh $%i.", businessid, price);
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [products] [value]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi so luong san pham cua doanh nghiep %i thanh %i.", businessid, amount);
	}
	else if(!strcmp(option, "materials", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [materials] [value]");
		}

		BusinessInfo[businessid][bMaterials] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi so luong vat lieu cua doanh nghiep %i thanh %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editbiz [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi trang thai khoa cua doanh nghiep %i thanh %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid, params[])
{
	new businessid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removebiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep khong hop le.");
	}

	RemoveAllFurniture(businessid);

	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;
	Iter_Remove(Business, businessid);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa bo doanh nghiep %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotobiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep khong hop le.");
	}

	GameTextForPlayer(playerid, "~w~Dich chuyen", 5000, 1);

	SetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	SetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);
	SetPlayerInterior(playerid, BusinessInfo[businessid][bOutsideInt]);
	SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN, "_________________________________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** TRO GIUP DOANH NGHIEP *** go lenh de biet them thong tin.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** DOANH NGHIEP *** /buybiz /lock /bwithdraw /bdeposit /entryfee /sellbiz /sellmybiz /bizinfo");
	SendClientMessage(playerid, COLOR_LIGHTRED, "*** DOANH NGHIEP *** /bdepositmats /bwithdrawmats");
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new businessid;

	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co doanh nghiep nao trong pham vi. Ban can phai o gan mot doanh nghiep.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /buybiz [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep nay da co chu so huu.");
	}
	if(PlayerInfo[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co du kha nang mua doanh nghiep nay.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da so huu %i/%i doanh nghiep. Ban khong the so huu them tru khi nang cap dac quyen so huu tai san.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da tra $%i de mua doanh nghiep %s. /bizhelp de xem danh sach lenh.", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType]);
    Log_Write("log_property", "%s (uid: %i) da mua %s (id: %i) voi gia $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], BusinessInfo[businessid][bPrice]);
	return 1;
}

CMD:bwithdraw(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky doanh nghiep nao cua ban.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /bwithdraw [so luong] (%s co san)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da lay ra %s tu kho luu tru cua doanh nghiep. Hien con lai %s.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:bdeposit(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky doanh nghiep nao cua ban.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /bdeposit [so luong] (%s co san)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang Admin Duty");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui %s vao kho luu tru cua doanh nghiep. Hien tai co %s.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:bwithdrawmats(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky doanh nghiep nao cua ban.");
	}
	if(BusinessInfo[businessid][bType] != BUSINESS_TOOLSHOP)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi su dung trong cac doanh nghiep cong cu.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /bwithdrawmats [so luong] (%i co san)", BusinessInfo[businessid][bMaterials]);
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bMaterials])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du.");
	}
	if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co %i/%i vat lieu. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	BusinessInfo[businessid][bMaterials] -= amount;
	PlayerInfo[playerid][pMaterials] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da lay ra %i vat lieu tu kho luu tru doanh nghiep. Hien tai co %i.", amount, BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:bdepositmats(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky doanh nghiep nao.");
	}
	if(BusinessInfo[businessid][bType] != BUSINESS_TOOLSHOP)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi su dung trong cac doanh nghiep cong cu.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /bdepositmats [so luong] (%i co san)", BusinessInfo[businessid][bMaterials]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du.");
	}

	BusinessInfo[businessid][bMaterials] += amount;
	PlayerInfo[playerid][pMaterials] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui %i vat lieu vao kho luu tru doanh nghiep. Hien tai co %i.", amount, BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc pham vi bat ky doanh nghiep nao cua ban.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellbiz [playerid] [so luong]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban cho chinh minh.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai chi dinh so tien tren $0.");
	}

	PlayerInfo[targetid][pBizOffer] = playerid;
	PlayerInfo[targetid][pBizOffered] = businessid;
	PlayerInfo[targetid][pBizPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da de nghi ban doanh nghiep cua ho voi gia %s (/chapnhan doanhnghiep).", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi %s mua doanh nghiep voi gia %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi bat ky doanh nghiep nao cua ban.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellmybiz [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Lenh nay se ban doanh nghiep cua ban tro lai trang thai. Ban se nhan lai duoc %s.", FormatNumber(percent(BusinessInfo[businessid][bPrice], 75)));
	    return 1;
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da ban doanh nghiep cua minh cho chinh phu va nhan lai duoc %s.", FormatNumber(percent(BusinessInfo[businessid][bPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) da ban doanh nghiep %s (id: %i) cho chinh phu voi gia %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
	return 1;
}

CMD:bizinfo(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc pham vi bat ky doanh nghiep nao cua ban.");
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ Doanh nghiep ID %i _______", businessid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Gia: %s - Loai: %s - Vi tri: %s - Hoat dong: %s - Trang thai: %s", FormatNumber(BusinessInfo[businessid][bPrice]), bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 2592000) ? ("{FF6347}No{C8C8C8}") : ("Co"), (BusinessInfo[businessid][bLocked]) ? ("Dong") : ("Mo"));
	SendClientMessageEx(playerid, COLOR_GREY2, "Luu tru: %s - Phi vao: %s - San pham: %i - Vat lieu: %i", FormatNumber(BusinessInfo[businessid][bCash]), FormatNumber(BusinessInfo[businessid][bEntryFee]), BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:entryfee(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc pham vi bat ky doanh nghiep nao cua ban");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /entryfee [so luong]");
	}
	if(amount < 0 || amount > 100)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phi vao cua khong duoi $0 va tren $100.");
	}

	BusinessInfo[businessid][bEntryFee] = amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chinh sua phi vao cua la $%i.", amount);
	return 1;
}

CMD:mua(playerid, params[])
{
	return callcmd::buy(playerid, params);
}

CMD:buy(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), title[64];

	if(businessid == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky doanh nghiep nao de mua san pham.");
	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep nay da het hang.");
   	}

	format(title, sizeof(title), "%s's %s [%i san pham]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

	switch(BusinessInfo[businessid][bType]) // quan ao
	{
	    case BUSINESS_STORE:
	    {
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Dien thoai di dong ($20)\nBo dam ($120)\nXi ga ($10)\nBinh phun son ($50)\nDanh ba dien thoai ($20)\nMay anh ($200)\nMay nghe nhac MP3 ($250)\nCan cau ($30)\nMoi cau ca ($10)\nAxit muriatic ($70)\nBaking soda ($70)\nDong ho ($350)\nHe thong GPS ($500)\nCan xang ($100)\nDay thung ($20)\nMat na ($2,000)", "Chon", "Huy bo");
		}
		/*
		case BUSINESS_GUNSHOP:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "9mm pistol ($1500)\nShotgun ($2000)\nRifle ($4000)\nLight armor ($1500)\nMedium Armor($2500)", "Chon", "Huy bo");
		}*/
		case BUSINESS_CLOTHES:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Quan ao ($70)\nKinh ($20)\nKhan ran va mat na ($50)\nNon va mu luoi trai ($50)\nQuan ao khac ($200)", "Chon", "Huy bo");
		}
		case BUSINESS_GYM:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Binh thuong (Mien phi)\nBoxing ($275)\nKung Fu ($260)\nKneehead ($275)\nGrabkick ($125)\nElbow ($250)", "Chon", "Huy bo");
		}
		case BUSINESS_RESTAURANT:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Nuoc khoang ($6)\nSprunk ($8)\nKhoai tay chien ($10)\nBanh mi kep ($13)\nBanh mi kep pho mai ($15)\nMac & pho mai ($20)\nSandwich ($15)\nCa va khoai tay chien ($25)\nBanh Pizza ($30)", "Chon", "Huy bo");
		}
		case BUSINESS_BARCLUB:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Nuoc khoang ($6)\nSprunk ($8)\nBia ($8)\nRuou ($20)\nWhiskey ($25)", "Chon", "Huy bo");
		}
		case BUSINESS_TOOLSHOP:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST_HEADERS, title, "San pham\tGia\nBo so cuu\t500 vat lieu\nBo sua chua\t1000 vat lieu\nMay quet canh sat\t2000 vat lieu\nRimkit\t4000 vat lieu", "Chon", "Huy bo");
		}

	}

	return 1;
}

CMD:advertise(playerid, params[])
{
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid, params[])
{
    new businessid = GetInsideBusiness(playerid), price = strlen(params) * 25;

	if((PlayerInfo[playerid][pVIPPackage] == 0) && (businessid == -1 || BusinessInfo[businessid][bType] != 5))
	{
	    if(GetClosestBusiness(playerid, BUSINESS_AGENCY) == -1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co dai ly quang cao nao trong thi tran.");
	        return 1;
	    }
	    businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(ad)vertise [Quang cao] ($25/ky tu)");
	}
	if(PlayerInfo[playerid][pAdMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the gui quang cao. Su dung /baocao de bat tieng");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co dien thoai di dong. Co dien thoai di dong de moi nguoi lien he voi ban.");
	}
	if(PlayerInfo[playerid][pHours] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can tham gia may chu it nhat 5 gio de quang cao.");
	}
	if(gettime() - gLastAd < 60)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Quang cao chi co the dang sau moi 1 phut.");
	}
	if(PlayerInfo[playerid][pVIPPackage] < 3 && PlayerInfo[playerid][pCash] < price)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can %s de dat quang cao. Ban khong du kha nang de lam dieu nay.", FormatNumber(price));
	}

	new
		string[20];

	gLastAd = gettime();

	if(PlayerInfo[playerid][pVIPPackage] == 3)
	{
	    SendClientMessage(playerid, COLOR_VIP, "VIP Perk: Quang cao cua ban da duoc mien phi!");
	}
	else
	{
		format(string, sizeof(string), "~r~-$%i", price);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -price);

		if(businessid >= 0)
		{
		    if(BusinessInfo[businessid][bProducts] > 0)
		    {
				BusinessInfo[businessid][bCash] += (price/100) * 75;
			}
			BusinessInfo[businessid][bProducts]--;
			gNewsVault += (price/100)*5;
			SaveServerInfo();

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}

	SendClientMessageToAllEx((PlayerInfo[playerid][pVIPPackage] > 0) ? (COLOR_LIGHTORANGE) : (COLOR_DARKGREEN), "Quang Cao: %s, Lien he: %s, Ph: %i", params, GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
	//SendDiscordMessage(AdChannel, "[Advertisement]: %s - Contact: %s - Phone: %s", params, GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
	return 1;
}

CMD:mark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /mark [vi tri (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le.");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Vi tri duoc luu trong vung %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotomark [vi tri (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le.");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co vi tri nao trong vung duoc chon.");
	}

	slot--;

	GameTextForPlayer(playerid, "~w~Dich chuyen", 5000, 1);

	SetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	SetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);
	SetPlayerInterior(playerid, MarkedPositions[playerid][slot][mInterior]);
	SetPlayerVirtualWorld(playerid, MarkedPositions[playerid][slot][mWorld]);
	SetCameraBehindPlayer(playerid);

	return 1;
}

CMD:createentrance(playerid, params[])
{
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createentrance [name]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Co mot canh cua trong pham vi. Hay tim noi khac de tao loi vao.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES('%e', '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "So luong canh cua da dat den gioi han. Yeu cau cac Developers tang gioi han.");
	return 1;
}

CMD:editentrance(playerid, params[])
{
	new entranceid, option[14], param[64];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Entrance, Exit, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Faction, Gang, VIP, Vehicles, Freeze, Label, Password, Type, MapIcon, Color");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Canh cua khong hop le.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi vao cua canh cua %i.", entranceid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loi ra cua canh cua %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [name] [van ban]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = '%e' WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi ten cua canh cua %i thanh '%s'.", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong xac dinh model ID.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi pickup icon cua canh cua %i thanh %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi VW cua canh cua %i thanh %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da dat lai chu so huu cua canh cua %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi chu so huu cua canh cua %i thanh %s.", entranceid, GetPlayerRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi trang thai khoa cua canh cua %i thanh %i.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban kinh vao phai nam trong khoang 1,0 den 20,0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Da thay doi ban kinh cua canh cua %i thanh %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap do khong hop le. Cap do chi tu 0 den 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi cap do quan tri cua quyen truy cap cho canh cua %i thanh %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(0 <= type <= 6))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da dat lai kieu to chuc cho canh cua %i.", entranceid);
		else
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi loai to chuc cho canh cua %i thanh %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

	    if(sscanf(param, "i", gangid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [gang] [gangid]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gang khong hop le.");
		}

		EntranceInfo[entranceid][eGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET gang = %i WHERE id = %i", EntranceInfo[entranceid][eGang], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(gangid == -1)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thiet lap lai loi vao cua gang canh cua %i.", entranceid);
		else
	    	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi gang cho canh cua %i thanh %s (%i).", entranceid, GangInfo[gangid][gName], gangid);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [vip] [rankid]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cap bac: (0) None (1) Silver (2) Diamond (3) Supreme");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap bac VIP khong hop le.");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi cap bac VIP cho canh cua %i thanh {D909D9}%s{33CCFF} (%i).", entranceid, GetVIPRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da cho phep phuong tien vao canh cua %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da khong cho phep phuong tien vao canh cua %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da bat tinh nang dong bang & tai doi tuong cho canh cua %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tat tinh nang dong bang & tai doi tuong cho canh cua %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da bat nhan van ban 3D cho canh cua %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tat nhan van ban 3D cho canh cua %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [password] [text ('none' to reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = '%e' WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi mat khau cho canh cua %i thanh '%s'.", entranceid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [type] [type id]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (0) None (1) Duel Arena (2) Repair");
	        return 1;
		}
		if(!(0 <= type <= 2))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
		}

        EntranceInfo[entranceid][eType] = type;

		if(type == 1)
		{
		    EntranceInfo[entranceid][eIntX] = 1419.6472;
			EntranceInfo[entranceid][eIntY] = 4.0132;
			EntranceInfo[entranceid][eIntZ] = 1002.3906;
			EntranceInfo[entranceid][eIntA] = 90.0000;
			EntranceInfo[entranceid][eInterior] = 1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, type = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eType], EntranceInfo[entranceid][eID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET type = %i WHERE id = %i", EntranceInfo[entranceid][eType], EntranceInfo[entranceid][eID]);
		    mysql_tquery(connectionID, queryBuffer);
		}

		ReloadEntrance(entranceid);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da dat loai dac biet cho canh cua %i thanh %i.", entranceid, type);
	}
	else if(!strcmp(option, "mapicon", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [mapicon] [type (0-63)]");
		}
		if(!(0 <= type <= 63))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Map Icon khong hop le.");
		}

		EntranceInfo[entranceid][eMapIcon] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET mapicon = %i WHERE id = %i", EntranceInfo[entranceid][eMapIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi map icon cua canh cua %i thanh %i.", entranceid, type);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editentrance [entranceid] [color] [0xRRGGBBAA]");
		}

		EntranceInfo[entranceid][eColor] = (color & ~0xFF) | 0xFF;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET color = %i WHERE id = %i", EntranceInfo[entranceid][eColor], EntranceInfo[entranceid][eID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi {%06x}mau sac{33CCFF} cua canh cua ID %i.", color >>> 8, entranceid);
	}

	return 1;
}

CMD:removeentrance(playerid, params[])
{
	new entranceid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removeentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Canh cua khong hop le.");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;
	Iter_Remove(Entrance, entranceid);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa bo canh cua %i.", entranceid);
	return 1;
}

CMD:gotoentrance(playerid, params[])
{
	new entranceid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotoentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Canh cua khong hop le.");
	}

	GameTextForPlayer(playerid, "~w~Dich chuyen", 5000, 1);

	SetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	SetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);
	SetPlayerInterior(playerid, EntranceInfo[entranceid][eOutsideInt]);
	SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:courierduty(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_COURIER))
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai la nguoi van chuyen de su dung lenh nay.");
	}
	if(CourierDuty[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Bay gio ban dang trong gio lam viec Nguoi van chuyen, hay len mot chiec xe tai de bat dau.");
		CourierDuty[playerid] = 1;
	}
	else if(CourierDuty[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Giao hang] {FFFFFF}Bay gio ban tam thoi nghi ngoi.");
		CourierDuty[playerid] = 0;
	}
	return 1;
}

CMD:farmerduty(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_FARMER))
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai la mot nong dan de su dung lenh nay.");
	}
	if(FarmerDuty[playerid] == 0)
	{
		switch(PlayerInfo[playerid][pGender])
		{
			case 1: SetPlayerSkin(playerid, 202);
			case 2: SetPlayerSkin(playerid, 201);

		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Nong dan] {FFFFFF}Bay gio ban dang trong gio lam viec nong dan, de bat dau thoi nao.");
		FarmerDuty[playerid] = 1;
	}
	else if(FarmerDuty[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Nong dan] {FFFFFF}Bay gio ban tam thoi nghi ngoi.");
		FarmerDuty[playerid] = 0;
	}
	return 1;
}
CMD:traxe(playerid, params[])
{
	new choice[16];
	if(sscanf(params, "s[16]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Su dung]: /traxe [Phuong tien]");
		return SendClientMessage(playerid, COLOR_WHITE, "[Tuy chon]: Pizza, Giaohang");
	}
	if(!strcmp(choice, "pizza", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 1373.6323,265.4795,19.5669))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 448)
			{
				VehiclesPizza[playerid] = 0;
				DestroyVehicle(vehicleid);
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Pizza]{ffffff} Ban da tra phuong tien Pizza thanh cong.");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Day khong phai la phuong tien pizza.");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban can phai o noi tra xe Pizza.");
	}
	if(!strcmp(choice, "giaohang", true))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, 315.3503,-236.1883,1.5756))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 414)
			{
				VehiclesCourier[playerid] = 0;
				DestroyVehicle(vehicleid);
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Giao hang]{ffffff} Ban da tra phuong tien Mule thanh cong.");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Day khong phai la phuong tien Mule.");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban can phai o noi tra xe giao hang.");
	}
	return 1;
}

CMD:duty(playerid, params[])
{
	new choice[16];
	if(sscanf(params, "s[16]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Su dung]: /duty [Job]");
		return SendClientMessage(playerid, COLOR_LIGHTRED, "[Options]: Pizza, Giaohang, Nongdan");
	}
	if(!strcmp(choice, "pizza", true)) {
		return callcmd::pizzaduty(playerid, params);
	} else if(!strcmp(choice, "giaohang", true)) {
		return callcmd::courierduty(playerid, params);
	}
	else if(!strcmp(choice, "nongdan", true)) {
		return callcmd::farmerduty(playerid, params);
	}
	return 1;
}
CMD:pizzaduty(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_PIZZAMAN))
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la nguoi Van chuyen Pizza de su dung lenh nay.");
	}
	if(PizzaDuty[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Bay gio ban dang trong gio lam viec Van chuyen Pizza, hay len mot chiec xe Pizza de lam viec.");
		PizzaDuty[playerid] = 1;
		switch(PlayerInfo[playerid][pGender])
		{
			case 1: SetPlayerSkin(playerid, 155);
			case 2: SetPlayerSkin(playerid, 205);

		}
		//SetPlayerColor(playerid, 0xFF5100FF);
	}
	else if(PizzaDuty[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Bay gio ban tam thoi nghi ngoi.");
		PizzaDuty[playerid] = 0;
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		//SetPlayerColor(playerid, 0xFFFFFFFF);
	}
	return 1;
}
CMD:quitjob(playerid, params[])
{
	new slot;

	if(PlayerInfo[playerid][pVIPPackage] >= 2 && sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /quitjob [1/2]");
	}

	if((PlayerInfo[playerid][pVIPPackage] < 2) || (PlayerInfo[playerid][pVIPPackage] >= 2 && slot == 1))
	{
	    if(PlayerInfo[playerid][pJob] == JOB_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co cong viec ma ban co the thoat.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thoat cong viec {00AA00}%s{33CCFF}.", GetJobName(PlayerInfo[playerid][pJob]));
		PlayerInfo[playerid][pJob] = JOB_NONE;
		PizzaDuty[playerid] = 0;
	}
	else if(slot == 2 && PlayerInfo[playerid][pVIPPackage] >= 2)
	{
	    if(PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co viec lam o vi tri nay ma ban co the nghi viec.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da bo cong viec phu cua minh la {00AA00}%s{33CCFF}.", GetJobName(PlayerInfo[playerid][pSecondJob]));
		PlayerInfo[playerid][pSecondJob] = JOB_NONE;
		PizzaDuty[playerid] = 0;
	}

	return 1;
}
CMD:startjob(playerid, params[])
{
	new choice[16];
	if(sscanf(params, "s[16]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Su dung]: /startjob [Job]");
		return SendClientMessage(playerid, COLOR_LIGHTRED, "[Options]: Giaopizza, Giaohang");
	}
	if(!strcmp(choice, "giaopizza", true)) {
		return callcmd::giaobanh(playerid, params);
	} else if(!strcmp(choice, "giaohang", true)) {
		return callcmd::giaohang(playerid, params);
	}
	return 1;
}

CMD:giaohang(playerid, params[])
{
	new businessid, deliveries, final;
	if(CourierDuty[playerid] != 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai trong gio lam viec cua Nguoi van chuyen.");
	}
	if(PlayerInfo[playerid][pHoldingPizza] == 1 || PlayerInfo[playerid][pHoldingBox] == 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Su dung: /drop [pizza/crate]");
	}
	if(PlayerInfo[playerid][pCourierBiz] > -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da co nguon cung cap. Su dung /kcp de huy no.");
	}
	businessid = GetRandomBiz();
	PlayerInfo[playerid][pCourierBiz] = businessid;
	switch(PlayerInfo[playerid][pLaborUpgrade])
	{
		case 0: deliveries = 5;
	}
	final = random(deliveries);
	PlayerInfo[playerid][pCourierQueue] = final;
	SendClientMessageEx(playerid, COLOR_BLUE, "[Don hang]: {FFFFFF}Dia chi Doanh nghiep %d da dat %d thung hang. /trace biz [%d]", businessid, final, businessid);
	return 1;
}



CMD:giaobanh(playerid, params[])
{
	new houseid;
	if(PizzaDuty[playerid] != 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai trong gio lam viec Van chuyen Pizza de su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pHoldingPizza] == 1 || PlayerInfo[playerid][pHoldingBox] == 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Su dung: /drop [pizza/crate]");
	}
	/*if(PlayerInfo[playerid][pPizzaHouse] == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "There seems to be a problem with houses, contact Dev86 or Ashley Kuznetsova with error code: H-1");
	}*/
	if(PlayerInfo[playerid][pPizzaHouse] > -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang van chuyen Pizza. Su dung /kcp de huy no.");
	}
	if(PlayerInfo[playerid][pPizzas] == 0)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "[Loi] Ban khong co pizza. Hay quay lai nha hang de lay tiep.");
	}
	houseid = GetRandomHouse();
	PlayerInfo[playerid][pPizzaHouse] = houseid;
	SendClientMessageEx(playerid, COLOR_YELLOW, "[CUOC GOI]: {FFFFFF}Dia chi nha %d da goi mot phan pizza(s). Hay gui cho ho don hang! /trace house [%d]", houseid, houseid);
	return 1;
}
/*
CMD:getpizza(playerid, params[])
{
	//new houseid = GetRandomHouse(playerid);

    if(!PlayerHasJob(playerid, JOB_PIZZAMAN))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi khong phai la nguoi Giao Pizza.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 448)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can dieu khien phuong tien giao Pizza.");
	}
	if(PlayerInfo[playerid][pPizzas] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You have pizzas already. Deliver them first.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2093.8367, -1792.0201, 13.3889))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o noi lay banh.");
	}

	new pizzaAmount;
	switch(PlayerInfo[playerid][pLaborUpgrade])
	{
		case 0: pizzaAmount = 10;
		case 1: pizzaAmount = 12;
		case 2: pizzaAmount = 15;
		case 3: pizzaAmount = 19;
		case 4: pizzaAmount = 27;
		case 5: pizzaAmount = 34;
	}
    PlayerInfo[playerid][pPizzas] = pizzaAmount;

	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat day xe Pizza cua minh, bay gio ban co %d pizza.", pizzaAmount);
	return 1;
}*/

IsHouseInLS(houseid)
{
    if(HouseInfo[houseid][hPosX] >= -28.857421 && HouseInfo[houseid][hPosY] >= -2853.619140 && HouseInfo[houseid][hPosX] <= 2953.142578 && HouseInfo[houseid][hPosY] <= 604.380859) return 1;
	else return 0;

}
GetRandomHouse() // For pizzaboy job.
{
	new index, houseIDs[MAX_HOUSES] = {-1, ...};

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOutsideInt] == 0 && HouseInfo[i][hOutsideVW] == 0 && IsHouseInLS(i) == 1)
	    {
	        houseIDs[index++] = i;
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}
GetRandomBiz() // For courier job.
{
	new index, houseIDs[MAX_BUSINESSES] = {-1, ...};

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0)
	    {
	        houseIDs[index++] = i;
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}


CMD:deliver(playerid, params[])
{
	new businessid, products, amount;

    if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi khong phai la nguoi Van chuyen.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can dieu khien mot chiec xe Mule hoac Boxville.");
	}
	if(PlayerInfo[playerid][pShipment] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co thung hang nao duoc tai ma ban co the giao.");
	}
	if((businessid = GetNearbyBusiness(playerid, 7.0)) == -1 || BusinessInfo[businessid][bType] != PlayerInfo[playerid][pShipment])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc pham vi doanh nghiep chap nhan loai tai nay.");
	}

	if(gettime() - PlayerInfo[playerid][pLastLoad] < 20 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
    {
        PlayerInfo[playerid][pACWarns]++;

        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
        {
            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] co the dang dich chuyen giao hang (thoi gian: %i).", GetPlayerRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastLoad]);
		}
		else
		{
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s da bi tu dong banned boi %s, ly do: Dich chuyen giao hang", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
		    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport delivering");
		}
    }

	products = (GetJobLevel(playerid, JOB_COURIER) * 5) + 5;

	if(PlayerInfo[playerid][pShipment] == BUSINESS_STORE) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 470;
  	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_GUNSHOP) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 525;
    } else if(PlayerInfo[playerid][pShipment] == BUSINESS_CLOTHES) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 545;
  	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_RESTAURANT) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 490;
 	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_BARCLUB) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 440;
	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_TOOLSHOP) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 560;
	}

	amount += floatround(GetPlayerDistanceFromPoint(playerid, -63.4372, -1121.4932, 1.1103) / 2.0);

    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da kiem duoc {00AA00}$%i{33CCFF} tren phieu luong cua ban khi giao %i san pham.", amount, products);
	AddToPaycheck(playerid, amount);

	BusinessInfo[businessid][bProducts] += products;
	PlayerInfo[playerid][pShipment] = -1;
	PlayerInfo[playerid][pCourierCooldown] = 120;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_COURIER);

	return 1;
}

CMD:tow(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai o trong xe keo de su dung lenh nay.");
	}
 	if(!IsLawEnforcement(playerid))
 	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai la tho sua xe hoac nguoi co tham quyen moi su dung lenh nay.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s ha moc keo cua ho xuong, gan no vao xe.", GetPlayerRPName(playerid));
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nang moc keo, khoa xe tai cho.", GetPlayerRPName(playerid));
        }
    }
    if (!Found) {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co phuong tien nao trong pham vi ma ban co the keo.");
    }
    return 1;
}

CMD:stoptow(playerid, params[])
{
	if(!IsLawEnforcement(playerid))
 	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai la tho sua xe hoac nguoi co tham quyen moi su dung lenh nay.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai o trong xe keo de su dung lenh nay.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong keo mot chiec xe.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s ha thap moc keo cua ho, tach no ra khoi xe.", GetPlayerRPName(playerid));
    return 1;
}

CMD:fill(playerid, params[])
{
	return callcmd::refuel(playerid, params);
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerAtFuelStation(playerid) && GetInsideGarage(playerid) == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can phai o tram xang hoac ben trong garage.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dieu khien bat ky phuong tien nao.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Xe nay khong co dong co va khong the do xang.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Binh xang trong chiec xe nay da day.");
	}
	if(PlayerInfo[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * 2)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong du tien mat. No se khien ban mat it nhat $%i.", (100 - vehicleFuel[vehicleid]) * 2);
	}

	if(PlayerInfo[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
	    GivePlayerCash(playerid, -PlayerInfo[playerid][pRefuelAmount]);
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, 1);
        SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da do day binh xang cua minh voi gia $%i.", PlayerInfo[playerid][pRefuelAmount]);

        PlayerInfo[playerid][pRefuel] = INVALID_VEHICLE_ID;
        PlayerInfo[playerid][pRefuelAmount] = 0;
	}
	else
	{
		PlayerInfo[playerid][pRefuel] = vehicleid;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, 0);
		PlayerInfo[playerid][pRefuelAmount] = 0;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s bat dau tiep nhien lieu vao xe cua ho.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "Qua trinh nay se mat %i giay. Ban se nhan duoc thong bao khi hoan thanh.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}

CMD:withdraw(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /withdraw [so luong] ($%i co san)", PlayerInfo[playerid][pBank]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}

	PlayerInfo[playerid][pBank] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da lay ra {00AA00}%s{33CCFF} tu tai khoan ngan hang. So du moi cua ban %s.", FormatNumber(amount), FormatNumber(PlayerInfo[playerid][pBank]));
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /deposit [so luong]");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	   return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang Admin Duty");
	}

	PlayerInfo[playerid][pBank] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da gui {00AA00}%s{33CCFF} vao tai khoan ngan hang. So du moi cua ban %s.", FormatNumber(amount), FormatNumber(PlayerInfo[playerid][pBank]));
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban co the su dung lenh nay neu cap do cua ban la 2+.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /wiretransfer [playerid] [so luong]");
	}
	if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi or hasn't logged in yet.");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the chuyen tien cho chinh minh.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	   return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang Admin Duty");
	}

	PlayerInfo[targetid][pBank] += amount;
	PlayerInfo[playerid][pBank] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[targetid][pBank], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chuyen {00AA00}%s{33CCFF} toi tai khoan %s. So du moi cua ban la %s.", FormatNumber(amount), GetPlayerRPName(targetid), FormatNumber(PlayerInfo[playerid][pBank]));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s da chuyen {00AA00}%s{33CCFF} toi tai khoan cua ban.", GetPlayerRPName(playerid), FormatNumber(amount));
	Log_Write("log_give", "%s (uid: %i) (IP: %s) da chuyen $%i toi %s (uid: %i) (IP: %s)", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerRPName(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) da chuyen %s toi %s (IP: %s).", GetPlayerRPName(playerid), GetPlayerIP(playerid), FormatNumber(amount), GetPlayerRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:balance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
	}

	SendClientMessageEx(playerid, COLOR_GREEN, "So du tai khoan ngan hang cua ban la $%i.", PlayerInfo[playerid][pBank]);
	return 1;
}

CMD:rt(playerid, params[])
{
	return callcmd::rsms(playerid, params);
}


CMD:rsms(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rsms [van ban]");
	}
	if(PlayerInfo[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua nhan duoc tin nhan cua bat ky ai ke tu khi ban tham gia may chu.");
	}
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pJailType] > 0)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang bi bo tu va khong the su dung dien thoai cua ho.");
    }
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTogglePhone])
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da tat dien thoai di dong cua ho.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung dien thoai di dong cua minh vao luc nay.");
	}

	PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTextFrom] = playerid;
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay dien thoai ra va gui mot tin nhan.", GetPlayerRPName(playerid));

    SendClientMessageEx(PlayerInfo[playerid][pTextFrom], COLOR_YELLOW, "** Tin nhan tu %s: %s, Ph: %i **", GetPlayerRPName(playerid), params, PlayerInfo[playerid][pPhone]);
    SendClientMessageEx(playerid, COLOR_YELLOW, "** Tin nhan den %s: %s, Ph: %i **", GetPlayerRPName(PlayerInfo[playerid][pTextFrom]), params, PlayerInfo[PlayerInfo[playerid][pTextFrom]][pPhone]);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Gui tin nhan!~n~~r~-$1", 5000, 1);
    return 1;
}

CMD:t(playerid, params[])
{
	return callcmd::sms(playerid, params);
}

CMD:sms(playerid, params[])
{
	new number, msg[128];

	if(sscanf(params, "is[128]", number, msg))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sms [number] [message]");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co dien thoai di dong va do do khong the su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung dien thoai di dong cua minh ngay bay gio vi ban da tat.");
	}
	if(number == 0 || number == PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "So dien thoai khong hop le.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung dien thoai di dong cua minh vao luc nay.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPhone] == number)
	    {
	        if(PlayerInfo[i][pJailType] > 0)
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang bi bo tu va khong the su dung dien thoai cua ho.");
	        }
	        if(PlayerInfo[i][pTogglePhone])
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da tat dien thoai di dong cua ho.");
			}

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay dien thoai ra va gui tin nhan.", GetPlayerRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SendClientMessageEx(i, COLOR_YELLOW, "** SMS tu %s: %.*s..., Ph: %i **", GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, msg, PlayerInfo[playerid][pPhone]);
			    SendClientMessageEx(i, COLOR_YELLOW, "** SMS tu %s: ...%s, Ph: %i **", GetPlayerRPName(playerid), msg[MAX_SPLIT_LENGTH], PlayerInfo[playerid][pPhone]);

			    SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS den %s: %.*s..., Ph: %i **", GetPlayerRPName(i), MAX_SPLIT_LENGTH, msg, PlayerInfo[i][pPhone]);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS den %s: ...%s, Ph: %i **", GetPlayerRPName(i), msg[MAX_SPLIT_LENGTH], PlayerInfo[i][pPhone]);
			}
			else
			{
		        SendClientMessageEx(i, COLOR_YELLOW, "** SMS tu %s: %s, Ph: %i **", GetPlayerRPName(playerid), msg, PlayerInfo[playerid][pPhone]);
		        SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS den %s: %s, Ph: %i **", GetPlayerRPName(i), msg, PlayerInfo[i][pPhone]);
			}

			if(PlayerInfo[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SendClientMessage(i, COLOR_WHITE, "** Ban co the su dung'/rsms [message]' de tra loi tin nhan van ban nay.");
			}

			PlayerInfo[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Gui tin nhan!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}

CMD:texts(playerid, params[])
{
    if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co dien thoai di dong va do do ban khong the su dung lenh nay.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", PlayerInfo[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}

CMD:call(playerid, params[])
{
	new number = strval(params);

	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /call [so dien thoai]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "So dac biet: 911, News, Suaxe, Taxi");
	    return 1;
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co dien thoai di dong va do do khong the su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung dien thoai di dong cua minh ngay bay gio vi ban da tat.");
	}
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang co mot cuoc goi. /(h)angup de ket thuc cuoc goi.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung dien thoai di dong cua minh vao luc nay.");
	}

	if(!strcmp(params, "911"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 911;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhap mot so tren dien thoai cua ho va bat dau cuoc goi.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_YELLOW, "Gui di: 911, khan cap cua ban la gi? Nhap 'police' hoac 'medic'.");
		return 1;
	}
	else if(!strcmp(params, "news"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6397;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhap mot so tren dien thoai cua ho va bat dau cuoc goi.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_NAVYBLUE, "Nhom tin tuc: Day la SANews day. De lai tin nhan va chung toi se lien he lai voi ban! *BIP*");
		return 1;
	}
	else if(!strcmp(params, "suaxe"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6324;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhap mot so tren dien thoai cua ho va bat dau cuoc goi.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_LIGHTORANGE, "Gui di: Day la duong day nong cua tho sua xe. Vui long giai thich tinh huong cua ban cho chung toi.");
		return 1;
	}
	else if(!strcmp(params, "taxi"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 8294;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhap mot so tren dien thoai cua ho va bat dau cuoc goi.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_YELLOW, "Gui di: Day la cong ty Taxi. Vui long neu vi tri va diem den cua ban.");
		return 1;
	}
	else
	{
		if(number == 0 || number == PlayerInfo[playerid][pPhone])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "So dien thoai khong hop le.");
		}
		if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung dien thoai di dong cua minh vao luc nay.");
		}

		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pPhone] == number)
		    {
		        if(PlayerInfo[i][pJailType] > 0)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang bi bo tu va khong the su dung dien thoai cua ho.");
		        }
		        if(PlayerInfo[i][pCallLine] != INVALID_PLAYER_ID)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi dang co mot cuoc goi. Cho den khi ho gac may.");
		        }
		        if(PlayerInfo[i][pTogglePhone])
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da tat dien thoai di dong cua ho.");
				}
				if(PlayerInfo[i][pLiveBroadcast] != INVALID_PLAYER_ID)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang phong van truc tiep va khong the noi chuyen dien thoai.");
		        }

		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

				PlayerInfo[playerid][pCallLine] = i;
				PlayerInfo[playerid][pCallStage] = 0;

				PlayerInfo[i][pCallLine] = playerid;
				PlayerInfo[i][pCallStage] = 1;

				SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhap mot so tren dien thoai cua ho va bat dau cuoc goi.", GetPlayerRPName(playerid));
				SendProximityMessage(i, 20.0, COLOR_PURPLE, "** %s's dien thoai di dong bat dau do chuong.", GetPlayerRPName(i));

		        SendClientMessageEx(playerid, COLOR_YELLOW, "** Ban da thuc hien mot cuoc goi den so: %i. Vui long doi cuoc goi cua ban duoc tra loi.", number);
		        SendClientMessageEx(i, COLOR_YELLOW, "** Mot cuoc goi tu %s [%i]. Su dung /pickup de nhan cuoc goi nay.", GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
		        return 1;
			}
		}

		SendClientMessage(playerid, COLOR_LIGHTRED, "So do khong co trong dich vu hoac chu so huu ngoai tuyen.");
	}

	return 1;
}

CMD:p(playerid, params[])
{
	return callcmd::pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallStage] != 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co cuoc goi den nao ma ban co the tra loi ngay bay gio.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung dien thoai di dong cua minh vao luc nay.");
	}

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhan mot nut va tra loi dien thoai di dong cua ho.", GetPlayerRPName(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	PlayerInfo[PlayerInfo[playerid][pCallLine]][pCallStage] = 2;
	PlayerInfo[playerid][pCallStage] = 2;

	SendClientMessage(playerid, COLOR_WHITE, "Ban da tra loi cuoc goi. Gio day, ban co the noi chuyen trong tro chuyen de noi chuyen voi nguoi goi.");
	SendClientMessage(PlayerInfo[playerid][pCallLine], COLOR_WHITE, "Ho da tra loi cuoc goi. Bay gio ban co the noi chuyen trong tro chuyen de noi chuyen voi ho.");
	return 1;
}

CMD:h(playerid, params[])
{
	return callcmd::hangup(playerid, params);
}

CMD:hangup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallLine] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co cuoc goi nao dang nghe de co the gac may.");
	}

	HangupCall(playerid, HANGUP_USER);
	return 1;
}

CMD:tog(playerid, params[])
{
	return callcmd::toggle(playerid, params);
}

CMD:toggle(playerid, params[])
{
	if(isnull(params))
	{
 		SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(tog)gle [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Textdraws, OOC, Global, Phone, Whisper, Bugged, Newbie, WalkieTalkie, Radio, Streams, News");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: SpawnCam, HUD, Admin, Helper, VIP, Reports, Faction, Gang");
	    return 1;
	}
	if(!strcmp(params, "textdraws", true))
	{
	    if(!PlayerInfo[playerid][pToggleTextdraws])
	    {
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][0]);
	        //PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][1]);
	        HideCWSpeedo(playerid);
	        //PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][2]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);

	        TextDrawHideForPlayer(playerid, TimeTD);

	        PlayerInfo[playerid][pToggleTextdraws] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Textdraws da duoc tat. Ban se khong thay bat ky textdraws nao nua.");
	    }
	    else
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)))
	        {
	        	/*
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][1]);
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][2]);
	            */
	            ShowCWSpeedo(playerid);
	        }
	        if(PlayerInfo[playerid][pGPSOn])
	        {
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][0]);
	        }
	        if(PlayerInfo[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!PlayerInfo[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	        }


	        PlayerInfo[playerid][pToggleTextdraws] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat tinh nang Textdaws. Bay gio ban se thay cac Textdraws");
	    }
	}
	else if(!strcmp(params, "ooc", true))
	{
	    if(!PlayerInfo[playerid][pToggleOOC])
	    {
	        PlayerInfo[playerid][pToggleOOC] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen OOC da duoc tat. Ban se khong thay bat ky tin nhan nao trong kenh /o.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleOOC] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen OOC da duoc bat. Bay gio ban se thay cac tin nhan trong kenh /o.");
	    }
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerInfo[playerid][pToggleGlobal])
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen Global da duoc tat. Ban se khong thay bat ky tin nhan nao trong kenh /g.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen Global da duoc bat. Bay gio ban se thay tat ca tin nhan trong kenh /g.");
	    }
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!PlayerInfo[playerid][pTogglePhone])
	    {
	        if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the lam dieu nay khi dang co cuoc goi.");
	        }

	        PlayerInfo[playerid][pTogglePhone] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Dien thoai da tat. Ban se khong nhan duoc bat ky tin nhan va cuoc goi nao.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pTogglePhone] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Dien thoai da bat. Bay gio ban se nhan duoc tin nhan va cac cuoc goi.");
	    }
	}
	else if(!strcmp(params, "whisper", true))
	{
	    if(!PlayerInfo[playerid][pToggleWhisper])
	    {
	        PlayerInfo[playerid][pToggleWhisper] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Thi tham da bi tat. Ban se khong con thay bat ky tin nhan thi tham nao.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleWhisper] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Thi tham da duoc bat. Ban se thay tin nhan thi tham tu nguoi khac.");
	    }
	}
	else if(!strcmp(params, "bugged", true))
	{
	    if(GetFactionType(playerid) != FACTION_FEDERAL)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai la nhan vien lien bang de su dung kenh bug.");

	    if(!PlayerInfo[playerid][pToggleBug])
	    {
	        PlayerInfo[playerid][pToggleBug] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Da tat kenh BUG. Ban se khong con nhan duoc bat ky ban ghi nao tu nhung nguoi choi bi nghe trom.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleBug] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat kenh BUG. Bay gio ban se nhan lai cac ban ghi tu nhung nguoi choi bi nghe trom.");
		}
	}
    else if(!strcmp(params, "admin", true))
	{
	    if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pDeveloper] && !PlayerInfo[playerid][pFormerAdmin])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep chuyen doi tinh nang nay.");
		}

	    if(!PlayerInfo[playerid][pToggleAdmin])
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Da tat tro chuyen Admin. Ban se khong nhan duoc bat ky tin nhan nao tu kenh Admin.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da tat tro chuyen Admin. Ban se nhan duoc tin nhan tu kenh Admin.");
	    }
	}
	else if(!strcmp(params, "reports", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep chuyen doi tinh nang nay.");
		}

	    if(!PlayerInfo[playerid][pToggleReports])
	    {
	        PlayerInfo[playerid][pToggleReports] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Bao cao duoc tat. Ban se khong con thay bat ky bao cao nao nua.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleReports] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat bao cao. Bay gio ban se thay cac bao cao den mot lan nua.");
	    }
	}
	else if(!strcmp(params, "helper", true))
	{
	    if(!PlayerInfo[playerid][pHelper])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la nguoi tro giup va do do khong the chuyen doi tinh nang nay.");
		}

	    if(!PlayerInfo[playerid][pToggleHelper])
	    {
	        PlayerInfo[playerid][pToggleHelper] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen Helper da tat. Ban se khong con thay bat ky tin nhan nao trong cuoc tro chuyen cua nguoi tro giup.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHelper] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat tro chuyen Helper. Bay gio ban se thay lai tin nhan trong cuoc tro chuyen cua nguoi tro giup.");
	    }
	}
	else if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerInfo[playerid][pToggleNewbie])
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen Newbie da tat. Ban se khong nhan duoc bat ky tin nhan nao tu kenh Newbie.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen Newbie da bat. Ban se thay duoc tin nhan tu kenh Newbie.");
	    }
	}
    else if(!strcmp(params, "walkietalkie", true))
	{
	    if(!PlayerInfo[playerid][pWalkieTalkie])
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bo dam.");
		}

	    if(!PlayerInfo[playerid][pToggleWT])
	    {
	        PlayerInfo[playerid][pToggleWT] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Bo dam da tat. Ban se khong con nhan duoc bat ky tin nhan nao tren bo dam cua minh nua.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleWT] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat bo dam. Bay gio ban se nhan lai tin nhan tren bo dam cua minh.");
	    }
	}
	else if(!strcmp(params, "radio", true))
	{
 		if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao vi the ban khong the chuyen doi radio.");
		}

	    if(!PlayerInfo[playerid][pToggleRadio])
	    {
	        PlayerInfo[playerid][pToggleRadio] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Da tat cuoc tro chuyen tren radio. Ban se khong con nhan duoc bat ky tin nhan nao tren radio cua minh nua.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleRadio] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat tro chuyen radio. Bay gio ban se nhan lai tin nhan tren dai cua minh.");
	    }
	}
	else if(!strcmp(params, "streams", true))
	{
	    if(!PlayerInfo[playerid][pToggleMusic])
	    {
	        PlayerInfo[playerid][pToggleMusic] = 1;
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, COLOR_AQUA, "Da tat luong nhac. Ban se khong con nghe thay bat ky ban nhac nao duoc phat tai dia phuong va tren toan cau.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleMusic] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat luong nhac. Gio day, ban se nghe lai nhac duoc phat tai dia phuong va tren toan cau.");
	    }
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!PlayerInfo[playerid][pVIPPackage])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la thanh vien VIP va do do khong the chuyen doi tinh nang nay.");
		}

	    if(!PlayerInfo[playerid][pToggleVIP])
	    {
	        PlayerInfo[playerid][pToggleVIP] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Da tat tro chuyen VIP. Ban se khong con thay bat ky tin nhan nao trong tro chuyen VIP.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleVIP] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat tro chuyen VIP. Bay gio ban se thay lai cac tin nhan trong tro chuyen VIP.");
	    }
	}
	else if(!strcmp(params, "faction", true))
	{
	    if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao vi vay khong the chuyen doi kenh.");
		}

	    if(!PlayerInfo[playerid][pToggleFaction])
	    {
	        PlayerInfo[playerid][pToggleFaction] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen to chuc da duoc tat. Ban se khong con thay bat ky tin nhan nao trong tro chuyen to chuc.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleFaction] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen to chuc da duoc bat. Bay gio ban se thay tat ca tin nhan tu tro chuyen to chuc.");
	    }
	}
	else if(!strcmp(params, "gang", true))
	{
	    if(PlayerInfo[playerid][pGang] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la thanh vien cua bang dang nao vi vay khong the chuyen doi.");
		}

	    if(!PlayerInfo[playerid][pToggleGang])
	    {
	        PlayerInfo[playerid][pToggleGang] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen Gang da tat. Ban se khong thay bat ky tin nhan nao tu bang dang.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGang] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Tro chuyen Gang da bat. Bay gio ban se thay tat ca tin nhan tu bang dang.");
	    }
	}
	else if(!strcmp(params, "news", true))
	{
	    if(!PlayerInfo[playerid][pToggleNews])
	    {
	        PlayerInfo[playerid][pToggleNews] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Kenh tin tuc da duoc tat. Ban se khong thay bat ky chuon trinh tin tuc nao.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNews] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Kenh tin tuc da bat. Ban se thay tat ca chuong trinh tin tuc.");
	    }
	}
	else if(!strcmp(params, "lands", true))
	{
	    callcmd::lands(playerid, "\1");
	}
	else if(!strcmp(params, "turfs", true))
	{
	    callcmd::turfs(playerid, "\1");
	}
	else if(!strcmp(params, "spawncam", true))
	{
	    if(!PlayerInfo[playerid][pToggleCam])
	    {
	        PlayerInfo[playerid][pToggleCam] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Da tat Spawn Camera. Ban se khong con thay cac hieu ung may anh khi spawn.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleCam] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Da bat Sawwn Camera. Ban se thay hieu ung may anh khi spawn.");
	    }
	}
	else if(!strcmp(params, "hud", true))
	{
	    if(!PlayerInfo[playerid][pToggleHUD])
	    {
	        PlayerInfo[playerid][pToggleHUD] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "HUD da tat. Ban se khong thay chi so suc khoe va giap cua minh.");

	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHUD] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "HUD da bat. Ban se thay chi so suc khoe va giap cua minh.");

	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	    }
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(tog)gle [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Textdraws, OOC, Global, Phone, Whisper, Bugged, Newbie, WalkieTalkie, Radio, Streams, News");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: SpawnCam, HUD, Admin, Helper, VIP, Reports, Faction, Gang");
	}

	return 1;
}
CMD:locate(playerid, params[])
{
	if(!PlayerInfo[playerid][pGPS])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co GPS. Hay mua no o Sieu thi.");
	}
	if(isnull(params))
	{
	    return ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	}
	else
	{
	    LocateMethod(playerid, params);
	}
	return 1;
}
CMD:findjob(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Dinh vi GPS - Tim dia diem", "Giao thuc an\nGiao hang nhanh", "Chon", "Huy");
}


CMD:ccp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:kcp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:killcp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:xoamuctieu(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:cancelcp(playerid, params[])
{
	CancelActiveCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_WHITE, "Ban da huy cac checkpoint dang hoat dong.");
	return 1;
}

CMD:afk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /afk [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pAdmin] >= 8 && PlayerInfo[playerid][pAdmin] < 8)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep kiem tra trang thang AFK cua nguoi choi do.");
	}

	if(PlayerInfo[targetid][pAFK])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** %s da duoc danh dau la xa ban phim trong %i phut.", GetPlayerRPName(targetid), PlayerInfo[targetid][pAFKTime] / 60);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** %s hien khong duoc danh dau la xa ban phim.", GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Danh sach AFK _______");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] >= 8 && PlayerInfo[playerid][pAdmin] < 8)
	        continue;

	    if(PlayerInfo[i][pAFK])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s - Thoi gian: %i giay", i, GetPlayerRPName(i), PlayerInfo[i][pAFKTime]);
		}
	}

	return 1;
}

CMD:atm(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
	    {
			ShowDialogToPlayer(playerid, DIALOG_ATM);
	        return 1;
		}
	}
	if(GetNearbyAtm(playerid) >= 0)
	{
	    ShowDialogToPlayer(playerid, DIALOG_ATM);
     	return 1;
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung gan may ATM.");
	return 1;
}

CMD:fixplayerid(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", targetid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /fixplayerid [playerid]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Doi khi ID nguoi choi co the bi nghe trom khien sscanf khong xac dinh duoc ID do cho toi khi may chu duoc khoi dong lai.");
    	SendClientMessage(playerid, COLOR_SYNTAX, "(e.g. mot lenh duoc su dung tren mot ID nguoi choi hop le cho biet nguoi choi do da bi mat ket noi, khong xac dinh hoac ngoai tuyen.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), IsPlayerNPC(targetid));
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "** ID nguoi choi %i da sua.", targetid);
	return 1;
}


CMD:disablevpn(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /disablevpn [0/1]");
	}

	if(status) {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da tat tham gia voi VPN.", GetPlayerRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bat tham gia voi VPN.", GetPlayerRPName(playerid));
	}

//	gDisabledVPN = status; //temporarily disabled
	return 1;
}

CMD:obscurent(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /obscurent [0/1]");
	}

	if(!status) {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da tat chuc nang che giau the ten.", GetPlayerRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da bat chuc nang che giau the ten.", GetPlayerRPName(playerid));
	}

	antiNT = status;
	return 1;
}


CMD:animhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "______________________________________________________________________________");
	SendClientMessage(playerid, COLOR_GREY2, "/dance, /wave, /point, /salute, /laugh, /cry, /deal, /sit, /lay, /fall, /handsup.");
	SendClientMessage(playerid, COLOR_GREY2, "/tired, /cower, /crack, /injured, /fishing, /reload, /aim, /bomb, /checktime.");
	SendClientMessage(playerid, COLOR_GREY2, "/dodge, /stop, /scratch, /what, /wash, /come, /hitch, /cpr, /slapass, /drunk.");
	SendClientMessage(playerid, COLOR_GREY2, "/vomit, /fucku, /taichi, /shifty, /smoke, /chat, /lean, /wank, /crossarms.");
	SendClientMessage(playerid, COLOR_GREY2, "/ghands, /rap, /dj, /walk, /fuckme, /bj, /kiss, /piss, /robman, /eat, /stopanim.");
	SendClientMessage(playerid, COLOR_GREEN, "______________________________________________________________________________");
	return 1;
}

CMD:dance(playerid, params[])
{
	new count, animname[32], animlib[32];

	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1..4: SetPlayerSpecialAction(playerid, (SPECIAL_ACTION_DANCE1 + (strval(params) - 1)));
		case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0);
        case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0);
		case 12: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0);
		case 13: ApplyAnimationEx(playerid, "DANCING", "dnce_M_d", 4.1, 1, 0, 0, 0, 0);
		case 14: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /dance [1-14]");
	}

	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
		{
		    GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));

			if((SPECIAL_ACTION_DANCE1 <= GetPlayerSpecialAction(i) <= SPECIAL_ACTION_DANCE4) || !strcmp(animlib, "DANCING", true))
			{
			    count++;
			}
	    }
	}

	if(count >= 5)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
			{
		    	GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));

				if((SPECIAL_ACTION_DANCE1 <= GetPlayerSpecialAction(i) <= SPECIAL_ACTION_DANCE4) || !strcmp(animlib, "DANCING", true))
				{
				    AwardAchievement(i, "Flash mob");
	            }
	        }
		}
	}

	return 1;
}

CMD:wave(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /wave [1-3]");
	}

	return 1;
}

CMD:point(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "panic_point", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /point [1-2]");
	}

	return 1;
}

CMD:salute(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:laugh(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:cry(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:deal(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:sit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0);
	    case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 0, 0, 0, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
     	case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0);
       	case 8: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0);
       	case 9: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_Eat1", 4.1, 1, 0, 0, 0, 0);
       	case 10: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sit [1-10]");
	}

	return 1;
}

CMD:lay(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /lay [1-3]");
	}

	return 1;
}

CMD:fall(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0);
	    case 3: ApplyAnimationEx(playerid, "PED", "KO_shot_face", 4.1, 0, 1, 1, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 0);
	    case 6: ApplyAnimationEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /fall [1-6]");
	}

	return 1;
}

CMD:handsup(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "SHOP", "SHP_HandsUp_Scr", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:tired(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /tired [1-2]");
	}

	return 1;
}

CMD:hide(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cover(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cower(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "PED", "cower", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:crack(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0);
        case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0);
        case 4: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /crack [1-4]");
	}

	return 1;
}

CMD:injured(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /injured [1-2]");
	}

	return 1;
}

CMD:fishing(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:reload(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "RIFLE", "RIFLE_load", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /reload [1-4]");
	}

	return 1;
}

CMD:aim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SHOP", "ROB_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /aim [1-2]");
	}

	return 1;
}

CMD:bomb(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:checktime(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:dodge(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "DODGE", "Crush_Jump", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stop(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "PED", "endchat_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:scratch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "MISC", "Scratchballs_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:what(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:wash(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:come(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "WUZI", "Wuzi_follow", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "MISC", "Hiker_Pose", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:cpr(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:slapass(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "SWEET", "sweet_ass_slap", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:drunk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:vomit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:fucku(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:taichi(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:shifty(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:smoke(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /smoke [1-2]");
	}

	return 1;
}

CMD:chat(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkA", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkC", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkF", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkG", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 4.1, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /chat [1-9]");
	}

	return 1;
}

CMD:lean(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "GANGS", "leanIDLE", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "MISC", "Plyrlean_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /lean [1-2]");
	}

	return 1;
}

CMD:wank(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:traffic(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /traffic [1-2]");
	}

	return 1;
}

CMD:rap(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "RAPPING", "RAP_A_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "RAPPING", "RAP_B_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "RAPPING", "RAP_C_LOOP", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /rap [1-3]");
	}

	return 1;
}

CMD:dj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /dj [1-4]");
	}

	return 1;
}

CMD:crossarms(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /crossarms [1-3]");
	}

	return 1;
}

CMD:ghands(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0);
        case 6: ApplyAnimationEx(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ghands [1-10]");
	}

	return 1;
}

CMD:walk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "PED", "WALK_shuffle", 4.1, 1, 1, 1, 1, 1);
		case 10: ApplyAnimationEx(playerid, "PED", "WALK_Wuzi", 4.1, 1, 1, 1, 1, 1);
		case 11: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1);
		case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1);
		case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1);
		case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1);
		case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walkpro", 4.1, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /walk [1-15]");
	}

	return 1;
}

CMD:fuckme(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEW", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEP", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "SNM", "SPANKINGW", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "SNM", "SPANKINGP", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "SNM", "SPANKEDW", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "SNM", "SPANKEDP", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDW", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDP", 4.1, 0, 1, 1, 1, 0);
        default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /fuckme [1-8]");
	}

	return 1;
}

CMD:bj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.1, 0, 1, 1, 1, 0);
		case 9: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.1, 0, 1, 1, 1, 0);
		case 12: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 0, 1, 1, 1, 0);
        default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /bj [1-12]");
	}

	return 1;
}

CMD:kiss(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

    ApplyAnimationEx(playerid, "KISSING", "Playa_Kiss_01", 4.0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:piss(playerid, params[])
{
    if(!PlayerUseAnims(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:robman(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

    ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:eat(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
    {
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung hanh dong vao thoi diem nay.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0);
	    case 2: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Su dung: /eat [1-3]");
	}

	return 1;
}

CMD:stopani(playerid, params[])
{
	return callcmd::stopanim(playerid, params);
}

CMD:stopanim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}

    PlayerInfo[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);
	TextDrawHideForPlayer(playerid, AnimationTD);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    SendClientMessage(playerid, COLOR_LIGHTRED, "Anim da bi xoa.");
    return 1;
}

CMD:gmx(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params) && strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gmx [confirm]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Lenh nay luu tat ca tai khoan nguoi choi va shutdown may chu.");
	    return 1;
	}
	if(gGMX)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da yeu cau khoi dong may chu. Ban khong the huy no =)).");
	}

	gGMX = 1;

	foreach(new i : Player)
	{
		Maskara[i] = 0;
	    if(i != playerid)
	    {
	        if(PlayerInfo[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
			PlayerInfo[i][pHurt] = 0;
	    	TogglePlayerControllable(i, 0);
	    	SendClientMessageEx(i, COLOR_AQUA, "** %s da bat dau khoi dong may chu. Ban di bi Freeze.", GetPlayerRPName(playerid));
		}

		SavePlayerVariables(i);
		GameTextForPlayer(i, "~w~Khoi dong lai may chu, Vui long doi...", 100000, 3);
	}

	SendClientMessage(playerid, COLOR_WHITE, "** May chu se khoi dong lai sau khi tat ca tai khoan da duoc luu.");
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "{FF1AFF}NewCity RolePlay{FFFFFF} | Doi mat khau", "Vui long thay doi mat khau vi muc dich an toan va bao mat\nNhap mat khau moi:", "Dong y", "Huy");
	return 1;
}

CMD:usecookies(playerid, params[])
{
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
	if(PlayerInfo[playerid][pHurt] - 40 > 0)
	{
        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang bi thuong de su dung lenh nay. Doi %i giay truoc khi thu lai.", (PlayerInfo[playerid][pHurt] - 30));
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "su dung lenh nay khi dang o trong xe.");
	}

	new string[1536] = "Thu lao them\tMieu ta\tGia ca", title[64];

    strcat(string, "\nBo sung\tBo sung cho ban day mau & giap.\t{F7A763}2 Supreme Cookies{FFFFFF}");
	strcat(string, "\nThoi gian trong tu\tGiam thoi gian trong tu cua ban xuong 50 phan tram.\t{F7A763}5 Supreme Cookies{FFFFFF}");
	strcat(string, "\nTon trong\tCho ban 4 diem Ton trong.\t{F7A763}6 Supreme Cookies{FFFFFF}");
	strcat(string, "\nSo dien thoai\tGhi so dien thoai ma ban muon.\t{F7A763}10 Supreme Cookies{FFFFFF}");
	strcat(string, "\nCong viec\tChon 1 cong viec de len 1 level job.\t{F7A763}10 Supreme Cookies{FFFFFF}");
	strcat(string, "\nX2 EXP\tNhan duoc 8h X2 EXP.\t{F7A763}20 Supreme Cookies{FFFFFF}");

	format(title, sizeof(title), "Phan thuong Supreme Cookie (Ban co %i Supreme Cookies.)", PlayerInfo[playerid][pCookies]);
	ShowPlayerDialog(playerid, DIALOG_USECOOKIES, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Huy bo");

	return 1;
}

CMD:mask(playerid, params[])
{
	new rand = Random(500, 900);
	if(!PlayerInfo[playerid][pMask])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ban khong co Mat na.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pTied] > 0 ||  PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Ban khong the su dung lenh nay vao luc nay.");
	}
	if(PlayerInfo[playerid][pAdminDuty]) return SCM(playerid, COLOR_SYNTAX, "Ban khong the su dung lenh nay khi dang Admin Duty.");

	if(Maskara[playerid] == 0)
	{
		Maskara[playerid] = 1;
		MaskaraID[playerid] = rand;
		SendProximityMessage(playerid, 20.0, COLOR_ORANGE, "**{C2A2DA} %s deo mat na cua anh ay.", GetPlayerNameEx(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	else
	{
    	Maskara[playerid] = 0;
     	SendProximityMessage(playerid, 20.0, COLOR_ORANGE, "**{C2A2DA} Ke la mat coi bo mat na.");
     	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	return 1;
}


CMD:clothing(playerid, params[])
{
	new string[MAX_PLAYER_CLOTHING * 64], title[64], count;

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s {FFD700}(Dinh kem)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s{FFFFFF}", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }

	        count++;
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Cho trong{FFFFFF}", string, i + 1);
		}
	}

	format(title, sizeof(title), "Cac bo quan ao cua toi (%i/%i vi tri)", count, MAX_PLAYER_CLOTHING);
	ShowPlayerDialog(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, title, string, "Chon", "Huy");
	return 1;
}

CMD:thibanglai(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.2953, -117.4508, 1035.1719))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co mat tai ban lam viec cho bo phan Cap phep.");
	}
	if(PlayerInfo[playerid][pCarLicense])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da co bang lai xe.");
	}
	if(PlayerInfo[playerid][pDrivingTest])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang lam bai kiem tra lai xe.");
	}
	if(PlayerInfo[playerid][pCash] < 200)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can $200 thanh toan phi cap phep neu ban vuot qua bai kiem tra.");
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "[DMV]{ffffff} Ban da thuc hien bai kiem tra lai xe. Di ra va vao ben trong mot xe de bat dau.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "[DMV]{ffffff} Khi ban vuot qua bai kiem tra, Ban se nhan duoc phi cap phep va tra tien phi cap phep $200.");

	PlayerInfo[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pDrivingTest] = 1;
	PlayerInfo[playerid][pTestCP] = 0;
	return 1;
}

CMD:buyvehicle(playerid, params[])
{
    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    {
        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the co nhieu hon %i phuong tien duoc chinh ra trong luc nay.", MAX_SPAWNED_VEHICLES);
    }

	PlayerInfo[playerid][pGangCar] = 0;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	{
		ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLE);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYBOAT);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYAIRCRAFT);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky cho ban phuong tien nao.");
	}

	return 1;
}

CMD:spawncar(playerid, params[])
{
	//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
	//mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_VEHICLES, playerid);
	SendClientMessage(playerid, COLOR_WHITE, "Lenh nay xoa roi . /carstorage neu ban muon chinh xe .");
	return 1;
}

CMD:carstorage(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
	return 1;
}

CMD:vst(playerid, params[])
{
	return callcmd::carstorage(playerid, params);
}

CMD:vstorage(playerid, params[])
{
	return callcmd::carstorage(playerid, params);
}

CMD:park(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai bat ky phuong tien nao cua ban.");
	}
	if(!IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dau chiec xe nay vi no khong thuoc ve ban.");
	}

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dau phuong tien %s cua ho tai day.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
 	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dau chiec xe {00AA00}%s{33CCFF} khi lay xe no se spawn o vi tri nay .", GetVehicleName(vehicleid));

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);

	return 1;
}

CMD:givekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong ben trong bat ky phuong tien nao cua ban.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /givekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dua chia khoa cho chinh ban.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da co chia khoa xe cua ban.");
	}

	PlayerInfo[targetid][pVehicleKeys] = vehicleid;

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dua chia khoa cua phuong tien %s cua ho cho %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s da dua cho ban chia khoa xe {00AA00}%s{33CCFF}.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dua chia khoa phuong tien {00AA00}%s{33CCFF} cho %s.", GetVehicleName(vehicleid), GetPlayerRPName(targetid));
	return 1;
}

CMD:takekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong ben trong bat ky phuong tien nao cua ban.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /takekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the lay chia khoa xe tu chinh minh.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co chia khoa xe cua ban.");
	}

	PlayerInfo[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay lai chia khoa phuong tien %s tu  %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s da lay lai chia khoa phuong tien {00AA00}%s{33CCFF}.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da lay lai chia khoa phuong tien {00AA00}%s{33CCFF} tu %s.", GetVehicleName(vehicleid), GetPlayerRPName(targetid));
	return 1;
}

CMD:despawncar(playerid, params[])
{
 	/*new string[MAX_SPAWNED_VEHICLES * 64], count;

 	string = "#\tModel\tLocation";

 	foreach(new i: Vehicle)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_DESPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to despawn.", string, "Chon", "Huy bo");
	}*/

	SendClientMessage(playerid, COLOR_WHITE, "Lenh nay da xoa roi. /carstorage neu ban muon chinh xe.");
	return 1;
}

CMD:findcar(playerid, params[])
{
    new string[MAX_SPAWNED_VEHICLES * 64], count;

 	string = "#\tPhuong tien\tVi tri";

 	foreach(new i: Vehicle)
 	{
 	    if(VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban hien khong co xe nao duoc spawn tai thoi diem nay.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Chon phuong tien de tim.", string, "Chon", "Huy");
	}

	return 1;
}

CMD:upgradevehicle(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), option[8], param[32];

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong ben trong bat ky phuong tien nao cua ban.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung gan pham vi cua dai ly Grotti.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradevehicle [Copxe | Neon | Baodong | Bienso]");
	}

	if(!strcmp(option, "copxe", true))
	{
	    if(isnull(param) || strcmp(param, "xacnhan", true) != 0)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradevehicle [copxe] [xacnhan]");
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "Cap do cop xe cua ban o muc %i/3. Nang cap se khien ban mat $10,000.", VehicleInfo[vehicleid][vTrunk]);
	        return 1;
		}
		if(VehicleInfo[vehicleid][vTrunk] >= 3)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay da toi da cap do cop xe.");
		}
		if(PlayerInfo[playerid][pCash] < 10000)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong du tien de nang cap cop xe cua ban.");
		}

		VehicleInfo[vehicleid][vTrunk]++;

		GivePlayerCash(playerid, -10000);
		GameTextForPlayer(playerid, "~r~-$10000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da thanh toan $10,000 cho cap do cop xe %i/3. '/vsafe balance' de xem no.", VehicleInfo[vehicleid][vTrunk]);
		Log_Write("log_property", "%s (uid: %i) d anhan cap cop xe %s (id: %i) den cap do %i/3.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradevehicle [neon] [mau sac] (gia $30,000)");
			SendClientMessage(playerid, COLOR_SYNTAX, "Mau neon: Red, Blue, Green, Yellow, Pink, White");
			return 1;
	    }
	    if(PlayerInfo[playerid][pCash] < 30000)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can co $30,000 de nang cap Neon.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong ho tro Neon.");
		}

		if(!strcmp(param, "red", true))
		{
		    SetVehicleNeon(vehicleid, 18647);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $30,000 cho red neon. Ban co the su dung /neon de bat neon va nguoc lai.");
			Log_Write("log_property", "%s (uid: %i) mua neon cho ho %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "blue", true))
		{
		    SetVehicleNeon(vehicleid, 18648);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $30,000 for blue neon. Ban co the su dung /neon de bat neon va nguoc lai.");
			Log_Write("log_property", "%s (uid: %i) mua neon cho ho %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "green", true))
		{
		    SetVehicleNeon(vehicleid, 18649);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $30,000 for green neon. Ban co the su dung /neon de bat neon va nguoc lai.");
			Log_Write("log_property", "%s (uid: %i) mua neon cho ho %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "yellow", true))
		{
		    SetVehicleNeon(vehicleid, 18650);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $30,000 for yellow neon. Ban co the su dung /neon de bat neon va nguoc lai.");
			Log_Write("log_property", "%s (uid: %i) mua neon cho ho %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "pink", true))
		{
		    SetVehicleNeon(vehicleid, 18651);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $30,000 for pink neon. Ban co the su dung /neon de bat neon va nguoc lai.");
			Log_Write("log_property", "%s (uid: %i) mua neon cho ho %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "white", true))
		{
		    SetVehicleNeon(vehicleid, 18652);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $30,000 for white neon. Ban co the su dung /neon de bat neon va nguoc lai.");
			Log_Write("log_property", "%s (uid: %i) mua neon cho ho %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
	}
	else if(!strcmp(option, "baodong", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "** Level 1: Hieu ung am thanh bao dong va bao cho chu so huu. {FFD700}($15,000)");
            SendClientMessage(playerid, COLOR_WHITE, "** Level 2: Hieu ung am thanh bao dong va bao cho chu so huu va LEO [Chinh phu]. {FFD700}($30,000)");
            SendClientMessage(playerid, COLOR_WHITE, "** Level 3: Hieu ung am thanh bao dong va bao cho chu so huu va chop den cho LEO [Chinh phu]. {FFD700}($60,000)");
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradevehicle [baodong] [cap do]");
	        return 1;
		}
		if(!(1 <= level <= 3))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap do khong xac dinh.");
		}

		switch(level)
		{
		    case 1:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 1)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Bao dong xe cua ban da o muc nay.");
		        }
		        if(PlayerInfo[playerid][pCash] < 15000)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua muc bao dong nay.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -15000);
		        GameTextForPlayer(playerid, "~r~-$15000", 5000, 1);

		        SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $15,000 de cai dat bao dong xe cap 1 tren xe cua ban.");
		        Log_Write("log_property", "%s (uid: %i) da mua bao dong xe cap 1 %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
            case 2:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 2)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Bao dong xe cua ban da o muc nay.");
		        }
		        if(PlayerInfo[playerid][pCash] < 30000)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua muc bao dong nay.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 2;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 2 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -30000);
		        GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

				SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $30,000 de cai dat bao dong xe cap 2 tren xe cua ban.");
				Log_Write("log_property", "%s (uid: %i) da mua bao dong xe cap 2 %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
			case 3:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 3)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Bao dong xe cua ban da o muc nay.");
		        }
		        if(PlayerInfo[playerid][pCash] < 60000)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua muc bao dong nay.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 3;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 3 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -60000);
		        GameTextForPlayer(playerid, "~r~-$60000", 5000, 1);

				SendClientMessage(playerid, COLOR_GREEN, "Ban da thanh toan $60,000 de cai dat bao dong xe cap 3 tren xe cua ban.");
				Log_Write("log_property", "%s (uid: %i) da mua bao dong xe cap 3 %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
		}
	}
	else if(!strcmp(option, "bienso", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /upgradevehicle [plate] [van ban] (costs $20,000)");
	    }
	    if(!VehicleHasEngine(vehicleid))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong co bien so. Do do ban khong the mua ban nang cap nay.");
	    }

	    strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		SetVehicleNumberPlate(vehicleid, param);
	    ResyncVehicle(vehicleid);

	    GivePlayerCash(playerid, -20000);
		GameTextForPlayer(playerid, "~r~-$20000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", param, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "Ban da thanh toan $20,000 cho bien so xe '%s'. Cac thay doi se thay doi se co hieu luc khi dau xe.", param);
		Log_Write("log_property", "%s (uid: %i) thanh toan $20000 de lam bien so xe cua ho %s (id: %i) den %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], param);
	}

	return 1;
}

CMD:neon(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai bat ky phuong tien nao cua ban.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi chiec xe nay khong phai cua ban.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong duoc lap dat den neon.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Bat den NEON", 3000, 3);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhan mot nut de kich hoat cac den neon cua ho.", GetPlayerRPName(playerid));
	    //SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Tat den NEON", 3000, 3);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nhan mot nut de tat cac den neon cua chung.", GetPlayerRPName(playerid));
	    //SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:vsafe(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[14], param[32];

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Xe nay khong lap cop. /upgradevehicle de mua mot cai.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [kho | gui | rut]");
	    }
	    if(!strcmp(option, "kho", true))
	    {
	        new count;

	        for(new i = 0; i < 5; i ++)
	        {
	            if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	                count++;
	            }
	        }

	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Vat pham trong cop xe ______");
	        SendClientMessageEx(playerid, COLOR_GREY2, "Tien: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			SendClientMessageEx(playerid, COLOR_GREY2, "Vat lieu: %i/%i | Vu khi: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", VehicleInfo[vehicleid][vWeed], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCocaine], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Thuoc giam dau: %i/%i vien", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));

			if(count > 0)
			{
				SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Kho vu khi ______");

            	for(new i = 0; i < 5; i ++)
	            {
    	            if(VehicleInfo[vehicleid][vWeapons][i])
	    	        {
	        	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Vu khi: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "gui", true))
	    {
	        new value;

            if(IsPlayerInAnyVehicle(playerid))
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay tu trong xe.");
			}
	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [tuy chon]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach tuy chon: Tien, Vatlieu, Weed, Cocaine, Meth, Painkillers [Thuoc giam dau], Vukhi");
	            return 1;
	        }
	        if(!strcmp(option, "tien", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [tien] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCash])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Cop xe cua ban chi co the chua toi da %s o cap do cua no.", FormatNumber(GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH)));
    			}

			    GivePlayerCash(playerid, -value);
			    VehicleInfo[vehicleid][vCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %s trong cop xe cua ban.", FormatNumber(value));
			}
			else if(!strcmp(option, "vatlieu", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [vatlieu] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMaterials])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du vat lieu.");
			    }
			    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Cop xe cua ban chi co the chua toi da %i vat lieu o cap do cua no.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerInfo[playerid][pMaterials] -= value;
			    VehicleInfo[vehicleid][vMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %i vat lieu vao cop xe.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [weed] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pWeed])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(VehicleInfo[vehicleid][vWeed] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Cop xe cua ban chi co the chua toi da %i grams can sa o cap do cua no.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
			    }

			    PlayerInfo[playerid][pWeed] -= value;
			    VehicleInfo[vehicleid][vWeed] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = %i WHERE id = %i", VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %ig can sa tren xe cua ban.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [cocaine] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCocaine])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(VehicleInfo[vehicleid][vCocaine] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Cop xe cua ban chi co the chua toi da %i grams thuoc phien o cap do cua no.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerInfo[playerid][pCocaine] -= value;
			    VehicleInfo[vehicleid][vCocaine] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = %i WHERE id = %i", VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %ig thuoc phien tren xe cua ban.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [meth] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMeth])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Cop xe cua ban chi co the chua toi da %i grams meth o cap do cua no.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
			    }

			    PlayerInfo[playerid][pMeth] -= value;
			    VehicleInfo[vehicleid][vMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %ig meth tren xe cua ban.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [painkillers] [so luong]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Cop xe cua ban chi co the chua toi da %i thuoc giam dau o cap do cua no.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerInfo[playerid][pPainkillers] -= value;
			    VehicleInfo[vehicleid][vPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %i thuoc giam dau tren xe cua ban.", value);
   			}
   			else if(!strcmp(option, "vukhi", true))
   			{

   				if(GetFactionType(playerid) != FACTION_NONE)
   					return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi thuc thi phap luat khong the su dung lenh nay.");

   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [gui] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co vu khi nay. /guninv de xem cac vu khi ban co.");
				}
				if(IsLawEnforcement(playerid))
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi thuc thi phap luat cam tang tru vu khi.");
				}
				if(GetPlayerHealthEx(playerid) < 60)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cat giu vu khi khi mau duoi 60.");
				}

				for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!VehicleInfo[vehicleid][vWeapons][i])
   				    {
						VehicleInfo[vehicleid][vWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], VehicleInfo[vehicleid][vID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da luu tru %s vao vi tri %i cop xe cua ban.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong con cho cho vu khi.");
			}
		}
		else if(!strcmp(option, "rut", true))
	    {
	        new value;

            if(IsPlayerInAnyVehicle(playerid))
	    	{
	        	return SendClientMessage(playerid, COLOR_LIGHTRED, "su dung lenh nay khi dang o trong xe.");
			}
	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [tuy chon]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "Tuy chon: Tien, Vatlieu, Weed, cocaine, Meth, painkillers, Vukhi");
	            return 1;
	        }
	        if(!strcmp(option, "tien", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [tien] [so luong]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCash])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }

			    GivePlayerCash(playerid, value);
			    VehicleInfo[vehicleid][vCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban vua lay %s tu cop xe cua ban.", FormatNumber(value));
			}
			else if(!strcmp(option, "vatlieu", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [vatlieu] [so luong]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du vat lieu.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang co %i/%i vat lieu. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerInfo[playerid][pMaterials] += value;
			    VehicleInfo[vehicleid][vMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban vua lay %i vat lieu tu cop xe cua ban.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [weed] [so luong]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vWeed])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(PlayerInfo[playerid][pWeed] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang co %i/%i weed. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerInfo[playerid][pWeed] += value;
			    VehicleInfo[vehicleid][vWeed] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = %i WHERE id = %i", VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban vua lay %ig of weed tu trong cop xe ra.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [cocaine] [so luong]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCocaine])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(PlayerInfo[playerid][pCocaine] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang co %i/%i cocaine. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerInfo[playerid][pCocaine] += value;
			    VehicleInfo[vehicleid][vCocaine] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = %i WHERE id = %i", VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban vua lay %ig cocaine tu trong cop xe ra.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [meth] [so luong]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang co %i/%i meth. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerInfo[playerid][pMeth] += value;
			    VehicleInfo[vehicleid][vMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban vua lay %ig meth tu trong cop xe ra.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [painkillers] [so luong]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			    }
			    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang co %i/%i painkillers. Ban khong the mang theo nua cho den khi ban nang cap tui do.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerInfo[playerid][pPainkillers] += value;
			    VehicleInfo[vehicleid][vPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban vua lay %i painkillers tu trong cop xe ra.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /vsafe [rut] [vukhi] [vi tri (1-%i)]", slots);
				}
				if(!(1 <= value <= slots))
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le hoac vi tri nay da bi khoa.");
   			    }
   			    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   			    {
   			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri duoc chi dinh khong chua vu khi ma ban can lay.");
				}
                if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
				{
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban bi han che vu khi hoac ban choi it hon 2 gio choi.");
				}

				GivePlayerWeaponEx(playerid, VehicleInfo[vehicleid][vWeapons][value-1]);
				SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da lay %s tu vi tri %i trong cop xe ra.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);

				VehicleInfo[vehicleid][vWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", value, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc co bat ky chiec xe nao cua ban.");
	}

	return 1;
}

CMD:unmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dieu khien bat ky phuong tien nao cua ban.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi chiec xe nay khong phai cua ban.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Mau sac phuong tien da duoc dat lai mac dinh.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "** Mau son cua phuong tien da tro lai mac dinh.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "** Tat ca cac sua doi cua phuong tien da duoc cai dat lai.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong co den neon de co the loai bo.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "** Neon da bi xoa khoi phuong tien.");
	}

	return 1;
}

CMD:gunmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dieu khien bat ky phuong tien nao cua ban.");
	}
	if(VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi chiec xe nay khong phai cua ban.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gunmod [color | paintjob | mods]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Mau xe da duoc dat lai mac dinh.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "** Mau son da duoc dat lai mac dinh.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "** Tat ca cac thay doi cua phuong tien da duoc dat lai.");
	}

	return 1;
}


CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong ben trong bat ky phuong tien nao cua ban.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellcar [playerid] [so luong]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban cho chinh minh.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai chi dinh so tien tren 0.");
	}
	if(PlayerInfo[playerid][pCP] == CHECKPOINT_DROPCAR)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban xe tru khi huy bo diem danh dau. (/killcp)");
	}

	PlayerInfo[targetid][pCarOffer] = playerid;
	PlayerInfo[targetid][pCarOffered] = vehicleid;
	PlayerInfo[targetid][pCarPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s de nghi chuyen nhuong phuong tien %s voi gia %s (/chapnhan phuongtien).", GetPlayerRPName(playerid), GetVehicleName(vehicleid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi %s chuyen nhuong phuong tien %s voi gia %s.", GetPlayerRPName(targetid), GetVehicleName(vehicleid), FormatNumber(amount));
	return 1;
}

CMD:sellmycar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong ben trong bat ky phuong tien nao cua ban.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi dai ly O to Grotti.");
	}

	new price = percent(GetVehicleValue(vehicleid), 75);

	if(strcmp(params, "xacnhan", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellmycar [xacnhan]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Lenh nay se ban phuong tien cua ban cho dai ly. Ban se nhan duoc %s.", FormatNumber(price));
	    return 1;
	}

	GivePlayerCash(playerid, price);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da ban phuong tien %s cho dai ly xe va nhan duoc %s.", GetVehicleName(vehicleid), FormatNumber(price));
    Log_Write("log_property", "%s (uid: %i) da ban %s (id: %i) cho dai ly va nhan duoc $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);

	return 1;
}



CMD:v(playerid, params[])
{
	return callcmd::vip(playerid, params);
}

CMD:vip(playerid, params[])
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ban khong phai la thanh vien VIP.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(v)ip [van ban]");
	}
    if(PlayerInfo[playerid][pToggleVIP])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tro chuyen khi da tat kenh VIP.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pVIPPackage] > 0 && !PlayerInfo[i][pToggleVIP])
	    {
			SendClientMessageEx(i, COLOR_VIP, "** %s VIP %s: %s **", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:viptag(playerid, params[])
{
    if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ban khong phai la thanh vien VIP.");
	}
	if(PlayerInfo[playerid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the kich hoat the VIP cua minh cho den khi ban ngung ho tro. (/return)");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the kich hoat the VIP cua minh cho den khi ban khong Admin Duty.");
	}

	if(PlayerInfo[playerid][pTagType] != TAG_VIP)
	{
        if(PlayerInfo[playerid][pAdminDuty])
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the kich hoat the VIP cua minh khi dang Admin Duty.");
		}
		if(PlayerInfo[playerid][pAcceptedHelp])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the bat the VIP cua minh trong khi dang ho tro ai do.");
	    }

        SetPlayerSpecialTag(playerid, TAG_VIP);
	    SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da bat the VIP.");
	}
	else
	{
		SetPlayerSpecialTag(playerid, TAG_NONE);
	    SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tat the VIP.");
	}

	return 1;
}

CMD:vipcolor(playerid, params[])
{
    if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ban khong phai la thanh vien VIP.");
	}

	if(!PlayerInfo[playerid][pVIPColor])
	{
        PlayerInfo[playerid][pVIPColor] = 1;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da bat mau VIP cho ten cua minh.");
	}
	else
	{
	    PlayerInfo[playerid][pVIPColor] = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tat mau VIP cho ten cua minh.");
	}

	return 1;
}

CMD:vipinvite(playerid, params[])
{
	new targetid;

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ban khong phai la thanh vien VIP.");
	}
	if((PlayerInfo[playerid][pVIPTime] - gettime()) < 259200)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Dang ky VIP cua ban se het han sau chua day 3 ngay. Ban khong the lam dieu nay bay gio.");
	}

	if(sscanf(params, "u", targetid))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vipinvite [playerid]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Lenh nay cap mot dang ky VIP tam thoi keo dai mot gio cho nguoi choi ma ban chon.");

	    if(PlayerInfo[playerid][pVIPCooldown] > gettime()) {
			SendClientMessageEx(playerid, COLOR_SYNTAX, "Ban chi co the su dung lenh nay mot lan sau moi 24 gio. Ban con %i gio cho den khi ban co the su dung lai.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
		} else {
		    SendClientMessage(playerid, COLOR_SYNTAX, "Ban chi co the su dung lenh nay mot lan sau moi 24 gio. Cam khong cooldown cho lenh nay.");
		}

		return 1;
	}
	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da su dung lenh nay hom nay. Vui long doi %i gio nua.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if(PlayerInfo[targetid][pVIPPackage])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da dang ky VIP.");
	}

	PlayerInfo[targetid][pVIPPackage] = PlayerInfo[playerid][pVIPPackage];
	PlayerInfo[targetid][pVIPTime] = gettime() + 10800;
	PlayerInfo[playerid][pVIPCooldown] = gettime() + 86400;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i WHERE uid = %i", PlayerInfo[targetid][pVIPPackage], PlayerInfo[targetid][pVIPTime], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipcooldown = %i WHERE uid = %i", PlayerInfo[playerid][pVIPCooldown], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da tang cho ban mot goi VIP {D909D9}%s{33CCFF} trong thoi gian 3 gio.", GetPlayerRPName(playerid), GetVIPRank(PlayerInfo[targetid][pVIPPackage]));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tang cho %s mot goi VIP {D909D9}%s{33CCFF} trong thoi gian 3 gio.", GetPlayerRPName(targetid), GetVIPRank(PlayerInfo[targetid][pVIPPackage]));

	Log_Write("log_vip", "%s VIP %s (uid: %i) da tang %s (uid: %i) goi VIP trong 3 gio.", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:vipinfo(playerid, params[])
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ban khong phai la thanh vien VIP.");
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "______ Goi VIP ______");
	SendClientMessageEx(playerid, COLOR_GREY2, "Dang ky VIP {D909D9}%s{C8C8C8} cua ban se het han vao %s.", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetDateFromTimestamp(PlayerInfo[playerid][pVIPTime], 4));

	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    new time = PlayerInfo[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        SendClientMessageEx(playerid, COLOR_GREY2, "Ban se co the su dung lenh /vipinvite sau %i gio.", time / 3600);
		} else {
			SendClientMessageEx(playerid, COLOR_GREY2, "Ban se co the su dung lenh /vipinvite sau %i phut.", time / 60);
	    }
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Thoi gian su dung /vipinvite da hoi phuc. Ban co the su dung lai.");
	}

	return 1;
}

CMD:vipnumber(playerid, params[])
{
	new number;

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi ban khong phai la thanh vien VIP.");
	}
	if(sscanf(params, "i", number))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vipnumber [So dien thaoi]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Lenh nay co gia $10,000 va thay doi so dien thoai cua ban thanh so dien thoai ban da chon.");
	    return 1;
	}
	if(PlayerInfo[playerid][pCash] < 10000)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can co $10,000.");
	}
	if(number == 0 || number == 911)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "So dien thoai khong hop le.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumber", "ii", playerid, number);
	return 1;
}


CMD:createfaction(playerid, params[])
{
	new type[12], name[48], type_id = -1;

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createfaction [type] [name]");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: Police, Medic, News, Government, Hitman, Federal, Army");
		return 1;
	}

	if(!strcmp(type, "police", true)) {
	    type_id = FACTION_POLICE;
	} else if(!strcmp(type, "medic", true)) {
	    type_id = FACTION_MEDIC;
	} else if(!strcmp(type, "news", true)) {
	    type_id = FACTION_NEWS;
	} else if(!strcmp(type, "government", true)) {
	    type_id = FACTION_GOVERNMENT;
	} else if(!strcmp(type, "hitman", true)) {
	    type_id = FACTION_HITMAN;
	} else if(!strcmp(type, "federal", true)) {
	    type_id = FACTION_FEDERAL;
	} else if(!strcmp(type, "army", true)) {
		type_id = FACTION_ARMY;
	}

	if(type_id == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
	}

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da tao to chuc {F7A763}%s{FF6347} voi ten '%s'.", GetPlayerRPName(playerid), factionTypes[type_id], name);
	        SendClientMessageEx(playerid, COLOR_WHITE, "** To chuc nay ID la %i. /editfaction de chinh sua.", i);
	        return 1;
		}
	}

    SendClientMessage(playerid, COLOR_LIGHTRED, "So luong To chuc da dat den gioi han. Yeu cau cac Developers tang gioi han.");
	return 1;
}

CMD:editfaction(playerid, params[])
{
	new factionid, option[12], param[48];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, TurfTokens, Budget");
		return 1;
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc khong hop le.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [name] [van ban]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET name = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi ten cua ID To chuc %i thanh '%s'.", GetPlayerRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [shortname] [van ban]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET shortname = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi ten ngan cua ID To chuc %i thanh '%s'.", GetPlayerRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [type] [tuy chon]");
			SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: Police, Medic, News, Government, Hitman, Federal, Army");
			return 1;
		}

		if(!strcmp(param, "police", true)) {
		    type_id = FACTION_POLICE;
		} else if(!strcmp(param, "medic", true)) {
		    type_id = FACTION_MEDIC;
		} else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "hitman", true)) {
		    type_id = FACTION_HITMAN;
		} else if(!strcmp(param, "federal", true)) {
		    type_id = FACTION_FEDERAL;
		} else if(!strcmp(param, "army", true)) {
			type_id = FACTION_ARMY;
		}

		if(type_id == -1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi loai to chuc cho ID To chuc %i thanh %s.", GetPlayerRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da sua doi {%06x}mau sac{FF6347} cua ID To chuc %i.", GetPlayerRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [rankcount] [so luong]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "So luong cap bac phai nam trong khang tu 1 den %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi so cap bac cua ID To chuc %i thanh %i.", GetPlayerRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Ten Cap Bac ______");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Cap bac %i: (Trong)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Cap bac %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [rankname] [vi tri (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap bac khong hop le.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thay doi ten cap bac %i's cua ID To chuc %i thanh '%s'.", GetPlayerRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Trang phuc To Chuc ______");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Trang phuc %i: (Khong)", i + 1);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Trang phuc %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [skin] [vi tri (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Trang phuc khong hop le.");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "** Ban da dat trang phuc vao vi tri %i voi ID la %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

        if(FactionInfo[factionid][fType] == FACTION_HITMAN)
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dat tien luong cua to chuc Sat thu.");
		}
	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Tien luong Cap Bac ______");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Cap bac %i: (Trong)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Cap bac %i: %s ($%i)", i, FactionRanks[factionid][i], FactionInfo[factionid][fPaycheck][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [paycheck] [vi tri (0-%i)] [so luong]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap bac khong hop le.");
		}
		if(!(0 <= amount <= 100000))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "So luong phai trong pham vi tu $0 den $100000.");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chinh sua tien luong cua cap bac %i's cua ID To chuc %i thanh $%i.", GetPlayerRPName(playerid), rankid, factionid, amount);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [leader] [name]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Dieu nay chi cap nhat cho ten cua lanh dao trong lenh /factions. Su dung /switchfaction de bo nhiem lanh dao cua to chuc.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thiet lap lanh dao cua ID To chuc %i thanh %s.", GetPlayerRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Tuy chon nay da duoc loai bo de co loi cho he thong tu do.");
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung /dynamichelp de biet them danh sach lenh cho tu do.");
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [turftokens] [so luong]");
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE || FactionInfo[factionid][fType] != FACTION_FEDERAL || FactionInfo[factionid][fType] != FACTION_ARMY)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chi co the dat Turf tokens cho to chuc canh sat.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chinh turf tokens cho ID To chuc %i thanh %i.", GetPlayerRPName(playerid), factionid, amount);
	}
	else if(!strcmp(option, "fund", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editfaction [factionid] [fund] [so luong (toi da 500M)]");
		}
		if(amount > 500000000)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Quy cua to chuc khong duoc vuot qua $500,000,000!");
		}
		FactionInfo[factionid][fFund] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET budget = %i WHERE id = %i", FactionInfo[factionid][fFund], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chinh sua quy cua to chuc %s's thanh %i.", GetPlayerRPName(playerid), FactionInfo[factionid][fName], amount);
	}

	return 1;
}

CMD:purgefaction(playerid, params[])
{
	new factionid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /purgefaction [factionid]");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc khong hop le.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == factionid)
	    {
	        SetPlayerFaction(i, -1);
	        SendClientMessageEx(i, COLOR_LIGHTRED, "To chuc ma ban tach ra da bi mot quan tri vien thanh trung.");
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "No-one", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = 'No-one' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thanh trung to chuc %s.", GetPlayerRPName(playerid), FactionInfo[factionid][fName]);
	Log_Write("log_faction", "%s (uid: %i) da thanh trung to chuc %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);

	return 1;
}

CMD:removefaction(playerid, params[])
{
	new factionid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removefaction [factionid]");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc khong hop le.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da xoa bo to chuc %s.", GetPlayerRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	Log_Write("log_faction", "%s (uid: %i) da xoa bo to chuc %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);
	return 1;
}

CMD:switchfaction(playerid, params[])
{
	new targetid, factionid, rankid, leader;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uiI(-1)I(0)", targetid, factionid, rankid, leader))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /switchfaction [playerid] [factionid (-1 = khong)] [cap bac (tuy chon)] [lanh dao (0/1)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if(!(-1 <= factionid < MAX_FACTIONS) || (factionid >= 0 && FactionInfo[factionid][fType] == FACTION_NONE))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc khong hop le.");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap bac khong hop le.");
	}

	if(factionid == -1)
	{
        SetPlayerFaction(targetid, -1);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da xoa bo ban khoi to chuc cua ban.", GetPlayerRPName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da xoa %s khoi to chuc cua anh ay.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

	    SetPlayerFaction(targetid, factionid, rankid, leader);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban thanh {00AA00}%s{33CCFF} trong to chuc %s.", GetPlayerRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot %s trong to chuc %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	return 1;
}

CMD:factions(playerid, params[])
{
    SendClientMessage(playerid, COLOR_NAVYBLUE, "_________________ To Chuc _________________");

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(FactionInfo[i][fType] != FACTION_NONE)
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE faction = %i", i);
	        mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, i);
	    }
	}

	return 1;
}

CMD:setfreq(playerid, params[])
{
	new channel;

	if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bo dam.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setfreq [tan so]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Pham vi cua tan so chi tu 0 - 9999999.");
	}

	PlayerInfo[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", channel, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** Ban da dat tan so thanh 0 va tat bo dam cua minh.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** Tan so da duoc chinh thanh %i, su dung /wt de tro chuyen trong kenh nay.", channel);
	}

	return 1;
}

CMD:wt(playerid, params[])
{
    if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bo dam.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /wt [bo dam]");
	}
	if(!PlayerInfo[playerid][pChannel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Bo dam cua ban khong nam trong bat ky kenh nao. /channel de chinh no.");
	}
    if(PlayerInfo[playerid][pToggleWT])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tro chuyen bo dam vi da tat noi.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung /wt khi dang bi thuong.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban Ban khong the su dung lenh nay khi dang bi cong.");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang bi troi.");
	}

	foreach(new i : Player)
	{
		if(PlayerInfo[i][pWalkieTalkie] && PlayerInfo[i][pChannel] == PlayerInfo[playerid][pChannel] && !PlayerInfo[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SendClientMessageEx(i, COLOR_WALKIETALKIE, "** [CH: %i] %s: %.*s... **", PlayerInfo[playerid][pChannel], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
				SendClientMessageEx(i, COLOR_WALKIETALKIE, "** [CH: %i] %s: ...%s **", PlayerInfo[playerid][pChannel], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_WALKIETALKIE, "** [CH: %i] %s: %s **", PlayerInfo[playerid][pChannel], GetPlayerRPName(playerid), params);
			}
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[WT]: %s", params);
    if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s noi [WT]: %s", GetPlayerRPName(playerid), params);
			}
		}
	}
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s noi trong bo dam.", GetPlayerRPName(playerid));
	return 1;
}

CMD:g(playerid, params[])
{
 	new string[64];

 	if(isnull(params))
 	{
     	return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /g [global chat]");
	}
	if(!enabledGlobal && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Kenh Global hien dang bi vo hieu hoa.");
	}
	if(PlayerInfo[playerid][pGlobalMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tro chuyen trong kenh nay. Su dung /unmute de bat tien");
	}
	if(PlayerInfo[playerid][pToggleGlobal])
 	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tro chuyen trong kenh nay khi da tat Global.");
	}
	if(gettime() - PlayerInfo[playerid][pLastGlobal] < 3)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the noi chuyen trong kenh nay 3 giay mot lan. Vui long doi %i giay nua.", 3 - (gettime() - PlayerInfo[playerid][pLastGlobal]));
	}
    if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0) && PlayerInfo[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{FFA500}", color >>> 8, PlayerInfo[playerid][pCustomTitle]);
	}
	else if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0) {
	  format(string, sizeof(string), "{FF6347}%s{FFA500}", GetAdminRank(playerid));
	}
	else if(PlayerInfo[playerid][pHelper] > 0) {
	   format(string, sizeof(string), "{33CCFF}%s{FFA500}", GetHelperRank(playerid));
	}
	else if(PlayerInfo[playerid][pFormerAdmin]) {
	    string = "{FF69B5}Former Admin{FFA500}";
	}
	else if(PlayerInfo[playerid][pVIPPackage] > 0) {
	    format(string, sizeof(string), "{D909D9}%s VIP{FFA500}", GetVIPRank(PlayerInfo[playerid][pVIPPackage]));
	}
	else if(PlayerInfo[playerid][pLevel] >= 3) {
	    format(string, sizeof(string), "Cap do %i", PlayerInfo[playerid][pLevel]);
	}
	else {
	       string = "Newbie";
	}

	foreach(new i : Player)
	{
	  	if(!PlayerInfo[i][pToggleGlobal])
	  	{
	      	if(strlen(params) > MAX_SPLIT_LENGTH)
	    	{
	        	SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: %.*s...))", string, GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	        	SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: ...%s ))", string, GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
	   		}
	   		else
	   		{
	       		SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: %s ))", string, GetPlayerRPName(playerid), params);
	   		}
	  	}
 	}

	if(PlayerInfo[playerid][pAdmin] < 2)
 	{
 		PlayerInfo[playerid][pLastGlobal] = gettime();
 	}
 	return 1;
}

CMD:fc(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /fc [faction chat]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
    if(PlayerInfo[playerid][pToggleFaction])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tro chuyen khi da tat kenh nay.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the noi chuyen trong /fc khi dang bi thuong!");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung /fc khi dang bi troi.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pToggleFaction])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: %.*s... ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: ...%s ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
   			{
			    SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: %s ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:crew(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /crew [crew chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc bat ky bang dang nao de su dung chuc nang nay.");
	}
	if(PlayerInfo[playerid][pCrew] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong tach roi bat ky thanh vien nao trong bang dang cua ban.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && PlayerInfo[i][pCrew] == PlayerInfo[playerid][pCrew])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:div(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /div [division chat]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(PlayerInfo[playerid][pDivision] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong tach roi bat ky bo phan nao trong to chuc cua ban.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == PlayerInfo[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:r(playerid, params[])
{
	return callcmd::radio(playerid, params);
}

CMD:radio(playerid, params[])
{
    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(r)adio [faction radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the noi chuyen khi da tat kenh nay.");
	}
 	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung /r khi dang bi thuong");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung /r khi dang bi troi.");
	}
	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pToggleRadio]) || (PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn] && IsEmergencyFaction(playerid)))
	    {
	        new color = (FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);

			if(strlen(params) > MAX_SPLIT_LENGTH)
			{
			    if(PlayerInfo[playerid][pDivision] == -1)
			    {
				    SendClientMessageEx(i, color, "** %s %s: %.*s... **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SendClientMessageEx(i, color, "** %s %s: ...%s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
				else
				{
				    SendClientMessageEx(i, color, "** [%s] %s %s: %.*s... **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SendClientMessageEx(i, color, "** [%s] %s %s: ...%s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pDivision] == -1)
			    {
				    SendClientMessageEx(i, color, "** %s %s: %s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
				}
				else
				{
				    SendClientMessageEx(i, color, "** [%s] %s %s: %s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
				}
			}

			if((PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn]) && random(100) <= 3)
            {
                SendProximityMessage(i, 20.0, COLOR_PURPLE, "** May quet cua si quan %s's se ban ra tia lua va tat.", GetPlayerRPName(i));
                SendClientMessage(i, COLOR_GREY2, "May quet canh sat cua ban bi thieu va hien da bi hong.");

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET policescanner = 0, scanneron = 0 WHERE uid = %i", PlayerInfo[i][pID]);
                mysql_tquery(connectionID, queryBuffer);

            	PlayerInfo[i][pPoliceScanner] = 0;
            	PlayerInfo[i][pScannerOn] = 0;
	        }
		}
	}

	SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);

	return 1;
}

CMD:d(playerid, params[])
{
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /d [department radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the noi chuyen khi da tat kenh nay.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung /d khi dang bi thuong!");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang bi troi.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban Ban khong the su dung lenh nay khi dang bi cong.");
	}

    if(!strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], "None", true))
	{
	    if(PlayerInfo[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
	}
	else
	{
		if(PlayerInfo[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_ARMY:
	    {
			foreach(new i : Player)
			{
			    if((PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn]) || ((!PlayerInfo[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_ARMY)))
			    {
       				if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			            SendClientMessageEx(i, COLOR_YELLOW, "** %s: %.*s... **", header, MAX_SPLIT_LENGTH, params);
				        SendClientMessageEx(i, COLOR_YELLOW, "** %s: ...%s **", header, params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SendClientMessageEx(i, COLOR_YELLOW, "** %s: %s **", header, params);
					}

					if((PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn]) && random(100) <= 3)
		            {
		                SendProximityMessage(i, 20.0, COLOR_PURPLE, "** May quet cua si quan %s's se ban ra tia lua va tat.", GetPlayerRPName(i));
		                SendClientMessage(i, COLOR_GREY2, "May quet canh sat cua ban bi thieu va hien da bi hong.");

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET policescanner = 0, scanneron = 0 WHERE uid = %i", PlayerInfo[i][pID]);
		                mysql_tquery(connectionID, queryBuffer);

		            	PlayerInfo[i][pPoliceScanner] = 0;
		            	PlayerInfo[i][pScannerOn] = 0;
					}
				}
			}
		}
		default:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc cua ban khong duoc phep giao tiep tren kenh nay.");
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);
	return 1;
}

CMD:fbank(playerid, params[])
{
	return 1;
}
CMD:faction(playerid, params[])
{
	new targetid, option[14], param[128];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(sscanf(params, "s[14]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /faction [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: MOTD, Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Leadership, Respawncars, Fund");
	    return 1;
	}
	if(!strcmp(option, "motd", true))
	{
        if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessageEx(playerid, COLOR_YELLOW, "** Thong bao to chuc: %s", FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD]);
		}
		if(isnull(param))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /faction [motd] [van ban ('none' de cai dat lai)]");
		    SendClientMessageEx(playerid, COLOR_SYNTAX, "Thong bao hien tai: %s", FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD]);
		    return 1;
		}

		strcpy(FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD], param, 128);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thay doi thong bao cua to chuc.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET motd = '%e' WHERE id = %i", param, PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fund", true))
	{
		new factionid = PlayerInfo[playerid][pFaction];
		new amount, operation[14];

		if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
		}
		if(sscanf(param, "s[14]i", operation, amount))
		{
		    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /faction fund [rut/gui] [so luong] (%s co san)", FormatNumber(FactionInfo[factionid][fFund]));
		}
		if(!strcmp(operation, "rut", true))
		{
			if(amount < 1 || amount > FactionInfo[factionid][fFund])
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			}

			FactionInfo[factionid][fFund] -= amount;
			GivePlayerCash(playerid, amount);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET budget = %i WHERE id = %i",FactionInfo[factionid][fFund], factionid);
			mysql_tquery(connectionID, queryBuffer);

			SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da lay ra %s tu quy cua to chuc. Hien tai con lai %s.", FormatNumber(amount), FormatNumber(FactionInfo[factionid][fFund]));
		}
		else if(!strcmp(operation, "gui", true))
		{
			if(amount < 1 || amount > PlayerInfo[playerid][pCash])
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
			}

			GivePlayerCash(playerid, -amount);
			FactionInfo[factionid][fFund] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET budget = %i WHERE id = %i",FactionInfo[factionid][fFund], factionid);
			mysql_tquery(connectionID, queryBuffer);

			SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui %s vao quy cua to chuc. Hien tai co %s.", FormatNumber(amount), FormatNumber(FactionInfo[factionid][fFund]));
		}
	}
	else if(!strcmp(option, "invite", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep moi thanh vien vao to chuc cua minh.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /faction [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pFaction] != -1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da roi khoi mot to chuc.");
		}
		if(PlayerInfo[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_HITMAN)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do thuoc mot bang dang va khong the tham gia to chuc.");
		}
		if(PlayerInfo[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_FEDERAL)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do thuoc mot bang dang va khong the tham gia to chuc.");
		}
		if(PlayerInfo[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_NEWS)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do thuoc mot bang dang va khong the tham gia to chuc.");
		}
		PlayerInfo[targetid][pFactionOffer] = playerid;
		PlayerInfo[targetid][pFactionOffered] = PlayerInfo[playerid][pFaction];

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s da gui loi moi ban vao to chuc {00AA00}%s{33CCFF} (/chapnhan tochuc).", GetPlayerRPName(playerid), FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui loi moi %s de tham gia to chuc cua minh.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep loai bo thanh vien khoi to chuc cua minh.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /faction [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong thuoc to chuc cua ban.");
		}
		/*if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player has a higher rank than you.");
		}*/

		Log_Write("log_faction", "%s (uid: %i) da loai bo %s (uid: %i) tu %s (id: %i) voi cap bac %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);

		SetPlayerFaction(targetid, -1);
		SendClientMessageEx(targetid, COLOR_AQUA, "%s da truc xuat ban khoi to chuc.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da truc xuat %s khoi to chuc cua minh.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /faction [rank] [playerid] [rankid (0-%i)]", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(rankid < 0 || rankid >= FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cap bac khong hop le.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong o trong to chuc.");
		}
		/*if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player has a higher rank than you.");
		}*/

		PlayerInfo[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da thay doi cap bac cho ban thanh {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thay doi cap bac cua %s's thanh {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(targetid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		Log_Write("log_faction", "%s (uid: %i) da thay doi cap bac cua %s's (uid: %i) voi to chuc %s (id: %i) thanh %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "leadership", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "u", targetid))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /faction [leadership] [playerid]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "Lenh nay cap hoac thu hoi co lanh dao cua thanh vien trong to chuc.");
		    return 1;
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong o trong to chuc.");
		}

	    if(!PlayerInfo[targetid][pFactionLeader])
	    {
	        PlayerInfo[targetid][pFactionLeader] = 1;

	        SendClientMessageEx(targetid, COLOR_AQUA, "%s da {00AA00}cap{33CCFF} cho ban la co lanh dao cua to chuc.", GetPlayerRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da {00AA00}cap{33CCFF} cho %s la co lanh dao cua to chuc.", GetPlayerRPName(targetid));
	        Log_Write("log_faction", "%s (uid: %i) da cap la co lanh dao to chuc cho %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		}
		else
		{
	        PlayerInfo[targetid][pFactionLeader] = 0;

	        SendClientMessageEx(targetid, COLOR_AQUA, "%s da {FF6347}thu hoi{33CCFF} la co lanh dao cua to chuc tu ban.", GetPlayerRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da {FF6347}thu hoi{33CCFF} la co lanh dao to chuc cua %s's.", GetPlayerRPName(targetid));
	        Log_Write("log_faction", "%s (uid: %i) revoked leadership flags from %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionleader = %i WHERE uid = %i", PlayerInfo[targetid][pFactionLeader], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM users WHERE faction = %i ORDER BY factionrank DESC", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /faction [quit] [confirm]");
	    }

	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da roi khoi %s voi cap bac la {00AA00}%s{33CCFF} (%i).", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);
		Log_Write("log_faction", "%s (uid: %i) da roi khoi %s (id: %i) voi cap bac %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);
		SetPlayerFaction(playerid, -1);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

  		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /faction [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da truc tuyen va dang nhap. Su dung '/faction kick' de thay the.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can co cap bac %i+ de su dung lenh nay.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}

		foreach(new i: Vehicle)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[PlayerInfo[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s da phuc hoi tat ca phuong tien cua to chuc khong co nguoi su dung. ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] da respawn phuong tien cua to chuc.", GetPlayerRPName(playerid), playerid);
	}

	return 1;
}

CMD:setfid(playerid, params[])
{
	new targetid, id;
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi");
    if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan nguoi choi do.");

	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc sat thu khong co the nganh.");
	}
	if(PlayerInfo[playerid][pFactionLeader])
	{
		if(sscanf(params, "ui", targetid, id))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setfid [playerid] [ID]");
			SendClientMessage(playerid, COLOR_LIGHTRED, "[To chuc]{ffffff} Chuc nang nay se dua cho nguoi khac mot the nganh.");
		}
		if(PlayerInfo[targetid][pFaction] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong co o trong to chuc.");
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pFactionID] == id) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ma nganh nay da duoc mot ai do so huu.");

			PlayerInfo[targetid][pFactionID] = id;
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "[To chuc] {FFFFFF}Ban da dua cho %s mot the nganh voi ma nganh la %i.", targetid, id);
			SendClientMessageEx(targetid, COLOR_LIGHTRED, "[To chuc] {FFFFFF}%s da dua cho ban mot the nganh voi ma nganh la %i.", playerid, id);
			SendClientMessage(targetid, COLOR_LIGHTRED, "[The nganh] {FFFFFF}Ban da co mot the nganh, hay su dung /thenganh de xem");

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionid = %i WHERE uid = %i", PlayerInfo[targetid][pFactionID], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	return 1;
}

CMD:division(playerid, params[])
{
	new targetid, divisionid, option[10], param[32];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc Sat thu khong co quyen truy cap vao he thong bo phan.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /division [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /division [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[PlayerInfo[playerid][pFaction]][i], param, 32);
		        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da tao bo phan {FFA763}%s{33CCFF}. ID cua bo phan nay la %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, '%e')", PlayerInfo[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "To chuc cua ban chi co the co toi da %i bo phan.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /division [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "ID bo phan khong hop le.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == divisionid)
	        {
	            PlayerInfo[i][pDivision] = -1;
	            SendClientMessage(i, COLOR_LIGHTRED, "Bo phan ma ban tach ra da bi xoa boi chu so huu to chuc.");
		    }
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da xoa bo bo phan {F7A763}%s{33CCFF} (%i).", FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", PlayerInfo[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE faction = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Danh sach cac bo phan _____");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Ten: Trong", i);
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Ten: %s", i, FactionDivisions[PlayerInfo[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /division [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong o trong to chuc.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "ID bo phan khong hop le.");
	    }
	    if(PlayerInfo[targetid][pDivision] == divisionid)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da o trong bo phan do.");
	    }
	    if(PlayerInfo[targetid][pDivision] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da o bo phan khac.");
	    }

	    PlayerInfo[targetid][pDivision] = divisionid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban vao bo phan {F7A763}%s{33CCFF}.", GetPlayerRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s vao bo phan {F7A763}%s{33CCFF}.", GetPlayerRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = %i WHERE uid = %i", divisionid, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /division [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong o trong to chuc.");
		}
	    if(PlayerInfo[targetid][pDivision] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong nam o trong bo phan nao.");
	    }

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da xoa bo bo phan {F7A763}%s{33CCFF} cua ban.", GetPlayerRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da xoa bo bo phan cua %s la {F7A763}%s{33CCFF}", GetPlayerRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerInfo[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:managecrew(playerid, params[])
{
	new targetid, crewid, option[10], param[32];

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc bat ky bang dang nao ngay bay gio.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /managecrew [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /crew [create] [name]");
		}

		for(new i = 0; i < MAX_GANG_CREWS; i ++)
		{
		    if(isnull(GangCrews[PlayerInfo[playerid][pGang]][i]))
		    {
		        strcpy(GangCrews[PlayerInfo[playerid][pGang]][i], param, 32);
		        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da tao Crew {FFA763}%s{33CCFF}. ID Crew la %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO crews VALUES(%i, %i, '%e')", PlayerInfo[playerid][pGang], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Bang dang cua ban chi co the co toi da %i crews.", MAX_GANG_CREWS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "i", crewid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /crew [remove] [crewid]");
		}
		if(!(0 <= crewid < MAX_GANG_CREWS) || isnull(GangCrews[PlayerInfo[playerid][pGang]][crewid]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "ID Crew khong hop le.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && PlayerInfo[i][pCrew] == crewid)
	        {
	            PlayerInfo[i][pCrew] = -1;
	            SendClientMessage(i, COLOR_LIGHTRED, "Crew ma ban tach ra da bi lanh dao bang dang xoa bo.");
		    }
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da xoa bo crew {F7A763}%s{33CCFF} (%i).", GangCrews[PlayerInfo[playerid][pGang]][crewid], crewid);
		GangCrews[PlayerInfo[playerid][pGang]][crewid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM crews WHERE id = %i AND crewid = %i", PlayerInfo[playerid][pGang], crewid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crew = -1 WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Danh sach Crew _____");

	    for(new i = 0; i < MAX_GANG_CREWS; i ++)
	    {
	        if(isnull(GangCrews[PlayerInfo[playerid][pGang]][i]))
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Ten: Trong", i);
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Ten: %s", i, GangCrews[PlayerInfo[playerid][pGang]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "ui", targetid, crewid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /crew [assign] [playerid] [crewid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong nam trong bang dang cua ban.");
		}
		if(!(0 <= crewid < MAX_GANG_CREWS) || isnull(GangCrews[PlayerInfo[playerid][pGang]][crewid]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "ID Crew khong hop le.");
	    }
	    if(PlayerInfo[targetid][pCrew] == crewid)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da o trong Crew nay.");
	    }
	    if(PlayerInfo[targetid][pCrew] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da o Crew khac");
	    }

	    PlayerInfo[targetid][pCrew] = crewid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban vao crew{F7A763}%s{33CCFF}.", GetPlayerRPName(playerid), GangCrews[PlayerInfo[playerid][pGang]][crewid]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chi dinh %s vao crew {F7A763}%s{33CCFF}.", GetPlayerRPName(targetid), GangCrews[PlayerInfo[playerid][pGang]][crewid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crew = %i WHERE uid = %i", crewid, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen su dung lenh nay.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /crew [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong nam trong bang dang cua ban.");
		}
	    if(PlayerInfo[targetid][pCrew] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong o trong Crew.");
	    }

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da xoa bo ban khoi crew {F7A763}%s{33CCFF}.", GetPlayerRPName(playerid), GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[targetid][pCrew]]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da xoa bo %s khoi crew {F7A763}%s{33CCFF}.", GetPlayerRPName(targetid), GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[targetid][pCrew]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crew = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerInfo[targetid][pCrew] = -1;
	}

	return 1;
}


CMD:cells(playerid, params[])
{
	new status;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}

    for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
		if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
		    status = true;
		}
		else
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
		    status = false;
		}
	}

	if(status)
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s da mo tat ca phong giam trong nha tu.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
	else
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s da dong tat ca phong giam trong nha tu.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));

	return 1;
}

CMD:cell(playerid, params[])
{
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, cellPositions[i][0], cellPositions[i][1], cellPositions[i][2]))
		{
	        if(!IsLawEnforcement(playerid))
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co quyen mo.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung chia khoa cua ho de mo cua phong giam.", GetPlayerRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s su dung chia khoa cua ho de dong cua phong giam.", GetPlayerRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky phong giam nao.");
	return 1;
}

CMD:door(playerid, params[])
{
	if(!DoorCheck(playerid))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi canh cua nao ma co the mo.");
	}

	return 1;
}

CMD:gate(playerid, params[])
{
	if(!GateCheck(playerid))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi canh cong nao ma co the mo.");
	}

	return 1;
}

CMD:locker(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, PlayerInfo[playerid][pFaction]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong nam trong pham vi tu do cua to chuc.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de su dung tu do. Vui long doi %i giay truoc khi thu lai.", PlayerInfo[playerid][pHurt]);
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Tu do", "Chuyen doi nhiem vu\nTrang bi\nDong phuc\nTrang phuc", "Chon", "Huy bo");
		}
		case FACTION_MEDIC:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Tu do", "Chuyen doi nhiem vu\nTrang bi\nDong phuc", "Chon", "Huy bo");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Tu do", "Trang bi\nDong phuc", "Chon", "Huy bo");
		}
		case FACTION_HITMAN:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Tu do", "Dat vu khi\nThay doi trang phuc", "Chon", "Huy bo");
		}
	}

	return 1;
}

CMD:showbadge(playerid, params[])
{
	new targetid, factionid, rankid;

    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    if(sscanf(params, "uii", targetid, factionid, rankid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /showbadge [playerid] [factionid] [rankid]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Su dung /factions de co danh sach cac to chuc su dung voi tham so factionid.");
	        return 1;
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
		}
		if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc khong hop le.");
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Cap bac khong hop le. Cap bac hop le chi tu 0 cho den %i.", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung to chuc nay cho huy hieu gia cua minh.");
	    }

	    SendClientMessageEx(targetid, COLOR_WHITE, "** %s la mot %s (%i) trong %s. **", GetPlayerRPName(playerid), FactionRanks[factionid][rankid], rankid, FactionInfo[factionid][fName]);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua huy hieu cua minh cho %s xem.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
		if(sscanf(params, "u", targetid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /showbadge [playerid]");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
		}

	    SendClientMessageEx(targetid, COLOR_WHITE, "** %s la mot %s (%i) trong %s. **", GetPlayerRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank], FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dau huy hieu cua minh cho %s xem.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:mpd(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc cua ban khong duoc phep sua dung loa phat thanh.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_POLICE)
	{
		SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[%s %s:o< Chung toi la SASD. Yeu cau phuong tien phia truoc dung lai ngay]", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
	}
	return 1;
}


CMD:mmd(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc cua ban khong duoc phep sua dung loa phat thanh.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MEDIC)
	{
		SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[%s %s:o< Yeu cau cac phuong tien phia truoc nhuong duong cho xe uu tien]", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:m(playerid, params[])
{
	return callcmd::megaphone(playerid, params);
}

CMD:megaphone(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc cua ban khong duoc phep sua dung loa phat thanh.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(m)egaphone [van ban]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[%s %s:o< %s]", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
	return 1;
}

CMD:tazer(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi bi han che vu khi.");
	}
    if(PlayerInfo[playerid][pHurt] && PlayerInfo[playerid][pTazer] == 0)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de rut tazer ra. Vui long doi %i giay truoc khi su dung lai.", PlayerInfo[playerid][pHurt]);
	}
	if(!PlayerInfo[playerid][pTazer])
	{
	    PlayerInfo[playerid][pTazer] = 1;
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay ra Tazer cua ho.", GetPlayerRPName(playerid));

		GivePlayerWeaponEx(playerid, 23, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    PlayerInfo[playerid][pTazer] = 0;
		SetPlayerWeapons(playerid);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dat Tazer cua ho vao lai that lung.", GetPlayerRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pWeapons][2]);
		}
	}

	return 1;
}


CMD:mir(playerid, params[])
{
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}
CMD:cuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /cuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tu cong tay chinh minh.");
	}
	if(PlayerInfo[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi cong tay.");
	}
	if(PlayerInfo[targetid][pTazedTime] == 0 && GetPlayerSpecialAction(targetid) != SPECIAL_ACTION_DUCK && GetPlayerAnimationIndex(targetid) != 1437)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do phai bi khong che, cui nguoi hoac gio tay.");
	}
	if(PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cong tay mot nguoi choi bi thuong.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de cong tay bat ky ai. Vui long doi %i giay truoc khi su dung lai.", PlayerInfo[playerid][pHurt]);
	}

	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(PlayerInfo[targetid][pCallLine], HANGUP_DROPPED);
	}

	PlayerInfo[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(targetid, 0);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s siet chat mot cong tay quanh co tay cua %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	GameTextForPlayer(targetid, "~r~Cong tay", 3000, 3);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_TERRORIST && PlayerInfo[playerid][pAdminDuty] == 0)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /uncuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mo khoa cong tay cho chinh minh.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi cong tay.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de go cong tay cho bat ky ai. Vui long doi %i giay truoc khi su dung lai.", PlayerInfo[playerid][pHurt]);
	}

	PlayerInfo[targetid][pCuffed] = 0;
 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s mo cap cong tay tu co tay cua %s ra.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	GameTextForPlayer(targetid, "~g~Mo cong", 3000, 3);
	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /drag [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the keo chinh minh.");
	}
	if(!PlayerInfo[targetid][pInjured] && !PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi thuong, bi cong tay hoac bi troi.");
	}
	if(PlayerInfo[targetid][pInjured] && GetFactionType(playerid) != FACTION_MEDIC)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the keo mot nguoi choi bi thuong tru khi ban la mot bac si.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de keo bat ky ai. Vui long doi %i giay truoc khi su dung lai.", PlayerInfo[playerid][pHurt]);
	}

	if(PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		PlayerInfo[targetid][pDraggedBy] = playerid;
		//TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nam lay %s va bat dau keo ho di.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    //TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dung lai viec keo %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:detain(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && PlayerInfo[targetid][pCuffed])
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /detain [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the giam giu chinh minh.");
	}
	if(!PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi cong tay hoac bi troi.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da o trong mot chiec xe.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai bat ky phuong tien nao.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			PlayerInfo[targetid][pVehicleCount] = 0;

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dua %s vao xe cua ho.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Khong con cho trong phia sau. Tim mot phuong tien khac.");
	return 1;
}

CMD:charge(playerid, params[])
{
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /charge [playerid] [ly do]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tu truy na chinh minh.");
	}
	if(PlayerInfo[targetid][pWantedLevel] >= 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay da o muc truy na toi da (6).");
	}
	if(GetFactionType(targetid) == FACTION_FEDERAL && GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_ARMY)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do thuoc to chuc co quyen luc cao hon va do do khong the bi truy na.");
	}

	PlayerInfo[targetid][pWantedLevel]++;
	PlayerInfo[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i, crimes = %i WHERE uid = %i", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pCrimes], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, '%s', NOW(), '%e')", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i))
	    {
			SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: %s %s da truy na %s voi ly do {FF6347}%s{9999FF}. **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
		}
	}

	SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Si quan %s da truy na ban voi ly do %s.", GetPlayerRPName(playerid), reason);
	Log_Write("log_faction", "%s (uid: %i) da truy na %s (uid: %i) voi ly do %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	return 1;
}
CMD:su(playerid, params[])
{
	return callcmd::charge(playerid, params);
}
CMD:bug(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_FEDERAL)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la mot dac vu lien bang.");
	}
	if(!PlayerInfo[playerid][pToggleBug])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Bat kenh Bug truoc tien! (/tog bugged)");
	}
    new
		targetid;

    if(sscanf(params, "u", targetid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Su dung: /bug [playerid]");
	}
    if(PlayerInfo[targetid][pAdminDuty])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dat Bug cho quan tri vien.");
	}
	if(PlayerInfo[targetid][pBugged] == 1)
	{
		PlayerInfo[targetid][pBugged] = 0;
 		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Bug tren %s da bi vo hieu hoa.", GetPlayerRPName(targetid));
	}
	else if(IsPlayerInRangeOfPlayer(playerid, targetid, 4.0))
	{
		PlayerInfo[targetid][pBugged] = 1;
    	SendClientMessageEx(playerid, COLOR_GREY ,"Ban da dat bug tren %s.",GetPlayerRPName(targetid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can dung gan voi nguoi do hon.");
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
	new targetid, minutes, fine;

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /arrest [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the giam giu chinh minh.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi cong tay.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the giam giu mot nguoi choi khong co lenh truy na. /charge de them cho ho.");
	}

	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]))
	    {
	        minutes = PlayerInfo[targetid][pWantedLevel] * 5;
	        fine = PlayerInfo[targetid][pWantedLevel] * 1000;

	        if(PlayerInfo[targetid][pVIPPackage] == 1)
			{
	            SendClientMessageEx(targetid, COLOR_VIP, "VIP Perk: Thoi gian ngoi tu %i phut cua ban da giam 10 phan tram xuong con %i phut.", minutes, percent(minutes, 10));
	            minutes = percent(minutes, 50);
	        }
	        else if(PlayerInfo[targetid][pVIPPackage] >= 2)
			{
	            SendClientMessageEx(targetid, COLOR_VIP, "VIP Perk: Thoi gian ngoi tu %i phut cua ban da giam 15 phan tram xuong con %i phut.", minutes, percent(minutes, 15));
	            minutes = percent(minutes, 25);
	        }

		    PlayerInfo[targetid][pJailType] = 3;
    		PlayerInfo[targetid][pJailTime] = minutes * 60;
			PlayerInfo[targetid][pWantedLevel] = 0;
			PlayerInfo[targetid][pArrested]++;

		    ResetPlayerWeaponsEx(targetid);
			ResetPlayer(targetid);
			TogglePlayerControllable(targetid, 1);

			SetPlayerInJail(targetid);
			GivePlayerCash(targetid, -fine);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", PlayerInfo[targetid][pArrested], PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			SendClientMessageToAllEx(COLOR_LIGHTRED, "<< %s %s da hoan thanh viec giam giu. %s da bi dua vao tu trong %i ngay. >>", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid), minutes);
			//SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has arrested %s for %i minutes, fine: $%i.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid), minutes, fine);
    		SendClientMessageEx(targetid, COLOR_AQUA, "** Ban da bi dua vao tu trong %i phut, tien phat: $%i.", minutes, fine);
    		Log_Write("log_faction", "%s (uid: %i) dua %s (uid: %i) vao tu voi muc phat %i phut, tien phat: $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, fine);
    		return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky diem giam giu nao.");
    return 1;
}

CMD:wanted(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Danh sach Truy na _____");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pWantedLevel] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s - Cap do truy na: %i", i, GetPlayerRPName(i), PlayerInfo[i][pWantedLevel]);
		}
	}

	return 1;
}

CMD:frisk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /frisk [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
    if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the luc soat chinh minh.");
	}

	if(IsLawEnforcement(playerid))
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    PlayerInfo[targetid][pFriskOffer] = playerid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "** %s dang co gang luc soat trong nguoi cua ban. (/chapnhan lucsoat)", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi luc soat nguoi cua %s.", GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new targetid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /take [playerid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Weapons, Weed, Cocaine, Meth, Painkillers, CarLicense");
		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay di vu khi cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da lay het vu khi cua ban.", GetPlayerRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) da lay vu khi cua %s's (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(!PlayerInfo[targetid][pWeed])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co weed tren nguoi.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay di can sa cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da lay di %i grams can sa cua ban.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
	    Log_Write("log_faction", "%s (uid: %i) da lay di %s's (uid: %i) %i grams weed.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pWeed]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pWeed] = 0;
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(!PlayerInfo[targetid][pCocaine])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co cocaine tren nguoi.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay di cocaine cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da lay di %i grams cocaine cua ban.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) da lay di %s's (uid: %i) %i grams cocaine.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pCocaine]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCocaine] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[targetid][pMeth])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co meth trong nguoi.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay di meth cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da lay di %i grams meth cua ban.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) da lay di %s's (uid: %i) %i grams meth.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMeth]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[targetid][pPainkillers])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co painkillers trong nguoi.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes away %s's painkillers.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i painkillers.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPainkillers]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerInfo[targetid][pCarLicense])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co giay phep lai xe.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay di giay phep lai xe cua %s's.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da lay di giay phep lai xe cua ban.", GetPlayerRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) da lay di bang lai xe cua %s's (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCarLicense] = 0;
	}

	return 1;
}

CMD:ticket(playerid, params[])
{
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ticket [playerid] [so luong] [ly do]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dat ve phat cho minh.");
	}
	if(!(50 <= amount <= 5000))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Pham vi so tien phat chi tu $50 den $5000.");
	}

	PlayerInfo[targetid][pTicketOffer] = playerid;
	PlayerInfo[targetid][pTicketPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da viet mot ve phat cho ban voi muc phat la %s vi ly do %s. (/chapnhan vephat)", GetPlayerRPName(playerid), FormatNumber(amount), reason);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da viet ve phat voi muc phat la %s cho %s voi ly do %s.", FormatNumber(amount), GetPlayerRPName(targetid), reason);
	return 1;
}

CMD:gov(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc to chuc nao de su dung chuc nang nay.");
	}
 	if(!PlayerInfo[playerid][pFactionLeader])
 	{
 	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gov [van ban]");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Thong bao tu To chuc Nha nuoc ____________");

			SendClientMessageToAllEx(COLOR_DOCTOR, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
		case FACTION_POLICE:
		{
            if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Thong bao tu To chuc Nha nuoc ____________");

			SendClientMessageToAllEx(COLOR_BLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
        case FACTION_GOVERNMENT:
		{
		    if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Thong bao Tin tuc Chinh phu ____________");

			SendClientMessageToAllEx(COLOR_YELLOW2, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
		case FACTION_FEDERAL:
		{
		    if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Thong bao tu To chuc Nha nuoc ____________");

			SendClientMessageToAllEx(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
		case FACTION_ARMY:
		{
		    if(!PlayerInfo[playerid][pGovTimer])
	       	 SendClientMessageToAll(COLOR_GREY1, "____________ Thong bao tu Bo Quoc Phong ____________");

			SendClientMessageToAllEx(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);

			PlayerInfo[playerid][pGovTimer] = 30;
		}
		default:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc cua ban khong duoc phep su dung lenh nay.");
		}
	}

	return 1;
}

CMD:ram(playerid, params[])
{
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			/*else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerRamLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}*/
		}
	}

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ngoi nha nay khong bi khoa. Ban khong can phai pha cua.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da pha cua nha cua %s's.", GetPlayerRPName(playerid), HouseInfo[id][hOwner]);
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep nay khong bi khoa. Ban khong can phai pha cua");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da pha cua doanh nghiep cua %s's.", GetPlayerRPName(playerid), BusinessInfo[id][bOwner]);
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Garage nay khong bi khoa. Ban khong can phai pha cua.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da pha cua Garage cua %s's.", GetPlayerRPName(playerid), GarageInfo[id][gOwner]);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi canh cua nao co the pha.");
	}

	return 1;
}

CMD:deploy(playerid, params[])
{
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /deploy [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Spikestrip, Cone, Roadblock, Barrel, Flare");
	    return 1;
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the trien khai cac doi tuong ben trong.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	}

	if(type_id == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nhom cac doi tuong co the trien khai da day. Truoc tien hay thu xoa mot so.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s da trien khai mot %s o %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "** HQ: %s %s da trien khai mot %s o %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}
CMD:undeployall(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "** HQ: %s %s da go bo het tat ca doi tuong.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
	return 1;
}
CMD:undeploy(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "** HQ: %s %s has removed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong nam trong pham vi doi tuong da trien khai.");
	return 1;
}

CMD:bk(playerid, params[])
{
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the goi ho tro khi ban da chet.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang bi cong.");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang bi troi.");
	}
	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;
	}
	else
	{
	    PlayerInfo[playerid][pBackup] = 0;
	}


	foreach(new i : Player)
	{
        switch(GetFactionType(i))
		{
            case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_ARMY, FACTION_GOVERNMENT:
			{
	    	    if(PlayerInfo[playerid][pBackup])
	    	    {
	    	        SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: %s %s dang yeu cau ho tro tai %s (danh dau tren radar).", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
	    	        SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[PlayerInfo[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
				}
				else
				{
	    	        SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: %s %s da huy yeu cau ho tro.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
	    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
				}
			}
		}
	}

	return 1;
}

CMD:mdc(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(400 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 600))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong phuong tien canh sat hoac o trong tru sso.");
	}

	ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "May tinh du lieu di dong", "Nghi pham bi truy na\nTra cuu cong dan\nTra cuu phuong tien", "Chon", "Huy bo");
	return 1;
}

CMD:clearwanted(playerid, params[])
{
    new targetid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /clearwanted [playerid]");
	}
	/*if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not inside a police car or the police station.");
	}*/
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the xoa bo truy na cua chinh minh.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi truy na de co the xoa.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gui cong van va yeu cau xoa bo lenh truy na voi %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_WHITE, "** Lenh truy na cua ban da bi xoa bo boi %s.", GetPlayerRPName(playerid));
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s da xoa bo lenh truy na cua %s's.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:vticket(playerid, params[])
{
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vticket [so luong]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc co bat ky chiec xe nao.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong thuoc so huu cua bat ky nguoi cu the nao.");
	}
	if(!(100 <= amount <= 5000))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ve phat chi dinh o muc tu $100 den $5000.");
	}
	if(VehicleInfo[vehicleid][vTickets] >= 50000)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay co hon $50000 tien phat. Ban khogn the them nua.");
	}

	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da viet mot ve phat voi muc phat la %s cho phuong tien %s.", GetPlayerRPName(playerid), FormatNumber(amount), GetVehicleName(vehicleid));
	Log_Write("log_faction", "%s (uid: %i) da viet mot ve phat voi gia $%i cho %s's (uid: %i) %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	return 1;
}

CMD:siren(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky phuong tien nao.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong the gan den bao dong.");
	}

	if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

		vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dat mot den bao dong tren phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay ra mot den bao dong tu phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky phuong tien nao.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /callsign [van ban ('none' de dat lai)]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SendClientMessage(playerid, COLOR_WHITE, "** Da xoa callsign khoi phuong tien.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SendClientMessage(playerid, COLOR_WHITE, "** Callsign duoc dinh kem. '/callsign none' de go bo.");
	}

	return 1;
}

CMD:vfrisk(playerid, params[])
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc co bat ky chiec xe nao.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong thuoc so huu cua bat ky nguoi cu the nao.");
	}

    new count;

    for(new i = 0; i < 5; i ++)
    {
        if(VehicleInfo[vehicleid][vWeapons][i])
        {
            count++;
        }
    }

    SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Luu tru cua cop xe ______");
    SendClientMessageEx(playerid, COLOR_GREY2, "Tien: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SendClientMessageEx(playerid, COLOR_GREY2, "Vat lieu: %i/%i | Vu khi: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", VehicleInfo[vehicleid][vWeed], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCocaine], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i vien", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));

	if(count > 0)
	{
		SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Kho vu khi ______");

    	for(new i = 0; i < 5; i ++)
        {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
    	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Vu khi: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
			}
		}
    }

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s mo cop xe cua phuong tien %s va nhin vao ben trong.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid, params[])
{
    new vehicleid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc co quan thuc thi phap luat.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vtake [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Vukhi, Weed, Cocaine, Meth, Painkillers");
	    return 1;
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc co bat ky chiec xe nao.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong thuoc so huu cua bat ky nguoi cu the nao.");
	}

	if(!strcmp(option, "vukhi", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;
        VehicleInfo[vehicleid][vWeapons][3] = 0;
        VehicleInfo[vehicleid][vWeapons][4] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0, weapon_4 = 0, weapon_5 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay vu khi ra tu cop cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessage(playerid, COLOR_AQUA, "Ban da lay ra vu khi tu cop xe.");
		Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay weed ra tu cop cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da lay ra %i grams weed trong cop xe.", VehicleInfo[vehicleid][vWeed]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of weed from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vWeed] = 0;
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay cocaine ra tu cop cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da lay ra %i grams cocaine trong cop xe.", VehicleInfo[vehicleid][vCocaine]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of cocaine from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCocaine] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay meth ra tu cop cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da lay ra %i grams meth tu cop xe.", VehicleInfo[vehicleid][vMeth]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s ban da lay thuoc giam dau tu cop cua phuong tien %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da lay ra %i vien thuoc giam dau tu cop xe.", VehicleInfo[vehicleid][vPainkillers]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:heal(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la mot Bac si");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /heal [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tu chua lanh vet thuong cho minh.");
	}
	if(PlayerInfo[targetid][pReceivingAid])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay dang duoc so cuu.");
	}

	PlayerInfo[targetid][pReceivingAid] = 1;
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dang so cuu cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	SendClientMessageEx(targetid, COLOR_AQUA, "Ban da duoc so cuu tu %s. Suc khoe hien tai da hoi phuc.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da so cuu thanh cong cho %s.", GetPlayerRPName(targetid));
	return 1;
}

CMD:stretcher(playerid, params[])
{
    new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la mot Bac si.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /stretcher [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi thuong.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can dieu khien mot phuong tien danh cho cap cuu.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        PlayerInfo[targetid][pVehicleCount] = 0;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dat %s tren cang trong xe cap cuu.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Khong con cho trong. Tim mot phuong tien khac");
	return 1;
}

CMD:deliverpatient(playerid, params[])
{
	new targetid, amount = 2000;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la mot Bac si.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /deliverpatient [playerid]");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307, -1422.8580, 48.331) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773, -2151.7322, 13.7483) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819, -2166.9712, 35.2578) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1539.1060, -2167.2058, 35.2578))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o pham vi khu vuc cap cuu benh nhan.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong bi thuong.");
	}

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}

    PlayerInfo[targetid][pInjured] = 0;
	PlayerInfo[targetid][pDelivered] = 0;
	PlayerInfo[playerid][pTotalPatients]++;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307,-1422.8580,48.331))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_COUNTY);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) || IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485))
	{
		SetPlayerVirtualWorld(targetid, HOSPITAL_ALLSAINTS);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773,-2151.7322,13.7483) || IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819,-2166.9712,35.2578) || IsPlayerInRangeOfPoint(playerid, 5.0,  1539.1060,-2167.2058,35.2578))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_FMDHQ);
	}

	if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
	{
        SendClientMessage(targetid, COLOR_DOCTOR, "Ban khong duoc lap hoa don cho vien phi cua ban. Ban cung giu duoc tat vu khi cua minh!");
    }
	else
	{
		SendClientMessage(targetid, COLOR_DOCTOR, "Ban da lap hoa don vien phi la $500. Ban cung giu duoc tat ca vu khi cho minh!");
	}

	SetPlayerPos(targetid, -2276.3699, 102.5945, -3.8589);
	SetPlayerFacingAngle(targetid, 180.0000);
	SetPlayerInterior(targetid, 1);
	SetCameraBehindPlayer(targetid);

	if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC))
	{
		GivePlayerCash(targetid, -500);
		GameTextForPlayer(targetid, "~w~Da tra~n~~r~-$500", 5000, 1);
	}

	TogglePlayerControllable(targetid, 1);
	SetPlayerDrunkLevel(targetid, 0);

	SetPlayerHealth(targetid, PlayerInfo[targetid][pSpawnHealth]);
	SetScriptArmour(targetid, PlayerInfo[targetid][pSpawnArmor]);
    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	AddToPaycheck(playerid, amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da cap cuu thanh cong benh nhan %s va nhan duoc {00AA00}$%i{33CCFF} vao tien luong cua minh.", GetPlayerRPName(targetid), amount);
	return 1;
}
CMD:listbugs(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Dac vu lien bang.");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Nguoi choi Bugged:");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pBugged])
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ten: %s - Vi tri: %s", GetPlayerRPName(i), GetPlayerZoneName(i));
		}
	}
	return 1;
}
CMD:listpt(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la mot Bac si.");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Bi thuong - (/injuries):");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(PlayerInfo[i][pAcceptedEMS]))
		    {
				accepted = GetPlayerRPName(PlayerInfo[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "Khong";
		    }
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ten: %s - Vi tri: %s - Medic: %s", GetPlayerRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SendClientMessage(playerid, COLOR_AQUA, "Su dung /getpt [playerid] de nhan cap cuu!");
	return 1;
}
CMD:getpt(playerid, params[])
{
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /getpt [playerid]");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "Ban khong the chap nhan cuoc goi Cong van khan cap cua rieng minh!");
				return 1;
		    }
		    if(!PlayerInfo[targetid][pInjured])
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay khong bi thuong!");
		        return 1;
		    }
			if(!IsPlayerConnected(PlayerInfo[targetid][pAcceptedEMS]))
			{
				if(PlayerInfo[targetid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho nhung nguoi choi bi bo tu.");
				SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "Bac si %s da chap nhan Cuoc goi khan cap tu %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* Ban da chap nhan cuoc goi EMS tu %s, ban se thay duoc diem danh dau.", GetPlayerRPName(targetid));
				SendClientMessageEx(targetid, COLOR_AQUA, "* Bac si %s da chap nhan Cuoc goi EMS tu ban, hay kien nhan khi ho dang di den!", GetPlayerNameEx(playerid));
				PlayerInfo[targetid][pAcceptedEMS] = playerid;
				GameTextForPlayer(playerid, "~w~Cuoc goi EMS~n~.", 5000, 1);
                PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Mot Bac si nao do da chap nhan cuoc goi do!");
			}
		}
	}
	return 1;
}

CMD:loadpt(playerid, params[])
{
	return callcmd::stretcher(playerid, params);
}
CMD:deliverpt(playerid, params[])
{
	return callcmd::deliverpatient(playerid, params);
}
CMD:movept(playerid, params[])
{
	return callcmd::drag(playerid, params);
}
CMD:injuries(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la mot Bac si.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /injuries [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerListInjuries", "ii", playerid, targetid);
	return 1;
}

CMD:news(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Phong vien tin tuc.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /news [van ban]");
	}
	if(PlayerInfo[playerid][pToggleNews])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the phat song tin tuc khi ban da tat no.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 488 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 582)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can su dung lenh nay trong phuong tien dua tin.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleNews])
	    {
			SendClientMessageEx(i, COLOR_LIGHTGREEN, "Phong vien %s: %s", GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:live(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Phong vien tin tuc.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /live [playerid]");
	}
	if(PlayerInfo[playerid][pLiveMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban bi cam phong van truc tiep. Yeu cau cap bac cao hon de go bo lenh cam cua ban.");
	}
	if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang thuc hien mot cuoc phong van truc tiep. Su dung /endlive de ket thuc no");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tu minh phong van.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(PlayerInfo[targetid][pLiveMuted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi cam phong van truc tiep.");
	}
	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do dang co cuoc goi dien ngay bay gio.");
	}

	PlayerInfo[targetid][pLiveOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s de nghi ban tham gia mot cuoc phong van truc tiep. (/chapnhan live)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi %s tham gia mot cuoc phong van truc tiep.", GetPlayerRPName(targetid));
	return 1;
}

CMD:endlive(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Phong vien tin tuc.");
	}
    if(PlayerInfo[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban hien tai khong co phong van.");
	}

	SendClientMessage(playerid, COLOR_AQUA, "Ban da ket thuc cuoc phong van truc tiep.");
	SendClientMessageEx(PlayerInfo[playerid][pLiveBroadcast], COLOR_AQUA, "%s da ket thuc cuoc phong van truc tiep nay.", GetPlayerRPName(playerid));

	PlayerInfo[PlayerInfo[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Phong vien tin tuc.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can co cap bac %i+ de su dung lenh nay.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /liveban [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}

	if(!PlayerInfo[targetid][pLiveMuted])
	{
		if(PlayerInfo[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	PlayerInfo[PlayerInfo[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	PlayerInfo[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		PlayerInfo[targetid][pLiveMuted] = 1;
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "%s da cam ban tham gia phong van tru ctiep.", GetPlayerNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da cam %s tham gia phong van truc tiep.", GetPlayerNameEx(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pLiveMuted] = 0;
		SendClientMessageEx(targetid, COLOR_YELLOW, "%s da mo cam cho ban tham gia phong van truc tiep.", GetPlayerNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da mo cam cho %s tham gia phong van truc tiep.", GetPlayerNameEx(targetid));
	}

	return 1;
}

CMD:settax(playerid, params[])
{
	new amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc Chinh phu.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can co cap bac %i+ de su dung lenh nay.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /settax [rate]");
	}
	if(!(10 <= amount <= 50))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ty le phan tram thue phai nam trong khoang tu 10 den 50.");
	}

	gTax = amount;
	SaveServerInfo();

	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da chinh sua thue thu nhap la %i phan tram.", GetPlayerRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da chinh sua thue thu nhap la %i phan tram.", amount);
	Log_Write("log_faction", "%s (uid: %i) da chinh sua thue thu nhap la %i phan tram.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}

CMD:factionpay(playerid, params[])
{
	new factionid = PlayerInfo[playerid][pFaction];

	if(!PlayerInfo[playerid][pFactionLeader] && GetFactionType(playerid) != FACTION_NONE)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban hoan toan khong phai la lanh dao cua to chuc hoac mot phan cua to chuc.");
	}
	if(sscanf(params, "s[5]", "edit"))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /factionpay [edit]");
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "To chuc Sat thu khong co ngan sach chinh phi.");
	}

	PlayerInfo[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:adwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc to chuc Tin tuc.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can co cap bac %i+ de su dung lenh nay.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /adwithdraw [so luong] [ly do] ($%i co san)", gNewsVault);
	}
	if(amount < 1 || amount > gNewsVault)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}

	gNewsVault -= amount;
	SaveServerInfo();
	GivePlayerCash(playerid, amount);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da lay ra %s tu ngan sach to chuc. So du moi la %s.", FormatNumber(amount), FormatNumber(gVault));
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da lay ra %s tu ngan sach to chuc, ly do: %s", GetPlayerRPName(playerid), FormatNumber(amount), reason);
	Log_Write("log_faction", "%s (uid: %i) da lay ra $%i tu ngan sach quang cao, ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, reason);
	return 1;
}

CMD:addeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc to chuc Tin tuc.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can co cap bac %i+ de su dung lenh nay.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /addeposit [so luong] ($%i co san)", gNewsVault);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}

	gNewsVault += amount;
	SaveServerInfo();
	GivePlayerCash(playerid, -amount);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui $%i vao ngan sach to chuc. So du moi la $%i.", amount, gNewsVault);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da dat $%i vao ngan sach to chuc.", GetPlayerRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) da gui $%i vao ngan sach to chuc tin tuc.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}


CMD:taxwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc Chinh phu.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can co cap bac %i+ de su dung lenh nay.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua ngan hang.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /taxwithdraw [so luong] [ly do] ($%i co san)", gVault);
	}
	if(amount < 1 || amount > gVault)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "So tien khong du.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da lay ra %s tu kho thue. So du moi la %s.", FormatNumber(amount), FormatNumber(gVault));
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da lay ra %s tu kho thue, ly do: %s", GetPlayerRPName(playerid), FormatNumber(amount), reason);
	Log_Write("log_faction", "%s (uid: %i) da lay ra $%i tu kho thue, ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, reason);
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong thuoc Chinh phu.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban phai co cap bac %i+ de su dung lenh nay.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong khu vuc ngan hang.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /taxdeposit [so luong] ($%i co san)", gVault);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du so luong.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui $%i vao trong kho thue. So du moi la $%i.", amount, gVault);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da gui $%i vao trong kho thue.", GetPlayerRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) da gui $%i vao trong kho thue.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}

CMD:contract(playerid, params[])
{
	new targetid, amount, reason[64];

	if(sscanf(params, "iis[64]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /contract [playerid] [so luong] [ly do]");
	}
	if(PlayerInfo[playerid][pLevel] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can phai o cap do 5+ de ky hop dong voi nguoi choi.");
	}
	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban la mot Sat thu do do khong the ky hop dong voi nhung nguoi choi khac.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ky hop dong voi ban than ban.");
	}
	if(PlayerInfo[targetid][pLevel] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chi co the ky hop dong voi nguoi choi level 5+.");
	}
	if(!(100 <= amount <= 500000))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "So tien phai tu $100 den $500000.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co nhieu tien nhu vay.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
	if(PlayerInfo[targetid][pContracted] + amount > 500000)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong the co nhieu hon $500000.");
	}

	foreach(new i : Player)
	{
	    if(GetFactionType(i) == FACTION_HITMAN)
	    {
	        SendClientMessageEx(i, COLOR_YELLOW, "** %s da ky hop dong voi %s co gia tri la $%i, ly do: %s [/contracts]", GetPlayerRPName(playerid), GetPlayerRPName(targetid), amount, reason);
		}
	}

	GivePlayerCash(playerid, -amount);

	PlayerInfo[targetid][pContracted] += amount;
	GetPlayerName(playerid, PlayerInfo[targetid][pContractBy], MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = %i, contractby = '%e' WHERE uid = %i", PlayerInfo[targetid][pContracted], PlayerInfo[targetid][pContractBy], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da ky mot hop dong voi %s co gia tri la $%i, ly do: %s", GetPlayerRPName(targetid), amount, reason);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s da ky mot hop dong voi %s co gia tri la $%i, ly do: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), amount, reason);
 	Log_Write("log_contracts", "%s (uid: %i) da ky mot hop dong voi %s (uid: %i) co gia tri la $%i, ly do: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
 	return 1;
}
CMD:noknife(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Sat thu.");
	}
	if(PlayerInfo[playerid][pNoKnife])
	{
	    PlayerInfo[playerid][pNoKnife] = 0;
     	SendClientMessage(playerid, COLOR_AQUA, "Ban da bat che do khong co dao, vu khi trang bi cua ban se khong bao gio la dao.");
	}
	else
	{
	    PlayerInfo[playerid][pNoKnife] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "Ban da tat che do khong dung dao, vu khi trang bi cua ban co the la bat cu thu gi.");
	}
	return 1;
}
CMD:hfind(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la sat thu hoac dac vu lien bang.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /hfind [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi nay o trong mot noi that. Ban khong the tim thay chung vao luc nay.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay doi voi quan tri vien dang lam nhiem vu.");
	}

	PlayerInfo[playerid][pFindTime] = 15;
	PlayerInfo[playerid][pFindPlayer] = targetid;

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SendClientMessageEx(playerid, COLOR_WHITE, "** Vi tri cua %s's da duoc danh dau tren radar cua ban. 15 giay van con cho den khi diem danh dau bien mat.", GetPlayerRPName(targetid));
	return 1;
}

CMD:contracts(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Hop dong dang cho xu ly _______");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pContracted] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Muc tieu: %s | Gia tri: %s | Nguoi ky hop dong: %s", i, GetPlayerRPName(i), FormatNumber(PlayerInfo[i][pContracted]), PlayerInfo[i][pContractBy]);
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "** Su dung /takehit [id] hoac /denyhit [id] de xu ly cac hop dong.");
	return 1;
}

CMD:denyhit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la mot Sat thu.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /denyhit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co hop dong nao tu nguoi choi nay.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da huy hop dong doi voi %s co gia tri la $%i.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pContracted]);

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Sat thu %s da huy hop dong voi %s co gia tri la %s. **", GetPlayerRPName(playerid), GetPlayerRPName(targetid), FormatNumber(PlayerInfo[targetid][pContracted]));
	}

	PlayerInfo[targetid][pContracted] = 0;
    strcpy(PlayerInfo[targetid][pContractBy], "No-one", MAX_PLAYER_NAME);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'No-one' WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:takehit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la mot Sat thu.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /takehit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co hop dong nao tu nguoi choi nay.");
	}
	if(PlayerInfo[targetid][pCash] + PlayerInfo[targetid][pBank] < PlayerInfo[targetid][pContracted] / 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Tong tai san cua nguoi choi do thap hon gia hop dong. Ban khong the mac no ho.");
	}

	PlayerInfo[playerid][pContractTaken] = targetid;
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Sat thu %s da chap nhan hop dong de tieu diet %s co gia tri %s. **", GetPlayerRPName(playerid), GetPlayerRPName(targetid), FormatNumber(PlayerInfo[targetid][pContracted]));
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thuc hien thanh cong. Ban se nhan duoc %s khi ban am sat {00AA00}%s{33CCFF} thanh cong.", FormatNumber(PlayerInfo[targetid][pContracted]), GetPlayerRPName(targetid));
	return 1;
}


CMD:kethon(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /propose [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, targetid, 2240.9014, -1358.3053, 1500.9048))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can co mat tai nha tho de tien hanh hon le.");
	}
	if(PlayerInfo[playerid][pCash] < 10000 || PlayerInfo[targetid][pCash] < 10000)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ca hai ban can co it nhat $10,000 de to chuc hon le.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != -1)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da ket hon voi %s.", PlayerInfo[playerid][pMarriedName]);
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ket hon voi chinh minh.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da yeu cau ban ket hon voi ban. Hay can than khi chon mot doi tac, se mat $10,000 cho ca hai ben. (/chapnhan kethon)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban gui cho %s mot loi cau hon.", GetPlayerRPName(targetid));
	return 1;
}

CMD:lyhon(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /divorce [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(PlayerInfo[playerid][pMarriedTo] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You aren't even married.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[targetid][pID])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You aren't married to that person.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has asked you to divorce them (/chapnhan lyhon)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have sent %s a request for divorce.", GetPlayerRPName(targetid));
	return 1;
}
CMD:profile(playerid, params[])
{
    new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	
	
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /profile [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s _____", GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Gioi tinh: %s", (PlayerInfo[targetid][pGender] == 2) ? ("Nu") : ("Nam"));
	SendClientMessageEx(playerid, COLOR_GREY2, "Tuoi: %i years old", PlayerInfo[targetid][pAge]);

	if(PlayerInfo[targetid][pFaction] != -1)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Faction: %s", FactionInfo[PlayerInfo[targetid][pFaction]][fName]);
	    SendClientMessageEx(playerid, COLOR_GREY2, "Rank: %s (%i)", FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Faction: None");
	}

	if(PlayerInfo[targetid][pContracted] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "Contract: %s", FormatNumber(PlayerInfo[targetid][pContracted]));
		SendClientMessageEx(playerid, COLOR_GREY2, "Last Contracter: %s", PlayerInfo[targetid][pContractBy]);
	}

	SendClientMessageEx(playerid, COLOR_GREY2, "Completed Hits: %i", PlayerInfo[targetid][pCompletedHits]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Failed Hits: %i", PlayerInfo[targetid][pFailedHits]);
	return 1;
}

CMD:passport(playerid, params[])
{
	new name[24], level, skinid;

    if(PlayerInfo[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pPassportName]);
  		SetScriptSkin(playerid, PlayerInfo[playerid][pPassportSkin]);
		SendClientMessage(playerid, COLOR_AQUA, "Ban da dot ho chieu cua ban va nhan lai ten, quan ao, cap do, so dien thoai cu cua ban.");

		PlayerInfo[playerid][pLevel] = PlayerInfo[playerid][pPassportLevel];
		PlayerInfo[playerid][pPhone] = PlayerInfo[playerid][pPassportPhone];
		PlayerInfo[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, phone = %i WHERE uid = %i", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Hitman hay Federal Agent.");
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /passport [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ten cua ban phai tu 3 toi 20 ky tu.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ten cua ban can co it nhat mot dau gach duoi vi du: Nhat_Nam.");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cac ky tu khong hop le. Ten cua ban chi co the chua cac chu cai va 1 dau gach duoi vi du: Nhat_Nam.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the doi ten khi ban dang Onduty Admin,");
	}
	if(!(1 <= level <= 10))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Level cua ban phai tu 1 toi 10.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Skin ID cua ban phai tu 1 toi 311");
	}
	if(!isnull(PlayerInfo[playerid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da yeu cau doi ten. Vui long doi Admin duyet.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Hitman.");
	}
	if(!PlayerInfo[playerid][pBombs])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bomb.");
	}
	if(PlayerInfo[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "YBan da dat bomb.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dat bomb o trong.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dat bomb khi lai xe");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	PlayerInfo[playerid][pPlantedBomb] = 1;
	PlayerInfo[playerid][pBombObject] = CreateDynamicObject(19602, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessage(playerid, COLOR_WHITE, "** Bomb da duoc dat,su dung /detonate de BOOM!");
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai la Hitman.");
	}
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da khong dat 1 qua bomb ma ban co the nhat.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua qua bomb ban da dat.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;
	PlayerInfo[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessage(playerid, COLOR_WHITE, "** Ban da nhat qua bomb cua ban.");
	return 1;
}

CMD:detonate(playerid, params[])
{
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da khong dat 1 qua bomb.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban o qua xa voi qua bomb ban dat.");
	}

	CreateExplosion(PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ], 11, 10.0);
    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

	if(PlayerInfo[playerid][pContractTaken] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(PlayerInfo[playerid][pContractTaken], 10.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    SetPlayerHealth(PlayerInfo[playerid][pContractTaken], 0.0);
	    HandleContract(PlayerInfo[playerid][pContractTaken], playerid);
	}

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "** Ban da gay no qua bomb!");
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has saved all player accounts.", GetPlayerRPName(playerid));
	return 1;
}

CMD:adestroyboombox(playerid, params[])
{
	new boomboxid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no boombox in range.");
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "You have destroyed {00AA00}%s{33CCFF}'s boombox.", GetPlayerRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

CMD:setbanktimer(playerid, params[])
{
	new hours;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Hours can't be below 0.");
	}

	RobberyInfo[rTime] = hours;
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the bank robbery timer to %i hours.", GetPlayerRPName(playerid), hours);
	return 1;
}

CMD:resetrobbery(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	ResetRobbery();
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the active bank robbery.", GetPlayerRPName(playerid));
	return 1;
}

CMD:addtorobbery(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /addtorobbery [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!RobberyInfo[rPlanning] && !RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There is no bank robbery in progress.");
	}
    if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "There can't be more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
 	if(IsPlayerInBankRobbery(targetid))
 	{
 	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player is already in the bank robbery.");
   	}

 	AddToBankRobbery(targetid);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has added %s to the bank robbery.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has added you to the bank robbery.", GetPlayerRPName(playerid));
	return 1;
}

CMD:givepayday(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /givepayday [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	SendPaycheck(targetid);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced a payday for %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:givepveh(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you your own {00AA00}%s{33CCFF}. /carstorage to spawn it.", GetPlayerRPName(playerid), vehicleNames[modelid - 400]);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have given %s their own {00AA00}%s{33CCFF}.", GetPlayerRPName(targetid), vehicleNames[modelid - 400]);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given %s their own %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), vehicleNames[modelid - 400]);
	Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], vehicleNames[modelid - 400]);
	return 1;
}

CMD:givedoublexp(playerid, params[])
{
	new targetid, hours;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /givedoublexp [playerid] [hours]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if(hours < 1 && PlayerInfo[targetid][pDoubleXP] - hours < 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "That player can't have under 0 hours of double XP.");
	}

	PlayerInfo[targetid][pDoubleXP] += hours;

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given %i hours of double XP to %s.", GetPlayerRPName(playerid), hours, GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_YELLOW, "%s has given you %i hours of double XP.", GetPlayerRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET doublexp = %i WHERE uid = %i", PlayerInfo[targetid][pDoubleXP], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(IsFireActive())
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There is a fire active already. /killfire to kill it!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	GetDynamicObjectPos(gFireObjects[0], x, y, z);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has started a random fire in %s.", GetPlayerRPName(playerid), GetZoneName(x, y, z));
	return 1;
}

CMD:killfire(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!IsFireActive())
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There is currently no fire active.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SendClientMessage(playerid, COLOR_LIGHTRED, "Active fire killed.");
	return 1;
}

CMD:spawnfire(playerid, params[])
{
	new Float:px, Float:py, Float:pz;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't create fires indoors.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		PlayerInfo[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SendClientMessageEx(i, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 50.0;
			gFires++;

			return SendClientMessage(playerid, COLOR_LIGHTRED, "Fire created!");
		}
	}

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You can't create anymore fires. The limit is %i fires.", MAX_FIRES);
	return 1;
}

CMD:number(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /number [playerid]");
	}
	if(!PlayerInfo[playerid][pPhonebook])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua co danh ba.Hay vao 24/7 de mua 1 chiec danh ba.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay chiec dien thoai ra va nhin vao danh ba cua minh", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Name: %s, Ph: %i", GetPlayerRPName(targetid), PlayerInfo[targetid][pPhone]);
	return 1;
}


CMD:boombox(playerid, params[])
{
	new option[10], param[128];

	if(!PlayerInfo[playerid][pBoombox])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co boombox vi vay ban khong the su dung lenh nay.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /boombox [place | pickup | play]");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang o trong xe.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da dat 1 boombox truoc day.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Xung guanh day da co 1 boombox. Hay dat o noi khac xa hon.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "{FFFF00}Boombox cua:\n{FF0000}%s{FFFF00}\n/boombox de biet them chi tiet\nnew-city.net!", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    PlayerInfo[playerid][pBoomboxPlaced] = 1;
    	PlayerInfo[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	PlayerInfo[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        PlayerInfo[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da dat Boombox tren mat dat.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dat bat ky boombox nao");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan boombox cua ban.");
		}

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da lay lai boombox va tat no di.", GetPlayerRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dat bat ky boombox nao.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan boombox cua ban.");
		}

    	PlayerInfo[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

CMD:switchspeedo(playerid, params[])
{
	if(!strcmp(params, "kmh", true))
	{
		PlayerInfo[playerid][pSpeedometer] = 1;
		SendClientMessage(playerid, COLOR_AQUA, "Dong ho toc do cua ban bay gio se hien thi toc do duoi dang {00AA00}KM/H{33CCFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "mph", true))
	{
		PlayerInfo[playerid][pSpeedometer] = 2;
		SendClientMessage(playerid, COLOR_AQUA, "Dong ho toc do cua ban ban gio se hien thi toc do duoi dang {00AA00}M/H{33CCFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 2 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /switchspeedo [kmh/mph]");
	}

	return 1;
}

CMD:shakehand(playerid, params[])
{
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /shakehand [playerid] [type (1-6)]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the bat tay chinh minh");
	}
	if(!(1 <= type <= 6))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type. Valid types range from 1 to 6.");
	}

	PlayerInfo[targetid][pShakeOffer] = playerid;
	PlayerInfo[targetid][pShakeType] = type;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da yeu cau ban bat tay (/chapnhan battay)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui %s mot yeu cau bat tay", GetPlayerRPName(targetid));
	return 1;
}

CMD:dropgun(playerid, params[])
{
	new weaponid = GetScriptWeapon(playerid), objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai xuong khoi xe de co the vut sung.");
	}
	if(!weaponid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai cam mon vu khi ban muon vut.");
	}
	if(PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the vut khau sung ma ban khong co.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
	if(GetPlayerHealthEx(playerid) < 60)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the vut sung neu mau cua ban duoi 60");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);
 	SetTimerEx("DestroyWeapon", 300000, false, "i", objectid);
	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, PlayerInfo[playerid][pFaction]);
	RemovePlayerWeapon(playerid, weaponid);



	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut sung %s cua ho xuong dat.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid));
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da vut khau sung {00AA00}%s{33CCFF} cua ban xuong dat.", GetWeaponNameEx(weaponid));
	return 1;
}

CMD:grabgun(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can phai xuong xe de nhat sung.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
    if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban bi han che vu khi hoac ban choi it hon 2 gio choi.");
    }

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    if(Streamer_GetExtraInt(i, E_OBJECT_FACTION) >= 0 && PlayerInfo[playerid][pFaction] != Streamer_GetExtraInt(i, E_OBJECT_FACTION))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khau sung nay thuoc ve to chuc Law. Ban se khong the luom khau sung nay.");
	    }

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID);

	    GivePlayerWeaponEx(playerid, weaponid);
	    DestroyDynamicObject(i);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da nhat %s tu duoi dat.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da nhat {00AA00}%s{33CCFF} tu duoi dat.", GetWeaponNameEx(weaponid));
	    return 1;
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o xung quanh khu vuc co khau sung do");
	return 1;
}

CMD:createland(playerid, params[])
{
	new price;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", price))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createland [price]");
	}
	if(price < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia khong duoc duoi $1.");
	}
	if(GetNearbyLand(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There is a land in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You cannot create lands indoors.");
	}

	PlayerInfo[playerid][pLandCost] = price;
	PlayerInfo[playerid][pZoneType] = ZONETYPE_LAND;
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Land creation system", "You have entered land creation mode. In order to create a land you need\nto mark four points around the area you want your land to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress {00AA00}Confirm{A9C4E4} to begin land creation.", "Confirm", "Huy bo");
	return 1;
}

CMD:confirm(playerid, params[])
{
	new Float:x, Float:y, Float:z;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pZoneCreation])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not creating any land or turf at the moment.");
	}

    if(PlayerInfo[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMinX], y, z);
        PlayerInfo[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMinX], y, z, .playerid = playerid);
		SendClientMessage(playerid, COLOR_WHITE, "** Boundary 1/4 set (min X).");
	}
	else if(PlayerInfo[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMinY], z);
        PlayerInfo[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMinY], z, .playerid = playerid);
        SendClientMessage(playerid, COLOR_WHITE, "** Boundary 2/4 set (min Y).");
	}
	else if(PlayerInfo[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMaxX], y, z);
        PlayerInfo[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMaxX], y, z, .playerid = playerid);
        SendClientMessage(playerid, COLOR_WHITE, "** Boundary 3/4 set (max X).");
	}
	else if(PlayerInfo[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMaxY], z);
        SendClientMessage(playerid, COLOR_WHITE, "** Boundary 4/4 set (max Y).");

        PlayerInfo[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMaxY], z, .playerid = playerid);
        PlayerInfo[playerid][pZoneID] = GangZoneCreate(PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, PlayerInfo[playerid][pZoneID], 0x33CC33FF);

        if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_LAND) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Land creation system", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your land. You can choose to start over or complete\nthe creation of your land.\n\nWhat would you like to do now?", "Create", "Restart");
		} else if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your turf. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		}
	}

	return 1;
}

CMD:landcancel(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_LAND)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not creating a land at the moment.");
	}

	CancelZoneCreation(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gotoland(playerid, params[])
{
	new landid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotoland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid land.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removelandobjects(playerid, params[])
{
	new landid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removelandobjects [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid land.");
	}

	RemoveAllLandObjects(landid);
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have removed all land objects for land %i.", landid);
	return 1;
}

CMD:removeland(playerid, params[])
{
	new landid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removeland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid land.");
	}

	RemoveAllLandObjects(landid);

	GangZoneDestroy(LandInfo[landid][lGangZone]);
	DestroyDynamicArea(LandInfo[landid][lArea]);
	DestroyDynamic3DTextLabel(LandInfo[landid][lTextdraw]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM lands WHERE id = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LandInfo[landid][lID] = 0;
	LandInfo[landid][lExists] = 0;
	LandInfo[landid][lOwnerID] = 0;
	Iter_Remove(Land, landid);

    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have removed land %i.", landid);
	return 1;
}

CMD:buyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan manh dat nao");
    }
    if(LandInfo[landid][lOwnerID] > 0)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Land nay da co nguoi so huu");
	}
    if(strcmp(params, "confirm", true))
    {
        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /buyland [confirm] (This land costs %s.)", FormatNumber(LandInfo[landid][lPrice]));
	}
	if(PlayerInfo[playerid][pCash] < LandInfo[landid][lPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang mua manh dat nay.");
	}

    SetLandOwner(landid, playerid);
	GivePlayerCash(playerid, -LandInfo[landid][lPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da tra %s cho manh dat nay! /landhelp de xem nhung lenh dung cho Land.", FormatNumber(LandInfo[landid][lPrice]));
	Log_Write("log_property", "%s (uid: %i) purchased a land (id: %i) in %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], LandInfo[landid][lID], GetPlayerZoneName(playerid), LandInfo[landid][lPrice]);
	return 1;
}

CMD:sellland(playerid, params[])
{
	new landid = GetNearbyLand(playerid), targetid, amount;

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan manh dat cua ban.");
    }
    if(sscanf(params, "ui", targetid, amount))
    {
        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellland [playerid] [so luong]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban no cho chinh minh.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Gia tien phai tren 0.");
	}

	PlayerInfo[targetid][pLandOffer] = playerid;
	PlayerInfo[targetid][pLandOffered] = landid;
	PlayerInfo[targetid][pLandPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s de nghi ban mua dat cua ho voi gia %s. (/chapnhan khudat)", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da de nghi mua dat cua ban voi gia %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan manh dat cua ban.");
    }
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /sellmyland [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Ban da ban manh dat cua ban cho chinh phu. Ban se nhan %s tien den bu.", FormatNumber(percent(LandInfo[landid][lPrice], 75)));
	    return 1;
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(LandInfo[landid][lPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da ban dat cua minh cho chinh phu va nhan duoc %s", FormatNumber(percent(LandInfo[landid][lPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their land (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], LandInfo[landid][lID], percent(LandInfo[landid][lPrice], 75));
	return 1;
}

CMD:landinfo(playerid, params[])
{
    new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan manh dat nao.");
    }

    if(!LandInfo[landid][lOwnerID])
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "** Manh dat nay hien khong co chu so huu va dang duoc rao ban , price: {00AA00}$%i{FFFFFF}.", LandInfo[landid][lPrice]);
	}
	else if(!IsLandOwner(playerid, landid))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** Manh dat nay thuoc quyen so huu cua %s.", LandInfo[landid][lOwner]);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_INFORMATION, playerid);
	}

	return 1;
}
CMD:landperms(playerid, params[])
{
    new targetid, landid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "ui", targetid, landid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /landperms [playerid] [landid (-1 to remove)]");
	}
	if(MAX_LANDS > landid > -1)
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da cap cho ban quyen so huu tam thoi vao manh dat #%i's.", GetPlayerRPName(playerid), landid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban duoc cap tam thoi %s quyen so huu manh dat %i.", GetPlayerRPName(targetid), landid);
		PlayerInfo[targetid][pLandPerms] = landid;
	}
	else if(landid == -1)
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s da lay di chia khoa dat tam thoi cua ban.", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da bi lay lai chia khoa dat tam thoi cua %s's .", GetPlayerRPName(targetid));
		PlayerInfo[targetid][pLandPerms] = -1;
	}
	return 1;
}
CMD:droplandkeys(playerid, params[])
{
    if(PlayerInfo[playerid][pLandPerms] > -1)
    {
        SendClientMessageEx(playerid, COLOR_AQUA, "You have dropped land %i's keys.", PlayerInfo[playerid][pLandPerms]);
        PlayerInfo[playerid][pLandPerms] = -1;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET landkeys = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
	else
	{
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "You don't have keys to a land.");
	}
	return 1;
}

CMD:land(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of any lands of yours.");
    }
    if(!HasLandPerms(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have permission to build in this land.");
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(!PlayerInfo[playerid][pMP3Player])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co may nghe nhac MP3.");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong ngoi tren phuong tien giao thong nao");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:changename(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 628.2476, -94.3477, -79.0754))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan ban lam viec tai toa thi chinh (CITY HALL)");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /changename [new name]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ten cua ban phai tu 3 den 20 ky tu.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Tem cua ban can it nhat mot dau gach duoi.");
	}
	if(!IsValidName(params))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ten khong hop le. Ten cua ban chi co the chua cac chu cai va dau gach duoi");
	}
	if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pLevel] * 7500)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can it nhat %s de doi ten o cap do hien tai.", FormatNumber(PlayerInfo[playerid][pLevel] * 7500));
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep thay doi ten cua minh khi dang lam Admin");
	}
	if(!isnull(PlayerInfo[playerid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da yeu cau thay doi ten. Doi admin duyet");
	}

    PlayerInfo[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}

CMD:acceptname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /chapnhanname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	/*if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}*/
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong yeu cau thay doi ten");
	}
	if(PlayerInfo[targetid][pFreeNamechange] == 0 && PlayerInfo[targetid][pCash] < PlayerInfo[targetid][pLevel] * 7500)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong co kha nang thay doi ten");
	}

	new cost = PlayerInfo[targetid][pLevel] * 7500;

	if(PlayerInfo[targetid][pFreeNamechange])
	{
	    if(PlayerInfo[targetid][pFreeNamechange] == 2 && (GetFactionType(targetid) == FACTION_HITMAN || GetFactionType(targetid) == FACTION_FEDERAL))
	    {
	        GetPlayerName(targetid, PlayerInfo[targetid][pPassportName], MAX_PLAYER_NAME);

	        PlayerInfo[targetid][pPassport] = 1;
	        PlayerInfo[targetid][pPassportLevel] = PlayerInfo[targetid][pLevel];
	        PlayerInfo[targetid][pPassportSkin] = PlayerInfo[targetid][pSkin];
	        PlayerInfo[targetid][pPassportPhone] = PlayerInfo[targetid][pPhone];
			PlayerInfo[targetid][pLevel] = PlayerInfo[targetid][pChosenLevel];
			PlayerInfo[targetid][pSkin] = PlayerInfo[targetid][pChosenSkin];
			PlayerInfo[targetid][pPhone] = random(100000) + 899999;

			SetPlayerSkin(targetid, PlayerInfo[targetid][pSkin]);
			Log_Write("log_faction", "%s (uid: %i) used the /passport command to change their name to %s, level to %i and skin to %i.", GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pSkin]);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, skin = %i, phone = %i, passport = 1, passportname = '%s', passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pSkin], PlayerInfo[targetid][pPhone], PlayerInfo[targetid][pPassportName], PlayerInfo[targetid][pPassportLevel], PlayerInfo[targetid][pPassportSkin], PlayerInfo[targetid][pPassportPhone], PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
	    }

		Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chap nhan %s's thay doi ten mien phi cho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pNameChange]);
		SendClientMessageEx(targetid, COLOR_YELLOW, "Yeu cau thay doi ten cua ban thanh %s da duoc chap nhan voi gia mien phi.", PlayerInfo[targetid][pNameChange]);
		if(!IsPlayerLoggedIn(targetid))
		{
		    #if defined SERVER_INTRO
      			ShowServerIntro(targetid);
			#else
  				ShowDialogToPlayer(targetid, DIALOG_REGISTER);
			#endif
		}
		if(PlayerInfo[targetid][pFreeNamechange] == 2)
		{
		    SendClientMessage(targetid, COLOR_WHITE, "** Ban co the su dung /passport mot lan nua de quay lai ten va so lieu thong ke cu cua minh");
		}
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's namechange to %s for %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pNameChange], FormatNumber(cost));
		SendClientMessageEx(targetid, COLOR_YELLOW, "Yeu cau thay doi ten cua ban thanh %s da duoc chap nhan voi gia %s.", PlayerInfo[targetid][pNameChange], FormatNumber(cost));

        GivePlayerCash(targetid, -cost);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_namehistory VALUES(null, %i, '%s', '%s', '%s', NOW())", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pNameChange], GetPlayerNameEx(playerid));
	mysql_tquery(connectionID, queryBuffer);

	Namechange(targetid, GetPlayerNameEx(targetid), PlayerInfo[targetid][pNameChange]);
	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}


CMD:denyname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /denyname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	/*if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}*/
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da khong yeu cau thay doi ten");
	}

	if(PlayerInfo[targetid][pFreeNamechange] == 1)
	{
	    if(!IsPlayerLoggedIn(targetid))
		{
            SendClientMessage(targetid, COLOR_LIGHTRED, "Vui long ket noi lai voi ten Roleplay thich hop o dinh dang Ho_Ten (Vi du: Nhat_Nam)");
			KickPlayer(targetid);
			return 1;
		}
	    ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "Administrator da thay ten cua ban khong phai la Roleplay.\nVi vay ban duoc thay doi ten mien phi.\n\nNhap ten cua ban theo dang Firstname_Lastname duoi box nay:", "Submit", "Huy bo");
	}

    Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has denied %s's namechange to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pNameChange]);
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "Yeu cau doi ten cua ban %s da bi tu choi.", PlayerInfo[targetid][pNameChange]);
	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Pending Namechanges ______");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pNameChange]))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s requested a namechange to %s", i, GetPlayerRPName(i), PlayerInfo[i][pNameChange]);
		}
	}

	return 1;
}

CMD:paytickets(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky phuong tien nao of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi chiec xe nay khong phai cua ban.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /paytickets [so luong] (There is $%i in unpaid tickets.)", VehicleInfo[vehicleid][vTickets]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co nhieu ve nhu the chua thanh toan de thanh toan.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thanh toan%s nhung ve phat truoc day chua thanh toan. Phuong tien nay hien con %s ve chua thanh toan.", FormatNumber(amount), FormatNumber(VehicleInfo[vehicleid][vTickets]));
	return 1;
}

CMD:carinfo(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong ben trong bat ky phuong tien nao cua ban.");
	}

	new neon[12], Float:health;

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Do";
		case 18648: neon = "Xanh duong";
		case 18649: neon = "Xanh la cay";
		case 18650: neon = "Vang";
		case 18651: neon = "Hong";
		case 18652: neon = "Trang";
		default: neon = "Khong co";
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ Thong tin %s _______", GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Chu so huu: %s - So du: $%i - Ve phat: $%i - Bien so: %s", VehicleInfo[vehicleid][vOwner], GetVehicleValue(vehicleid), VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Neon: %s - Cap do cop xe: %i/3 - Alarm Level: %i/3 - Do benh: %.1f - Xang: %i/100", neon, VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vAlarm], health, vehicleFuel[vehicleid]);
	return 1;
}


CMD:usecigar(playerid, params[])
{
	if(!PlayerInfo[playerid][pCigars])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bat ky dieu xi ga nao.");
	}

	PlayerInfo[playerid][pCigars]--;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s cham mot dieu xi ga va bat dau hut no.", GetPlayerRPName(playerid));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:usedrug(playerid, params[])
{
    if(gettime() - PlayerInfo[playerid][pLastDrug] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the tieu thu thuoc sau moi 10 giay. Vui long doi %i giay nua.", 10 - (gettime() - PlayerInfo[playerid][pLastDrug]));
	}
	if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da bi hoa do vi vay khong the tieu thu them ma tuy hien tai.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
	if(PlayerInfo[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /usedrug [ cocaine | meth | painkillers]");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau don de su dung ma tuy. Vui long doi %i giay de thu lai.", PlayerInfo[playerid][pHurt]);
	}
    if(!strcmp(params, "cocaine", true))
	{
	    if(PlayerInfo[playerid][pCocaine] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat 2 gram cocaine.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Level nghien %i/3 cua ban tang them %.1f armor.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerArmour(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pCocaine] -= 2;
		PlayerInfo[playerid][pDrugsUsed]++;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... ban phe vai loan luon brooooo...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s hit 2 gram cocaine va dang phe nhu con de.", GetPlayerRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "meth", true))
	{
	    if(PlayerInfo[playerid][pMeth] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat 2 gram meth.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Level nghien %i/3 cua ban tang them %.1f/%.1f health & armor.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0), (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pMeth] -= 2;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... ban phe vai loan luon brooooo...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s hut 2 gram meth va dang phe nhu con de.", GetPlayerRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(PlayerInfo[playerid][pPainkillers] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong con painkillers nao.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Level nghien %i/3 cua ban tang them %.1f health.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 30.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pPainkillers] -= 1;
		PlayerInfo[playerid][pReceivingAid] = 1;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... ban phe vai loan luon brooooo...", 5000, 1);
	        PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da noc 1 vien painkillers va anh ay dang phe nhu conde.", GetPlayerRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}

	SendClientMessage(targetid, COLOR_NAVYBLUE, "______ ID Card ______");
	SendClientMessageEx(targetid, COLOR_GREY1, "Ten: %s", GetPlayerRPName(playerid));
	SendClientMessageEx(targetid, COLOR_GREY1, "Gioi tinh: %s", (PlayerInfo[playerid][pGender] == 2) ? ("Nu") : ("Nam"));
	SendClientMessageEx(targetid, COLOR_GREY1, "Do tuoi: %i", PlayerInfo[playerid][pAge]);
	SendClientMessageEx(targetid, COLOR_GREY1, "Bang lai xe: %s", (PlayerInfo[playerid][pCarLicense]) ? ("{00AA00}Co") : ("{FF6347}No"));
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dua the Id cho ho %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:inv(playerid, params[])
{
	return callcmd::tuido(playerid, params);
}

CMD:tuido(playerid, params[])
{
	DisplayInventory(playerid);
	return 1;
}

CMD:drop(playerid, params[])
{
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /drop [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Materials, Weed, Cocaine, Meth, Painkillers, Cigars, Spraycans");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Seeds, Ephedrine, CarLicense, Weapons, AllWeapons, Crate, Pizza");
	    return 1;
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}

	if(!strcmp(option, "allweapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /drop [allweapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da nem toan bo vu khi cua ho.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(option, "weapon", true))
	{
		return callcmd::dropgun(playerid, params);
	}
	else if(!strcmp(option, "pizza", true))
	{
		if(PlayerInfo[playerid][pHoldingPizza] != 1)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang khong cam 1 chiec pizza nao.");
		}
		PlayerInfo[playerid][pHoldingPizza] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da vut chiec pizza ay.");
		return 1;
	}
	else if(!strcmp(option, "crate", true))
	{
		if(PlayerInfo[playerid][pHoldingBox] != 1)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong cam 1 cai thung nao.");
		}
		PlayerInfo[playerid][pHoldingBox] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da vut chiec thung cua ban di.");
		return 1;
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!PlayerInfo[playerid][pMaterials])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co vat lieu de nem.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [materials] [confirm] (You have %i materials.)", PlayerInfo[playerid][pMaterials]);
	    }

	    PlayerInfo[playerid][pMaterials] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut vat lieu cua ho.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(!PlayerInfo[playerid][pWeed])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co weed de nem.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [weed] [confirm] (You have %i grams of weed.)", PlayerInfo[playerid][pWeed]);
	    }

	    PlayerInfo[playerid][pWeed] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut weed cua ho.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(!PlayerInfo[playerid][pCocaine])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co cocaine de nem.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [cocaine] [confirm] (You have %i grams of cocaine.)", PlayerInfo[playerid][pCocaine]);
	    }

	    PlayerInfo[playerid][pCocaine] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut weed cua ho.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[playerid][pMeth])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co meth de nem.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [meth] [confirm] (You have %i grams of meth.)", PlayerInfo[playerid][pMeth]);
	    }

	    PlayerInfo[playerid][pMeth] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut meth cua ho.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[playerid][pPainkillers])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co painkillers de nem.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [cocaine] [confirm] (You have %i painkillers.)", PlayerInfo[playerid][pPainkillers]);
	    }

	    PlayerInfo[playerid][pPainkillers] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut painkillers cua ho", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!PlayerInfo[playerid][pCigars])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co cigars de vut");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [cigars] [confirm] (You have %i cigars.)", PlayerInfo[playerid][pCigars]);
	    }

	    PlayerInfo[playerid][pCigars] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut cigars cua ho.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!PlayerInfo[playerid][pSpraycans])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co spraycans de vut.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [spraycans] [confirm] (You have %i spraycans.)", PlayerInfo[playerid][pSpraycans]);
	    }

	    PlayerInfo[playerid][pSpraycans] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut spraycans cua hi.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!PlayerInfo[playerid][pSeeds])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co seed de vut.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [seeds] [confirm] (You have %i seeds.)", PlayerInfo[playerid][pSeeds]);
	    }

	    PlayerInfo[playerid][pSeeds] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut seed cua ho", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!PlayerInfo[playerid][pEphedrine])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co ephedrine de vut.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /drop [ephedrine] [confirm] (You have %i grams of ephedrine.)", PlayerInfo[playerid][pEphedrine]);
	    }

	    PlayerInfo[playerid][pEphedrine] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut ephedrine cua ho.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerInfo[playerid][pCarLicense])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bang lai xe de vut.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /drop [carlicense] [confirm] (This drops your drivers license.)");
	    }

	    PlayerInfo[playerid][pCarLicense] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da vut bang laixe cua ho", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:creategang(playerid, params[])
{
	new name[32];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /creategang [name]");
	}

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has setup gang {F7A763}%s{FF6347} in slot ID %i.", GetPlayerRPName(playerid), name, i);
	        SendClientMessageEx(playerid, COLOR_WHITE, "** This gang's ID is %i. /editgang to edit.", i);
	        return 1;
		}
	}

    SendClientMessage(playerid, COLOR_LIGHTRED, "Gang slots are currently full. Yeu cau cac Developers tang gioi han.");
	return 1;
}

CMD:editgang(playerid, params[])
{
	new gangid, option[14], param[128];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Name, MOTD, Leader, Level, Color, Points, TurfTokens, RankName, Skin, Strikes");
		return 1;
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [name] [van ban]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET name = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the name of gang ID %i to '%s'.", GetPlayerRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [motd] [van ban]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has adjusted the MOTD of gang ID %i.", GetPlayerRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [leader] [name]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /gangs. Use /switchgang to appoint someone as gang leader.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of gang ID %i to %s.", GetPlayerRPName(playerid), gangid, leader);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [level] [value (1-3)]");
		}
		if(!(1 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid level.");
		}

		GangInfo[gangid][gLevel] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = %i WHERE id = %i", GangInfo[gangid][gLevel], gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the level of gang ID %i to %i/3.", GetPlayerRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

  		foreach(new i : Turf)
		{
		    if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		    {
		        ReloadTurf(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of gang ID %i.", GetPlayerRPName(playerid), color >>> 8, gangid);
	}
	else if(!strcmp(option, "points", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [points] [value]");
		}

		GangInfo[gangid][gPoints] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the gang points of gang ID %i to %i.", GetPlayerRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [turftokens] [value]");
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of gang ID %i to %i.", GetPlayerRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Rank Names ______");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [rankname] [vi tri (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid rank.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of gang ID %i to '%s'.", GetPlayerRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Gang Skins ______");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [skin] [vi tri (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong hop le.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid skin.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [strikes] [so luong]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The amount must range from 0 to 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the strikes of gang ID %i to %i.", GetPlayerRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the alliance of gang ID %i.", GetPlayerRPName(playerid), gangid);
		}
		else
		{
		    if(!(0 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the alliance of gang ID %i to gang %i.", GetPlayerRPName(playerid), gangid, allyid);
		}
	}else if(!strcmp(option, "war", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editgang [gangid] [war] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gWar] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = -1 WHERE id = %i", GangInfo[gangid][gWar]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gWar]][gWar] = -1;
			}

			GangInfo[gangid][gWar] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the alliance of gang ID %i.", GetPlayerRPName(playerid), gangid);
		}
		else
		{
		    if(!(0 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
		    }

			GangInfo[gangid][gWar] = allyid;
			GangInfo[allyid][gWar] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the war of gang ID %i to gang %i.", GetPlayerRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}
CMD:settitle(playerid, params[])
{
	new targetid, option[14], param[128];
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "us[14]S()[128]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /settitle [playerid] [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Name, Color");
		return 1;
	}
	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /settitle [playerid] [name] [text ('none' to reset)]");
		}

		strcpy(PlayerInfo[targetid][pCustomTitle], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customtitle = '%e' WHERE uid = %i", param, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the customtitle of %s to '%s'.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), param);
	}
    else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /settitle [playerid] [color] [0xRRGGBBAA]");
		}

		PlayerInfo[targetid][pCustomTColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i WHERE uid = %i", PlayerInfo[targetid][pCustomTColor], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of %s's title.", GetPlayerRPName(playerid), color >>> 8, GetPlayerRPName(targetid));
	}
	return 1;
}
CMD:removegang(playerid, params[])
{
	new gangid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", gangid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removegang [gangid]");
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has deleted gang %s.", GetPlayerRPName(playerid), GangInfo[gangid][gName]);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have permanently deleted the {F7A763}%s{FF6347} gang slot.", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	Log_Write("log_gang", "%s (uid: %i) has removed gang %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	return 1;
}

CMD:gangstrike(playerid, params[])
{
	new gangid, reason[128], color;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gangstrike [gangid] [reason]");
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This gang already has 3 strikes.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);
	Log_Write("log_gang", "%s (uid: %i) has striked gang %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	switch(GangInfo[gangid][gStrikes])
	{
		case 1: SendClientMessageToAllEx(COLOR_WHITE, "(( Tin tuc bang dang: {%06x}%s{FFFFFF} has received their 1st strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
		case 2: SendClientMessageToAllEx(COLOR_WHITE, "(( Tin tuc bang dang: {%06x}%s{FFFFFF} has received their 2nd strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
		case 3: SendClientMessageToAllEx(COLOR_WHITE, "(( Tin tuc bang dang: {%06x}%s{FFFFFF} has received their 3rd strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
	}

	return 1;
}

CMD:switchgang(playerid, params[])
{
	new targetid, gangid, rankid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /switchgang[playerid] [gangid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi do chua dang nhap.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 6)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid rank.");
	}

	if(gangid == -1)
	{
	    PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;
		PlayerInfo[targetid][pCrew] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from your gang.", GetPlayerRPName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their gang.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 6;
		}

	    /*if(rankid == 6)
	    {
	        GetPlayerName(targetid, GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", GangInfo[gangid][gLeader], gangid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		PlayerInfo[targetid][pGang] = gangid;
		PlayerInfo[targetid][pGangRank] = rankid;
		PlayerInfo[targetid][pCrew] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da chi dinh ban a {00AA00}%s{33CCFF} in %s.", GetPlayerRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da chi dinh %s thanh mot %s in %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = %i, crew = -1 WHERE uid = %i", gangid, rankid, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:families(playerid, params[])
{
	return callcmd::gangs(playerid, params);
}

CMD:gangs(playerid, params[])
{
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "___________________ Gangs ___________________");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		return 1;
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1 && GangInfo[gangid][gWar] != -1)
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ten: %s - Leader: %s - Strikes: %i/3 - Alliance: %s - War: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName], GangInfo[GangInfo[gangid][gWar]][gName]);
	else if(GangInfo[gangid][gWar] != -1)
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ten: %s - Leader: %s - Strikes: %i/3 - War: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gWar]][gName]);
	else if(GangInfo[gangid][gAlliance] != -1)
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ten: %s - Leader: %s - Strikes: %i/3 - Alliance: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Members Online _____");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(%i) %s %s", PlayerInfo[i][pGangRank], GangRanks[gangid][PlayerInfo[i][pGangRank]], GetPlayerRPName(i));
		}
	}

	return 1;
}

CMD:points(playerid, params[])
{
	new name[32], color = -1, pointid;

	if(sscanf(params, "i", pointid))
	{
	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		for(new i = 0; i < MAX_POINTS; i ++)
		{
		    if(PointInfo[i][pExists])
		    {
		        if(PointInfo[i][pCapturedGang] == -1) {
		            name = "None";
		        } else {
		            strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName]);
		        }

		        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Name: %s | Owner: %s | Captured by: %s | Profits: %s | Time: %ih", i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], FormatNumber(PointInfo[i][pProfits]), PointInfo[i][pTime]);
			}
		}

		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "Su dung: /points [pointid]");
		return 1;
	}
    if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid point.");
	}

	if(PointInfo[pointid][pCapturedGang] >= 0)
	{
    	strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
    	color = GangInfo[PointInfo[pointid][pCapturedGang]][gColor];
	}
	else
	{
	    name = "None";
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s ($%i) _____", PointInfo[pointid][pName], PointInfo[pointid][pProfits]);
    SendClientMessageEx(playerid, COLOR_WHITE, "** This point captured by %s for {%06x}%s{FFFFFF} will be available in %i hours.", PointInfo[pointid][pCapturedBy], color >>> 8, name, PointInfo[pointid][pTime]);

    if(PointInfo[pointid][pCapturer] != INVALID_PLAYER_ID)
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "** This point is being captured by %s and will be theirs in %i minutes.", GetPlayerRPName(PointInfo[pointid][pCapturer]), PointInfo[pointid][pCaptureTime]);
	}

	return 1;
}

CMD:lands(playerid, params[])
{
	if(!PlayerInfo[playerid][pShowLands])
	{
        ShowLandsOnMap(playerid, true);
        SendClientMessage(playerid, COLOR_AQUA, "Ban se thay manh dat o tren minimap cua ban. /lands 1 lan nua de tat");
	}
	else
	{
        ShowLandsOnMap(playerid, false);
        SendClientMessage(playerid, COLOR_AQUA, "Ban se khong thay manh dat o tren mini-map nua.");
	}

	return 1;
}

CMD:f(playerid, params[])
{
    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /f [gang chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bang dang nao.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da vo hieu hoa kenh /f.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the noi khi dang bi thuong.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban Ban khong the su dung lenh nay khi dang bi cong.");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang bi troi.");
	}

	foreach(new i : Player)
	{
		new crew[32];
		if(PlayerInfo[playerid][pCrew] >= 0)
		{
			crew = GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]];
		}
		else
		{
		    crew = "None";
		}
		if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_AQUA, "** [%i] %s (%s) %s: %.*s... **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], crew, GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_AQUA, "** [%i] %s (%s) %s: ...%s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], crew, GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_AQUA, "** [%i] %s (%s) %s: %s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], crew, GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ally(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /ally [Alliance chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Your gang isn't a part of an alliance.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You cannot speak in /ally while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban Ban khong the su dung lenh nay khi dang bi cong.");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang bi troi.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] || PlayerInfo[i][pGang] == GangInfo[gangid][gAlliance])  && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_GREEN, "** [Alliance] %s %s: %.*s... **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_GREEN, "** [Alliance] %s %s: ...%s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_GREEN, "** [Alliance] %s %s: %s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}
//hoang viet hoa 1179 line

CMD:gang(playerid, params[])
{
	new targetid, option[16], param[128];

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc bat ky bang dang nao vao luc nay.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [tuy chon]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: MOTD, Safe, Stats, Turfs, Rankname, NPC, Upgrade, War, Alliance");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 5+ de su dung lenh nay.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [invite] [playerid]");
		}
		if(GangInfo[PlayerInfo[playerid][pGang]][gInvCooldown] > 0 && gacooldown)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Bang nhom cua ban hien dang trong thoi gian hoi. Vui long doi %i phut truoc khi co the gui loi moi.", GangInfo[PlayerInfo[playerid][pGang]][gInvCooldown]);
		}
		if(GangClaimingTurfs(PlayerInfo[playerid][pGang]) || GangCapturingPoints(PlayerInfo[playerid][pGang]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung loi moi neu nhom cua ban dang tham du mot lanh tho hoac diem.");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pGang] != -1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da roi khoi mot bang dang.");
		}

		if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC || GetFactionType(targetid) == FACTION_GOVERNMENT || GetFactionType(targetid) == FACTION_ARMY)
  		{
  		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the moi cac thanh vien trong LSFMD, GOV, ARMY hoac LSPD.");
  		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}
	else if(!strcmp(option, "kick", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 5+ de su dung lenh nay.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong nam ngoai bang nhom cua ban.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do co thu hang cao hon ban.");
		}

		Log_Write("log_gang", "%s (uid: %i) da kick %s (uid: %i) tu %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[targetid][pGang]][PlayerInfo[targetid][pGangRank]], PlayerInfo[targetid][pGangRank]);

		PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da kick ban khoi bang dang.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da kick %s khoi nhom cua minh.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 5+ de su dung lenh nay.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "Su dung: /gang [rank] [playerid] [rankid (0-6)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
		}
		if(rankid < 0 || rankid > PlayerInfo[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Thu hang duoc chi dinh khong hop le hoac cao hon thu hang cua ban.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong nam ngoai bang nhom cua ban.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do co thu hang cao hon ban.");
		}

		PlayerInfo[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s da dat thu hang cua ban thanh{00AA00}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat thu hang cua %s thanh {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "safe", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 6+ de su dung lenh nay.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [safe] [confirm] (Di chuyen locker gang)");
		}

		GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]);
		GangInfo[PlayerInfo[playerid][pGang]][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[PlayerInfo[playerid][pGang]][gStashWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ], GangInfo[PlayerInfo[playerid][pGang]][gStashInterior], GangInfo[PlayerInfo[playerid][pGang]][gStashWorld], PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da di chuyen bang nhom an toan den vi tri cua ban. /(f)amily(safe) de truy cap kho luu tru cua ban.");
	}
	else if(!strcmp(option, "turfs", true))
	{
		new perk[32];

	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

  		foreach(new i : Turf)
		{
		    if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == PlayerInfo[playerid][pGang])
		    {
		        switch(TurfInfo[i][tType])
				{
				    case 0: perk = "Normal";
				    case 1: perk = "Vat lieu";
			     	case 2: perk = "Vu khi hang thap";
				    case 3: perk = "Vu khi hang trung binh";
				    case 4: perk = "Vu khi hang cao cap";
				    case 5: perk = "Traphouse";
				    case 6: perk = "Crackhouse";
				    case 7: perk = "Thue doanh thu";
				    case 8: perk = "Lanh tho bi khoa";
				}

		        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Ten: %s | Chiem boi: %s | Perk: %s | Thoi gian con lai: %ih", i, TurfInfo[i][tName], TurfInfo[i][tCapturedBy], perk, TurfInfo[i][tTime]);
			}
		}
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM users WHERE gang = %i ORDER BY gangrank DESC", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [quit] [confirm]");
	    }


	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thoat %  voi tu cach la {00AA00}%s{33CCFF} (%i).", GangInfo[PlayerInfo[playerid][pGang]][gName], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);
		Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);

	    PlayerInfo[playerid][pGang] = -1;
		PlayerInfo[playerid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 5+ de su dung lenh nay.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da truc tuyen va dang nhap. Hay su dung '/gang kick' de thay the.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 6+ de su dung lenh nay.");
		}
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [motd] [van ban]");
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "Current MOTD: %s", GangInfo[PlayerInfo[playerid][pGang]][gMOTD]);
	        return 1;
		}

		strcpy(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SendClientMessage(playerid, COLOR_AQUA, "Ban da thay doi MOTD cho bang nhom cua minh.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 6+ de su dung lenh nay.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Rank Names ______");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[PlayerInfo[playerid][pGang]][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[PlayerInfo[playerid][pGang]][i]);
	        }

	        return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [rankname] [vi tri (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Xep hang khong hop le.");
		}

	    strcpy(GangRanks[PlayerInfo[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", PlayerInfo[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat ten cua xep hang %i thanh {00AA00}%s{33CCFF}.", rankid, rank);
	}
    else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 6+ de su dung lenh nay.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [npc] [slot] [confirm]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "List of slots: (1) Arms Dealer");
		    return 1;
		}
		if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "su dung lenh nay khi dang o trong xe.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer])
				{
		    		return SendClientMessage(playerid, COLOR_LIGHTRED, "Bang dang cua ban khong co nang cap dai ly vu khi. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ]);
				SetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsA]);
		        GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ], GangInfo[PlayerInfo[playerid][pGang]][gArmsA], GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SendClientMessage(playerid, COLOR_AQUA, "Ban da chuyen vi tri cua nguoi buon ban vu khi cho bang nhom cua ban.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer])
				{
		    		return SendClientMessage(playerid, COLOR_LIGHTRED, "Bang dang cua ban khong co nang cap cua dai ly ma tuy. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ]);
				SetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugA]);
		        GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ], GangInfo[PlayerInfo[playerid][pGang]][gDrugA], GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SendClientMessage(playerid, COLOR_AQUA, "Ban da chuyen vi tri cua nguoi buon ban ma tuy cho bang nhom cua ban.");
			}
		}
	}
	else if(!strcmp(option, "upgrade", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 6+ de su dung lenh nay.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDescription\tCost";

		strcat(string, "\nArms dealer\tAn NPC noi ban vu khi du tru rieng le\t{F7A763}500 GP {FFFFFF}+{00AA00} $50,000");
		strcat(string, "\nDuel arena\tAn OOC 1v1 dau truong tay doi cho bang nhom cua ban.\t{F7A763}400 GP {FFFFFF}+{00AA00} $75,000");
	    strcat(string, "\nMapping\tLen den 50 doi tuong duoc lap ban do cho bang nhom cua ban.\t{F7A763}4500 GP {FFFFFF}+{00AA00} $100,000");
	    strcat(string, "\nInterior\tNoi that tuy chinh danh rieng cho bang nhom cua ban.\t{F7A763}5000 GP {FFFFFF}+{00AA00} $100,000");

		if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tNang cap bang nhom cua ban len 2/3.\t{F7A763}6000 GP {FFFFFF}+{00AA00} $75,000");
		}
		else if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tNang cap bang nhom cua ban len 3/3.\t{F7A763}12000 GP {FFFFFF}+{00AA00} $100,000");
		}

		format(title, sizeof(title), "Nang cap bang dang (Bang dang cua ban co %i GP.)", GangInfo[PlayerInfo[playerid][pGang]][gPoints]);
		ShowPlayerDialog(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Chon", "Huy bo");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = PlayerInfo[playerid][pGang];

		if(PlayerInfo[playerid][pGangRank] < 6)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 6+ de su dung lenh nay.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da tham gia mot lien minh, hay ket thuc no truoc! (/endalliance)");
	  	}
	  	if(PlayerInfo[targetid][pGangRank] < 6)
	  	{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi ma ban de nghi lien minh phai la R6 trong bang nhom cua ho!");
	  	}
        if(PlayerInfo[targetid][pGang] == gangid)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the thanh lap mot lien minh voi bang dang cua rieng ban!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "Ban da de nghi thanh lap mot lien minh bang dang voi %s.", GetPlayerRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s da de nghi thanh lap mot lien minh voi bang dang cua ban. (/chapnhan lienminh)", GetPlayerRPName(playerid));
			PlayerInfo[targetid][pAllianceOffer] = playerid;
		}
	}
	else if(!strcmp(option, "war", true)){

		new gangid = PlayerInfo[playerid][pGang];

		if(PlayerInfo[playerid][pGangRank] < 6)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat xep hang 6+ de su dung lenh nay.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gang [war] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gWar] >= 0)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da tham gia vao mot cuoc chien, hay ket thuc no truoc! (/endwar)");
	  	}
	  	if(PlayerInfo[targetid][pGangRank] < 6)
	  	{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi ma ban de nghi chien dau phai la R6 trong bang nhom cua ho!");
	  	}
        if(PlayerInfo[targetid][pGang] == gangid)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the hinh thanh mot cuoc chien voi bang dang cua rieng ban!");
		}

		if(GangInfo[gangid][gWar] == -1)
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "Ban da de nghi thanh lap mot cuoc chien bang dang voi %s.", GetPlayerRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s da de nghi thanh lap mot cuoc chien voi bang nhom cua ban. (/chapnhan war)", GetPlayerRPName(playerid));
			PlayerInfo[targetid][pWarOffer] = playerid;
		}
	}
	else
		SendClientMessage(playerid, COLOR_LIGHTRED, "Tuy chon khong hop le");

	return 1;
}

CMD:fsafe(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la nguoi cua mot bang dang vao luc nay.");
	}
	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang o trong mot phe.");
	}
    if(!(IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[PlayerInfo[playerid][pGang]][gStashWorld]))
    {
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung gan tu do.");
	}
    if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de mo kho. Vui long doi %i giay truoc khi thu lai.", PlayerInfo[playerid][pHurt]);
	}
	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}

CMD:familysafe(playerid, params[]){
	callcmd::fsafe(playerid, params);
	return 1;
}

CMD:bandana(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la nguoi cua mot bang dang vao luc nay.");
	}
    if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban qua dau de coi bo chiec khan ran cua minh. Vui long doi %i giay truoc khi thu lai.", PlayerInfo[playerid][pHurt]);
	}
	if(!PlayerInfo[playerid][pBandana])
	{
		if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the deo khan ran khi tham gia su kien hoac tran dau sung son.");
		}
	    PlayerInfo[playerid][pBandana] = 1;

	    SendClientMessage(playerid, COLOR_AQUA, "Ban da bat khan ran cua minh. Mau bang ten cua ban da duoc dat thanh mau bang dang cua ban.");
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay ra mot chiec khan quan dau va quan quanh dau ho.", GetPlayerRPName(playerid));
	    SetPlayerColor(playerid, GangInfo[PlayerInfo[playerid][pGang]][gColor] & ~0xff);
	}
	else
	{
	    PlayerInfo[playerid][pBandana] = 0;

	    SendClientMessage(playerid, COLOR_AQUA, "Ban da vo hieu hoa chiec khan ran cua minh. Mau bang ten cua ban da duoc dat lai tro lai binh thuong.");
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s coi khan quan dau cua ho ra.", GetPlayerRPName(playerid));
	    SetPlayerColor(playerid, 0xFFFFFF00);
	}

	return 1;
}

CMD:gbuyvehicle(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co thu hang 5+ trong bat ky bang dang nao vao luc nay.");
	}
	if(GetGangVehicles(PlayerInfo[playerid][pGang]) >= GetGangVehicleLimit(PlayerInfo[playerid][pGang]))
    {
        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Bang nhom cua ban khong duoc co nhieu hon %i xe o cap do cua no.", GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
    }

	PlayerInfo[playerid][pGangCar] = 1;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	{
		ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLE);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYBOAT);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYAIRCRAFT);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky dai ly nao.");
	}

	return 1;
}

CMD:gpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co thu hang 5+ trong bat ky bang dang nao vao luc nay.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai bat ky phuong tien bang dang nao cua minh.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the dau chiec xe nay vi no khong thuoc ve bang nhom cua ban.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SendClientMessage(playerid, COLOR_LIGHTRED, "**{FFFFFF} Bang dang dau xe. Bay gio no se xuat hien o day.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid, params[])
{
	new string[512], count;

    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong phai la nguoi ngoai cua mot bang dang vao luc nay.");
	}

	string = "#\tModel\tLocation";

	foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Bang nhom cua ban khong co phuong tien nao ma ban co the theo doi.");
	}

	ShowPlayerDialog(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Huy bo");
	return 1;
}

CMD:grespawncars(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co thu hang 5+ trong bat ky bang dang nao vao luc nay.");
	}

    foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] da hoi sinh phuong tien bang dang cua ho.", GetPlayerRPName(playerid), playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "Ban da hoi sinh tat ca cac phuong tien bang dang khong co nguoi su dung cua minh.");
	return 1;
}

CMD:gsellcar(playerid, params[])
{
  	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co thu hang 5+ trong bat ky bang dang nao vao luc nay.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai bat ky phuong tien bang dang nao cua minh.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the ban chiec xe nay vi no khong thuoc ve bang dang cua ban.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua dai ly o to Grotti.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gsellcar [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "Lenh nay se xoa vinh vien phuong tien bang dang cua ban. Ban se nhan lai %s.", FormatNumber(percent(VehicleInfo[vehicleid][vPrice], 75)));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "Ban da ba %s cua minh cho dai ly va nhan lai %s.", GetVehicleName(vehicleid), FormatNumber(percent(VehicleInfo[vehicleid][vPrice], 75)));
    Log_Write("log_gang", "%s (uid: %i) da ban bang nhom cua ho %s (id: %i) cho dai ly voi gia $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:createpoint(playerid, params[])
{
    new type, name[32];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /createpoint [type] [name]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
	    return 1;
	}
	if(!(0 <= type <= 9))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "Khong-ai", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 20;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, '%e', %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da tao ra diem {F7A763}%s{FF6347}.", GetPlayerRPName(playerid), name);
	        SendClientMessageEx(playerid, COLOR_AQUA, "Ban da tao ra diem {F7A763}%s{33CCFF}. /editpoint %i de chinh sua diem nay.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Diem khong hop le.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new pointid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /editpoint [pointid] [tuy chon]");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Diem khong hop le.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /editpoint [pointid] [name] [van ban]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = '%e' WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat ten cua diem %i thanh %s.", GetPlayerRPName(playerid), pointid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat ten cua diem %i thanh {F7A763}%s{33CCFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da di chuyen vi tri cua diem %i.", GetPlayerRPName(playerid), pointid);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da di chuyen vi tri cua diem %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%e' WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat bo thu diem %i thanh %s.", GetPlayerRPName(playerid), pointid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat bo thu diem %i thanh {F7A763}%s{33CCFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /editpoint [pointid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Bang nhom khong hop le.");
		}

		PointInfo[pointid][pCapturedGang] = gangid;
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedGang], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da thiet lap lai nhom bat diem %i.", GetPlayerRPName(playerid), pointid);
			SendClientMessageEx(playerid, COLOR_AQUA, "Ban da thiet lap lai nhom bat diem %i.", pointid);
		}
		else
		{
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat nhom bat diem %i thanh %s.", GetPlayerRPName(playerid), pointid, GangInfo[gangid][gName]);
			SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat nhom bat diem %i thanh {00AA00}%s{33CCFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /editpoint [pointid] [type] [value]");
           	SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Loai khong hop le.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat loai diem %i thanh %i.", GetPlayerRPName(playerid), pointid, type);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat loai diem %i thanh %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat loi nhuan cua diem %i thanh $%i.", GetPlayerRPName(playerid), pointid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat loi nhuan cua diem %i thanh $%i.", pointid, value);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "So gio phai nam trong khoang tu 0 den 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SendClientMessageToAllEx(COLOR_YELLOW, "Point wars: %s hien co san de chiem.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da dat thoi gian cua diem %i thanh %i gio.", GetPlayerRPName(playerid), pointid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "Ban da dat thoi gian cua diem %i thanh %i gio.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "Su dung: /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Diem khong hop le.");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da xoa diem %s.", GetPlayerRPName(playerid), PointInfo[pointid][pName]);
	SendClientMessageEx(playerid, COLOR_AQUA, "Ban da xoa diem {F7A763}%s{33CCFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

CMD:capture(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co thu hang 5+ trong bat ky bang dang nao vao luc nay.");
	}
	if(PlayerInfo[playerid][pCapturingPoint] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang co gang nam bat diem.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the nam bat mot diem khi bi thuong.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai onfoot de su dung lenh nay.");
	}
    if(GangCapturingPoints(PlayerInfo[playerid][pGang]) >= MaxCapCount[1])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nhom cua ban da chiem duoc %i diem.", MaxCapCount[1]);
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Diem nay van chua co san de nam bat.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Diem nay da duoc ban nam bat.");
		    }
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PlayerInfo[PointInfo[i][pCapturer]][pGang] == PlayerInfo[playerid][pGang])
		    {
		        return SendClientMessage(playerid, COLOR_LIGHTRED, "Diem nay da bi bang nhom cua ban bat giu.");
			}

		    foreach(new x : Player)
		    {
		        if(PlayerInfo[x][pCapturingPoint] == i && PlayerInfo[x][pCaptureTime] > 0)
		        {
		            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ai do khac da co gang de nam bat. Vui long doi cho den khi chung hoan thanh.");
				}
			}

		    PlayerInfo[playerid][pCapturingPoint] = i;
		    PlayerInfo[playerid][pCaptureTime] = 10;

			GetPlayerPos(playerid, PlayerInfo[playerid][pPointX], PlayerInfo[playerid][pPointY], PlayerInfo[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_RED, "(( %s dang co gang nam bat %s. ))", GetPlayerRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi bat ky diem nao.");
	return 1;
}

CMD:claim(playerid, params[])
{
	new turfid, count;

    if((PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5) && !IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc xep hang 5+ trong mot bang nhom hoac ngoai co quan thuc thi phap luat.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc pham vi cua bat ky co hoi nao ma ban co the yeu cau.");
	}
	if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep tuyen bo lat tay voi tu cach la nguoi thuc thi phap luat va thanh vien bang dang.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the yeu cau mot san co khi bi thuong.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Bai co nay van chua co san de yeu cau.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Day la san da bi khoa va do do khong the xac nhan quyen so huu.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Bai co nay da duoc ban chiem giu.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(PlayerInfo[playerid][pGang]) >= MaxCapCount[0])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nhom cua ban dang chiem dong %i lanh tho.", MaxCapCount[0]);
	}
	if(!IsLawEnforcement(playerid) && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] == PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lanh tho nay da bi bang dang cua ban doi.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai onfoot de su dung lenh nay.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the yeu cau mot lanh tho ben trong noi that.");
	}

	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerInfo[i][pInjured] && !PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pAcceptedHelp] && !PlayerInfo[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerInfo[i][pGang] == PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] && PlayerInfo[i][pGang] != GangInfo[PlayerInfo[playerid][pGang]][gAlliance])
			    {
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai loai bo tat ca cac thanh vien cua bang nhom tan cong truoc khi ban co the yeu cau dieu nay.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai loai bo tat ca LEO trong san nay truoc khi ban co the yeu cau dieu nay.");
			    }
			}
		}
	}

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    if(GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Bang nhom cua ban khong con bat ky the co nao.");
		}

	    foreach(new i : Player)
	    {
	        if(GetNearbyTurf(i) == turfid && PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
	        {
	            count++;
			}
		}

		if(count < 3)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can co it nhat 3 thanh vien trong bang nhom cua minh trong khu vuc nay de xac nhan quyen so huu.");
		}
		else
		{
			GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens]--;
			SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s da co gang xac nhan %s cho %s . Lanh tho nay se thanh cua ho trong 10 phut nua!", GetPlayerRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerInfo[playerid][pGang]][gName]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] == -1)
	{
	    if(FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Phe cua ban khong con bat ky the lanh tho nao.");
		}

	    FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens]--;
	    SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s da co gang yeu cau lai %s. Lanh tho nay se thanh cua ho trong 10 phut nua!", GetPlayerRPName(playerid), TurfInfo[turfid][tName]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 10;
	ReloadTurf(turfid);

	return 1;
}

CMD:reclaim(playerid, params[])
{
	new turfid;

    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky lanh tho nao.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong pham vi cua bat ky lanh tho nao.");
	}
	if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong duoc phep tuyen bo lat tay voi tu cach la nguoi thuc thi phap luat va thanh vien bang dang.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the lay lai lanh tho khi bi thuong.");
	}
	if(TurfInfo[turfid][tCapturedGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Bai co nay khong thuoc ve bang dang cua ban. Do do ban khong the doi lai no.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Day la lanh tho da bi khoa va do do khong the xac nhan quyen so huu.");
	}
	if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "lanh tho nay khong duoc tuyen bo boi bat ky ai. Do do ban khong the doi lai no.");
	}

 	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerInfo[i][pInjured] && !PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pAcceptedHelp] && !PlayerInfo[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerInfo[i][pGang] == PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] && PlayerInfo[i][pGang] != GangInfo[PlayerInfo[playerid][pGang]][gAlliance])
			    {
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai loai bo tat ca cac thanh vien cua bang nhom tan cong truoc khi ban co the yeu cau dieu nay.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai loai bo tat ca LEO trong san nay truoc khi ban co the yeu cau dieu nay.");
			    }
			}
		}
	}

	SendTurfMessage(turfid, COLOR_YELLOW, "Turf wars: %s da doi lai %s cho %s va ket thuc cuoc chien tren lanh tho.", GetPlayerRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerInfo[playerid][pGang]][gName]);

	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
	TurfInfo[turfid][tCaptureTime] = 0;
	ReloadTurf(turfid);

	return 1;
}
//hoang viet hoa 1179 line
CMD:guninv(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Vu khi cua toi _____");

	for(new i = 0; i < 13; i ++)
	{
     	if(PlayerInfo[playerid][pWeapons][i] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s", PlayerInfo[playerid][pWeapons][i], GetWeaponNameEx(PlayerInfo[playerid][pWeapons][i]));
		}
	}

	return 1;
}

CMD:armsdealer(playerid, params[])
{
    if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban bi han che vu khi hoac ban choi it hon 2 gio choi.");
    }

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gArmsDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gArmsX], GangInfo[i][gArmsY], GangInfo[i][gArmsZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gArmsWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan tiem ban vu khi hoac o dia ban bang dang nao.");
	return 1;
}

CMD:drugdealer(playerid, params[])
{
	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gDrugDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gDrugX], GangInfo[i][gDrugY], GangInfo[i][gDrugZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gDrugWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan tiem ban vu khi hoac o dia ban bang dang nao.");
	return 1;
}


CMD:createturf(playerid, params[])
{
	new type, name[32];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createturf [special type] [name]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (0) None (1) Materials (2) Low weapons (3) Med weapons (4) High weapons");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (5) Traphouse (6) Crackhouse (7) Sales taxing (8) Locked");
	    return 1;
	}
	if(!(0 <= type <= 8))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "There is a turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You cannot create turfs indoors.");
	}

	PlayerInfo[playerid][pTurfType] = type;
	PlayerInfo[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(PlayerInfo[playerid][pTurfName], name, 32);
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have entered turf creation mode. In order to create a turf you need\nto mark four points around the area you want your turf to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress {00AA00}Confirm{A9C4E4} to begin turf creation.", "Confirm", "Huy bo");
	return 1;
}

CMD:turfcancel(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not creating a turf at the moment.");
	}

	CancelZoneCreation(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gototurf(playerid, params[])
{
	new turfid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi co the su dung khi ban dang Admin Onduty, /aduty de bat dau.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gototurf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid turf.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid, params[])
{
	new turfid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removeturf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid turf.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;
    Iter_Remove(Turf, turfid);

    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} You have removed turf %i.", turfid);
	return 1;
}

CMD:editturf(playerid, params[])
{
	new turfid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editturf [turfid] [tuy chon]");
		SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: Name, CapturedBy, Gang, Type, Time");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid turf.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editturf [turfid] [name] [van ban]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = '%e' WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the name of turf %i to %s.", GetPlayerRPName(playerid), turfid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the name of turf %i to {F7A763}%s{33CCFF}.", turfid, param);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editturf [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%e' WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of turf %i to %s.", GetPlayerRPName(playerid), turfid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturer of turf %i to {F7A763}%s{33CCFF}.", turfid, param);
	}
 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editturf [turfid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid gang.");
		}

		TurfInfo[turfid][tCapturedGang] = gangid;
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of turf %i.", GetPlayerRPName(playerid), turfid);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have reset the capturing gang of turf %i.", turfid);
		}
		else
		{
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of turf %i to %s.", GetPlayerRPName(playerid), turfid, GangInfo[gangid][gName]);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturing gang of turf %i to {00AA00}%s{33CCFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editturf [turfid] [type] [value]");
           	SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (0) None (1) Materials (2) Low weapons (3) Med weapons (4) High weapons");
	   	 	SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac loai: (5) Traphouse (6) Crackhouse (7) Sales taxing (8) Locked");
            return 1;
		}
		if(!(0 <= type <= 8))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid type.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the type of turf %i to %i.", GetPlayerRPName(playerid), turfid, type);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the type of turf %i to %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editturf [turfid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "The amount of hours must range from 0 to 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0 && TurfInfo[turfid][tType] != 8)
		{
		    SendTurfMessage(turfid, COLOR_YELLOW, "Turf wars: %s is now available to capture.", TurfInfo[turfid][tName]);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the time of turf %i to %i hours.", GetPlayerRPName(playerid), turfid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the time of turf %i to %i hours.", turfid, value);
	}

	return 1;
}

CMD:pointinfo(playerid, params[])
{
	new
		iCount,
		szMessage[128];

	SendClientMessage(playerid, COLOR_ORANGE, "Point Info:");
	for(new i; i < MAX_POINTS; i++) {
		if(PointInfo[i][pExists]) {
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)  {
				if(PointInfo[i][pCaptureTime] == 1) {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: It hon 1 phut", PointInfo[i][pName], GetPlayerRPName(PointInfo[i][pCapturer]), GangInfo[PlayerInfo[PointInfo[i][pCapturer]][pGang]][gName]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: %d phut", PointInfo[i][pName], GetPlayerRPName(PointInfo[i][pCapturer]), GangInfo[PlayerInfo[PointInfo[i][pCapturer]][pGang]][gName], PointInfo[i][pCaptureTime]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co bang dang nao dang danh chiem.");
	return 1;
}

CMD:turfinfo(playerid, params[])
{
	new turfid, name[32] = "None", perk[32], color = -1;

	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o gan dia ban nao.");
	}

	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
    	strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
    	color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
	}

	switch(TurfInfo[turfid][tType])
	{
	    case 0: perk = "Normal";
	    case 1: perk = "Materials";
     	case 2: perk = "Low class weapons";
	    case 3: perk = "Medium class weapons";
	    case 4: perk = "High class weapons";
	    case 5: perk = "Traphouse";
	    case 6: perk = "Crackhouse";
	    case 7: perk = "Sales tax";
	    case 8: perk = "Locked turf";
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s (%s) _____", TurfInfo[turfid][tName], perk);

	if(TurfInfo[turfid][tType] == 8)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** Dia ban nay thuoc quyen so huu cua {%06x}%s{FFFFFF} va no khong the bi chiem dong.", color >>> 8, name);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "** This turf captured by %s for {%06x}%s{FFFFFF} will be available in %i hours.", TurfInfo[turfid][tCapturedBy], color >>> 8, name, TurfInfo[turfid][tTime]);

    	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID)
		{
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** This turf is being captured by %s and will be theirs in %i minutes.", GetPlayerRPName(TurfInfo[turfid][tCapturer]), TurfInfo[turfid][tCaptureTime]);
		}
	}

	return 1;
}



CMD:carhelp(playerid, params[])
{
	return callcmd::vehiclehelp(playerid, params);
}

CMD:armbomb(playerid, params[])
{
	return callcmd::plantbomb(playerid, params);
}

CMD:eject(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /eject [playerid]");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai phuong tien nao.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi, or is not in your vehicle.");
	}

	RemovePlayerFromVehicle(targetid);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da duoi %s ra khoi xe.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:dicebet(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1099.8420, 20.3554, 1000.6797))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of the casino.");
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi phai tu cap 3 tro len de dat cuoc voi ho..");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /dicebet [playerid] [so luong]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}
	if(PlayerInfo[targetid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi phai tu cap 3 tro len de dat cuoc voi ho.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cuoc voi gia tien $1.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co du tien de dat cuoc.");
	}
	if(gettime() - PlayerInfo[playerid][pLastBet] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the su dung lenh nay sau moi 10 giay. Vui long doi %i giay nua.", 10 - (gettime() - PlayerInfo[playerid][pLastBet]));
	}

	PlayerInfo[targetid][pDiceOffer] = playerid;
	PlayerInfo[targetid][pDiceBet] = amount;
	PlayerInfo[targetid][pDiceRigged] = 0;
	PlayerInfo[playerid][pLastBet] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da bat dau cuoc xuc xac voi gia $%i (/chapnhan cacuoc).", GetPlayerRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da dat xuc xac voi %s voi $%i.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:dicebetrigged(playerid, params[]) // Added to keep the economy in control. And to make people qq when they lose all their cash.
{
	new targetid, amount;

	if(PlayerInfo[playerid][pAdmin] < 8)
	{
	    return -1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1099.8420, 20.3554, 1000.6797))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in range of the casino.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /dicebetrigged [playerid] [so luong]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}
	if(PlayerInfo[targetid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi phai tu cap 3 tro len de dat cuoc voi ho ");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cuoc voi gia tien $1");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co du tien de dat cuoc.");
	}
	if(gettime() - PlayerInfo[playerid][pLastBet] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the su dung lenh nay sau moi 10 giay. Vui long doi %i giay nua.", 10 - (gettime() - PlayerInfo[playerid][pLastBet]));
	}

	PlayerInfo[targetid][pDiceOffer] = playerid;
	PlayerInfo[targetid][pDiceBet] = amount;
	PlayerInfo[targetid][pDiceRigged] = 1;
	PlayerInfo[playerid][pLastBet] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da bat dau cuoc xuc xac voi gia $%i (/chapnhan cacuoc).", GetPlayerRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da dat xuc xac voi %s voi  $%i.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:calculate(playerid, params[])
{
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /calculate [value 1] [tuy chon] [value 2]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Danh sach cac tuy chon: (+) Add (-) Subtract (*) Multiply (/) Divide");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't divide by zero.");
	}

	if(option == '+') {
	    SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:serverstats(playerid, params[])
{
	new houses, businesses, garages, vehicles, lands, entrances, turfs, points, gangs, factions, lockers;

	houses = Iter_Count(House);
	businesses = Iter_Count(Business);
	garages = Iter_Count(Garage);
	vehicles = Iter_Count(Vehicle);
	lands = Iter_Count(Land);
	entrances = Iter_Count(Entrance);
	turfs = Iter_Count(Turf);
	for(new i = 0; i < MAX_POINTS; i ++) 	 if(PointInfo[i][pExists]) 		points++;
	for(new i = 0; i < MAX_GANGS; i ++) 	 if(GangInfo[i][gSetup]) 		gangs++;
	for(new i = 0; i < MAX_FACTIONS; i ++) 	 if(FactionInfo[i][fType]) 		factions++;
	for(new i = 0; i < MAX_LOCKERS; i ++) 	 if(LockerInfo[i][lExists]) 	lockers++;

	SendClientMessage(playerid, COLOR_NAVYBLUE, "______ New City Roleplay Stats ______");
	SendClientMessageEx(playerid, COLOR_GREY2, "Connections: %i - Registered: %i - Kill Counter: %i - Death Counter: %i - Hours Played: %i", gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours);
	SendClientMessageEx(playerid, COLOR_GREY2, "Houses: %i/%i - Businesses: %i/%i - Garages: %i/%i - Lands: %i/%i - Vehicles: %i/%i", houses, MAX_HOUSES, businesses, MAX_BUSINESSES, garages, MAX_GARAGES, lands, MAX_LANDS, vehicles, MAX_VEHICLES);
	SendClientMessageEx(playerid, COLOR_GREY2, "Entrances: %i/%i - Turfs: %i/%i - Points: %i/%i - Gangs: %i/%i - Factions: %i/%i - Lockers: %i/%i", entrances, MAX_ENTRANCES, turfs, MAX_TURFS, points, MAX_POINTS, gangs, MAX_GANGS, factions, MAX_FACTIONS, lockers, MAX_LOCKERS);
	SendClientMessageEx(playerid, COLOR_GREY2, "Players Online: %i/%i - Player Record: %i - Record Date: %s - Anticheat Bans: %i", Iter_Count(Player), MAX_PLAYERS, gPlayerRecord, gRecordDate, gAnticheatBans);
	return 1;
}

CMD:ww(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:watch(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid, params[])
{
	if(!PlayerInfo[playerid][pWatch])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co dong ho bo tui. Hay mua no o 24/7.");
	}

	if(!PlayerInfo[playerid][pWatchOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mo dong ho bo tui vi ban da vo hieu hoa Textdraw (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pWatchOn] = 1;
	    TextDrawShowForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da bat dong ho bo tui.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pWatchOn] = 0;
	    TextDrawHideForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da tat dong ho bo tui.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:gps(playerid, params[])
{
	if(!PlayerInfo[playerid][pGPS])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co GPS. Hay mua no o 24/7.");
	}

	if(!PlayerInfo[playerid][pGPSOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mo GPS vi ban da vo hieu hoa Textdraw! (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pGPSOn] = 1;

	    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][0], "Loading...");
	    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][0]);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da bat GPS.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pGPSOn] = 0;
	    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][0]);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s da tat GPS.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:fixvw(playerid, params[])
{
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pJailType] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}

	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da duoc sua the gioi ao.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Hien tai ban khong bi bug the gioi ao.");
	}

	return 1;
}

CMD:stuck(playerid, params[])
{
	if(
		PlayerInfo[playerid][pTazedTime] > 0 ||
		PlayerInfo[playerid][pInjured] > 0 ||
		PlayerInfo[playerid][pHospital] > 0 ||
		PlayerInfo[playerid][pCuffed] > 0 ||
		PlayerInfo[playerid][pTied] > 0 ||
		PlayerInfo[playerid][pAcceptedHelp] ||
		PlayerInfo[playerid][pMiningTime] > 0 ||
		PlayerInfo[playerid][pFishTime] > 0 ||
		PlayerInfo[playerid][pLootTime] > 0 ||
		GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY ||
		IsPlayerInAnyVehicle(playerid) ||
		PlayerInfo[playerid][pAdminFrozen])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}
    if(gettime() - PlayerInfo[playerid][pLastStuck] < 5)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the su dung lenh nay moi 5 giay. Hay doi them %i giay.", 5 - (gettime() - PlayerInfo[playerid][pLastStuck]));
	}

	new
	    Float:x,
    	Float:y,
    	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 0.5);

	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
	SendClientMessage(playerid, COLOR_LIGHTRED, "You are no longer stuck.");

	PlayerInfo[playerid][pLastStuck] = gettime();
	return 1;
}
//vh tiep
CMD:badge(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Enforcer.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vao luc nay.");
	}

	if(!PlayerInfo[playerid][pDuty])
	{
	    if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the deo huy hieu khi dang trong Event hoac Paintball.");
		}
	    PlayerInfo[playerid][pDuty] = 1;
	    SendClientMessage(playerid, COLOR_WHITE, "Ban da deo huy hieu. Mau bang ten cua ban hien thi cho tat ca nguoi choi.");
	}
	else
	{
	    PlayerInfo[playerid][pDuty] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "Ban da cat huy hieu. Mau bang ten cua ban khong con hien thu cho bat ky nguoi choi nao.");
	}

	return 1;
}

CMD:duel(playerid, params[])
{
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can phai duty Admin moi co the su dung. /aduty de duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /duel [nguoi choi1] [nguoi choi2] [Mau] [Giap] [Vu khi1] [Vukhi2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi khong xac dinh.");
	}
	if(health < 1.0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Mau khong the duoi 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Vu khi khong xac dinh. ID vu khi chi tu 0 den 46.");
	}

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, 1370.3395, -15.4556, 1000.9219);
	SetPlayerPos(target2, 1414.4841, -15.1239, 1000.9253);
	SetPlayerFacingAngle(target1, 270.0000);
	SetPlayerFacingAngle(target2, 90.0000);

	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, 0);
	SetPlayerVirtualWorld(target2, 0);

	SetPlayerHealth(target1, health);
	SetPlayerArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetPlayerArmour(target2, armor);

	GivePlayerWeaponEx(target1, weapon1, true);
	GivePlayerWeaponEx(target1, weapon2, true);
	GivePlayerWeaponEx(target2, weapon1, true);
	GivePlayerWeaponEx(target2, weapon2, true);

	GameTextForPlayer(target1, "~r~Duel time!", 3000, 3);
	GameTextForPlayer(target2, "~r~Duel time!", 3000, 3);

	PlayerInfo[target1][pDueling] = target2;
	PlayerInfo[target2][pDueling] = target1;

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s and %s into a duel.", GetPlayerRPName(playerid), GetPlayerRPName(target1), GetPlayerRPName(target2));
	return 1;
}

CMD:mole(playerid, params[]) // MADE BY THE ONE AND ONLY Hernandez!
{
 	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 3)
 	{
  		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
 	}
 	if(isnull(params))
 	{
     	SendClientMessage(playerid, COLOR_WHITE, "Su dung: /mole [van ban]");
     	SendClientMessage(playerid, COLOR_YELLOW, "Lenh nay se gui tin nhan len toan bo may chu. Lam dung lenh nay se bi phat nang.");
     	return 1;
 	}
	SendClientMessageToAllEx(COLOR_YELLOW, "** New City Roleplay: %s, Ph:184 **", params);
 	return 1;
}

CMD:info(playerid, params[])
{
	return callcmd::information(playerid, params);
}

CMD:information(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Thong tin May Chu _____");
	SendClientMessage(playerid, COLOR_GREY2, "Website: new-city.net") ;
	SendClientMessage(playerid, COLOR_GREY2, "Forum: Forum.new-city.net");
	SendClientMessage(playerid, COLOR_GREY2, "Shop: Chua co");
	SendClientMessage(playerid, COLOR_GREY2, "Discord: discord.io/ncrp22");
	return 1;
}

CMD:listcallers(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Medic hoac Law Eleycer.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "Cuoc goi truong hop khan cap");

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pEmergencyCall] > 0) && ((PlayerInfo[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (PlayerInfo[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** %s[%i] - Het han: %i giay - Truong hop khan cap: %s", GetPlayerRPName(i), i, PlayerInfo[i][pEmergencyCall], PlayerInfo[i][pEmergency]);
		}
	}

	return 1;
}
CMD:trace(playerid, params[])
{
	new param[16], traceid;
	if(!PlayerInfo[playerid][pGPS])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can phai co GPS de su dung.");
	}
	if(sscanf(params, "s[16]i", param, traceid))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "[Su dung]: /trace [house/biz] [ID]");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban hien dang co muc tieu chua xoa. /killcp to cancel it.");
	}
	if(!strcmp(param, "biz", true))
	{
		if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban hien dang co muc tieu chua xoa. /killcp to cancel it.");
		}
		if(!BusinessInfo[traceid][bExists])
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Doanh nghiep ban dang theo doi khong ton tai.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Bay gio ban dang theo doi Business ID: {FFFFFF}%d.", traceid);
		PlayerInfo[playerid][pCP] = CHECKPOINT_TRACEBIZ;
		SetPlayerCheckpoint(playerid, BusinessInfo[traceid][bPosX], BusinessInfo[traceid][bPosY], BusinessInfo[traceid][bPosZ], 3.0);
	}
	else if(!strcmp(param, "house", true))
	{
		if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban hien dang co muc tieu chua xoa. /killcp hoac /kcp de huy.");
		}
		if(!HouseInfo[traceid][hExists])
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Ngoi nha ban dang theo doi khong ton tai.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Bay gio ban dang theo doi House ID: {FFFFFF}%d.", traceid);
		PlayerInfo[playerid][pCP] = CHECKPOINT_TRACEHOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[traceid][hPosX], HouseInfo[traceid][hPosY], HouseInfo[traceid][hPosZ], 3.0);
	}
	return 1;
}

CMD:trackcall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong phai Bac si hoac faction Law.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /trackcall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
	if(!PlayerInfo[targetid][pEmergencyCall])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do khong goi 911 hoac cuoc goi da het han.");
	}
	if(!GetPlayerPosEx(targetid, x, y, z))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien khong truy cap.");
	}

	//PlayerInfo[targetid][pEmergencyCall] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da chap nhan %s's cuoc goi cap cuu. Vi tri cua ho da xuat hien tren map.", GetPlayerRPName(targetid));

	if(PlayerInfo[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s da chap nhan cuoc goi cua ban.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:startchat(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /startchat [playerid]");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da tham gia mot cuoc tro chuyen. /invitechat de moi vao chat.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do dang tro chuyen voi admin");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s da bat dau cuoc tro chuyen voi ban. /(re)ply de bat dau noi chuyen voi Admin.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "Ban da bat dau tro chuyen voi %s (ID %i). /(re)ply de noi chuyen voi nguoi choi do.", GetPlayerRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /invitechat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua bat dau mot cuoc tro chuyen. /startchat de bat dau.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang tro chuyen voi mot Admin khac.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s da moi ban vao cuoc tro chuyen. /(re)ply de noi chuyen.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "Ban da moi %s (ID %i) den cuoc tro chuyen cua ban.", GetPlayerRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /kickchat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da bat dau mot cuoc tro chuyen. /startchat de bat dau.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang khong tro chuyen voi ban.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s da xoa ban ra khoi cuoc tro chuyen.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "Ban da xoa %s (ID %i) tu cuoc tro chuyen cua ban.", GetPlayerRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chua bat dau mot cuoc tro chuyen. /startchat de bat dau.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SendClientMessageEx(i, COLOR_YELLOW, "Administrator %s da ket thuc cuoc tro chuyen.", GetPlayerRPName(playerid));
		}
	}

	return 1;
}

CMD:re(playerid, params[])
{
	return callcmd::reply(playerid, params);
}

CMD:reply(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(re)ply [van ban]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da khong duoc tham gia vao bat ky cuoc tro chuyen nao cua admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0)
	        	SendClientMessageEx(i, COLOR_YELLOW, "** %s %s (ID %i): %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), playerid, params);
			else
			    SendClientMessageEx(i, COLOR_YELLOW, "** Nguoi choi %s (ID %i): %s **", GetPlayerRPName(playerid), playerid, params);
	    }
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai lai chiec xe moi co the su dung lenh nay.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong co dong co chay bang xang.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gascan [so luong]");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong du tien.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the do nhieu xang nhu vay vao xe.");
	}

	PlayerInfo[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s nap vao %s's binh xang voi %i lit xang.", GetPlayerRPName(playerid), GetVehicleName(vehicleid), amount);
	return 1;
}
CMD:robbiz(playerid, params[])
{
	new bizid;
	if(IsPlayerAdmin(playerid)) // disabled for now
	{
		if(PlayerInfo[playerid][pRobbingBiz] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da cuop mot doanh nghiep [business].");
		}
		if((bizid = GetInsideBusiness(playerid)) != -1)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong doanh nghiep de cuop.");
		}
		if(PlayerInfo[playerid][pLootTime] > 0)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang cuop mot doanh nghiep [business].");
		}
		if(PlayerInfo[playerid][pRobCash] >= 10000)
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Tui cua ban khong the chua nhieu hon $10.000!");
		}

		PlayerInfo[playerid][pRobbingBiz] = bizid;
		PlayerInfo[playerid][pLootTime] = 5;
	}
	return 1;
}
CMD:stoprobbery(playerid, params[])
{
    if(PlayerInfo[playerid][pRobbingBiz] < 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong chu dong cuop cong viec kinh doanh.");
	}
	if(GetInsideBusiness(playerid) != PlayerInfo[playerid][pRobbingBiz])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o ben trong doanh nghiep bang dang cuop.");
	}
	PlayerInfo[playerid][pRobbingBiz] = -1;
	PlayerInfo[playerid][pCP] = CHECKPOINT_ROBBERY;
    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da cuop tong cong %s. Ban can phai chuyen ngay so tien mat nay den {FF6347}dia diem{33CCFF} truoc khi bi canh sat bat!", FormatNumber(PlayerInfo[playerid][pRobCash]));
	SetPlayerCheckpoint(playerid, 1429.9939, 1066.9581, 9.8938, 3.0);
	return 1;
}
CMD:robbank(playerid, params[])
{
	new count;

	if(PlayerInfo[playerid][pLevel] < 7)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai Level 7+ moi co the su dung lenh nay.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc ngan hang.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ngan hang co the cuop nua trong %i gio. Ban khong the cuop bay gio.", RobberyInfo[rTime]);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Co mot vu cuop ngan hang da duoc len ke hoach. Yeu cau leader tham gia.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cuop ngan hang vi da co mot vu cuop da bat dau.");
	}
	if(IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the cuop ngan hang voi tu cach la nguoi thuc thi phap luat. Yeu cau sep cua ban tang luong.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && !PlayerInfo[i][pAdminDuty])
	    {
	        count++;
		}
	}

	if(count < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Can co it nhat 5 canh sat truc tuyen moi co the cuop ngan hang.");
	}

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, 1677.2610, -987.6659, 671.1152, 2.0);

    SendClientMessage(playerid, COLOR_AQUA, "Ban da thiet lap mot {FF6347}vu cuop ngan hang{33CCFF}. Ban can phai /robinvite de moi 2 nguoi khac vao vu cuop nay.");
	SendClientMessage(playerid, COLOR_AQUA, "Sau khi ban moi 2 nguoi khac vao, ban co the su dung /bombvault tai vi tri de cho no ham.");
	return 1;
}

CMD:robinvite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /robinvite [playerid]");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban hien khong co ke hoach cuop ngan hang.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho chinh minh.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da co vu cuop voi ban.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong the co nhieu hon %i cuop ngan hang trong vu cuop nay.", MAX_BANK_ROBBERS);
 	}
 	if(IsLawEnforcement(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the moi nguoi thi hanh phap luat vao vu cuop.");
	}

	PlayerInfo[targetid][pRobberyOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da moi ban vao vu cuop. Su dung (/chapnhan cuop) de chap nhan", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da moi %s de tham gia vu cuop cua ban.", GetPlayerRPName(targetid));
	return 1;
}

CMD:bombvault(playerid, params[])
{
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban hien khong co ke hoach cuop ngan hang.");
	}
	if(GetBankRobbers() < 3)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can it nhat 2 nguoi khac trong vu cuop cua ban.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1677.2610, -987.6659, 671.1152))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung gan vi tri cua ham.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ham da bi danh bomb vao luc nay.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654, 1677.787475, -988.009765, 671.625366, 0.000000, 0.000000, 180.680709);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s chac chan co chat no tren cua ham.", GetPlayerRPName(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "** Da cai bomb. Ban vao qua bomb de PUMP!");
	return 1;
}

CMD:lootbox(playerid, params[])
{
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong mot vu cuop trong ngan hang dang hoat dong.");
	}
	if(!RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Cuop ngan hang chua bat dau.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -994.6146, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2335, -998.6115, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -1002.5356, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -998.4954, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -994.5173, 671.0032))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung gan Box nao gan day.");
	}
	if(PlayerInfo[playerid][pLootTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang loot mot box.");
	}
	if(PlayerInfo[playerid][pRobCash] >= 100000)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Tui cua ban khong the chua hon $100,000!");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong tham gia vu cuop nay.");
	}

	PlayerInfo[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Looting deposit box...", 5000, 3);
	return 1;
}

CMD:robbers(playerid, params[])
{
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co ngan hang nao tai thoi diem nay dang hoat dong.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "       Robbers Alive       ");

	foreach(new i : Player)
	{
	    if(IsPlayerInBankRobbery(i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s {00AA00}(%s stolen)", i, GetPlayerRPName(i), FormatNumber(PlayerInfo[i][pRobCash]));
		}
	}

	return 1;
}

CMD:motd(playerid, params[])
{
	if(!isnull(gServerMOTD))
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** MOTD: %s", gServerMOTD);
	}
	if(!isnull(adminMOTD) && PlayerInfo[playerid][pAdmin] > 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Admin MOTD: %s", adminMOTD);
	}
	if(!isnull(helperMOTD) && (PlayerInfo[playerid][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0))
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Helper MOTD: %s", helperMOTD);
	}
	if(PlayerInfo[playerid][pGang] >= 0 && strcmp(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** Gang MOTD: %s", GangInfo[PlayerInfo[playerid][pGang]][gMOTD]);
	}
	if(PlayerInfo[playerid][pFaction] >= 0 && strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD], "None", true) != 0)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** Faction MOTD: %s", FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD]);
	}

	return 1;
} // LEONE - ERROR ALERT, STILL WORKING ON THIS.
CMD:createlocation(playerid, params[])
{
    new name[32], Float:x, Float:y, Float:z;
    if(!PlayerInfo[playerid][pDynamicAdmin])
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
    }
    if(sscanf(params, "s[32]", name))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createlocation [name]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: Vi tri se duoc di chuyen den toa do ban dang dung tren.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The gioi ao cua ban & Interior phai duoc 0!");
	}
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i < MAX_LOCATIONS; i ++)
	{
		if(!LocationInfo[i][locExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO locations VALUES(null, '%e', '%f', '%f', '%f')", name, x, y, z);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocation", "iisfff", playerid, i, name, x, y, z);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Slots vi tri hien dang day. Yeu cau cac Developers tang gioi han.");
	return 1;
}
CMD:movelocation(playerid, params[])
{
	new atm;
	new Float:x, Float:y, Float:z, Float:a;
    if(!PlayerInfo[playerid][pDynamicAdmin])
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
    }
    if(sscanf(params, "is[32]", atm, "confirm"))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /movelocation [locationid] [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: ATM se duoc chuyen den toa do ban dang dung tren.");
		return 1;
	}
	if(!LocationInfo[atm][locExists])
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri ban dang co gang di chuyen khong ton tai.");
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The gioi ao cua ban & Interior phai duoc 0!");
	}
	SendClientMessage(playerid, COLOR_WHITE, "The location was moved.");
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
	LocationInfo[atm][locPosX] = x;
    LocationInfo[atm][locPosY] = y;
    LocationInfo[atm][locPosZ] = z;
    return 1;
}
CMD:createatm(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
    if(!PlayerInfo[playerid][pDynamicAdmin])
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
    }
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createatm [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The ATM will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The gioi ao cua ban & Interior phai duoc 0!");
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_ATMS; i ++)
	{
		if(!AtmInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO atms VALUES(null, '%f', '%f', '%f', '%f')", x, y, z - 0.4, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateAtm", "iiffff", playerid, i, x, y, z - 0.4, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Slots ATM hien dang day. Yeu cau cac Developers tang gioi han.");
	return 1;
}
CMD:moveatm(playerid, params[])
{
	new atm;
	new Float:x, Float:y, Float:z, Float:a;
    if(!PlayerInfo[playerid][pDynamicAdmin])
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
    }
    if(sscanf(params, "is[32]", atm, "confirm"))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createatm [atmid] [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: ATM se duoc di chuyen den toa do ban dang dung tren.");
		return 1;
	}
	if(!AtmInfo[atm][aExists])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ATM ban dang co gang di chuyen khong ton tai.");
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "The gioi ao cua ban & Interior phai duoc 0!");
	}
	SendClientMessage(playerid, COLOR_WHITE, "ATM da duoc di chuyen.");
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
	AtmInfo[atm][aPosX] = x;
    AtmInfo[atm][aPosY] = y;
    AtmInfo[atm][aPosZ] = z - 0.4;
    AtmInfo[atm][aPosA] = a;
    ReloadAtm(atm);
    return 1;
}
CMD:removeatm(playerid, params[])
{
	new loc;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removeatm [atmid] (/nearest)");
	}
	if(!(0 <= loc < MAX_ATMS) || !AtmInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ATM khong hop le hoac Static.");
	}
    DestroyDynamic3DTextLabel(AtmInfo[loc][aText]);
    DestroyDynamicObject(AtmInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM atms WHERE id = %i", AtmInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	AtmInfo[loc][aExists] = false;
	AtmInfo[loc][aID] = 0;

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa ATM %i.", loc);
	return 1;
}
CMD:removelocation(playerid, params[])
{
	new loc;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removelocation [locationid]");
	}
	if(!(0 <= loc < MAX_LOCATIONS) || !LocationInfo[loc][locExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Vi tri khong xac dinh.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM locations WHERE id = %i", LocationInfo[loc][locID]);
	mysql_tquery(connectionID, queryBuffer);
	LocationInfo[loc][locName][0] = EOS;
	LocationInfo[loc][locExists] = false;
	LocationInfo[loc][locID] = 0;

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa vi tri %i.", loc);
	return 1;
}

CMD:createlocker(playerid, params[])
{
	new factionid, Float:x, Float:y, Float:z;

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /createlocker [factionid]");
	}
    if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Faction khong hop le.");
	}

    GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(!LockerInfo[i][lExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionlockers (factionid, pos_x, pos_y, pos_z, interior, world) VALUES(%i, '%f', '%f', '%f', %i, %i)", factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocker", "iiifffii", playerid, i, factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Slots Locker hien dang day. Yeu cau Developer tang gioi han.");
	return 1;
}
CMD:editland(playerid, params[])
{
	new landid, option[32], param[32];
	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[32]S()[32]", landid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editland [landid] [tuy chon]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "Tuy chon: Price, Level, Height, Owner");
		return 1;
	}
    if(!strcmp(option, "price", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editland [%i] [%s] [value]", landid, option);
		}
		if(!(1<= value <= 100000000))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "Gia khong the duoi 1 hoac tren 100.000.000");
		}
	    LandInfo[landid][lPrice] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET price = %i WHERE id = %i", value, LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban dat Land %i's den gia ban %i.", landid, value);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editland [%i] [%s] [value]", landid, option);
		}
		if(!(1 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "Level land khong duoi 0 hoac tren 3");
		}
	    LandInfo[landid][lLevel] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET level = %i WHERE id = %i", value, LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban dat Land %i's den level %i.", landid, value);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "height", true))
	{
	    if(sscanf(param, "s", "confirm"))
	    {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editland [%i] [%s] [confirm]", landid, option);
		}
        new Float:zCoord[2];
		GetPlayerPos(playerid, zCoord[0], zCoord[0], zCoord[1]);
	    LandInfo[landid][lHeight] = zCoord[1] + 1.0;
	  //  LandInfo[landid][lPickup] = zCoord[1]; We need this, land pickup, when you create a land at height it will create a pickup like house pickup.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET height = %f WHERE id = %i", zCoord[1], LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban co Land %i's Z (Chieu cao) pos den vi tri hien hanh Z (Chieu cao) Pos (%f).", landid, zCoord[1]);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;
		if(sscanf(param, "u", targetid))
	    {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editland [%i] [%s] [value]", landid, option);
		}
	   	SetLandOwner(landid, targetid);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban dat Land %i's chu so huu den %s.", landid, GetPlayerRPName(targetid));
		ReloadLand(landid);
	}
	return 1;
}
CMD:editlocker(playerid, params[])
{
	new lockerid, option[32], param[32];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "is[32]S()[32]", lockerid, option, param))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editlocker [lockerid] [tuy chon]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "Tuy chon: Position, FactionID, Icon, Label, Weapons");
		return 1;
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Locker khong xac dinh.");
	}
    if(!strcmp(option, "position", true))
    {
		GetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
		LockerInfo[lockerid][lInterior] = GetPlayerInterior(playerid);
		LockerInfo[lockerid][lWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = %i, world = %i WHERE id = %i", LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], LockerInfo[lockerid][lInterior], LockerInfo[lockerid][lWorld], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa Locker %i den vi tri cua ban.", lockerid);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "factionid", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /editlocker [%i] [%s] [value]", lockerid, option);
		}
	    LockerInfo[lockerid][lFaction] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET factionid = %i WHERE id = %i", LockerInfo[lockerid][lFaction], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban dat locker %i's faction den %i.", lockerid, value);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editlocker [lockerid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong xac dinh model ID.");
		}

		LockerInfo[lockerid][lIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET iconid = %i WHERE id = %i", LockerInfo[lockerid][lIcon], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da thay doi Pickup cua locker %i to %i.", lockerid, iconid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editlocker [lockerid] [label] [0/1]");
		}

		LockerInfo[lockerid][lLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET label = %i WHERE id = %i", LockerInfo[lockerid][lLabel], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da mo labels van ban 3D trong tu Locker  %i.", lockerid);
		else
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da tat labels van ban 3D trong tu Locker %i.", lockerid);
	}
	else if(!strcmp(option, "weapons", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Vu khi cho cac Hitman Locker khong the duoc chinh sua trong tro choi.");
	    }
	    new inputtext[24], opt2[8], amount;
	    if(sscanf(param, "s[24]s[8]i", inputtext, opt2, amount))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Su dung: /editlocker [lockerid] [weapons] [weaponname] [tuy chon] [so luong]");
            SendClientMessage(playerid, COLOR_GREEN, "Ten: Kevlar, Medkit, Nitestick, Mace, Deagle, Shotgun, M4, MP5, Spas12, Sniper, Camera, FireExt, Painkillers");
			SendClientMessage(playerid, COLOR_YELLOW, "Tuy chon: So tien,  Gia ban");
			SendClientMessage(playerid, COLOR_ORANGE, "So tien: Price (so tien), Cho phep (1 hoac 0)");
	        return 1;
	    }
		if(!strcmp(opt2, "allow", true))
		{
		    if(!(0 <= amount <= 1)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Amount can be 1 or 0");
			if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "Locker %i's %s status set to %i", lockerid, inputtext, amount);
		}
		else if(!strcmp(opt2, "price", true))
		{
            if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Locker %i's %s price set to %i", lockerid, inputtext, amount);
		}
	}
	return 1;
}
CMD:removelocker(playerid, params[])
{
	new lockerid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /removelocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Locker khong xac dinh.");
	}

	DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE id = %i", LockerInfo[lockerid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LockerInfo[lockerid][lExists] = 0;
	LockerInfo[lockerid][lID] = 0;

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da xoa Locker %i.", lockerid);
	return 1;
}

CMD:gotolocker(playerid, params[])
{
	new lockerid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay duoc su dung khi ban duty admin. /aduty de duty.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /gotolocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Locker khong xac dinh.");
	}

	GameTextForPlayer(playerid, "~w~Dich chuyen", 5000, 1);

	SetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
	SetPlayerInterior(playerid, LockerInfo[lockerid][lInterior]);
	SetPlayerVirtualWorld(playerid, LockerInfo[lockerid][lWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:namehistory(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /namehistory [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi mat ket noi.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM log_namehistory WHERE uid = %i ORDER BY id DESC", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckNameHistory", "ii", playerid, targetid);

	return 1;
}

CMD:unmute(playerid, params[])
{
	new string[128];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /unmute [newbie | report | global]");
	}

	if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerInfo[playerid][pNewbieMuted])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong bi mute newb chat.");
		}
		if(PlayerInfo[playerid][pNewbieMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can phai doi it nhat %i phut truoc khi yeu cau unmute.", (PlayerInfo[playerid][pNewbieMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerInfo[playerid][pCash]+PlayerInfo[playerid][pBank], 5));
		ShowPlayerDialog(playerid, DIALOG_NEWBIEUNMUTE, DIALOG_STYLE_LIST, "Choose your punishment for this unmute.", string, "Chon", "Huy bo");
	}
	else if(!strcmp(params, "report", true))
	{
	    if(!PlayerInfo[playerid][pReportMuted])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not muted from submitting reports.");
		}
		if(PlayerInfo[playerid][pReportMuted] <= 12)
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Your report mute is not indefinite and expires in %i playing hours.", PlayerInfo[playerid][pReportMuted]);
		}
		if(PlayerInfo[playerid][pReportMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can phai doi it nhat %i phut truoc khi yeu cau unmute.", (PlayerInfo[playerid][pReportMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerInfo[playerid][pCash]+PlayerInfo[playerid][pBank], 5));
		ShowPlayerDialog(playerid, DIALOG_REPORTUNMUTE, DIALOG_STYLE_LIST, "Chon hinh phat cua ban cho viec unmute.", string, "Chon", "Huy");
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerInfo[playerid][pGlobalMuted])
	    {
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong bi mute Global Chat.");
		}
		if(PlayerInfo[playerid][pGlobalMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban can phai doi it nhat %i phut truoc khi yeu cau unmute.", (PlayerInfo[playerid][pGlobalMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerInfo[playerid][pCash]+PlayerInfo[playerid][pBank], 5));
		ShowPlayerDialog(playerid, DIALOG_GLOBALUNMUTE, DIALOG_STYLE_LIST, "Chon hinh phat cua ban cho viec unmute.", string, "Chon", "Huy");
	}

	return 1;
}

CMD:ahide(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return 0;
	}

	if(!PlayerInfo[playerid][pAdminHide])
	{
	    PlayerInfo[playerid][pAdminHide] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "Bay gio ban dang an trong /admins va chuc vu admin cua ban khong con xuat hien trong /a, /g hoac /o.");
	}
	else
	{
	    PlayerInfo[playerid][pAdminHide] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "Ban khong con an nhu mot Admin.");
	}

	return 1;
}

CMD:breakin(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay tai thoi diem nay.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay tu trong xe.");
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung trong khu vuc co bat ky chiec xe nao.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chi co the dot nhap vao chiec xe so huu boi nguoi choi.");
	}
	if(VehicleInfo[vehicleid][vLocked] == 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Chiec xe nay da duoc mo khoa. Do do ban khong the dot nhap vao no.");
	}
	if(PlayerInfo[playerid][pLockBreak] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang co gang dot nhap vao chiec xe nay.");
	}
	/*if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "This vehicle cannot be broken into.");
	}*/
	if(IsVehicleOwner(playerid, vehicleid))
	{
	    //return SendClientMessage(playerid, COLOR_LIGHTRED, "Why would you want to break into your own vehicle?");
	}
	if(IsVehicleBeingPicked(vehicleid))
	{
 		return SendClientMessage(playerid, COLOR_LIGHTRED, "Chiec xe nay da bi pha vo boi nguoi khac.");
	}

	PlayerInfo[playerid][pLockBreak] = vehicleid;
	PlayerInfo[playerid][pLockHealth] = 1000.0;

	SendClientMessage(playerid, COLOR_AQUA, "Ban da bat dau {FF6347}be khoa{33CCFF} qua trinh. Bat dau pha cua xe hoac ghe de pha vo no.");
	SendClientMessage(playerid, COLOR_AQUA, "Ban co the su dung fists cua minh cho cong viec nay, tuy nhien vu khi can chien uu tien hon va thanh cong nhanh hon.");
	return 1;
}


CMD:achievements(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM achievements WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_ACHIEVEMENTS, playerid);
	return 1;
}

CMD:buyinsurance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2323.3250,110.9966,-5.3942))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky benh vien nao.");
	}
	if(PlayerInfo[playerid][pCash] < 200)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the mua bao hiem.");
	}

	switch(GetPlayerVirtualWorld(playerid))
	{
	    case HOSPITAL_COUNTY:
	    {
	        if(PlayerInfo[playerid][pInsurance] == HOSPITAL_COUNTY)
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da duoc bao hiem tai benh vien nay.");
	        }

	        GivePlayerCash(playerid, -200);
	        GameTextForPlayer(playerid, "~r~-$200", 5000, 1);
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[Bao hiem] {FFFFFF}Ban da tra $200 cho bao hiem tai {FF8282}County General{33CCFF}. Ban se ra vien sau khi C.H.E.T .");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerInfo[playerid][pInsurance] = HOSPITAL_COUNTY;
	    }
	    case HOSPITAL_ALLSAINTS:
	    {
	        if(PlayerInfo[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da duoc bao hiem tai benh vien nay.");
	        }

	        GivePlayerCash(playerid, -200);
	        GameTextForPlayer(playerid, "~r~-$200", 5000, 1);
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[Bao hiem] {FFFFFF}Ban da tra $200 cho bao hiem tai {FF8282}Benh vien Red Country{33CCFF}. Ban se ra vien tai day.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerInfo[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
	    }
	}

	return 1;
}

CMD:tie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /tie [playerid]");
	}
	if(PlayerInfo[playerid][pRope] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da het soi day de troi.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong bat ky phuong tien nao.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi, hoac khong o trong xe.");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the troi Drivers.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the troi cho chinh ban than ban.");
	}
	if(PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da bi troi. /untie de tra tu do cho anh ay.");
	}
	if(PlayerInfo[targetid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the troi Helper khi dang tro giup ai do.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the troi Administrator.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang bi thuong nen khong the troi cho bat ky ai. Hay doi %i mot lat roi thu lai.", PlayerInfo[playerid][pHurt]);
	}

	PlayerInfo[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", PlayerInfo[playerid][pRope], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Tied", 3000, 3);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s troi %s voi mot soi day.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	PlayerInfo[targetid][pTied] = 1;
	return 1;
}

CMD:untie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /untie [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the coi troi cho chinh ban than ban.");
	}
	if(!PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do hien dang khong bi troi.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai o trong xe cua nguoi choi do va coi troi cho ho.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban dang bi thuong nen khong the coi troi cho bat ky ai. Hay doi %i mot lat roi thu lai.", PlayerInfo[playerid][pHurt]);
	}

	GameTextForPlayer(targetid, "~g~Untied", 3000, 3);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s coi troi khoi %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	TogglePlayerControllable(targetid, 1);
	PlayerInfo[targetid][pTied] = 0;
	return 1;
}

CMD:repaircar(playerid, params[])
{
	new entranceid = GetNearbyEntrance(playerid);

	if(entranceid == -1 || EntranceInfo[entranceid][eType] != 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dung gan cho sua xe.");
	}
	if(EntranceInfo[entranceid][eAdminLevel] && PlayerInfo[playerid][pAdmin] < EntranceInfo[entranceid][eAdminLevel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Admjn thap wa khong repair dc au :<.");
	}
	if(EntranceInfo[entranceid][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[entranceid][eFactionType])
	{
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi ap dung cho mot FACTION cu the.");
	}
	if(EntranceInfo[entranceid][eGang] >= 0 && EntranceInfo[entranceid][eGang] != PlayerInfo[playerid][pGang])
	{
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi ap dung cho mot bang nhom cu the.");
	}
	if(EntranceInfo[entranceid][eVIP] && PlayerInfo[playerid][pVIPPackage] < EntranceInfo[entranceid][eVIP])
	{
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay su dung khi o VIP cao.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang khong lai xe.");
	}
    RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da sua chua chiec xe cua minh.");
	return 1;
}

CMD:offerduel(playerid, params[])
{
	new entranceid = GetInsideEntrance(playerid), targetid;

	if(entranceid == -1 || EntranceInfo[entranceid][eType] != 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong khu vuc dau tay doi.");
	}
	if(EntranceInfo[entranceid][eAdminLevel] && PlayerInfo[playerid][pAdmin] < EntranceInfo[entranceid][eAdminLevel])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ko xai dc :<.");
	}
	if(EntranceInfo[entranceid][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[entranceid][eFactionType])
	{
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay duoc gioi han cho mot Faction cu the.");
	}
	if(EntranceInfo[entranceid][eGang] >= 0 && EntranceInfo[entranceid][eGang] != PlayerInfo[playerid][pGang])
	{
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay duoc gioi han cho mot bang nhom cu the.");
	}
	if(EntranceInfo[entranceid][eVIP] && PlayerInfo[playerid][pVIPPackage] < EntranceInfo[entranceid][eVIP])
	{
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Lenh nay chi duoc su dung o VIP cao hon.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /offerduel [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da bi mat ket noi.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the moi de nghi dau tay doi voi chinh ban");
	}
	if(PlayerInfo[targetid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da tham gia mot cuoc dau tay doi.");
	}

	PlayerInfo[targetid][pDuelOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s da gui loi moi de nghi dau tay doi. Su dung (/chapnhan duel)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "**{FFFFFF} Ban da gui %s mot de nghi dau tay doi.", GetPlayerRPName(targetid));
	return 1;
}

CMD:gbackup(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong thuoc bat ky bang dang nao vao luc nay.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the goi backup khi bang chet.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
 		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban Ban khong the su dung lenh nay khi dang bi cong.");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay khi dang bi troi.");
	}
	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;
	}
	else
	{
	    PlayerInfo[playerid][pBackup] = 0;
	}

	foreach(new i : Player)
	{
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
        {
    	    if(PlayerInfo[playerid][pBackup])
    	    {
    	        SendClientMessageEx(i, COLOR_AQUA, "** %s %s is yeu cau requests trong %s (chi dinh tren map). **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, (GangInfo[PlayerInfo[playerid][pGang]][gColor] & ~0xff) + 0xFF);
			}
			else
			{
    	        SendClientMessageEx(i, COLOR_AQUA, "** %s %s da huy yeu cau requests cua ho. **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}
	}

	return 1;
}

CMD:confirmupgrade(playerid, params[])
{
	new houseid = PlayerInfo[playerid][pPreviewHouse], type = PlayerInfo[playerid][pPreviewType];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong xem duoc noi that nha. '/upgradehouse interior' de bat dau.");
	}
	if(PlayerInfo[playerid][pCash] < houseInteriors[type][intPrice])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co kha nang nang cap noi that nay.");
	}

	foreach(new i : Player)
	{
	    if(GetInsideHouse(i) == houseid)
	    {
	        SetPlayerPos(i, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	        SetPlayerFacingAngle(i, houseInteriors[type][intA]);
	        SetPlayerInterior(i, houseInteriors[type][intID]);
	        SetCameraBehindPlayer(i);
	    }
	}

	GivePlayerCash(playerid, -houseInteriors[type][intPrice]);

    HouseInfo[houseid][hType] = type;
    HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

    PlayerInfo[playerid][pPreviewHouse] = -1;
    PlayerInfo[playerid][pPreviewType] = 0;
    PlayerInfo[playerid][pPreviewTime] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, price = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hPrice], HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SendClientMessageEx(playerid, COLOR_GREEN, "Ban da nang cap noi that thanh cong cho $%i.", houseInteriors[type][intPrice]);
    Log_Write("log_property", "%s (uid: %i) nang cap noi that cua ho (id: %i) den noi that %i cho $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], type, houseInteriors[type][intPrice]);
	return 1;
}

CMD:cancelupgrade(playerid, params[])
{
	new houseid = PlayerInfo[playerid][pPreviewHouse];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong xem duoc noi that nha vao luc nay.");
	}

	SetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hInterior]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hWorld]);
	SetCameraBehindPlayer(playerid);

	PlayerInfo[playerid][pPreviewHouse] = -1;
    PlayerInfo[playerid][pPreviewType] = 0;
    PlayerInfo[playerid][pPreviewTime] = 0;

    SendClientMessage(playerid, COLOR_WHITE, "Ban da huy nang cap noi that nha cua ban. Ban da duoc tra lai can nha cu.");
    return 1;
}

CMD:giveachievement(playerid, params[])
{
	new targetid, name[32];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
    if(sscanf(params, "us[32]", targetid, name))
	{
	    return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /giveachievement [playerid] [name]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi ban spec da mat ket noi.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do chua dang nhap.");
	}

	if(!AwardAchievement(targetid, name))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Thanh tich khong xac dinh.");
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s Da mo {FF6347}%s{33CCFF} thanh tich.", GetPlayerRPName(playerid), name);
	    SendClientMessageEx(playerid, COLOR_AQUA, "Ban da mo %s cung voi {FF6347}%s{33CCFF} thanh tich.", GetPlayerRPName(targetid), name);
	}

	return 1;
}

CMD:vipmusic(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai tro thanh Donator de su dung lenh nay!");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /vipmusic [songname.mp3]");
	}
	if(gettime() - gLastMusic < 300)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Nhac chi co the bat sau khi 5p.");
	}
	new url[144];
	format(url, sizeof(url), "http://%s/%i/%s", VIP_MUSIC_URL, PlayerInfo[playerid][pID], params);
	foreach(new i : Player)
	{
 		if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
   		{
			PlayAudioStreamForPlayer(i, url);
		}
	}
	SendClientMessageToAllEx(COLOR_VIP, "VIP Music: %s VIP %s da bat nhac %s tu folder nhac cua ho!", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerRPName(playerid), params);
    gLastMusic = gettime();
	return 1;
}

CMD:kill(playerid, params[])
{
	new Float:health;
	GetPlayerHealth(playerid, health);

	if(PlayerInfo[playerid][pCuffed] == 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tu tu khi dang bi cong!");
	}
	if(PlayerInfo[playerid][pTied] == 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the tu tu khi dang bi troi!");
	}
	if(PlayerInfo[playerid][pJailTime] > 1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the thuc hien dieu nay khi dang o trong tu.");
	}
	if(PlayerInfo[playerid][pInjured] > 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang bi thuong va dang co y dinh tu tu!");
	}

	if(health < 15.0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Suc khoe cua ban hien qua thap de T.U S.A.T.");
	}

    switch(GetPlayerWeapon(playerid))
	{
		case 0 .. 21:
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dua tay vao tui, lay ra mot luong thuoc lon, nuot chung.", GetPlayerRPName(playerid));
		}
		case 22 .. 24:
		{
		   SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s Nang khau sung ngan len dau, bop co.", GetPlayerRPName(playerid));
		}
		case 25 .. 27:
		{
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s Dat nong sung ngan vao mieng, bop co.", GetPlayerRPName(playerid));
		}
		case 28 .. 39:
  		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s Dat nong sung vao mieng, bop co.", GetPlayerRPName(playerid));
		}
	}
	SetPlayerHealth(playerid, 0.0);
	return 1;
}



CMD:forcetut(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
		return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /forcetut [playerid]");
	}
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to watch the server tutorial", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "Administrator %s da cho ban xem lai bo luat may chu.", GetPlayerRPName(playerid));
	PlayerInfo[targetid][pTutorial] = 1;
  	PlayerInfo[targetid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", targetid, 1);
  	return 1;
}

CMD:clearreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s da reset ReportsID.", GetPlayerRPName(playerid));
	return 1;
}


CMD:endalliance(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /endalliance [confirm]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai trong bang dang de su dung");
	}
	if(PlayerInfo[playerid][pGangRank] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can co rank 6 de su dung lenh nay.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Bang dang cua ban hien khong co lien minh.");
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "Ban da ket thuc lien minh cua minh voi %s.", GangInfo[allyid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SendClientMessageToAllEx(COLOR_WHITE, "(( Tin tuc bang dang: {%06x}%s{FFFFFF} Da ket thuc lien minh cua ho voi {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:endwar(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];
	new allyid = GangInfo[gangid][gWar];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /endwar [confirm]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai o trong bang dang de su dung lenh nay");
	}
	if(PlayerInfo[playerid][pGangRank] < 6)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban can phai co Rank 6 de su dung lenh nay.");
	}
	if(GangInfo[gangid][gWar] == -1)
	{
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Bang dang cua ban hien khong co War.");
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "Ban vua ket thuc cuoc war cua minh voi %s.", GangInfo[allyid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SendClientMessageToAllEx(COLOR_WHITE, "(( Tin tuc bang dang: {%06x}%s{FFFFFF} Da ket thuc War cua ho voi {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET rivals = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET rivals = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gWar] = -1;
	GangInfo[gangid][gWar] = -1;

	return 1;
}

CMD:clothes(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 1)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay vi ban khong co VIP");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1826.3379, -1308.8324, 1131.7552))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o trong khu vuc VIP.");
	}
	new skins[311], index;

	for(new i = 0; i < 312; i ++)
	{
		if(i != 74)
		{
		    skins[index++] = i;
		}
	}

    ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_VIPCLOTHES, "Trang phuc V.I.P", skins);
	return 1;
}

CMD:firstaid(playerid, params[])
{
	if(PlayerInfo[playerid][pFirstAid] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bo so cuu [first aid kit].");
	}
	if(GetPlayerHealthEx(playerid) >= 100)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban chi co the su dung bo so cuu [first aid kit] duoi 100 mau.");
	}
	if(PlayerInfo[playerid][pReceivingAid])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da su dung bo so cuu.");
	}

	PlayerInfo[playerid][pFirstAid]--;
	PlayerInfo[playerid][pReceivingAid] = 1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", PlayerInfo[playerid][pFirstAid], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s Admin so cuu cho ban than.", GetPlayerRPName(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "Goi y: Bo so cuu khi su dung co hieu luc den khi suc khoe day du.");
	return 1;
}

CMD:scanner(playerid, params[])
{
	if(!PlayerInfo[playerid][pPoliceScanner])
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co may quet canh sat.");
	}

	if(!PlayerInfo[playerid][pScannerOn])
	{
	    PlayerInfo[playerid][pScannerOn] = 1;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s Bat may quet canh sat.", GetPlayerRPName(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, "Bay gio ban co the nghe tin nhan tu cac cuoc tro chuyen Emergencys va Departments.");
	}
	else
	{
	    PlayerInfo[playerid][pScannerOn] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s Tat may quet canh sat.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:bodykit(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai bat ky phuong tien nao.");
	}
	if(PlayerInfo[playerid][pBodykits] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co bo sua chua xe[bodykits].");
	}
	if(gettime() - PlayerInfo[playerid][pLastRepair] < 60)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban co the sua chua chiec xe nay lai sau 60s. Vui long doi %i it lat.", 60 - (gettime() - PlayerInfo[playerid][pLastRepair]));
	}

    PlayerInfo[playerid][pBodykits]--;
    PlayerInfo[playerid][pLastRepair] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", PlayerInfo[playerid][pBodykits], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s Sua chua chiec xe.", GetPlayerRPName(playerid));
	return 1;
}

CMD:rimkit(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong lai bat ky phuong tien nao.");
	}
	if(PlayerInfo[playerid][pRimkits] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong co Rimkits khi ban su dung no.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid && !(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] == VehicleInfo[vehicleid][vGang]))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien phai o gan ban.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the su dung lenh nay cho phuong tien nay.");
	}

	ShowPlayerDialog(playerid, DIALOG_USERIMKIT, DIALOG_STYLE_LIST, "Chon bo banh xe de lap.", "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Chon", "Huy bo");
	return 1;
}

CMD:shutdownserver(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{

		if(strcmp(params, "confirm", true))
		{
			SendClientMessage(playerid, COLOR_GREY3, "[Su dung]: /shutdown [confirm]");
 			SendClientMessage(playerid, COLOR_GREY3, "Lenh nay de luu tru nguoi choi va cac thu khac.");
  			return 1;
		}
		if(gGMX)
		{
	 	  	return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban co the huy bo shutdownserver.");
		}

  		gGMX = 0;
		SetTimer("FinishServerShutdown", 5000, false);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Thong bao bao tri.");

		foreach(new i : Player)
		{
		    TogglePlayerControllable(i, 0);
			SavePlayerVariables(i);
		}
	}
	return 1;
}

CMD:showturfs(playerid, params[])
{
	if(!PlayerInfo[playerid][pShowTurfs])
	{
        	ShowTurfsOnMap(playerid, true);
        	SendClientMessage(playerid, COLOR_AQUA, "Ban se nhin thay Turfs tren Mini-Map.");
	}
	else
	{
        	ShowTurfsOnMap(playerid, false);
        	SendClientMessage(playerid, COLOR_AQUA, "Ban se khong co thay bat ki Turfs nao tren Mini-Map.");
	}

	return 1;
}


CMD:turfs(playerid, params[])
{
	new turfid, name[32], color, timeleft[32], string[2048];
	//SendClientMessageEx(playerid, COLOR_GREEN, "---- Turfs ----");
	format(string, sizeof(string), "");
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((0 < TurfInfo[turfid][tType] < 8) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Shutdown by The Police";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_FACTIONCHAT;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d hours left", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s {FFFFFF}%i.  Name: %s | Owner: {%06x}%s{FFFFFF} | Claimer: %s | Perk: %s | %s \n", string, turfid, TurfInfo[turfid][tName], color >>> 8, name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
			else
			{
			    format(tsstring, sizeof(tsstring), "%s {FFFFFF}%i. | Name: %s | Owner: {%06x}%s{FFFFFF} | Claimer: %s | Perk: %s | %s \n", string, turfid, TurfInfo[turfid][tName], color >>> 8, name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
		}
	}
    ShowPlayerDialog(playerid, DIALOG_TURFLIST, DIALOG_STYLE_MSGBOX, "Turf list", string, "Trang tiep", "Huy");
	return 1;
}
CMD:rules(playerid, params[])
{
	return ShowDialogToPlayer(playerid, DIALOG_RULES);
}

CMD:sellmybackpack(playerid, params[])
{
	new giveplayerid, string[128], amount, bpID = GetPlayerBackpackID(playerid);
	if(!PlayerHasBackpack(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " Ban khong co backpack !");
	new bpstored = GetBackpackStored(playerid);
	if(bpstored == 1) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " Ban khong co backpack cua ban! Ban da cat no vao trong nha.");
	else if(bpstored == 2) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " Ban khong co backpack cua ban! Ban da cat no vao trong cop xe.");
	// No loi vc if(PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Administrators are not allowed to sell their backpack!");
	if(sscanf(params ,"ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_LIGHTRED," Su dung: /sellmybackpack [giveplayerid] [price]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Do la gi? Duong nhien ban khong the de nghi cho chinh ban");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " ID nguoi choi khong hop le!");
	if(PlayerHasBackpack(giveplayerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " Nguoi choi do da co Backpack!");
	new bpstored2 = GetBackpackStored(giveplayerid);
    if(bpstored2 == 1) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi do da cat backpack trong/nha!");
	else if(bpstored2 == 2) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi do da cat backpack trong/cop xe!");
	if(1 < amount > 10000000) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Gia ban chi duoi 100.000.000$!");
	if(GetPlayerCash(giveplayerid) < amount) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " Nguoi choi do khong du tien mat de mua Backpack cua ban!");
	if(BackpackInfo[bpID][bCash] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm") || BackpackInfo[bpID][bPot] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm") || BackpackInfo[bpID][bCrack] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm") || BackpackInfo[bpID][bMats] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm"))
	{
		ShowPlayerDialog(playerid, 0 , DIALOG_STYLE_MSGBOX, "Thong bao Backpack", "Ban co chac muon ban Backpack cua minh khi co vat pham tren do khong?\nNeu co thi Enter!", "Okay", "Khong");
		SetPVarInt(playerid, "SellBackpackConfirm", 1);
	    return 1;
	}
	DeletePVar(playerid, "SellBackpackConfirm");
	format(string ,sizeof(string), "* Nguoi choi %s da de nghi ban mua %s cho %s (/chapnhanbackpack) de mua hoac (/denybackpack) neu khong mua", GetPlayerNameEx(playerid) , GetPlayerStorageType(playerid), FormatNumber(amount));
	SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE , string);
	format(string ,sizeof(string) ,"* Ban da de nghi %s mua %s cho %s", GetPlayerNameEx(giveplayerid) ,GetPlayerStorageType(playerid) , FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_ROYALBLUE, string);
	SetPVarInt(giveplayerid, "BackpackSeller", playerid);
	SetPVarInt(giveplayerid, "BackpackPrice", amount);
	SetPVarInt(giveplayerid, "BackpackID", bpID);
	return 1;
}


CMD:backpackhelp(playerid) {
    new string[3000];
    strcat(string, "\t\t** {00AA00}Dynamic Backpack System Version 1 of New City Roleplay{FFFFFF} **");
    strcat(string, "\n\n{FF00FF}Information:{FFFFFF}");
    strcat(string, "\n Bay gio ban co the luu vat pham trong backpack! Nhu la Cash/Pot/Crack/Mats/Weapons xem no ngay bay gio.");
    strcat(string, "\n Va ban phai ONLINE 5 tieng den 10 tieng moi co the ban backpack");
    strcat(string, "\n 3 Types of Backpack: {FFFFFF}Backpack Nho{FF9500}Backpack Vua{0000FF}Large Backpack");
    strcat(string, "\n\n\n~ {FFFFFF}Backpack Nho LIMIT{FFFFFF} ~");
    format(string, sizeof(string), "%s\n\t\
		 -Max Cash : {FFFF00}%s Cash{FFFFFF}\n\t\
		 -Max Pots: {FFFF00}%sg Pots{FFFFFF}\n\t\
		 -Max Cracks: {FFFF00}%sg Cracks{FFFFFF}\n\t\
		 -Max Materials: {FFFF00}%s Materials{FFFFFF}\n\t\
		 -Max Weapons: {FFFF00}2 Weapons{FFFFFF}",
		 string,
		 number_format(sbackpacklimit[LIMIT_CASH]),
		 number_format(sbackpacklimit[LIMIT_POT]),
		 number_format(sbackpacklimit[LIMIT_CRACK]),
		 number_format(sbackpacklimit[LIMIT_MATS])
	);
 	strcat(string, "\n\n\n~ {FF9500}Medium Backpack LIMIT{FFFFFF} ~");
    format(string, sizeof(string), "%s\n\t\
		 -Max Cash : {FFFF00}%s Cash{FFFFFF}\n\t\
		 -Max Pots: {FFFF00}%sg Pots{FFFFFF}\n\t\
		 -Max Cracks: {FFFF00}%sg Cracks{FFFFFF}\n\t\
		 -Max Materials: {FFFF00}%s Materials{FFFFFF}\n\t\
		 -Max Weapons: {FFFF00}3 Weapons{FFFFFF}",
		 string,
		 number_format(mbackpacklimit[LIMIT_CASH]),
		 number_format(mbackpacklimit[LIMIT_POT]),
		 number_format(mbackpacklimit[LIMIT_CRACK]),
		 number_format(mbackpacklimit[LIMIT_MATS])
	);
	strcat(string, "\n\n\n~ {0000FF}Large Backpack LIMIT{FFFFFF} ~");
    format(string, sizeof(string), "%s\n\t\
		 -Max Cash : {FFFF00}%s Cash{FFFFFF}\n\t\
		 -Max Pots: {FFFF00}%sg Pots{FFFFFF}\n\t\
		 -Max Cracks: {FFFF00}%sg Cracks{FFFFFF}\n\t\
		 -Max Materials: {FFFF00}%s Materials{FFFFFF}\n\t\
		 -Max Weapons: {FFFF00}5 Weapons{FFFFFF}",
		 string,
		 number_format(lbackpacklimit[LIMIT_CASH]),
		 number_format(lbackpacklimit[LIMIT_POT]),
		 number_format(lbackpacklimit[LIMIT_CRACK]),
		 number_format(lbackpacklimit[LIMIT_MATS])
	);
	strcat(string, "\n\n{9ACD32}Commands List:{FFFFFF}");
    strcat(string, "\n/backpackopen (/bpopen)\t/sellmybackpack\t/accepbackpack\t/denybackpack");
    if(PlayerInfo[playerid][pAdmin] >= 8) strcat(string, "\n{FF3080}Admin Commands List:{FFFFFF}\n/givebackpack\t/removebackpack\t/editbackpack");
    strcat(string, "\n\n\n{FFFFFF}Thong bao:\n\t{FF8000} Day la ver1 se co thong bao cap nhat them nhung tinh nang moi ?? Vui ve tan huong va cho updates :)");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "* {007FFF}Dynamic Backpack System v1.0 of New City Roleplay *", string, "Like", "Like");
	return 1;
}

CMD:acceptbackpack(playerid, params[])
{
	if(!GetPVarType(playerid, "BackpackSeller")) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Khong ai giao dich voi ban!");
	new sellerid = GetPVarInt(playerid, "BackpackSeller"), price = GetPVarInt(playerid, "BackpackPrice"), index = GetPVarInt(playerid, "BackpackID");
	if(PlayerHasBackpack(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban da co backpack roi!");
	if(!IsPlayerConnected(sellerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi ban cho ban backpack da mat ket noi!");
	if(!PlayerHasBackpack(sellerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi giao dich khong co backpack!");
	if(price > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong co du tien de mua backpack");
	if(!GetPVarType(playerid, "BuyBackpackConfirm")) return SetPVarInt(playerid, "BuyBackpackConfirm", 1), ShowPlayerDialog(playerid, 0 , DIALOG_STYLE_MSGBOX, "Thong bao backpack!", "Ban co chac muon mua backpack nay? Neu co thi Enter", "Okay", "Khong");
	DeletePVar(playerid, "BuyBackpackConfirm");
	new string[128];
	format(string ,sizeof(string), "* Nguoi choi %s da mua thanh cong %s cho %s", GetPlayerNameEx(playerid) , GetPlayerStorageType(sellerid), FormatNumber(price));
	SendClientMessageEx(sellerid, COLOR_ROYALBLUE, string);
	format(string, sizeof(string), "* Ban da mua thanh cong %s's %s for %s", GetPlayerNameEx(sellerid), GetPlayerStorageType(sellerid) , FormatNumber(price));
	SendClientMessageEx(playerid, COLOR_ROYALBLUE, string);
	GivePlayerCash(playerid, -price);
	GivePlayerCash(sellerid, price);
	BackpackInfo[index][bBackpackOwner] = GetPlayerSQLId(playerid);
	if(IsPlayerAttachedObjectSlotUsed(sellerid, 9)) RemovePlayerAttachedObject(sellerid, 9);
    if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
    switch(BackpackInfo[index][bBackpackSize]) {
        case 1: SetPlayerAttachedObject(playerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1);
	}
	backpackid[sellerid] = MAX_BACKPACKS+1;
	backpackid[playerid] = index;
	SavePlayerVariables(sellerid);
	SavePlayerVariables(playerid);
	DeletePVar(playerid, "BackpackSeller");
	DeletePVar(playerid, "BackpackPrice");
	DeletePVar(playerid, "BackpackID");
	return 1;
}
CMD:denybackpack(playerid, params[])
{
    new string[128], sellerid = GetPVarInt(playerid, "BackpackSeller"), price = GetPVarInt(playerid, "BackpackPrice");
    if(!GetPVarType(playerid, "BackpackSeller")) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Khong ai de nghi mua!");
    format(string ,sizeof(string), "* Nguoi choi %s da tu choi de nghi mua cua ban %s cho %s", GetPlayerNameEx(playerid) , GetPlayerStorageType(sellerid), FormatNumber(price));
	SendClientMessageEx(sellerid, COLOR_ROYALBLUE, string);
	format(string, sizeof(string), "* Ban da tu choi de nghi cua %s's %s cho %s", GetPlayerNameEx(sellerid), GetPlayerStorageType(sellerid) , FormatNumber(price));
	SendClientMessageEx(playerid, COLOR_ROYALBLUE, string);
	DeletePVar(playerid, "BackpackSeller");
	DeletePVar(playerid, "BackpackPrice");
	DeletePVar(playerid, "BackpackID");
	return 1;
}
CMD:removebackpack(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
    new giveplayerid, string[128];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Su dung: /removebackpack [playerid]");
	if(!PlayerHasBackpack(giveplayerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "That player doesn't have any Backpack!");
	format(string ,sizeof(string), "* Admin %s has removed your %s and all items except weapons has been added to your stats", GetPlayerNameEx(playerid), GetPlayerStorageType(giveplayerid));
	SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE, string);
	format(string ,sizeof(string), "* You have removed Player %s's %s and all items except gun in the Backpack has been added to their stats", GetPlayerNameEx(giveplayerid), GetPlayerStorageType(giveplayerid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	new bpID = GetPlayerBackpackID(giveplayerid);
	if(BackpackInfo[bpID][bCash] != 0) GivePlayerCash(giveplayerid, BackpackInfo[bpID][bCash]);
	if(BackpackInfo[bpID][bPot] != 0) PlayerInfo[giveplayerid][pWeed] += BackpackInfo[bpID][bPot];
	if(BackpackInfo[bpID][bCrack] != 0) PlayerInfo[giveplayerid][pCocaine] += BackpackInfo[bpID][bCrack];
	if(BackpackInfo[bpID][bMats] != 0) PlayerInfo[giveplayerid][pMaterials] += BackpackInfo[bpID][bMats];
	BackpackInfo[bpID][bCash] = 0;
	BackpackInfo[bpID][bPot] = 0;
	BackpackInfo[bpID][bCrack] = 0;
	BackpackInfo[bpID][bMats] = 0;
	BackpackInfo[bpID][bGun][0] = 0;
	BackpackInfo[bpID][bGun][1] = 0;
	BackpackInfo[bpID][bGun][2] = 0;
	BackpackInfo[bpID][bGun][3] = 0;
	BackpackInfo[bpID][bGun][4] = 0;
	BackpackInfo[bpID][bBackpackOwner] = -1;
	SavePlayerVariables(giveplayerid);
	if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 9)) RemovePlayerAttachedObject(giveplayerid, 9);
	backpackid[giveplayerid] = MAX_BACKPACKS+1;
	return 1;
}

CMD:bpopen(playerid) return callcmd::backpackopen(playerid);
CMD:backpackopen(playerid) {
	if(!PlayerHasBackpack(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban khong co bat ky backpack nao");
	new bpstored = GetBackpackStored(playerid);
	if(bpstored == 1) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " Ban khong co backpack cua ban! Ban vua cat trong nha cua minh!");
	else if(bpstored == 2) return SendClientMessageEx(playerid, COLOR_LIGHTRED, " Ban khong co backpack cua ban! Ban vua cat trong cop xe cua minh!");
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dat backpack cua ho tren san-.. khi no mo ra.", GetPlayerRPName(playerid));
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
 	ShowPlayerBackpack(playerid);
 	return 1;
}
CMD:editbackpack(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 8)
        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay!.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Su dung: /editbackpack [playerid]");
 	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi choi do khong truc tuyen");
 	if(!PlayerHasBackpack(giveplayerid)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nguoi cho do khong co bat ky backpack nao!");
 	new bpID = GetPlayerBackpackID(giveplayerid);
 	new bpstored = GetBackpackStored(giveplayerid);
 	if(bpstored == 1) SendClientMessageEx(playerid, COLOR_WHITE, "NOTE: Nguoi choi do da cat backpack vao trong nha cua ho");
	else if(bpstored == 2) SendClientMessageEx(playerid, COLOR_WHITE, "NOTE: Nguoi choi do da cat backpack vao trong xe cua ho");
 	SetPVarInt(playerid, "GetPlayerID", giveplayerid);
 	ShowEditBackpackDialog(playerid, bpID);
	return 1;
}
CMD:givebackpack(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] < 8)
        return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Khong co quyen su dung lenh nay.");
    new giveplayerid, bsize, bpsize[32], string[128];
    if(sscanf(params,"ud", giveplayerid, bsize))
    {
		 SendClientMessageEx(playerid, COLOR_LIGHTRED, "Su dung: /givebackpack [playerid] [backpacksize]");
		 SendClientMessageEx(playerid, COLOR_LIGHTRED, "Kich thuoc san co: ( 1 - Backpack Nho | 2 - Backpack Vua | 3 - Backpack To )");
		 return 1;
	}
	if(bsize < 1 || bsize > 3) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Invalid Backpack Size!");
	if(IsPlayerConnected(giveplayerid))
	{
		printf("Step 1");
	    switch(bsize)
	    {
		    case 1: format(bpsize,sizeof(bpsize), "Backpack Nho");
		    case 2: format(bpsize,sizeof(bpsize), "Backpack Vua");
		    case 3: format(bpsize,sizeof(bpsize), "Backpack To");
		}
	    new bpID = GetPlayerBackpackID(giveplayerid);
		if(PlayerHasBackpack(giveplayerid) && BackpackInfo[bpID][bBackpackSize] == bsize)
		{
			format(string,sizeof(string), "Nguoi choi %s da co mot %s!",GetPlayerNameEx(giveplayerid), GetPlayerStorageType(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
			//printf("Step 1.1");
			return 1;
		}
		else if(PlayerHasBackpack(giveplayerid) && BackpackInfo[bpID][bBackpackSize] != bsize)
		{
		    new bpstored = GetBackpackStored(giveplayerid);
		    format(string, sizeof(string), "* Ban da thiet lap %s's %s den %s", GetPlayerNameEx(giveplayerid) ,GetPlayerStorageType(giveplayerid),bpsize);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    if(bpstored == 1 || bpstored == 2) SendClientMessageEx(playerid, COLOR_LIGHTRED, "NOTE: Nguoi cho do da cat backpack trong xe hoac trong nha!");
			format(string,sizeof(string), "* Admin %s da thiet lap ban %s to %s", GetPlayerNameEx(playerid), GetPlayerStorageType(giveplayerid), bpsize);
			SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE, string);
			BackpackInfo[bpID][bBackpackSize] = bsize;
		    SaveBackpack(bpID);
		    LoadPlayerBackpack(giveplayerid);
		    return 1;
		}
		else if(!PlayerHasBackpack(giveplayerid))
		{
			printf("Step 1.3");
			new query[230];
			for(new index = 0; index<MAX_BACKPACKS; index++)
			{
			    if(BackpackInfo[index][bBackpackOwner] == -1)
			    {
			        BackpackInfo[index][bBackpackOwner] = GetPlayerSQLId(giveplayerid);
			        BackpackInfo[index][bBackpackSize] = bsize;
			        if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 9)) RemovePlayerAttachedObject(giveplayerid, 9);
                    switch(BackpackInfo[index][bBackpackSize])
					{
                        case 1: SetPlayerAttachedObject(giveplayerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1, 0x00AA00FF);
                    	case 2: SetPlayerAttachedObject(giveplayerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1, 0xFFFF9500);
                     	case 3: SetPlayerAttachedObject(giveplayerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1, 0xFFFF00EA);
                	}
 					printf("Step 1.4");
					backpackid[giveplayerid] = index;
					mysql_format(connectionID, query, sizeof(query), "INSERT INTO `playerbackpack` (`BackpackOwner`) VALUES ('%d')", GetPlayerSQLId(giveplayerid));
					mysql_tquery(connectionID, query);
					printf("Step 1.5");
					format(string, sizeof(string), "* Ban da thiet lap %s's %s den %s", GetPlayerNameEx(giveplayerid) ,GetPlayerStorageType(giveplayerid),bpsize);
		    		SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string,sizeof(string), "* Admin %s da cho ban %s ", GetPlayerNameEx(playerid), GetPlayerStorageType(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE, string);
					index = MAX_BACKPACKS;
				}
			}
			printf("Buoc 2");
		}
		printf("Buoc 3");
	}
	else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ID nguoi choi khong hop le!");
	return 1;
}

//-----------------[PM system by EDDIEWYATT]----------------
CMD:pm(playerid, params[])
{
    new targetid, msg[128];
    if(IsPlayerConnected(playerid))
	{
		if(isPMOff[playerid])
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da tat PM. Su dung /togpm");

	    if(sscanf(params, "us[128]", targetid, msg)) return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /pm <playerid> <message>");
		{
		    if(targetid == playerid)
	        {
	            return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the gui cho chinh ban.");
	        }

	        if(isPMOff[targetid])
	        	return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi do da tat PM.");

			if(IsPlayerConnected(targetid))
			{
			    new targetname[125];
				targetname = GetPlayerNameEx(targetid);
				SendClientMessageEx(targetid, COLOR_NAVYBLUE, "(( PM tu %s: %s ))", GetPlayerRPName(playerid), msg);
	            SendClientMessageEx(playerid, COLOR_NAVYBLUE, "(( PM den %s: %s ))", GetPlayerRPName(targetid), msg);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "Nguoi choi da ngoai tuyen!");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai dang nhap truoc khi su dung lenh nay!");
}

CMD:togpm(playerid){

	if(isPMOff[playerid]){
		isPMOff[playerid] = false;
		return SendClientMessage(playerid, COLOR_SYNTAX, "Ban da bat PM.");
	}
	else{
		isPMOff[playerid] = true;
		return SendClientMessage(playerid, COLOR_SYNTAX, "Ban da tat PM.");
	}
}

CMD:getpositioninfo(playerid){

	if(PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pDeveloper])
		return SendClientMessage(playerid, COLOR_SYNTAX, "Khong co quyen su dung lenh nay!");

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid, COLOR_SYNTAX, "Khong co quyen su dung lenh nay.");

	new
		Float:tempPos[3],
		interior, world;

	GetPlayerPos(playerid, tempPos[0], tempPos[1], tempPos[2]);
	GetPlayerInterior(interior);
	GetPlayerVirtualWorld(world);

	SendClientMessageEx(playerid, COLOR_SYNTAX, "X: %f Y: %f Z: %f | Int: %d | World: %d", tempPos[0], tempPos[1], tempPos[2], interior, world);

	return 1;
}

CMD:windows(playerid, params[])
{
	new str[128];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai o trong phuong tien de su dung.");
	if(!VehicleHasWindows(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_LIGHTRED, "Phuong tien nay khong co cua so.");
	if(PlayerInfo[playerid][pCuffed]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong the lam dieu nay khi dang bi cong.");
	if(VehicleInfo[GetPlayerVehicleID(playerid)][vWindowsOpen] == false)
	{
		VehicleInfo[GetPlayerVehicleID(playerid)][vWindowsOpen] = true;
		format(str, sizeof(str), "* %s winds down the vehicles windows.", GetPlayerRPName(playerid));
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, str);
		SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 0, 0, 0, 0);
	}
	else
	{
		VehicleInfo[GetPlayerVehicleID(playerid)][vWindowsOpen] = false;
		format(str, sizeof(str), "* %s winds up the vehicles windows.", GetPlayerRPName(playerid));
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, str);
		SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 1, 1, 1, 1);
	}
	return 1;
}

CMD:version(playerid, params[]){

	new str[500];

	format(str, sizeof(str),
	   "* Added /Vehicle: /seatbelt, /checkmybelt, /checkbelt Systems\n\
		* Bugs Fixes\n\
		* New Mappings\n\
		* Fixed \"Report\" Aduty\n\
		* Removed /Crate System\n\
		* New LSPD Interior\n\
		* New CityHall Interior\n\
		* New Hospital Interior\n\
		* New Jail Spawn\n\
		* Added Mask System\n\
		* Server can run both versions of Samp 0.3.7+Dl Enjoy! Next Updates will be coming Soon!");

	ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, SERVER_REVISION, str, "Ok", "No");

	return 1;
}

//Seatbelt

CMD:sb(playerid, params[])
{
	return callcmd::seatbelt(playerid, params);
}

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "Ban khong ngoi trong phuong tien!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
        ExBJck[playerid] = 1;
        if(IsPlayerInAnyVehicle(GetPlayerVehicleID(playerid)))
		{
		    SetPlayerAttachedObject(playerid, 7, 18645, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s Dua tay lay non bao hiem, va mang no vao", GetPlayerRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Ban da mang non bao hiem.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s Dua tay lay day an toan, va that no vao.", GetPlayerRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Ban da that day an toan.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 1)
	{
        ExBJck[playerid] = 0;
		if(IsPlayerInAnyVehicle(GetPlayerVehicleID(playerid)))
		{
		    RemovePlayerAttachedObject(playerid, 7);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s Dua tay lay non bao hiem, va thao no ra.", GetPlayerRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Ban da mang non bao hiem.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s Dua tay lay day an toan, va thao no ra.", GetPlayerRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Ban da coi day an toan.");
        }
    }
    return 1;
}

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "i", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Su dung: /checkbelt [playerid]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SendClientMessageEx(playerid,COLOR_LIGHTRED,"Nguoi choi do khong co ngoi trong phuong tien!");
        return 1;
    }
    if(!IsPlayerConnected(giveplayerid) || !IsPlayerInRangeOfPlayer(playerid, giveplayerid, 5.0))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "Nguoi choi da bi mat ket noi ");
	}

    new stext[4];
    if(ExBJck[giveplayerid] == 0)
	{
		stext = "off";
	}
    else
	{
		stext = "on";
	}
    if(IsPlayerInAnyVehicle(GetPlayerVehicleID(playerid)))
	{
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s Nhin %s, Kiem tra xem ho co deo mu bao hiem hay khong.", GetPlayerRPName(playerid),GetPlayerRPName(giveplayerid));
        SendClientMessageEx(playerid,COLOR_WHITE, "%s's non bao hiem hien dang %s.", GetPlayerRPName(giveplayerid) , stext);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s Peers %s, Kiem tra xem ho co that dya an toan hay khong.", GetPlayerRPName(playerid),GetPlayerRPName(giveplayerid));
    	SendClientMessageEx(playerid,COLOR_WHITE, "%s's day an toan hien dang %s.", GetPlayerRPName(giveplayerid) , stext);
    }
    return 1;
}

CMD:checkmybelt(playerid, params[])
{
    if(ExBJck[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Ban da mang that lung.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "That lung an toan cua ban dang thao.");
	}
	return 1;
}

CMD:twt(playerid, params[])
{
	return callcmd::tweet(playerid, params);
}

CMD:tweet(playerid, params[])
{
 	new string[64];

 	if(isnull(params))
 	{
     	return SendClientMessage(playerid, COLOR_WHITE, "Su dung: /(twt) or /tweet [IC]");
	}
	if(!enabledGlobal && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Kenh tweet hien dang TAT.");
	}
	if(gettime() - PlayerInfo[playerid][pLastGlobal] < 3)
	{
	    return SendClientMessageEx(playerid, COLOR_LIGHTRED, "Ban chi co the noi trong 3 giay mot lan. Vui long doi %i mot lat.", 3 - (gettime() - PlayerInfo[playerid][pLastGlobal]));
	}
    if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0) && PlayerInfo[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "", color >>> 8, PlayerInfo[playerid][pCustomTitle]);
	}
	else if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0) {
	  format(string, sizeof(string), "", GetAdminRank(playerid));
	}
	else if(PlayerInfo[playerid][pHelper] > 0) {
	   format(string, sizeof(string), "", GetHelperRank(playerid));
	}
	else if(PlayerInfo[playerid][pFormerAdmin]) {
	    string = "";
	}
	else if(PlayerInfo[playerid][pVIPPackage] > 0) {
	    format(string, sizeof(string), "", GetVIPRank(PlayerInfo[playerid][pVIPPackage]));
	}
	else if(PlayerInfo[playerid][pLevel] >= 3) {
	    format(string, sizeof(string), "", PlayerInfo[playerid][pLevel]);
	}
	else {
	       string = "Newbie";
	}

	foreach(new i : Player)
	{
	  	if(!PlayerInfo[i][pToggleGlobal])
	  	{
	      	if(strlen(params) > MAX_SPLIT_LENGTH)
	    	{
	        	SendClientMessageEx(i, COLOR_WHITE, "{1FAAF0}Tweet{F0F1F0}%s %s: %.*s...", string, GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	        	SendClientMessageEx(i, COLOR_WHITE, "{1FAAF0}Tweet{F0F1F0%s %s: ...%s ", string, GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
	   		}
	   		else
	   		{
	       		SendClientMessageEx(i, COLOR_WHITE, "{1FAAF0}Tweet{F0F1F0}%s %s: %s ", string, GetPlayerRPName(playerid), params);
	   		}
	  	}
 	}

	if(PlayerInfo[playerid][pAdmin] < 2)
 	{
 		PlayerInfo[playerid][pLastGlobal] = gettime();
 	}
 	return 1;
}


CMD:huyhaican(playerid, params[]) {
    if(GetPVarInt(playerid, "DangHaiCan") != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dang hai can sa.");
    KillTimer(CheckCSTimer[playerid]);
    KillTimer(HaiCanSa[playerid]);
    SendClientMessage(playerid, COLOR_LIGHTRED, "Ban da huy hai can sa thanh cong.");
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    DeletePVar(playerid, "DangHaiCan"); 
    CSInfo[GetPVarInt(playerid, "CS_Hai")][CanSaKhaiThac] = 0;
    DeletePVar(playerid, "CS_Hai");
    return 1;
}
CMD:haicansa(playerid, params[]) {
    if(PlayerInfo[playerid][pHours] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban phai hoat dong tren 3 gio.");
    if(GetPVarInt(playerid, "DangHaiCan") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban dang hai can sa.");
    new check;
    for(new i = 1; i < 50 ; i++) {
        if(CSInfo[i][CanSaSet] == 1) {
        //    if(!IsPlayerInRangeOfPoint(playerid, 2, CSInfo[i][CSPostion][0] ,CSInfo[i][CSPostion][1] ,CSInfo[i][CSPostion][2])) return SendClientMessage(playerid, COLOR_GREY, "Ban phai lai o gan cay can sa moi co the hai");
            if(IsPlayerInRangeOfPoint(playerid, 2, CSInfo[i][CSPostion][0] ,CSInfo[i][CSPostion][1] ,CSInfo[i][CSPostion][2])) {
                if(CSInfo[i][CanSaKhaiThac] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Cay can sa nay dang co nguoi thu hoach.");
                ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
                TimerHai[playerid] = 0;
                SetPVarInt(playerid, "DangHaiCan", 1);
                SendClientMessage(playerid, COLOR_LIGHTRED, "**{ffffff} Ban dang bat dau hai can vui long doi...");
                HaiCanSa[playerid] = SetTimerEx("HaiXong", 15000, 0, "du", playerid,i);
                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
                TogglePlayerControllable(playerid,0);
                CSInfo[i][CanSaKhaiThac] = 1;
                CSInfo[i][PlayerKhaiThacCS] = playerid;
                SetPVarInt(playerid, "CS_Hai", i);
                GetPlayerPos(playerid, PlayerInfo[playerid][pPosHC][0],PlayerInfo[playerid][pPosHC][1],PlayerInfo[playerid][pPosHC][2]);
                break ;
            }
            else {
            	check = 2;
            }
        }
    }
    if(check == 2) 
    {
    	SendClientMessageEx(playerid, COLOR_LIGHTRED,"Ban khong o gan cay can sa khong the hai.");
    }
    return 1;
}


forward CFeeding(playerid); //tao mot ham` mo rong
public CFeeding(playerid)
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "[Cong viec]{FFFFFF} Ban da cho Bo Shorthorn an, hien tai Bo Shorthorn da no.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "[Cong viec]{FFFFFF} Tien luong cua ban se duoc tinh vao khoan luong tiep theo.");
	Cgetfood[playerid] = 0;
	FeedingCow[playerid] = 0;
	AddToPaycheck(playerid, 5);

	RemovePlayerAttachedObject(playerid, 0);
	TogglePlayerControllable(playerid, 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	ClearAnimations(playerid);
	return 1;
}

//Lenh cho bo ngu an co
CMD:farmer(playerid, params[])
{
	new choice[20];
	for(new i;i<MAX_COWS;i++)
	{
		if(FarmerDuty[playerid] == 0)
		{
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong dang trong gio lam viec.");
		}
		if(sscanf(params, "s[20]", choice))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Su dung: /farmer [tuy chon]");
			SendClientMessage(playerid, COLOR_WHITE, "Tuy chon: Laythucan, Choan");
			return 1;
		}
		if(!strcmp(choice, "laythucan", true)) //lay thuc an (lua')
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, -86.0914, -31.2349, 3.1094))
			{
				if(Cgetfood[playerid] == 0)
				{
					Cgetfood[playerid] = 1;
					SetPlayerAttachedObject(playerid, 0, 2901, 6, 0.0000, 0.0459, -0.3159, 0.0000, 91.7999, -25.6000, 1.0000, 1.0000, 1.0000, 0xFFFFFFFF, 0xFFFFFFFF);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Cong viec]{FFFFFF} Ban da lay mot bo thuc an cho Bo Shorthorn, hay mang den va cho bo an.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Cong viec]{FFFFFF} Neu muon vut bo thuc an di, hay su dung /drop [thucan].");
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Ban khong o noi lay thuc an cho Bo Shorthorn.");
		}
		else if(!strcmp(choice, "choan", true)) // cho Bo ngu an
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, Cows[i][cPos_X], Cows[i][cPos_Y], Cows[i][cPos_Z]))
			{
				if(Cgetfood[playerid] > 0 && FeedingCow[playerid] == 0)
				{
					FeedingCow[playerid] = 1;
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("CFeeding", 15000, 0, "d", playerid);
					ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_loop",4.1,1,0,0,0,0,1);
				}
			}
		}
	}
	return 1;
}
/*forward DCC_OnChannelMessage(DCC_Channel:channel, DCC_User:author, const message[]);
forward SendDiscordMessage(channel[], const fmat[], va_args<>);

public SendDiscordMessage(channel[], const fmat[], va_args<>)
{
    new str[145];
    va_format(str, sizeof (str), fmat, va_start<2>);
    BotChannel = DCC_FindChannelById(channel);
    return DCC_SendChannelMessage(BotChannel, str);
}
public DCC_OnChannelMessage(DCC_Channel:channel, DCC_User:author, const message[])
{
    new channel_name[100 + 1];
    if(!DCC_GetChannelName(channel, channel_name))
        return 0;

    new user_name[32 + 1];
    if (!DCC_GetUserName(author, user_name))
        return 0;

    if(channel != BotChannel) return 0;
    new str[145];
    format(str, sizeof str, "{667aca}[Discord/%s] %s:{ffffff} %s", channel_name, user_name, message);
    for(new i = 0; i < MAX_PLAYERS; i++) {
    if (DiscordStats[i]==0) continue;
    SendClientMessage(i, -1, str); }

    return 1;
}
*/
// end of commands
// These includes must be at the bottom always //
#include "./inc/cwspeedo.inc"
//#include "./inc/discord_connector.inc"
#include "./inc/mappings/_core.inc"