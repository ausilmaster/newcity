
//CMD:mmhelp(playerid, params[]) return callcmd::graphichelp(playerid, params);
CMD:graphichelp(playerid, params[])
{
	if(PlayerInfo[playerid][pGraphic] > 0)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "____________________________________________");
		if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_REGULAR)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*1* Graphics Designer: /(g)raphic(c)hat /designers");
		}
		else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_SENIOR)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*2* Video Editor: /(g)raphic(c)hat /designers");
		}
		else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_MANAGER)
		{
			SendClientMessage(playerid, COLOR_WHITE, "*3* Graphic Manager: /(g)raphic(c)hat /designers /makedesigner");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this commands");
	}
	return 1;
}

CMD:graphicchat(playerid, params[])
{
	if(PlayerInfo[playerid][pGraphic] >= 1)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_REGULAR) str = "Graphics Designer";
			else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_SENIOR) str = "Video Editor";
			else if(PlayerInfo[playerid][pGraphic] == GRAPHICRANK_MANAGER) str = "Graphic Manager";

			format(str, sizeof(str), "** %s %s: %s **", str, GetPlayerRPName(playerid), msg);
			SendGraphicMessage(0xFA58ACFF, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(g)raphic(c)hat [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:makedesigner(playerid, params[])
{
	if(PlayerInfo[playerid][pGraphic] < GRAPHICRANK_MANAGER && PlayerInfo[playerid][pAdmin] < 8) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new id, rank[24], str[128];
	if(sscanf(params, "us[24]", id, rank))
	{
		SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /makedesigner [playerid] [rank]");
		SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} 'None' 'Regular' 'Editor' or 'Manager'");
	}
	else
	{
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, COLOR_GREY, "{FF0000}Error:{FFFFFF} That player isn't connected.");
		if(strcmp(rank, "none", true) == 0 || strcmp(rank, "regular", true) == 0 || strcmp(rank, "editor", true) == 0 || strcmp(rank, "manager", true) == 0)
		{
			if(strcmp(rank, "none", true) == 0)
			{
                SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has removed %s's status as a Designer.", GetPlayerRPName(playerid), GetPlayerRPName(id));
				SendClientMessage(id, COLOR_AQUA, "You are no longer a Designer.");
				PlayerInfo[id][pGraphic] = GRAPHICRANK_NONE;
				format(str, sizeof(str), "You removed %s from the Designer team.", GetPlayerRPName(id));
				SendClientMessage(playerid, COLOR_AQUA, str);
			//	if(PlayerInfo[playerid][pLevel] >= 2)PlayerInfo[id][pTag] = NTAG_PLAYER;
			//	else PlayerInfo[id][pTag] = NTAG_NEWBIE;
				return 1;
			}
			if(strcmp(rank, "regular", true) == 0)
			{
			//	PlayerInfo[id][pTag] = NTAG_GRAPHIC;
				PlayerInfo[id][pGraphic] = GRAPHICRANK_REGULAR;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetPlayerRPName(id), rank, GetPlayerRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetPlayerRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
			if(strcmp(rank, "editor", true) == 0)
			{
			//	PlayerInfo[id][pTag] = NTAG_GRAPHIC;
				PlayerInfo[id][pGraphic] = GRAPHICRANK_SENIOR;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetPlayerRPName(id), rank, GetPlayerRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetPlayerRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
			if(strcmp(rank, "manager", true) == 0)
			{
			//	PlayerInfo[id][pTag] = NTAG_MANAGERGRAPHIC;
				PlayerInfo[id][pGraphic] = GRAPHICRANK_MANAGER;
				format(str, sizeof(str), "You have been given the status of a %s Designer.", rank);
				SendClientMessage(id, COLOR_AQUA, str);
				SendAdminMessage(COLOR_YELLOW, "{FF0000}AdmWarning{FFFFFF}: %s has been given the status of a %s Designer by %s", GetPlayerRPName(id), rank, GetPlayerRPName(playerid));
				format(str, sizeof(str), "You gave %s the status of a %s Designer.", GetPlayerRPName(id), rank);
				SendClientMessage(playerid, COLOR_AQUA, str);
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, "Invalid rank specified.");
	}
	return 1;
}

CMD:ap(playerid, params[])
{
	if(PlayerInfo[playerid][pAdminPersonnel] || PlayerInfo[playerid][pAdmin] >= 8)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [AP]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendAPMessage(COLOR_AQUA, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(a)dmin(p)ersonnel [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}
CMD:dga(playerid, params[])
{
	if(PlayerInfo[playerid][pGameAffairs] >= 1 || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [DGA]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendDGAMessage(COLOR_GLOBAL, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /dga [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:wd(playerid, params[])
{
	if(PlayerInfo[playerid][pWebDev] >= 1 || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [DGA]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendWDMessage(COLOR_GLOBAL, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /dga [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:fm(playerid, params[])
{
    if(PlayerInfo[playerid][pFactionMod] || PlayerInfo[playerid][pGameAffairs] || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [FM]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendFMMessage(COLOR_BLUE, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(f)action(m)managment [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}
CMD:gm(playerid, params[])
{
    if(PlayerInfo[playerid][pGangMod] || PlayerInfo[playerid][pGameAffairs] || PlayerInfo[playerid][pAdmin] >= 7)
	{
		new msg[128];
		new str[128];
		if(!sscanf(params, "s[128]", msg))
		{
			format(str, sizeof(str), "** [GM]{FFFFFF} %s: %s **", GetPlayerRPName(playerid), msg);
			SendGMMessage(COLOR_GREEN, str);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "{00BFFF}Usage:{FFFFFF} /(g)ang (m)managment [message]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this chat.");
	}
	return 1;
}

CMD:taxhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREY, "The tax is currently set to {33CCFF}%i percent", gTax);
	return 1;
}
CMD:paycheck(playerid, params[])
{
	if(PayCheckCode[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "There is no paycheck to sign. Please wait for the next paycheck.");

 	new string[128];
	format(string, sizeof(string), "Check code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
	ShowPlayerDialog(playerid, DIALOG_PAYCHECK, DIALOG_STYLE_INPUT, "Sign check", string, "Sign check","Cancel");
    return 1;
}

CMD:skate(playerid,params[])
{
	if(!PlayerInfo[playerid][pSkates])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You do not own any skates.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	    SetPlayerArmedWeapon(playerid,0);
        if(!PlayerInfo[playerid][pSkating])
		{
            PlayerInfo[playerid][pSkating] = true;
            DestroyDynamicObject(PlayerInfo[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA,"You have equiped your skating gear. Press RMB or Aim Key to skate.");
        }
		else
		{
			PlayerInfo[playerid][pSkating] = false;
            DestroyDynamicObject(PlayerInfo[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA, "You are no longer skating.");
        }
	}
	else SendClientMessage(playerid, COLOR_GREY, "You must not be inside a vehicle.");
 	return 1;
}

CMD:b(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /b [local OOC]");
	}

	format(string, sizeof(string), "%s: (( %s ))", GetPlayerRPName(playerid), params);
	SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	return 1;
}

CMD:s(playerid, params[])
{
	return callcmd::shout(playerid, params);
}

CMD:shout(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(s)hout [text]");
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "shouts: %s!", params);

	format(string, sizeof(string), "%s shouts: %s!", GetPlayerRPName(playerid), params);
	if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s shouts: %s", GetPlayerRPName(playerid), params);
			}
		}
	}
	SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /me [action]");
	}

	if(strlen(params) > MAX_SPLIT_LENGTH)
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s %.*s...", GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** ...%s", params[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s %s", GetPlayerRPName(playerid), params);
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /do [describe]");
	}

	if(strlen(params) > MAX_SPLIT_LENGTH)
	{
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %.*s...", MAX_SPLIT_LENGTH, params);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetPlayerRPName(playerid));
	}
	else
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s (( %s ))", params, GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:stats(playerid, params[])
{
	DisplayStats(playerid);
	return 1;
}

CMD:l(playerid, params[])
{
	return callcmd::low(playerid, params);
}

CMD:low(playerid, params[])
{
	new
	    string[144];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(l)ow [text]");
	}

    SetPlayerBubbleText(playerid, 5.0, COLOR_WHITE, "[low]: %s", params);

	format(string, sizeof(string), "%s says [low]: %s", GetPlayerRPName(playerid), params);
	if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s says [low]: %s", GetPlayerRPName(playerid), params);
			}
		}
	}
	SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
	return 1;
}

CMD:w(playerid, params[])
{
	return callcmd::whisper(playerid, params);
}

CMD:whisper(playerid, params[])
{
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(w)hisper [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be near that player to whisper them.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't whisper to yourself.");
	}
	if(PlayerInfo[targetid][pToggleWhisper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has disabled incoming whispers.");
	}

	SendClientMessageEx(targetid, COLOR_YELLOW, "** Whisper from %s: %s **", GetPlayerRPName(playerid), text);
	SendClientMessageEx(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetPlayerRPName(targetid), text);
	if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s whispers: %s", GetPlayerRPName(playerid), text);
			}
		}
	}

	if(PlayerInfo[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SendClientMessage(targetid, COLOR_WHITE, "** You can use '/rw [message]' to reply to this whisper.");
	}

	PlayerInfo[targetid][pWhisperFrom] = playerid;
	return 1;
}

CMD:rw(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rw [text]");
	}
	if(PlayerInfo[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't been whispered by anyone since you joined the server.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, PlayerInfo[playerid][pWhisperFrom], 5.0) && (!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be near that player to whisper them.");
	}

	SendClientMessageEx(PlayerInfo[playerid][pWhisperFrom], COLOR_YELLOW, "** Whisper from %s: %s **", GetPlayerRPName(playerid), params);
	SendClientMessageEx(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetPlayerRPName(PlayerInfo[playerid][pWhisperFrom]), params);
	return 1;
}

CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no lights which can be turned on.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns on the headlights of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns off the headlights of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:hood(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no hood.");
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in the passenger seat.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s opens the hood of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s closes the hood of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:trunk(playerid, params[])
{
	return callcmd::boot(playerid, params);
}

CMD:boot(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no boot.");
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in the passenger seat.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s opens the boot of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s closes the boot of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}


CMD:registervehicle(playerid, params[])
{
	new vehid;

	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not the police station.");
	}
	if(sscanf(params, "i", vehid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /registervehicle [vehid]");
	}
	if(!VehicleHasEngine(vehid))
	{
		return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no license plate, therefore it can't be registered.");
	}
	if(PlayerInfo[playerid][pFactionRank] < 2)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank 2+ to use this command.");
	}
	if(strcmp(VehicleInfo[vehid][vPlate], "None") != 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "This vehicle is already registered.");
	}
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}
	GetUniquePlate(vehid);
//	GivePlayerCash(playerid, -500);
  //  GameTextForPlayer(playerid, "-$500", 5000, 1);
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s has registered a %s with the plate: %s.", GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);
	printf("%s %s has registered a car %s with the plate: %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);
	SendClientMessageEx(playerid, COLOR_GREY3, "Added plates to vehicle id %d", vehid);
	SendClientMessageEx(playerid, COLOR_GREY3, "Vehicle ID: %d, Plates: %s", vehid, VehicleInfo[vehid][vPlate]);
	foreach(new i: Player)
	{
		if(IsVehicleOwner(i, vehid))
		{
			SendClientMessageEx(i, COLOR_AQUA, "Officer %s has registered your vehicle plate to %s", GetPlayerRPName(playerid), VehicleInfo[vehid][vPlate]);
			break;
		}
	}
//    SendClientMessageEx(VehicleInfo[vehid][vOwnerID], VehicleInfo[vehid][vOwner], Car Dealership: %s has registered your vehicle plate to $i", GetPlayerNameRP(playerid), GetUniquePlate(vehid));
	return 1;
}

CMD:revokeregistration(playerid, params[])
{
	new vehid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599) && GetVehicleModel(GetPlayerVehicleID(playerid)) != 415 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not the police station or in a police car.");
	}
	if(sscanf(params, "i", vehid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /revokeregistration [vehid]");
	}
	if(PlayerInfo[playerid][pFactionRank] < 3)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank 3+ to use this command.");
	}
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has cancelled the registration of a %s with the plate: %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);
	printf("%s %s has cancelled the registration of car %s with the plate: %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetVehicleName(vehid), VehicleInfo[vehid][vPlate]);

	format(VehicleInfo[vehid][vPlate],32, "None");
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehid][vPlate], VehicleInfo[vehid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	ReloadVehicle(vehid);
	SetVehicleToRespawn(vehid);
	return 1;
}


CMD:resetupgrades(playerid, params[])
{
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /resetupgrades [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command resets all of your upgrades and give you back %i upgrade points.", (PlayerInfo[playerid][pLevel] - 1) * 2);
	    return 1;
	}
	if(PlayerInfo[playerid][pLevel] == 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't level 2+.");
	}
	if(PlayerInfo[playerid][pInventoryUpgrade] == 0 && PlayerInfo[playerid][pTraderUpgrade] == 0 && PlayerInfo[playerid][pAddictUpgrade] == 0 && PlayerInfo[playerid][pAssetUpgrade] == 0 && PlayerInfo[playerid][pLaborUpgrade] == 0 && PlayerInfo[playerid][pSpawnHealth] == 50.0 && PlayerInfo[playerid][pSpawnArmor] == 0.0 && PlayerInfo[playerid][pUpgradePoints] == (PlayerInfo[playerid][pLevel] - 1) * 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't spent any upgrade points on upgrades. Therefore you can't reset them.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You own %i/%i houses at the moment. Please sell one of them before using this command.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}
	if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You own %i/%i businesses at the moment. Please sell one of them before using this command.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}
    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) > 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You own %i/%i garages at the moment. Please sell one of them before using this command.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
 	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptResetUpgrades", "i", playerid);
	return 1;
}

CMD:upgrades(playerid, params[])
{
	return callcmd::myupgrades(playerid, params);
}

CMD:myupgrades(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s's upgrades (%i points available) _____", GetPlayerRPName(playerid), PlayerInfo[playerid][pUpgradePoints]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Shealth: %.0f/100]{C8C8C8} You spawn with %.1f health at the hospital after death.", PlayerInfo[playerid][pSpawnHealth], PlayerInfo[playerid][pSpawnHealth]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Sarmor: %.0f/100]{C8C8C8} You spawn with %.1f armor at the hospital after death.", PlayerInfo[playerid][pSpawnArmor], PlayerInfo[playerid][pSpawnArmor]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Inventory: %i/5]{C8C8C8} This upgrade increases the capacity for your items. [/inv]", PlayerInfo[playerid][pInventoryUpgrade]);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Trader: %i/3]{C8C8C8} You save an extra %i percent on all items purchased in businesses.", PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pTraderUpgrade] * 10);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Addict: %i/3]{C8C8C8} You gain an extra %.1f health and armor when using drugs.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
	SendClientMessageEx(playerid, COLOR_YELLOW, "[Asset: %i/4]{C8C8C8} You can own %i houses, %i businesses, %i garages & %i vehicles.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
    SendClientMessageEx(playerid, COLOR_YELLOW, "[Labor: %i/5]{C8C8C8} You earn an extra %i percent cash to your paycheck when working.", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
	return 1;
}

CMD:buylevel(playerid, params[])
{
	new
		exp = (PlayerInfo[playerid][pLevel] * 4),
		cost = (PlayerInfo[playerid][pLevel] + 1) * 5000,
		string[64];

	if(PlayerInfo[playerid][pEXP] < exp)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need %i more respect points in order to level up.", exp - PlayerInfo[playerid][pEXP]);
	}
	if(PlayerInfo[playerid][pCash] < cost)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to have at least %s on hand to buy your next level.", FormatNumber(cost));
	}
	if(PlayerInfo[playerid][pPassport])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have an active passport. You can't level up at the moment.");
	}

	PlayerInfo[playerid][pEXP] -= exp;
	PlayerInfo[playerid][pCash] -= cost;
	PlayerInfo[playerid][pLevel]++;
	PlayerInfo[playerid][pUpgradePoints] += 2;

	if(PlayerInfo[playerid][pLevel] == 3 && PlayerInfo[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}
	if(PlayerInfo[playerid][pLevel] >= 5)
	{
	    AwardAchievement(playerid, "Five stars");
	}
	if(PlayerInfo[playerid][pLevel] >= 10)
	{
	    AwardAchievement(playerid, "Top tier");
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~You are now level %i", PlayerInfo[playerid][pLevel]);
	GameTextForPlayer(playerid, string, 5000, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = exp - %i, cash = cash - %i, level = level + 1, upgradepoints = upgradepoints + 2 WHERE uid = %i", exp, cost, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_GREEN, "You have moved up to level %i. This costed you %s.", PlayerInfo[playerid][pLevel], FormatNumber(cost));
	SendClientMessageEx(playerid, COLOR_GREEN, "You now have %i upgrade points. Use /upgrade to learn more.", PlayerInfo[playerid][pUpgradePoints]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}
CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no fuel left in this vehicle.");
	}
	if(PlayerInfo[playerid][pRefuel] == vehicleid)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    GetVehicleHealth(vehicleid, health);

	    if(health <= 300.0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The engine is totalled and cannot be started until it's repaired.");
	    }

	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns on the engine of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns off the engine of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}


CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;

	if (sscanf(params, "ff", limit, range))
		return SendClientMessage(playerid, COLOR_GREY, "/createspeed [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 150.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The speed limit can't be below 5 or above 150.");

	if (range < 5.0 || range > 50.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The range can't be below 5 or above 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this in range another speed camera.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for speed cameras.");

	SendClientMessageEx(playerid, COLOR_GREY, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

    if (PlayerInfo[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid speed camera ID.");

	Speed_Delete(id);
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully destroyed speed camera ID: %d.", id);
	return 1;
}

CMD:creategangtag(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;
		
    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
    if(PlayerInfo[playerid][pGangRank] < 5)
    {
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SendClientMessage(playerid, COLOR_GREY, "You can only create graffiti points outside interiors.");
	}
    if(PlayerInfo[playerid][pSpraycans] < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any spraycans");
	}
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for graffiti points.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerInfo[playerid][pEditGraffiti] = id;
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:destroygangtag(playerid, params[])
{
	static
	    id = 0;
		
    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
    if(PlayerInfo[playerid][pGangRank] < 5)
    {
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
	}
	if(sscanf(params, "d", id))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "/destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid graffiti ID.");
	}
	Graffiti_Delete(id);
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:gspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You are not near any graffiti point.");

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pGangRank] < 5)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be at least rank 5 to tag a wall");
	}
	if(PlayerInfo[playerid][pSpraycans] <= 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
	}
	ShowPlayerDialog(playerid, DIALOG_GRAFFITICOLOR, DIALOG_STYLE_LIST, "Select Color", "{FFFFFF}White\n{FF0000}Red\n{FFFF00}Yellow\n{33CC33}Green\n{33CCFF}Light Blue\n{FFA500}Orange\n{1394BF}Dark Blue\n{000000}Black", "Select", "Cancel");
	return 1;
}


CMD:buyrack(playerid, params[])
{
	new houseid = GetInsideHouse(playerid);

	if (houseid == -1 || !HasFurniturePerms(playerid, houseid))
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your house interior.");

	if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
		return SendClientMessage(playerid, COLOR_GREY, "/buyrack [confirm] ($1,000 fee)");

	if (Rack_Count(playerid) >= 4)
	    return SendClientMessage(playerid, COLOR_GREY, "Your house can only have up to 4 weapon racks.");

	if (Rack_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command near another rack.");

	if (GetPlayerCash(playerid) < 1000)
	    return SendClientMessage(playerid, COLOR_GREY, "You have insufficient funds for the purchase.");

	new id = Rack_Create(playerid, houseid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for weapon racks.");

    ResetEditing(playerid);

	PlayerInfo[playerid][pEditRack] = id;
	EditDynamicObject(playerid, RackData[id][rackObjects][4]);

    GivePlayerCash(playerid, -1000);
	SendClientMessage(playerid, COLOR_GREY, "You have purchased a weapon rack for $1,000.");
	return 1;
}

CMD:gunrack(playerid, params[])
{
	new id = Rack_Nearest(playerid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any weapon rack.");

	Rack_ShowGuns(playerid, id);
	return 1;
}

CMD:deleterack(playerid, params[])
{
	new
		id = -1,
		houseid = GetInsideHouse(playerid);

	if (houseid == -1 || !HasFurniturePerms(playerid, houseid))
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your house interior.");

	if ((id = Rack_Nearest(playerid)) == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any weapon rack.");

	Rack_Delete(id);
	SendClientMessage(playerid, COLOR_GREY, "You have deleted the weapon rack from your house.");
	return 1;
}

CMD:createrack(playerid, params[])
{
	static
	    id = -1;

    if (!PlayerInfo[playerid][pDynamicAdmin])
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");

	id = Rack_Create(playerid, -1);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for weapon racks.");

    ResetEditing(playerid);
    PlayerInfo[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully created rack ID: %d.", id);
	return 1;
}

CMD:editrack(playerid, params[])
{
	static
	    id = 0;

    if (!PlayerInfo[playerid][pDynamicAdmin])
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "/editrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid rack ID.");

	ResetEditing(playerid);
	PlayerInfo[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendClientMessageEx(playerid, COLOR_GREY, "You are now editing weapon rack ID: %d.", id);
	return 1;
}

CMD:destroyrack(playerid, params[])
{
	static
	    id = 0;

    if (!PlayerInfo[playerid][pDynamicAdmin])
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "/destroyrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid rack ID.");

	Rack_Delete(id);
	SendClientMessageEx(playerid, COLOR_GREY, "You have successfully destroyed weapon rack ID: %d.", id);
	return 1;
}

CMD:help(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/stats, /buylevel, /b, /g, /me, /do, /(o)oc, /(s)hout, /(l)ow, /(w)hisper, /(n)ewbie.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/pay, /id, /time, /report, /upgrade, /charity, /stopmusic, /joinevent, /quitevent.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/dice, /flipcoin, /accent, /helpers, /helpme, /accept, /activity, /skill, /quitjob.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/give, /sell, /toggle, /cancelcp, /afk, /(ad)vertise, /buy, /refuel, /call, /sms.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/clothing, /locate, /frisk, /contract, /number, /boombox, /switchspeedo, /stuck.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/shakehand, /dropgun, /grabgun, /usenarcons, /usecigar, /usedrug, /showid.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/(inv)entory, /guninv, /changename, /drop, /eject, /dicebet, /gangs, /factions.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/calculate, /serverstats, /resetupgrades, /turfs, /lands, /watch, /gps, /fixvw.");
    SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/myupgrades, /unmute, /breakin, /achievements, /buyinsurance, /tie, /untie.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/househelp, /garagehelp, /bizhelp, /jobhelp, /animhelp, /vehiclehelp, /viphelp.");
	SendClientMessage(playerid, COLOR_NAVYBLUE, "[EL:RP Commands] {C8C8C8}/bankhelp, /factionhelp, /ganghelp, /landhelp, /helperhelp.");

	if(PlayerInfo[playerid][pFactionMod])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[FACTION MOD]{C8C8C8} /createfaction, /editfaction, /setfaction, /purgefaction, /createlocker, /movelocker, /removelocker.");
	}
	if(PlayerInfo[playerid][pGangMod])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[GANG MOD]{C8C8C8} /creategang, /editgang, /removegang, /gangstrike, /switchgang, /nearest.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[GANG MOD]{C8C8C8} /createpoint, /editpoint, /removepoint, /createturf, /editturf, /removeturf.");
	}
	if(PlayerInfo[playerid][pBanAppealer])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[BAN APPEALER]{C8C8C8} /banip, /baninfo, /banhistory, /unbanip, /unban.");
	}
	if(PlayerInfo[playerid][pDeveloper])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[DEVELOPER]{C8C8C8} /a, /e, /ha, /ooc, /admins, /gmx, /changelist, /setmotd, /fixplayerid, /showrcon.");
	}
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[Admin Commands]{C8C8C8} /a, /adminhelp.");
	}

	return 1;
}

CMD:jobhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == JOB_NONE && PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You have no job and therefore no job commands to view.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "__________________ Job Help __________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** JOB HELP *** type a command for more information.");

	switch(PlayerInfo[playerid][pJob])
	{
		//case JOB_NONE: SendClientMessage(playerid, COLOR_GREY, "You have no job and therefore no job commands to view.");
		case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /getpizza, /cancelcp.");
		case JOB_COURIER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /load, /deliver, /cancelcp.");
		case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /sellvest, /frisk.");
		case JOB_WEAPONDEALER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /smugglemats, /sellgun.");
		case JOB_MECHANIC: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /buycomps, /repair, /refill, /nos, /hyd, /takecall.");
		case JOB_MINER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /mine, /cancelcp.");
		case JOB_SWEEPER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /startsweeping, /stopsweeping.");
		case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /setfare, /takecall.");
        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /buydrug, /planthelp, /cookmeth, /smuggledrugs.");
        case JOB_LAWYER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /defend, /free, /wanted.");
        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /find.");
        case JOB_THIEF: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /cracktrunk, /dropcar, /carvalue.");
        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /garbage");
        case JOB_FARMER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /harvest");
        case JOB_TRUCKER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /loadtruck");
 	}

 	if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(PlayerInfo[playerid][pSecondJob])
		{
			//case JOB_NONE: SendClientMessage(playerid, COLOR_GREY, "You have no job and therefore no job commands to view.");
			case JOB_PIZZAMAN: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /getpizza.");
			case JOB_COURIER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /load, /deliver.");
			case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /sellvest, /frisk.");
			case JOB_WEAPONDEALER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /smugglemats, /sellgun.");
			case JOB_MECHANIC: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /buycomps, /repair, /refill, /nos, /hyd.");
			case JOB_MINER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /mine.");
			case JOB_SWEEPER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /startsweeping, /stopsweeping.");
			case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /setfare.");
	        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /buydrug, /planthelp, /cookmeth, /smuggledrugs.");
	        case JOB_LAWYER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /find.");
	        case JOB_GARBAGEMAN: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /garbage");
	        case JOB_TRUCKER: SendClientMessage(playerid, COLOR_GREY, "*** JOB *** /loadtruck");
	 	}
	}

	return 1;
}

CMD:vehiclehelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_NAVYBLUE, "________________ Vehicle Help ________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** VEHICLE HELP *** type a command for more information.");
    SendClientMessage(playerid, COLOR_GREY, "*** VEHICLE *** /lights /hood /boot /buyvehicle /carstorage /park /lock /findcar");
    SendClientMessage(playerid, COLOR_GREY, "*** VEHICLE *** /vsafe /neon /unmod /colorcar /paintcar /upgradevehicle /sellcar /sellmycar");
    SendClientMessage(playerid, COLOR_GREY, "*** VEHICLE *** /givekeys /takekeys /setradio /paytickets /carinfo /gascan /breakin");
    return 1;
}

CMD:bankhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "__________________ Banking Help __________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** BANKING HELP *** type a command for more information.");
    SendClientMessage(playerid, COLOR_GREY, "*** BANKING *** /withdraw /deposit /wiretransfer /balance /robbank /robinvite /bombvault /robbers");
	return 1;
}

CMD:viphelp(playerid, params[])
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "__________________ VIP Help __________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** VIP HELP *** type a command for more information.");
    SendClientMessage(playerid, COLOR_GREY, "*** VIP *** /(v)ip, /vipinfo, /viptag, /vipcolor, /vipinvite, /vipnumber, /vipmusic.");

	if(PlayerInfo[playerid][pVIPPackage] == 3)
	{
	    SendClientMessage(playerid, COLOR_GREY, "*** VIP *** /repair, /nos, /hyd.");
	    SendClientMessage(playerid, COLOR_GREY, "*** VIP *** /getboombox, /vweapons, /healup at VIP Lounge.");
	}

	return 1;
}

CMD:fmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not apart of any faction.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____________ Members Online _____________");
    new string[128], color = FactionInfo[PlayerInfo[playerid][pFaction]][fColor];

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pAdminHide])
        {
            format(string, sizeof(string), "(ID: %i) %s {%06x}%s{FFFFFF}", i, FactionRanks[PlayerInfo[i][pFaction]][PlayerInfo[i][pFactionRank]], color >>> 8, GetPlayerRPName(i));
			if(PlayerInfo[i][pDivision] >= 0)
			{
			    format(string, sizeof(string), "%s | Division: %s", string, FactionDivisions[PlayerInfo[i][pFaction]][PlayerInfo[i][pDivision]]);
			}
			if(PlayerInfo[i][pFactionLeader])
			{
			    format(string, sizeof(string), "%s | {06FF00}Leader{FFFFFF}", string);
			}
			if(FactionInfo[PlayerInfo[i][pFaction]][fType] == FACTION_MEDIC)
			{
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "| Total Patients: %i | Total Fires: %i", string, PlayerInfo[i][pTotalPatients], PlayerInfo[i][pTotalFires]);
			}
			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(PlayerInfo[i][pAFK])
            {
				format(string, sizeof(string), "%s | {FFA500}AFK{FFFFFF} (%d secs)", string, PlayerInfo[i][pAFKTime]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}
CMD:gmembers(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}

    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____________ Members Online _____________");
	new string[128], color = GangInfo[PlayerInfo[playerid][pGang]][gColor];
    foreach(new i : Player)
    {
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && !PlayerInfo[i][pAdminHide])
        {
            format(string, sizeof(string), "(%i) %s {%06x}%s{FFFFFF}", PlayerInfo[i][pGangRank], GangRanks[PlayerInfo[i][pGang]][PlayerInfo[i][pGangRank]], color >>> 8, GetPlayerRPName(i));
            if(PlayerInfo[i][pCrew] >= 0)
			{
			    format(string, sizeof(string), "%s | Crew: %s", string, GangCrews[PlayerInfo[i][pGang]][PlayerInfo[i][pCrew]]);
			}
   			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(PlayerInfo[i][pAFK])
            {
				format(string, sizeof(string), "%s | {FFA500}AFK{FFFFFF} (%d secs)", string, PlayerInfo[i][pAFKTime]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
    }

    return 1;
}
CMD:members(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] != -1)
	{
		callcmd::gmembers(playerid, params);
	}
	if(PlayerInfo[playerid][pFaction] != -1)
	{
 		callcmd::fmembers(playerid, params);
	}
	return 1;
}


CMD:factionhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not apart of any faction.");
	}

    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE, "*** FACTION HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /fc /d /(r)adio /div /faction /division /locker /showbadge /(m)egaphone");

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /gate /door /cell /tazer /cuff /uncuff /drag /detain /charge /arrest");
	        SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /wanted /frisk /take /ticket /gov /ram /deploy /undeploy /undeployall /backup");
	        SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /mdc /clearwanted /siren /badge /vticket /vfrisk /vtake /seizeplant /mir");

			if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /listcallers /trackcall /cells /passport /callsign /bug /listbugs /tog bugged");
			else
			    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /listcallers /trackcall /cells /claim /callsign");
		}
		case FACTION_MEDIC:
		{
		    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /heal /drag /stretcher /deliverpt /getpt /listpt /injuries /deploy /undeploy /undeployall");
		    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /badge /gov /backup /listcallers /trackcall /callsign");
		}
		case FACTION_NEWS:
		{
		    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /news /live /endlive /liveban /badge /addeposit /adwithdraw");
		}
		case FACTION_GOVERNMENT:
		{
		    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /gov /settax /factionpay /tazer /cuff /uncuff /detain /taxdeposit /taxwithdraw");
		    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /backup /badge");
		}
		case FACTION_HITMAN:
		{
		    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /contracts /takehit /profile /passport /plantbomb /pickupbomb /detonate");
		    SendClientMessage(playerid, COLOR_GREY, "*** FACTION *** /hfind /noknife");
		}
	}

	return 1;
}

CMD:ganghelp(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a gang member.");
	}

    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** GANG HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "*** GANG *** /f /gang /(f)amily(safe) /gbackup /bandana /capture /claim /reclaim /turfinfo /points");
    SendClientMessage(playerid, COLOR_GREY, "*** GANG *** /gbuyvehicle /gpark /gfindcar /grespawncars /gsellcar /gunmod /lock, /endalliance, /gspray");
    SendClientMessage(playerid, COLOR_GREY, "*** CREW *** /managecrew /crew");
	return 1;
}

CMD:landhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** LAND HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "*** LAND *** /buyland /lock /door /landinfo /land /sellmyland /sellland /droplandkeys");
    SendClientMessage(playerid, COLOR_GREY, "*** LAND *** '/toggle lands' to show or hide lands on your mini-map.");
    return 1;
}

CMD:planthelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** PLANT HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "*** PLANT *** /plantweed /plantinfo /pickplant /seizeplant");
    return 1;
}

CMD:o(playerid, params[])
{
	return callcmd::ooc(playerid, params);
}

CMD:ooc(playerid, params[])
{
	new string[64];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(o)oc [global OOC]");
	}
	if(!enabledOOC && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The global OOC channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pToggleOOC])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the OOC chat as you have it toggled.");
	}
	if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0) && PlayerInfo[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{FFFFFF} %s", color >>> 8, PlayerInfo[playerid][pCustomTitle], GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0) {
		format(string, sizeof(string), "%s %s", GetAdminRank(playerid), GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetPlayerRPName(playerid));
    } else if(PlayerInfo[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "{FF69B5}Former Admin{FFFFFF} %s", GetPlayerRPName(playerid));
	} else if(PlayerInfo[playerid][pVIPPackage] > 0) {
	    format(string, sizeof(string), "{D909D9}%s VIP{FFFFFF} %s", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerRPName(playerid));
	} else {
	    format(string, sizeof(string), "%s", GetPlayerRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SendClientMessageEx(i, COLOR_WHITE, "(( %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SendClientMessageEx(i, COLOR_WHITE, "(( %s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_WHITE, "(( %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

CMD:newb(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:n(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:ask(playerid, params[])
{
	return callcmd::newbie(playerid, params);
}

CMD:newbie(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(n)ewbie [newbie chat]");
	}
	if(!enabledNewbie && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The newbie channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pNewbieMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from speaking in this channel. /unmute to unmute yourself.");
	}
	if(gettime() - PlayerInfo[playerid][pLastNewbie] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only speak in this channel every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastNewbie]));
	}
	if(PlayerInfo[playerid][pToggleNewbie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the newbie chat as you have it toggled.");
	}

	SendNewbieChatMessage(playerid, params);
	PlayerInfo[playerid][pNewbies] ++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", PlayerInfo[playerid][pNewbies], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:level(playerid, params[])
{
	new count, color;

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /level [level]");
	}

	if(IsNumeric(params))
	{
	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pLevel] == strval(params))
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00)
		        	color = 0xAAAAAAFF;

				SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, GetPlayerNameEx(i), PlayerInfo[i][pLevel], GetPlayerPing(i));
				count++;
			}
		}
		if(!count)
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "There are no level %s players online.", params);
		}
   	}
   	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "Please use a numerical value!");
	}

	return 1;
}

CMD:id(playerid, params[])
{
	new count, color, name[MAX_PLAYER_NAME], targetid = strval(params);

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /id [playerid/partial name]");
	}

	if(IsNumeric(params))
	{
		if(IsPlayerConnected(targetid))
		{
		    if((color = GetPlayerColor(targetid)) == 0xFFFFFF00) {
		        color = 0xAAAAAAFF;
			}

		    GetPlayerName(targetid, name, sizeof(name));
		    SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", targetid, color >>> 8, name, PlayerInfo[targetid][pLevel], GetPlayerPing(targetid));
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
	}
	else if(strlen(params) < 2)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Please input at least two characters to search.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        GetPlayerName(i, name, sizeof(name));

	        if(strfind(name, params, true) != -1)
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00) {
		        	color = 0xAAAAAAFF;
				}

	            SendClientMessageEx(playerid, COLOR_GREY3, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i)", i, color >>> 8, name, PlayerInfo[i][pLevel], GetPlayerPing(i));
	            count++;
			}
		}

		if(!count)
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "No results found for \"%s\". Please narrow your search.", params);
		}
	}

	return 1;
}

CMD:pay(playerid, params[])
{
	new targetid, amount;

	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /pay [playerid] [amount]");
	}
	if(gettime() - PlayerInfo[playerid][pLastPay] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Please wait three seconds between each transaction.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't pay yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}
	if(amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much.");
	}
	if(amount > 1000 && PlayerInfo[playerid][pLevel] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only pay up to $1,000 at a time as a level 1.");
	}
	if(amount > 100000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are only allowed to pay up to $100,000 at a time.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	PlayerInfo[playerid][pLastPay] = gettime();

	GivePlayerCash(playerid, -amount);
	GivePlayerCash(targetid, amount);

	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out %s and gives it to %s.", GetPlayerRPName(playerid), FormatNumber(amount), GetPlayerRPName(targetid));
	Log_Write("log_give", "%s (uid: %i) (IP: %s) gives $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

    SendClientMessageEx(targetid, COLOR_AQUA, "You have been given {00AA00}%s{33CCFF} by %s.", FormatNumber(amount), GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have given {FF6347}%s{33CCFF} to %s.", FormatNumber(amount), GetPlayerRPName(targetid));

	if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has given %s to %s (IP: %s).", GetPlayerRPName(playerid), GetPlayerIP(playerid), FormatNumber(amount), GetPlayerRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:give(playerid, params[])
{
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapon, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, Spraycans");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: GasCan, Seeds, Ephedrine, FirstAid, Bodykits, Rimkits, Diamonds");
	    return 1;
	}

	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid);

	    if(!weaponid)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You must be holding the weapon you're willing to give away.");
	    }
	    if(PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't sell this weapon as you don't have it.");
		}
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player already has a weapon in that slot.");
	    }
	    if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0 && PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can only give away weapons to your own faction members.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from inside a vehicle.");
		}
		if(IsPlayerInAnyVehicle(targetid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons to players inside a vehicle.");
		}
		if(GetPlayerHealthEx(playerid) < 60)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't give weapons as your health is below 60.");
		}

	    GivePlayerWeaponEx(targetid, weaponid);
	    RemovePlayerWeapon(playerid, weaponid);

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you their %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have given %s your %s.", GetPlayerRPName(targetid), GetWeaponNameEx(weaponid));

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s passes over their %s to %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives their %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [materials] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pMaterials] + amount > GetPlayerCapacity(targetid, CAPACITY_MATERIALS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more materials.");
		}

		PlayerInfo[playerid][pMaterials] -= amount;
		PlayerInfo[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[targetid][pMaterials], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i materials.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i materials to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some materials to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [weed] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pWeed])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pWeed] + amount > GetPlayerCapacity(targetid, CAPACITY_WEED))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more weed.");
		}

		PlayerInfo[playerid][pWeed] -= amount;
		PlayerInfo[targetid][pWeed] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[targetid][pWeed], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of weed.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of weed to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some weed to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of weed to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [cocaine] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCocaine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pCocaine] + amount > GetPlayerCapacity(targetid, CAPACITY_COCAINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more cocaine.");
		}

		PlayerInfo[playerid][pCocaine] -= amount;
		PlayerInfo[targetid][pCocaine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[targetid][pCocaine], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of cocaine.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of cocaine to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some cocaine to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of cocaine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [meth] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pMeth] + amount > GetPlayerCapacity(targetid, CAPACITY_METH))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more meth.");
		}

		PlayerInfo[playerid][pMeth] -= amount;
		PlayerInfo[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[targetid][pMeth], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of meth.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of meth to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some meth to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [painkillers] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pPainkillers] + amount > GetPlayerCapacity(targetid, CAPACITY_PAINKILLERS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more painkillers.");
		}

		PlayerInfo[playerid][pPainkillers] -= amount;
		PlayerInfo[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[targetid][pPainkillers], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i painkillers.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i painkillers to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some painkillers to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [cigars] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCigars])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pCigars] -= amount;
		PlayerInfo[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[targetid][pCigars], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i cigars.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i cigars to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some cigars to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i cigars to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [spraycans] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSpraycans])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pSpraycans] -= amount;
		PlayerInfo[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[targetid][pSpraycans], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i spraycans.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i spraycans to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some spraycans to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i spraycans to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [gascan] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

		PlayerInfo[playerid][pGasCan] -= amount;
		PlayerInfo[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[targetid][pGasCan], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i liters of gasoline.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i liters of gasoline to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some gasoline to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pSeeds] + amount > GetPlayerCapacity(targetid, CAPACITY_SEEDS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more seeds.");
		}

		PlayerInfo[playerid][pSeeds] -= amount;
		PlayerInfo[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[targetid][pSeeds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i seeds.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i seeds to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some seeds to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [ephedrine] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pEphedrine] + amount > GetPlayerCapacity(targetid, CAPACITY_EPHEDRINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more ephedrine.");
		}

		PlayerInfo[playerid][pEphedrine] -= amount;
		PlayerInfo[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[targetid][pEphedrine], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i grams of ephedrine.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i grams of ephedrine to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some ephedrine to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "firstaid", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [firstaid] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pFirstAid])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pFirstAid] + amount > 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more first aid kits.");
		}

		PlayerInfo[playerid][pFirstAid] -= amount;
		PlayerInfo[targetid][pFirstAid] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", PlayerInfo[playerid][pFirstAid], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", PlayerInfo[targetid][pFirstAid], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i first aid kits.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i first aid kits to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some first aid kits to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i first aid kits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "bodykits", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [bodykits] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pBodykits])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pBodykits] + amount > 10)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more bodykits.");
		}

		PlayerInfo[playerid][pBodykits] -= amount;
		PlayerInfo[targetid][pBodykits] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", PlayerInfo[playerid][pBodykits], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", PlayerInfo[targetid][pBodykits], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i bodywork kits.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i bodywork kits to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some bodywork kits to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i bodywork kits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "rimkits", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [rimkits] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pRimkits])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pRimkits] + amount > 5)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more rimkits.");
		}

		PlayerInfo[playerid][pRimkits] -= amount;
		PlayerInfo[targetid][pRimkits] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rimkits = %i WHERE uid = %i", PlayerInfo[playerid][pRimkits], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rimkits = %i WHERE uid = %i", PlayerInfo[targetid][pRimkits], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i rimkits.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i rimkits to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some rimkits to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i rimkits to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [diamonds] [amount]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(PlayerInfo[targetid][pDiamonds] + amount > 5)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "That player can't carry that much more diamonds.");
		}

		PlayerInfo[playerid][pDiamonds] -= amount;
		PlayerInfo[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[playerid][pDiamonds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", PlayerInfo[targetid][pDiamonds], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you %i diamonds.", GetPlayerRPName(playerid), amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have given %i diamonds to %s.", amount, GetPlayerRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some rimkits to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i diamonds to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}

	return 1;
}

CMD:sell(playerid, params[])
{
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapon, Materials, Weed, Cocaine, Meth, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
    if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [weapon] [weaponid] [price] (/guninv for weapon IDs)");
		}
	    if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon. /guninv for a list of your weapons.");
		}
	    if(PlayerInfo[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player already has a weapon in that slot.");
	    }
	    if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
	    }
	    if(PlayerInfo[playerid][pFaction] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons as a faction member.");
	    }
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons from inside a vehicle.");
		}
		if(IsPlayerInAnyVehicle(targetid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons to players inside a vehicle.");
		}
		if(GetPlayerHealthEx(playerid) < 60)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons as your health is below 60.");
		}

        PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEAPON;
		PlayerInfo[targetid][pSellExtra] = weaponid;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you their %s for $%i. (/accept item)", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %s for $%i.", GetPlayerRPName(targetid), GetWeaponNameEx(weaponid), price);
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [materials] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_MATERIALS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you %i materials for $%i. (/accept item)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %i materials for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "weed", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [weed] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pWeed])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_WEED;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of weed for $%i. (/accept item)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of weed for $%i.", GetPlayerRPName(targetid), amount, price);
	}
    else if(!strcmp(option, "cocaine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [cocaine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pCocaine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_COCAINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of cocaine for $%i. (/accept item)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of cocaine for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "meth", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [meth] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pMeth])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_METH;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of meth for $%i. (/accept item)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of meth for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [painkillers] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pPainkillers])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_PAINKILLERS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you %i painkillers for $%i. (/accept item)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %i painkillers for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [seeds] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pSeeds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_SEEDS;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you %i seeds for $%i. (/accept item)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %i seeds for $%i.", GetPlayerRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sell [playerid] [ephedrine] [amount] [price]");
		}
		if(amount < 1 || amount > PlayerInfo[playerid][pEphedrine])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}

		PlayerInfo[playerid][pLastSell] = gettime();
		PlayerInfo[targetid][pSellOffer] = playerid;
		PlayerInfo[targetid][pSellType] = ITEM_EPHEDRINE;
		PlayerInfo[targetid][pSellExtra] = amount;
		PlayerInfo[targetid][pSellPrice] = price;

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of ephedrine for $%i. (/accept item)", GetPlayerRPName(playerid), amount, price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of ephedrine for $%i.", GetPlayerRPName(targetid), amount, price);
	}

	return 1;
}

CMD:accent(playerid, params[])
{
	new type;

	if(sscanf(params, "i", type))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /accent [type]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (0) None - (1) English - (2) American - (3) British - (4) Chinese - (5) Korean - (6) Japanese - (7) Asian");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (8) Canadian - (9) Australian - (10) Southern - (11) Russian - (12) Ukrainian - (13) German - (14) French");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (15) Portguese - (16) Polish - (17) Estonian - (18) Latvian - (19) Dutch - (20) Jamaican - (21) Turkish");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (22) Mexican - (23) Spanish - (24) Arabic - (25) Israeli - (26) Romanian - (27) Italian - (28) Gangsta");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (29) Greek - (30) Serbian - (31) Balkin - (32) Danish - (33) Scottish - (34) Irish - (35) Indian");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (36) Ilyrian - (37) Swedish - (38) Finnish - (39) Hungarian - (40) Bulgarian - (41) Pakistani");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (42) Cuban - (43) Slavic - (44) Indonesian - (45) Filipino - (46) Hawaiian - (47) Somalian");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of accents: (48) Armenian - (49) Persian - (50) Vietnamese - (51) Slovenian - (52) Kiwi - (53) Brazilian - (54) Georgian");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(PlayerInfo[playerid][pAccent], "None", 16);
		case 1: strcpy(PlayerInfo[playerid][pAccent], "English", 16);
		case 2: strcpy(PlayerInfo[playerid][pAccent], "American", 16);
		case 3: strcpy(PlayerInfo[playerid][pAccent], "British", 16);
		case 4: strcpy(PlayerInfo[playerid][pAccent], "Chinese", 16);
		case 5: strcpy(PlayerInfo[playerid][pAccent], "Korean", 16);
		case 6: strcpy(PlayerInfo[playerid][pAccent], "Japanese", 16);
		case 7: strcpy(PlayerInfo[playerid][pAccent], "Asian", 16);
		case 8: strcpy(PlayerInfo[playerid][pAccent], "Canadian", 16);
		case 9: strcpy(PlayerInfo[playerid][pAccent], "Australian", 16);
		case 10: strcpy(PlayerInfo[playerid][pAccent], "Southern", 16);
		case 11: strcpy(PlayerInfo[playerid][pAccent], "Russian", 16);
		case 12: strcpy(PlayerInfo[playerid][pAccent], "Ukrainian", 16);
		case 13: strcpy(PlayerInfo[playerid][pAccent], "German", 16);
		case 14: strcpy(PlayerInfo[playerid][pAccent], "French", 16);
		case 15: strcpy(PlayerInfo[playerid][pAccent], "Portuguese", 16);
		case 16: strcpy(PlayerInfo[playerid][pAccent], "Polish", 16);
		case 17: strcpy(PlayerInfo[playerid][pAccent], "Estonian", 16);
		case 18: strcpy(PlayerInfo[playerid][pAccent], "Latvian", 16);
		case 19: strcpy(PlayerInfo[playerid][pAccent], "Dutch", 16);
		case 20: strcpy(PlayerInfo[playerid][pAccent], "Jamaican", 16);
		case 21: strcpy(PlayerInfo[playerid][pAccent], "Turkish", 16);
		case 22: strcpy(PlayerInfo[playerid][pAccent], "Mexican", 16);
		case 23: strcpy(PlayerInfo[playerid][pAccent], "Spanish", 16);
		case 24: strcpy(PlayerInfo[playerid][pAccent], "Arabic", 16);
		case 25: strcpy(PlayerInfo[playerid][pAccent], "Israeli", 16);
		case 26: strcpy(PlayerInfo[playerid][pAccent], "Romanian", 16);
		case 27: strcpy(PlayerInfo[playerid][pAccent], "Italian", 16);
		case 28: strcpy(PlayerInfo[playerid][pAccent], "Gangsta", 16);
		case 29: strcpy(PlayerInfo[playerid][pAccent], "Greek", 16);
		case 30: strcpy(PlayerInfo[playerid][pAccent], "Serbian", 16);
		case 31: strcpy(PlayerInfo[playerid][pAccent], "Balkin", 16);
		case 32: strcpy(PlayerInfo[playerid][pAccent], "Danish", 16);
		case 33: strcpy(PlayerInfo[playerid][pAccent], "Scottish", 16);
		case 34: strcpy(PlayerInfo[playerid][pAccent], "Irish", 16);
		case 35: strcpy(PlayerInfo[playerid][pAccent], "Indian", 16);
		case 36: strcpy(PlayerInfo[playerid][pAccent], "Ilyrian", 16);
		case 37: strcpy(PlayerInfo[playerid][pAccent], "Swedish", 16);
		case 38: strcpy(PlayerInfo[playerid][pAccent], "Finnish", 16);
		case 39: strcpy(PlayerInfo[playerid][pAccent], "Hungarian", 16);
		case 40: strcpy(PlayerInfo[playerid][pAccent], "Bulgarian", 16);
		case 41: strcpy(PlayerInfo[playerid][pAccent], "Pakistani", 16);
		case 42: strcpy(PlayerInfo[playerid][pAccent], "Cuban", 16);
		case 43: strcpy(PlayerInfo[playerid][pAccent], "Slavic", 16);
		case 44: strcpy(PlayerInfo[playerid][pAccent], "Indonesian", 16);
		case 45: strcpy(PlayerInfo[playerid][pAccent], "Filipino", 16);
		case 46: strcpy(PlayerInfo[playerid][pAccent], "Hawaiian", 16);
		case 47: strcpy(PlayerInfo[playerid][pAccent], "Somalian", 16);
		case 48: strcpy(PlayerInfo[playerid][pAccent], "Armenian", 16);
		case 49: strcpy(PlayerInfo[playerid][pAccent], "Persian", 16);
		case 50: strcpy(PlayerInfo[playerid][pAccent], "Vietnamese", 16);
		case 51: strcpy(PlayerInfo[playerid][pAccent], "Slovenian", 16);
		case 52: strcpy(PlayerInfo[playerid][pAccent], "Kiwi", 16);
		case 53: strcpy(PlayerInfo[playerid][pAccent], "Brazilian", 16);
		case 54: strcpy(PlayerInfo[playerid][pAccent], "Georgian", 16);
		default: SendClientMessage(playerid, COLOR_GREY, "Invalid accent. Valid types range from 0 to 53.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "You set your accent to '%s'.", PlayerInfo[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", PlayerInfo[playerid][pAccent], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:dice(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetPlayerRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid, params[])
{
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s flips a coin which lands on %s.", GetPlayerRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}

CMD:time(playerid, params[])
{
	new
	    string[128],
		date[6];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);

	switch(date[1])
	{
	    case 1: string = "January";
	    case 2: string = "February";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "August";
	    case 9: string = "September";
	    case 10: string = "October";
	    case 11: string = "November";
	    case 12: string = "December";
	}

	format(string, sizeof(string), "~y~%s %02d, %i~n~~g~|~w~%02d:%02d:%02d~g~|", string, date[2], date[0], date[3], date[4], date[5]);

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s~n~~w~Jail Time: ~y~%i seconds", string, PlayerInfo[playerid][pJailTime]);
	}

	GameTextForPlayer(playerid, string, 5000, 1);
	SendClientMessageEx(playerid, COLOR_WHITE, "** Paychecks occur at every 60 min. The next paycheck is at %02d:00 which is in %i minutes.", date[3]+1, (60 - date[4]));
	return 1;
}

CMD:report(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /report [playerid (optional)] [text]");
	}
	if(PlayerInfo[playerid][pAdmin] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot report as you are an administrator, use /a moron.");
	}
	if(!enabledReports)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pReportMuted])
	{
	    if(PlayerInfo[playerid][pReportMuted] > 1000) {
     		return SendClientMessageEx(playerid, COLOR_GREY, "You are indefinitely muted from submitting reports. /unmute to unmute yourself.");
		} else {
			return SendClientMessageEx(playerid, COLOR_GREY, "You are muted from submitting reports. Your mute is lifted in %i hours.", PlayerInfo[playerid][pReportMuted]);
		}
	}
	if(gettime() - PlayerInfo[playerid][pLastReport] < 50)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 50 - (gettime() - PlayerInfo[playerid][pLastReport]));
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
/*	if(!AddReportToQueue(playerid, params))
	{
		return SendClientMessage(playerid, COLOR_GREY, "The report queue is currently full. Please try again later.");
	}
*/
	SendClientMessage(playerid, COLOR_GREEN, "Your report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:helpme(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /helpme [help request]");
	}
	if(PlayerInfo[playerid][pHelper] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are a helper and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pHelpMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from submitting help requests.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRequest] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only submit one help request every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - PlayerInfo[playerid][pLastRequest]));
	}

	strcpy(PlayerInfo[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetPlayerRPName(playerid), playerid, params);

	PlayerInfo[playerid][pLastRequest] = gettime();
	SendClientMessage(playerid, COLOR_GREEN, "Your help request was sent to all helpers. Please wait for a response.");
	return 1;
}

CMD:accept(playerid, params[])
{
	if(!strcmp(params, "house", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pHouseOffer],
		    houseid = PlayerInfo[playerid][pHouseOffered],
		    price = PlayerInfo[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a house.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this house.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's house.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's house offer and paid %s for their house.", GetPlayerRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s accepted your house offer and paid %s for your house.", GetPlayerRPName(playerid), FormatNumber(price));
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGarageOffer],
		    garageid = PlayerInfo[playerid][pGarageOffered],
		    price = PlayerInfo[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a garage.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this garage.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's garage.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's garage offer and paid %s for their garage.", GetPlayerRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s accepted your garage offer and paid %s for your garage.", GetPlayerRPName(playerid), FormatNumber(price));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "business", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pBizOffer],
		    businessid = PlayerInfo[playerid][pBizOffered],
		    price = PlayerInfo[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a business.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this business.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's business.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's business offer and paid %s for their %s.", GetPlayerRPName(offeredby), FormatNumber(price), bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s accepted your business offer and paid %s for your %s.", GetPlayerRPName(playerid), FormatNumber(price), bizInteriors[BusinessInfo[businessid][bType]][intType]);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "land", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pLandOffer],
		    landid = PlayerInfo[playerid][pLandOffered],
		    price = PlayerInfo[playerid][pLandPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a land.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsLandOwner(offeredby, landid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this land.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's land.");
	    }

	    SetLandOwner(landid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's land offer and paid %s for their land.", GetPlayerRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s accepted your land offer and paid %s for your land.", GetPlayerRPName(playerid), FormatNumber(price));
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their land (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerIP(offeredby), LandInfo[landid][lID], price, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));

	    PlayerInfo[playerid][pLandOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "death", true))
	{
	    if(IsPlayerConnected(PlayerInfo[playerid][pAcceptedEMS]) && !PlayerInfo[PlayerInfo[playerid][pAcceptedEMS]][pAFK])
		{
			return SendClientMessage(playerid, COLOR_GREY, "There is a medic online and on-the way to rescue you.");
		}
	    if(!PlayerInfo[playerid][pInjured])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not injured and can't accept your death.");
	    }

	    SendClientMessage(playerid, COLOR_GREY, "You have given up and accepted your fate.");
	    SetPlayerHealth(playerid, 0.0);
	}
	else if(!strcmp(params, "vest", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pVestOffer],
		    price = PlayerInfo[playerid][pVestPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a vest.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy the vest.");
	    }

	    new Float:armor = 50.0 + (GetJobLevel(offeredby, JOB_BODYGUARD) * 5);

		SetScriptArmour(playerid, armor);
		GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's vest and paid %s for %.1f armor points.", GetPlayerRPName(offeredby), FormatNumber(price), armor);
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s accepted your vest offer and paid %s for %.1f armor points.", GetPlayerRPName(playerid), FormatNumber(price), armor);

	    TurfTaxCheck(offeredby, price);
	    IncreaseJobSkill(offeredby, JOB_BODYGUARD);

	    PlayerInfo[playerid][pVestOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vehicle", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pCarOffer],
		    vehicleid = PlayerInfo[playerid][pCarOffered],
		    price = PlayerInfo[playerid][pCarPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a vehicle.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player no longer is the owner of this vehicle.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy this player's vehicle.");
	    }
	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    	{
   			return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
    	}

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
     	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicleEx", "iiii", playerid, offeredby, vehicleid, price);

	    PlayerInfo[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "faction", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pFactionOffer],
		    factionid = PlayerInfo[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invites to a faction.");
	    }
	    if(PlayerInfo[offeredby][pFaction] != factionid || !PlayerInfo[offeredby][pFactionLeader])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is no longer allowed to invite you.");
	    }

	    SetPlayerFaction(playerid, factionid, 0);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's faction offer to join {00AA00}%s{33CCFF}.", GetPlayerRPName(offeredby), FactionInfo[factionid][fName]);
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s accepted your faction offer and is now apart of your faction.", GetPlayerRPName(playerid));

		Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);
	    PlayerInfo[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pGangOffer],
		    gangid = PlayerInfo[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invites to a gang.");
	    }
	    if(PlayerInfo[offeredby][pGang] != gangid || PlayerInfo[offeredby][pGangRank] < 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is no longer allowed to invite you.");
	    }

	    PlayerInfo[playerid][pGang] = gangid;
	    PlayerInfo[playerid][pGangRank] = 0;
	    PlayerInfo[playerid][pCrew] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = 0, crew = -1 WHERE uid = %i", gangid, PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's gang offer to join {00AA00}%s{33CCFF}.", GetPlayerRPName(offeredby), GangInfo[gangid][gName]);
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s accepted your gang offer and is now apart of your gang.", GetPlayerRPName(playerid));
	    if(gacooldown)
	    {
	        GangInfo[gangid][gInvCooldown] = gacooldown;
	    	SendClientMessageEx(offeredby, COLOR_GREEN, "A invite cooldown has been placed on your gang. You cannot invite anyone for the next %i minutes!", GangInfo[gangid][gInvCooldown]);
        }
		Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	    PlayerInfo[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "frisk", true))
	{
	    new offeredby = PlayerInfo[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers to be frisked.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }

	    FriskPlayer(offeredby, playerid);
	    PlayerInfo[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "ticket", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pTicketOffer],
		    price = PlayerInfo[playerid][pTicketPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a ticket.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to pay this ticket.");
	    }

	    //GivePlayerCash(offeredby, price);

	    AddToTaxVault(price);
	    GivePlayerCash(playerid, -price);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have paid the %s ticket written by %s.", FormatNumber(price), GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has paid the %s ticket which was written to them.", GetPlayerRPName(playerid), FormatNumber(price));
        Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

	    PlayerInfo[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = PlayerInfo[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a live interview.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerInfo[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You or the offerer can't be on a phone call during a live interview.");
	    }

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's live interview offer. Speak in IC chat to begin the interview!", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has accepted your live interview offer. Speak in IC chat to begin the interview!", GetPlayerRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

		PlayerInfo[playerid][pLiveBroadcast] = offeredby;
		PlayerInfo[offeredby][pLiveBroadcast] = playerid;
  		PlayerInfo[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "handshake", true))
	{
	    new offeredby = PlayerInfo[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a handshake.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(PlayerInfo[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

        AwardAchievement(playerid, "Meeting people");
        AwardAchievement(offeredby, "Meeting people");

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's handshake offer.", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has accepted your handshake offer.", GetPlayerRPName(playerid));

  		PlayerInfo[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "item", true))
	{
		new
		    offeredby = PlayerInfo[playerid][pSellOffer],
		    type = PlayerInfo[playerid][pSellType],
		    amount = PlayerInfo[playerid][pSellExtra],
		    price = PlayerInfo[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for an item.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to accept the offer.");
	    }

	    switch(type)
	    {
	        case ITEM_WEAPON:
			{
			    new weaponid = PlayerInfo[playerid][pSellExtra];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GivePlayerWeaponEx(playerid, weaponid);
	            RemovePlayerWeapon(offeredby, weaponid);

				SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %s's %s for %s.", GetPlayerRPName(offeredby), GetWeaponNameEx(weaponid), FormatNumber(price));
				SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %s for %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), FormatNumber(price));
				Log_Write("log_give", "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

				TurfTaxCheck(offeredby, price);

				PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(PlayerInfo[offeredby][pMaterials] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMaterials] += amount;
			    PlayerInfo[offeredby][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[offeredby][pMaterials], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i materials from %s for %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %i materials for %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(PlayerInfo[offeredby][pWeed] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pWeed] + amount > GetPlayerCapacity(playerid, CAPACITY_WEED))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

				AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pWeed] += amount;
			    PlayerInfo[offeredby][pWeed] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[offeredby][pWeed], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i grams of weed from %s for %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of weed for %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of weed to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(PlayerInfo[offeredby][pCocaine] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pCocaine] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pCocaine] += amount;
			    PlayerInfo[offeredby][pCocaine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[offeredby][pCocaine], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i grams of cocaine from %s for %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of cocaine for %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of cocaine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(PlayerInfo[offeredby][pMeth] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pMeth] + amount > GetPlayerCapacity(playerid, CAPACITY_METH))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pMeth] += amount;
			    PlayerInfo[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[offeredby][pMeth], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i grams of meth from %s for %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of meth for %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(PlayerInfo[offeredby][pPainkillers] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
				if(PlayerInfo[playerid][pPainkillers] + amount > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pPainkillers] += amount;
			    PlayerInfo[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[offeredby][pPainkillers], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i painkillers from %s for %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %i painkillers for %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(PlayerInfo[offeredby][pSeeds] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pSeeds] += amount;
			    PlayerInfo[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[offeredby][pSeeds], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i seeds from %s for %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %i seeds for %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(PlayerInfo[offeredby][pEphedrine] < amount)
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer no longer has that item.");
			    }
			    if(PlayerInfo[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
				{
				    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
				}

			    AwardAchievement(playerid, "Dirty deeds");
				AwardAchievement(offeredby, "Dirty deeds");

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    PlayerInfo[playerid][pEphedrine] += amount;
			    PlayerInfo[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[offeredby][pEphedrine], PlayerInfo[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i grams of ephedrine from %s for %s.", amount, GetPlayerRPName(offeredby), FormatNumber(price));
			    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of ephedrine for %s.", GetPlayerRPName(playerid), amount, FormatNumber(price));
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), PlayerInfo[offeredby][pID], amount, GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(PlayerInfo[playerid][pSellOffer] == INVALID_PLAYER_ID || PlayerInfo[playerid][pSellType] != ITEM_SELLGUN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for a weapon.");
	    }
	    if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pSellPrice])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase the weapon.");
	    }

	    SellWeapon(PlayerInfo[playerid][pSellOffer], playerid, PlayerInfo[playerid][pSellExtra], PlayerInfo[playerid][pSellPrice]);
		PlayerInfo[playerid][pSellOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pDefendOffer],
			price = PlayerInfo[playerid][pDefendPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers from a lawyer.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < price)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to accept the offer.");
	    }
	    if(!PlayerInfo[playerid][pWantedLevel])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are no longer wanted. You can't accept this offer anymore.");
	    }

		PlayerInfo[playerid][pWantedLevel]--;

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(offeredby, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = wantedlevel - 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's offer to reduce your wanted level for %s.", GetPlayerRPName(offeredby), FormatNumber(price));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has accepted your offer to reduce their wanted level for %s.", GetPlayerRPName(playerid), FormatNumber(price));

		IncreaseJobSkill(offeredby, JOB_LAWYER);
	    PlayerInfo[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "dicebet", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pDiceOffer],
			amount = PlayerInfo[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers for dice betting.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(PlayerInfo[playerid][pCash] < amount)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't afford to accept this bet.");
	    }
	    if(PlayerInfo[offeredby][pCash] < amount)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player can't afford to accept this bet.");
	    }

		new
			rand[2];

		if(PlayerInfo[playerid][pDiceRigged])
		{
		    rand[0] = 4 + random(3);
		    rand[1] = random(3) + 1;
		}
		else
		{
			for(new x = 0; x < random(50)*random(50)+30; x++)
			{
				rand[0] = random(6) + 1;
			}
			for(new x = 0; x < random(50)*random(50)+30; x++)
			{
				rand[1] = random(6) + 1;
			}
		}

		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetPlayerRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetPlayerRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{
            new tax = (amount / 200) * gTax;
            AddToTaxVault(tax);
		    GivePlayerCash(offeredby, amount - tax);
		    GivePlayerCash(playerid, -amount);

		    SendClientMessageEx(offeredby, COLOR_AQUA, "** You have won %s from your dice bet with %s.", FormatNumber(amount), GetPlayerRPName(playerid));
		    SendClientMessageEx(playerid, COLOR_RED, "** You have lost %s from your dice bet with %s.", FormatNumber(amount), GetPlayerRPName(offeredby));
		    SendClientMessageEx(offeredby, COLOR_GREY, "You paid %s in taxes & fees.", FormatNumber(tax));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetPlayerRPName(offeredby), GetPlayerIP(offeredby), amount, GetPlayerRPName(playerid), GetPlayerIP(playerid));
			}
			Log_Write("log_dicebet", "%s (uid: %i) won a dice bet against %s (uid: %i) for $%i.", GetPlayerRPName(offeredby), PlayerInfo[offeredby][pID], GetPlayerRPName(playerid), PlayerInfo[playerid][pID], amount);
		}
		else if(rand[0] == rand[1])
		{
			SendClientMessageEx(offeredby, COLOR_AQUA, "** The bet of %s was a tie. You kept your money as a result!", FormatNumber(amount));
		    SendClientMessageEx(playerid, COLOR_AQUA, "** The bet of %s was a tie. You kept your money as a result!", FormatNumber(amount));
		}
		else
		{
		    new tax = (amount / 200) * gTax;
      		AddToTaxVault(tax);
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount - tax);

		    SendClientMessageEx(playerid, COLOR_AQUA, "** You have won %s from your dice bet with %s.", FormatNumber(amount), GetPlayerRPName(offeredby));
		    SendClientMessageEx(offeredby, COLOR_RED, "** You have lost %s from your dice bet with %s.", FormatNumber(amount), GetPlayerRPName(playerid));
		    SendClientMessageEx(playerid, COLOR_GREY, "You paid %s in taxes & fees.", FormatNumber(tax));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) won a $%i dice bet against %s (IP: %s).", GetPlayerRPName(playerid), GetPlayerIP(playerid), amount, GetPlayerRPName(offeredby), GetPlayerIP(offeredby));
			}
			Log_Write("log_dicebet", "%s (uid: %i) won a dice bet against %s (uid: %i) for $%i.", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GetPlayerRPName(offeredby), PlayerInfo[offeredby][pID], amount);
		}

	    PlayerInfo[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "invite", true))
	{
	    new
			offeredby = PlayerInfo[playerid][pInviteOffer],
			houseid = PlayerInfo[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invitations to a house.");
	    }

		PlayerInfo[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's invitation to their house.", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has accepted your invitation to your house.", GetPlayerRPName(playerid));

	    PlayerInfo[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "robbery", true))
	{
	    new offeredby = PlayerInfo[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any invitations to a bank heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The robbery invite is no longer available.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SendClientMessageEx(playerid, COLOR_GREY, "This bank robbery has reached its limit of %i robbers.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's bank robbery invitation.", GetPlayerRPName(offeredby));
	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has accepted your bank robbery invitation.", GetPlayerRPName(playerid));

	    PlayerInfo[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "duel", true))
	{
	    new offeredby = PlayerInfo[playerid][pDuelOffer], entranceid = GetInsideEntrance(playerid);

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't received any offers to duel.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
	        return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is out of range.");
	    }
	    if(entranceid == -1 || EntranceInfo[entranceid][eType] != 1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not in a duel arena.");
		}
		if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are already participating in a duel at the moment.");
		}
		if(PlayerInfo[offeredby][pDueling] != INVALID_PLAYER_ID)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player who initiated the offer is in a duel at the moment.");
		}

		foreach(new i : Player)
		{
		    if(GetInsideEntrance(i) == entranceid && PlayerInfo[i][pDueling] != INVALID_PLAYER_ID)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is a duel in progress already. Wait until the current one has ended.");
		    }
		}

		SavePlayerVariables(playerid);
		SavePlayerVariables(offeredby);

		ResetPlayerWeapons(playerid);
		ResetPlayerWeapons(offeredby);

		SetPlayerPos(playerid, 1370.3395, -15.4556, 1000.9219);
		SetPlayerPos(offeredby, 1414.4841, -15.1239, 1000.9253);
		SetPlayerFacingAngle(playerid, 270.0000);
		SetPlayerFacingAngle(offeredby, 90.0000);

		SetPlayerInterior(playerid, 1);
		SetPlayerInterior(offeredby, 1);
		SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eWorld]);
		SetPlayerVirtualWorld(offeredby, EntranceInfo[entranceid][eWorld]);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		SetPlayerHealth(offeredby, 100.0);
		SetPlayerArmour(offeredby, 100.0);

		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		GivePlayerWeaponEx(offeredby, 24, true);
		GivePlayerWeaponEx(offeredby, 27, true);
		GivePlayerWeaponEx(offeredby, 29, true);
		GivePlayerWeaponEx(offeredby, 31, true);
		GivePlayerWeaponEx(offeredby, 34, true);

		GameTextForPlayer(playerid, "~r~Duel time!", 3000, 3);
		GameTextForPlayer(offeredby, "~r~Duel time!", 3000, 3);

		PlayerInfo[playerid][pDueling] = offeredby;
		PlayerInfo[offeredby][pDueling] = playerid;

	    SendClientMessageEx(offeredby, COLOR_AQUA, "** %s has accepted the duel offer.", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's duel offer.", GetPlayerRPName(offeredby));

	    PlayerInfo[playerid][pDuelOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "alliance", true))
	{
	    new offeredby = PlayerInfo[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't been offered an alliance.");
	    }
		if(offeredby == playerid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't accept offers from yourself.");
		}

		new gangid = PlayerInfo[playerid][pGang], allyid = PlayerInfo[offeredby][pGang];

	    SendClientMessageEx(offeredby, COLOR_AQUA, "%s has accepted your offer to form a gang alliance.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You've accepted the offer from %s to form a gang alliance.", GetPlayerRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		PlayerInfo[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has formed an alliance with {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "war", true))
	{
	    new offeredby = PlayerInfo[playerid][pWarOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't been offered an alliance.");
	    }
		if(offeredby == playerid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't accept offers from yourself.");
		}

		new gangid = PlayerInfo[playerid][pGang], rivalid = PlayerInfo[offeredby][pGang];

	    SendClientMessageEx(offeredby, COLOR_AQUA, "%s has accepted your offer to form a gang war.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You've accepted the offer from %s to form a gang war.", GetPlayerRPName(offeredby));

		GangInfo[gangid][gWar] = rivalid;
		GangInfo[rivalid][gWar] = gangid;
		PlayerInfo[playerid][pWarOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", rivalid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", gangid, rivalid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[rivalid][gColor] == -1 || GangInfo[rivalid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[rivalid][gColor];
		}

		SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has formed a war with {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[rivalid][gName]);
	}
	else if(!strcmp(params, "marriage", true))
	{
		new id, offeredby = PlayerInfo[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at a restaurant to commence a wedding.");
		}
		if(PlayerInfo[playerid][pCash] < 25000 || PlayerInfo[offeredby][pCash] < 25000)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You both need to have $25,000 in hand to commence a wedding.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't in range of anyone who has offered to marry you.");
		}

		GivePlayerCash(playerid, -25000);
		GivePlayerCash(offeredby, -25000);
		BusinessInfo[id][bCash] += 50000;

		SendClientMessageToAllEx(COLOR_WHITE, "Lovebirds %s and %s have just tied the knott! Congratulations to them on getting married.", GetPlayerRPName(offeredby), GetPlayerRPName(playerid));

		PlayerInfo[playerid][pMarriedTo] = PlayerInfo[offeredby][pID];
		PlayerInfo[offeredby][pMarriedTo] = PlayerInfo[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[playerid][pMarriedTo], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[offeredby][pMarriedTo], PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "divorce", true))
	{
		new offeredby = PlayerInfo[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't in range of anyone who has offered to divorce you.");
		}
		if(PlayerInfo[playerid][pMarriedTo] == -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't even married ya naab.");
		}
		if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[offeredby][pID])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That isn't the person you're married to.");
		}

		PlayerInfo[playerid][pMarriedTo] = -1;
		PlayerInfo[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", PlayerInfo[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[playerid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
		strcpy(PlayerInfo[offeredby][pMarriedName], "Nobody", MAX_PLAYER_NAME);

		PlayerInfo[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /accept [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: House, Garage, Business, Land, Death, Vest, Vehicle, Faction, Gang, Ticket, Live, Marriage");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Item, Frisk, Handshake, Weapon, Lawyer, Dicebet, Invite, Robbery, Duel, Alliance");
	}

	return 1;
}
CMD:togtp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command");
	}
    if(!PlayerInfo[playerid][pToggleTP])
    {
		PlayerInfo[playerid][pToggleTP] = 1;
	}
	else
	{
		PlayerInfo[playerid][pToggleTP] = 0;
	}
	return 1;
}

CMD:e(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /e [Management chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the executive chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 5) && !PlayerInfo[i][pToggleAdmin])
	    {
			SendClientMessageEx(i, 0xA077BFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ha [head admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the head administrator chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 4) && !PlayerInfo[i][pToggleAdmin])
	    {
			SendClientMessageEx(i, 0x5C80FFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /a [admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the admin chat as you have it toggled.");
	}

	new adminname[24];
	strcpy(adminname, GetPlayerRPName(playerid));
	if(PlayerInfo[playerid][pUndercover][0])
	{
	    if(strcmp(PlayerInfo[playerid][pAdminName], "None", true))
	    {
	    	strcpy(adminname, PlayerInfo[playerid][pAdminName]);
		}
	}

	new 
		divisionName[5],
		adminRank[24];
	format(divisionName, sizeof(divisionName), "%s", GetAdminDivision(playerid));
	format(adminRank, sizeof(adminRank), "%s", GetAdminRank1(playerid));

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pDeveloper]) && !PlayerInfo[i][pToggleAdmin])
	    {			
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_YELLOW, "** [%s %s{FFFF00}] %s: %.*s... **", divisionName, adminRank, adminname, MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_YELLOW, "** [%s %s{FFFF00}] %s: ...%s **", divisionName, adminRank, adminname, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendClientMessageEx(i, COLOR_YELLOW, "** [%s %s{FFFF00}] %s: %s **", divisionName, adminRank, adminname, params);
			}			
		}
	}
	
	new msg[256];

	format(msg, sizeof(msg), "%s", GetAdminRank1(playerid));
	strmid(msg, msg, 8, strlen(msg));

	format(msg, sizeof(msg), "```[%s %s] %s: %s```", GetAdminDivision(playerid), msg, adminname, params);

	//DCC_SendChannelMessage(DCC_FindChannelById(returnAdminChatID()), msg);

	return 1;
}

CMD:fa(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pFormerAdmin])
    {
    	return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fa [Former Admin chat]");
	}
	if(PlayerInfo[playerid][pToggleAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the Former Admin chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pFormerAdmin]) && !PlayerInfo[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_RETIRED, "** [%s] %s: %.*s... **", GetAdminRank(playerid), GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_RETIRED, "** [%s] %s: ...%s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendClientMessageEx(i, COLOR_RETIRED, "** [%s] %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
			}
		}
	}
	return 1;
}


CMD:undercover(playerid, params[])
{
	new name[MAX_PLAYER_NAME], level, Float:ar;
	if(PlayerInfo[playerid][pAdmin] >= 1 && !PlayerInfo[playerid][pAdminDuty])
	{
		if(sscanf(params, "s[24]", name))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /undercover [name | random | off]");
		}
	    if(PlayerInfo[playerid][pUndercover][0])
	    {
     		OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
     		SendClientMessageEx(playerid, COLOR_WHITE, "** You are no longer undercover.", GetPlayerRPName(playerid), name);
	    }
	    else if(!strcmp(name, "random", true)) {
			strcpy(name, getRandomRPName());
			level = random(9) + 1;
			ar = float(random(50)+50);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
			mysql_tquery(connectionID, queryBuffer, "OnUndercover", "iisiff", playerid, 1, name, level, 100.0, ar);
		}
		else if(strfind(name, "_") != -1) {
		    //format(name, MAX_PLAYER_NAME, params);
			level = random(9) + 1;
			ar = float(random(50)+50);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
			mysql_tquery(connectionID, queryBuffer, "OnUndercover", "iisiff", playerid, 1, name, level, 100.0, ar);
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /undercover [Firstname_Lastname | random]");
		}

	}
	else SendClientMessage(playerid, COLOR_GREY, "Not Authorized / You need to be off duty to use this command.");
	return 1;
}


CMD:ah(playerid, params[])
{
	return callcmd::adminhelp(playerid, params);
}

CMD:ahelp(playerid, params[])
{
	return callcmd::adminhelp(playerid, params);
}

CMD:adminhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessage(playerid, COLOR_GREY5, "LEVEL 1:{DDDDDD} /a, /clearchat, /skick, /sban, /sjail, /pinfo, /spec, /reports, /admins, /flag, /removeflag, /listflags, /check, /dm.");
		SendClientMessage(playerid, COLOR_GREY5, "LEVEL 1:{DDDDDD} /ocheck, /oflag, /listflagged, /hhcheck, /kills, /shots, /damages, /jail, /warn.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessage(playerid, 0x99CCFFFF, "LEVEL 2:{DDDDDD} /aduty, /adminname, /kick, /ban, /warn, /slap, /ar, /tr, /rr, /cr, /setint, /setvw.");
		SendClientMessage(playerid, 0x99CCFFFF, "LEVEL 2:{DDDDDD} /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /gotocoords, /gotoint, /listen, /jetpack, /sendto.");
		SendClientMessage(playerid, 0x99CCFFFF, "LEVEL 2:{DDDDDD} /freeze, /unfreeze, /rwarn, /runmute, /nmute, /admute, /hmute, /gmute, /skiptut, /listguns, /disarm.");
		SendClientMessage(playerid, 0x99CCFFFF, "LEVEL 2:{DDDDDD} /jail, /listjailed, /lastactive, /checkinv, /afklist, /acceptname, /denyname, /namechanges, /nrn.");
		SendClientMessage(playerid, 0x99CCFFFF, "LEVEL 2:{DDDDDD} /prisoninfo, /relog, /rtnc, /sth, /nro, /nao, /nor, /post, /contracts, /denyhit, /(o)dm.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_LIMEGREEN, "LEVEL 3:{DDDDDD} /ban, /(o)getip, /iplookup");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "LEVEL 3:{DDDDDD} /prison, /sprison, /oprison, /release, /fine, /pfine, /ofine, /sethp, /setarmor, /mark, /gotomark.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "LEVEL 3:{DDDDDD} /veh, /destroyveh, /respawncars, /broadcast, /fixveh, /healrange.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "LEVEL 3:{DDDDDD} /resetadtimer, /baninfo, /banhistory, /togooc, /tognewbie, /togglobal, /listpvehs, /despawnpveh.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "LEVEL 3:{DDDDDD} /aclearwanted, /removedm, /savevehicle, /editvehicle, /removevehicle, /vehicleinfo, /refillcars, /refilldrug.");
		SendClientMessage(playerid, COLOR_LIMEGREEN, "LEVEL 3:{DDDDDD} /alock, /duel, /startchat, /invitechat, /kickchat, /endchat, /freezerange, /unfreezerange, /reviverange.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessage(playerid, COLOR_LIGHTORANGE, "LEVEL 4:{DDDDDD} /givegun, /setname, /setweather, /permaban, /oban, /unban, /unbanip, /banip, /lockaccount, /unlockaccount.");
		SendClientMessage(playerid, COLOR_LIGHTORANGE, "LEVEL 4:{DDDDDD} /explode, /event, /gplay, /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent, /eventkick.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "LEVEL 5:{DDDDDD} /setstat, /givenarcon, /givenarconall, /setvip, /osetvip, /saveaccounts.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "LEVEL 5:{DDDDDD} /removevip, /rangeban, /deleteaccount, /doublexp, /previewint, /nearest, /dynamichelp, /listassets.");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "LEVEL 5:{DDDDDD} /adestroyboombox, /setbanktimer, /resetrobbery, /addtorobbery, /givepayday, /givepveh, /givedoublexp.");
	}
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "LEVEL 6:{DDDDDD} /makeadmin, /makehelper, /omakeadmin, /omakehelper, /setmotd, /setstaff, /forceaduty, /setpassword.");
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "LEVEL 6:{DDDDDD} /olisthelpers, /gmx, /sellinactive, /inactivecheck, /changelist, /fixplayerid, /giveachievement.");
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "LEVEL 6:{DDDDDD} /settitle, /oadmins, /disablevpn, /landperms, /forcedeleteobject, /obscurent, /ovips.");
	}
	if(PlayerInfo[playerid][pAdmin] >=8)
	{
		SendClientMessage(playerid, COLOR_VIP, "LEVEL 8:{DDDDDD} /placegiftbox, /giftall, /givebackpack, /removebackpack, /givemoney, /editbackpack");
		SendClientMessage(playerid, COLOR_VIP, "LEVEL 8:{DDDDDD} /getip, /ogetip, /iplookup, <- Before u refund! ");
	}

	return 1;
}

CMD:reports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "__________ Pending Reports __________");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(RID: %i) %s[%i] reports: %s", i, GetPlayerRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "** Use /ar [rid] or /tr [rid] to handle these reports.");
	return 1;
}

CMD:rtnc(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rtnc [reportid] (Sends to newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to newbie chat.", GetPlayerRPName(playerid), reportid);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has redirected your report to the newbie chat.", GetPlayerRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid, params[])
{
    new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has sent report %i to helpers.", GetPlayerRPName(playerid), reportid);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has redirected your report to all helpers online.", GetPlayerRPName(playerid));

    strcpy(PlayerInfo[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetPlayerRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	PlayerInfo[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ar(playerid, params[])
{
	new reportid, chat;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}
	if(PlayerInfo[playerid][pActiveReport] >= 0)
	{
		callcmd::cr(playerid, params);
	}
	new msg[128];
	format(msg, sizeof(msg), "AdmCmd: %s has accepted report %i from %s.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));

	SendAdminMessage(COLOR_LIGHTRED, msg);
	format(msg, sizeof(msg), "```%s```", msg);
//	DCC_SendChannelMessage(DCC_FindChannelById(returnReportChatID()), msg);
	if(chat)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You can use /rr to speak with the reporter and /cr to close the report.");
		SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has accepted your report and is now reviewing it.", GetPlayerRPName(playerid));
		SendClientMessage(ReportInfo[reportid][rReporter], COLOR_GREEN, "You can use /rr to reply to the admin handling your report.");

		PlayerInfo[playerid][pActiveReport] = reportid;
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_GREEN, "%s has accepted your report and is now reviewing it.", GetPlayerRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	PlayerInfo[playerid][pReports]++;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", PlayerInfo[playerid][pReports], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:tr(playerid, params[])
{
	new reportid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The report specified is being handled by another admin.");
	}
	new msg[200];
	format(msg, sizeof(msg), "AdmCmd: %s has trashed report %i from %s, reason: %s", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]), reason);
	SendAdminMessage(COLOR_LIGHTRED, msg);
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "** %s has trashed your report, reason: %s", GetPlayerRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;

	format(msg, sizeof(msg), "```%s```", msg);
//	DCC_SendChannelMessage(DCC_FindChannelById(returnReportChatID()), msg);

	return 1;
}

CMD:nro(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
 		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nro [reportid]");
 		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their report involves a non-rulebreaking offense.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it involves a non-rulebreaking offense", GetPlayerRPName(playerid));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our rules page at Soon-rp.ml for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nao [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

  	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as there are no admins online to handle it.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as there no admins online with the authority to handle it.", GetPlayerRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ic(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ic [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report for being an IC issue");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

  	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as it is an in-character issue.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as it is an in-character issue.", GetPlayerRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nor(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nor [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report if the reporters revive request is invalid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as their request for a revive is invalid.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your request for a revive is invalid. (/call 911)", GetPlayerRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:post(playerid, params[])
{
	new reportid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /post [reportid]");
   		SendClientMessage(playerid, COLOR_SYNTAX, "This command will clear a report and notify the player to post an admin request.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This report is already being handled by another administrator.");
	}

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s as it needs to be handled on the forums.", GetPlayerRPName(playerid), reportid, GetPlayerRPName(ReportInfo[reportid][rReporter]));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your issue at hand must be handled on our forums.", GetPlayerRPName(playerid));
	SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our website at -rp.ml in order to to resolve this issue.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}


CMD:norevive(playerid, params[])
{
	return callcmd::nor(playerid, params);
}

CMD:er(playerid, params[])
{
	return callcmd::cr(playerid, params);
}

CMD:bigears(playerid, params[])
{
	return callcmd::listen(playerid, params);
}

CMD:rr(playerid, params[])
{
	new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SendClientMessageEx(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s (ID %i): %s **", GetPlayerRPName(playerid), playerid, params);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetPlayerRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Admin %s (ID %i): %s **", GetPlayerRPName(playerid), playerid, params);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Reply to %s (ID %i): %s **", GetPlayerRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
	}

	return 1;
}

CMD:cr(playerid, params[])
{
    new reportid = PlayerInfo[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SendClientMessageEx(ReportInfo[reportid][rHandledBy], COLOR_YELLOW, "** Player %s has closed the report. **", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SendClientMessageEx(ReportInfo[reportid][rReporter], COLOR_YELLOW, "** Administrator %s has closed the report. **", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		PlayerInfo[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pActiveReport] = -1;

	return 1;
}

CMD:skick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has silently kicked %s, reason: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

	Log_Write("log_punishments", "%s (uid: %i) silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was silently banned by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, false);
	return 1;
}

CMD:sjail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sjail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(minutes < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes specified cannot be below zero.");
	}

    PlayerInfo[targetid][pJailType] = 1;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	Log_Write("log_punishments", "%s (uid: %i) silently jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes by an Admin, reason: %s", GetPlayerRPName(targetid), minutes, reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been jailed for %i minutes by an admin.", minutes);
    return 1;
}

CMD:pinfo(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /pinfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendClientMessageEx(playerid, COLOR_GREY1, "(ID: %i) - (Name: %s) - (Ping: %i) - (FPS: %i) - (Packet Loss: %.1f%c)", targetid, GetPlayerRPName(targetid), GetPlayerPing(targetid), PlayerInfo[targetid][pFPS], NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_________ Admins Online _________");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] > 0 && !PlayerInfo[i][pUndercover][0] || PlayerInfo[playerid][pAdmin] >= 6 && PlayerInfo[i][pUndercover][0])
		{
			new division[5];
			strcpy(division, GetAdminDivision(i));
            if(strlen(division) < 1) division = "None";
			if(!strcmp(PlayerInfo[i][pAdminName], "None", true))
            	SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - Division: %s - Status: %s{C8C8C8} - Reports Handled: %i - Tabbed: %s", i, GetAdminRank(i), PlayerInfo[i][pUsername], division, (PlayerInfo[i][pAdminDuty]) ? ("{00AA00}On Duty") : ("Off Duty"), PlayerInfo[i][pReports], (PlayerInfo[i][pAFK]) ? ("Yes") : ("No"));
        	else
				SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s (%s) - Division: %s - Status: %s{C8C8C8} - Reports Handled: %i - Tabbed: %s", i, GetAdminRank(i), PlayerInfo[i][pUsername], PlayerInfo[i][pAdminName], division, (PlayerInfo[i][pAdminDuty]) ? ("{00AA00}On Duty") : ("Off Duty"), PlayerInfo[i][pReports], (PlayerInfo[i][pAFK]) ? ("Yes") : ("No"));
		}
	}
	return 1;
}
CMD:checknewbies(playerid, params[])
{
	new targetid;
	if(!PlayerInfo[playerid][pAdmin] && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /checknewbies [playerid]");
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Level %i Player %s has used newbie {00FF00}%s times.", PlayerInfo[targetid][pLevel], GetPlayerRPName(targetid), FormatNumber(PlayerInfo[targetid][pNewbies], 0));
	return 1;
}

CMD:helpers(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "_________ Helpers Online _________");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pHelper] > 0 && !PlayerInfo[i][pPassport] && !PlayerInfo[i][pUndercover][0])
	    {
	        if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	            SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s - Help Requests: %s - Newbies: %s", i, GetHelperRank(i), GetPlayerRPName(i), FormatNumber(PlayerInfo[i][pHelpRequests], 0), FormatNumber(PlayerInfo[i][pNewbies], 0));
	        else
				SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s %s", i, GetHelperRank(i), GetPlayerRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid, params[])
{
	new targetid, desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /flag [playerid] [description]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s flagged %s's account for '%s'.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid, params[])
{
	new name[24], desc[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /oflag [username] [description]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, users b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid, params[])
{
	new name[24];

	if(PlayerInfo[playerid][pAdmin] < 1 && !PlayerInfo[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ocheck [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeflag [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListFlagsForRemoval", "ii", playerid, targetid);
	return 1;
}

CMD:listflags(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listflags [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:hhcheck(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hhcheck [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pHHCheck])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already being checked for health hacks.");
	}
	if(gettime() - PlayerInfo[playerid][pLastUpdate] >= 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't initiate this check on a tabbed player.");
	}

	GetPlayerHealth(targetid, PlayerInfo[targetid][pHealth]);

	PlayerInfo[targetid][pHHCheck] = 1;
	PlayerInfo[targetid][pHHTime] = 5;
	PlayerInfo[targetid][pHHRounded] = GetPlayerHealthEx(targetid);
	PlayerInfo[targetid][pHHCount] = 0;

	SetPlayerHealth(targetid, random(100) + 1);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has started the health hack check on %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:spec(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SendClientMessageEx(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetPlayerRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	    PlayerInfo[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
    	if(PlayerInfo[playerid][pAdmin] == 1)
		{
		    PlayerInfo[playerid][pTogglePhone] = 0;
		}
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[playerid][pAdmin] == 1)
	{
	    PlayerInfo[playerid][pTogglePhone] = 1;
	}
	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	RefreshPlayerTextdraws(playerid);

	PlayerInfo[playerid][pSpectating] = targetid;
	SendClientMessageEx(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetPlayerRPName(PlayerInfo[playerid][pSpectating]), PlayerInfo[playerid][pSpectating]);
	return 1;
}

CMD:poll(playerid, params[])
{
	new option[10];
	if(sscanf(params, "s[10]", option))
	{
		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /poll [option]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of Options: Create, End, View, Answer");
		return 1;
	}
	if(!strcmp(params, "create", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(isnull(pollQuestion))
	    {
			if(!PlayerInfo[playerid][pCreatingPoll])
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEPOLL);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "There is already an active poll!");
		}
	}
	else if(!strcmp(params, "end", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(!isnull(pollQuestion))
	    {
			pollQuestion[0] = EOS;
			for(new i; i < 2; i ++)
			{
				pollAnswers[i][0] = EOS;
			}
			SendClientMessageToAllEx(COLOR_RETIRED, "The poll was ended by %s, results %s: %i, %s: %i", GetPlayerRPName(playerid), pollAnswers[0], pollAnswerCount[0], pollAnswers[1], pollAnswerCount[1]);
		}
	}
	else if(!strcmp(params, "view", true))
	{
	    if(!PlayerInfo[playerid][pAnsweredPoll])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You haven't answered the poll yet.");
	    }
	    ShowDialogToPlayer(playerid, DIALOG_POLLVIEW);
	}
	else if(!strcmp(params, "answer", true))
	{
	    if(PlayerInfo[playerid][pAnsweredPoll])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You've already answered the poll.");
	    }
	    ShowDialogToPlayer(playerid, DIALOG_POLLANSWER);
	}
    return 1;
}
CMD:allhunt(playerid, params[])
{
	new targetid, weaponid;
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid, weaponid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /allhunt [targetid] [weapon (0 for wepset)]");
	}
	if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
	}
	if(weaponid == 38 && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The minigun was disabled due to abuse.");
	}
	SavePlayerVariables(targetid);
	ResetPlayerWeapons(targetid);
	if(weaponid != 0 && (1 <= weaponid <= 46))
	{
		GivePlayerWeaponEx(weaponid, weaponid, true);
	}
	else
	{
        GivePlayerWeaponEx(targetid, 24, true);
        GivePlayerWeaponEx(targetid, 27, true);
        GivePlayerWeaponEx(targetid, 29, true);
        GivePlayerWeaponEx(targetid, 31, true);
        GivePlayerWeaponEx(targetid, 34, true);
	}
    PlayerInfo[targetid][pJoinedEvent] = 1;
    PlayerInfo[targetid][pHunted] = 1;

    foreach(new i : Player)
    {
        if(PlayerInfo[i][pLogged] && GetPlayerInterior(i) == GetPlayerInterior(targetid))
        {
    		SetPlayerMarkerForPlayer(i, targetid, COLOR_RETIRED);
		}
	}
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s has made %s a hunted. Kill them to win a prize!", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}
CMD:quiz(playerid, params[])
{
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(PlayerInfo[playerid][pAdmin] >= 2)
	    {
			SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /quiz [option]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of Options: Create, End, Edit, Answer");
		}
		else
		{
		    //SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /quiz answer [text]");
		    strcpy(option, "answer");
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "There is already an on-going quiz!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SendClientMessageToAllEx(COLOR_RETIRED, "The quiz was ended by %s, answer: %s", GetPlayerRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s changed the quiz answer to %s.", GetPlayerRPName(playerid), quizAnswer);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "USAGE: /quiz edit [answer]");
		}
	}
	else if(!strcmp(option, "answer", true))
	{
		if(isnull(quizAnswer))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There is no active quiz!");
		}
		if(!isnull(param))
		{
			if(!strcmp(quizAnswer, param, true))
			{
				SendClientMessageToAllEx(COLOR_RETIRED, "%s has answered the quiz correctly. answer: %s", GetPlayerRPName(playerid), quizAnswer);
		    	quizQuestion[0] = EOS;
	        	quizAnswer[0] = EOS;
			}
			else
			{
		    	SendClientMessage(playerid, COLOR_GREY, "Sorry bud, that ain't the right answer.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "USAGE: /quiz answer [answer]");
		}
	}
	return 1;
}
CMD:forcedeleteobject(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pDeveloper])
    {
        new mode[32];
        if(sscanf(params, "s[32]", mode))
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcedeleteobject [enable/disable]");
		if(!strcmp(mode, "enable", true))
		{
		    PlayerInfo[playerid][pDeleteMode] = 1;
		}
        else if(!strcmp(mode, "disable", true))
		{
		    PlayerInfo[playerid][pDeleteMode] = 0;
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcedeleteobject [enable/disable]");
		}
		SendClientMessageEx(playerid, COLOR_GREY, "Object deletetion mode was %sd (%i)", mode, PlayerInfo[playerid][pDeleteMode]);
	}
	return 1;
}
CMD:godshand(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		new targetid;

		if(sscanf(params, "u", targetid))
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /godshand [playerid]");

		if(PlayerInfo[playerid][pGodshand] == 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Aww, that's sad as fuck.");
			PlayerInfo[targetid][pGodshand] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Granted it is.");
			PlayerInfo[targetid][pGodshand] = 1;
		}
		return 1;
	}
	return -1;
}
CMD:choke(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /choke [playerid] ");
		ApplyAnimation(targetid,"ped","gas_cwr",4.1,1,1,1,0,0,0);

		if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[targetid][pAdmin])
			return SendClientMessageEx(playerid, COLOR_GREY, "You cannot choke higher level administrators.");

		SendProximityMessage(targetid, 30.0, COLOR_PURPLE, "* %s bends over as he chokes by god's hand.", GetPlayerRPName(targetid));
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Your not authorized to use that command!");
	return 1;
}

CMD:kick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /kick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was kicked by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

	Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:warn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /warn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be warned.");
	}

	PlayerInfo[targetid][pWarnings]++;
	Log_Write("log_punishments", "%s (uid: %i) warned %s (uid: %i), reason: %s (%i/3)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason, PlayerInfo[targetid][pWarnings]);

	if(PlayerInfo[targetid][pWarnings] < 3)
	{
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was warned by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "%s has warned you, reason: %s", GetPlayerRPName(playerid), reason);
	}
	else
	{
	    PlayerInfo[targetid][pWarnings] = 0;

	    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: %s (3/3 warnings)", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

CMD:check(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /check [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	DisplayStats(targetid, playerid);
	return 1;
}

CMD:checkinv(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /checkinv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid, params[])
{
    new targetid, Float:height;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /slap [playerid] [height (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not spawned and therefore cannot be slapped.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be slapped.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(targetid, x, y, z + height);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was slapped by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}

CMD:upgrade(playerid, params[])
{
	if(isnull(params))
	{
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /upgrade [option] (%i points available)", PlayerInfo[playerid][pUpgradePoints]);
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Inventory, Addict, Trader, Asset, Labor, SpawnHealth, SpawnArmor");
		return 1;
	}
	if(PlayerInfo[playerid][pUpgradePoints] < 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You have no upgrade points available which you can spend.");
	}

	if(!strcmp(params, "inventory", true))
	{
	    if(PlayerInfo[playerid][pInventoryUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your inventory skill is already upgraded to its maximum level of 5.");
		}

		PlayerInfo[playerid][pInventoryUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET inventoryupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pInventoryUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your inventory skill to %i/5. Your inventory capacity was increased.", PlayerInfo[playerid][pInventoryUpgrade]);
 	}
 	else if(!strcmp(params, "addict", true))
	{
	    if(PlayerInfo[playerid][pAddictUpgrade] >= 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your addict skill is already upgraded to its maximum level of 3.");
		}

		PlayerInfo[playerid][pAddictUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your addict skill to level %i/3. You now gain %.1f more health & armor when using drugs.", PlayerInfo[playerid][pAddictUpgrade], PlayerInfo[playerid][pAddictUpgrade] * 5.0);
 	}
 	else if(!strcmp(params, "trader", true))
	{
	    if(PlayerInfo[playerid][pTraderUpgrade] >= 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your trader skill is already upgraded to its maximum level of 3.");
		}

		PlayerInfo[playerid][pTraderUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET traderupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your trader skill to level %i/3. You now pay %i percent less for items in shops.", PlayerInfo[playerid][pTraderUpgrade], PlayerInfo[playerid][pTraderUpgrade] * 10);
 	}
 	else if(!strcmp(params, "asset", true))
	{
	    if(PlayerInfo[playerid][pAssetUpgrade] >= 4)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your asset skill is already upgraded to its maximum level of 4.");
		}

		PlayerInfo[playerid][pAssetUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pAssetUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your asset skill to level %i/4. You can now own %i/%i houses and garages and %i/%i businesses and vehicles.", PlayerInfo[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
 	else if(!strcmp(params, "labor", true))
	{
	    if(PlayerInfo[playerid][pLaborUpgrade] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your labor skill is already upgraded to its maximum level of 5.");
		}

		PlayerInfo[playerid][pLaborUpgrade]++;
		PlayerInfo[playerid][pUpgradePoints]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i, upgradepoints = %i WHERE uid = %i", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pUpgradePoints], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You upgraded your labor skill to level %i/5. You now earn %i percent more extra cash when you work.", PlayerInfo[playerid][pLaborUpgrade], PlayerInfo[playerid][pLaborUpgrade] * 2);
	}
	else if(!strcmp(params, "spawnhealth", true))
	{
	    if(PlayerInfo[playerid][pSpawnHealth] >= 100)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your spawn health is at maximum (100).");
	    }

	    PlayerInfo[playerid][pSpawnHealth] += 5.0;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your spawn health. You will now spawn with %.1f health after death.", PlayerInfo[playerid][pSpawnHealth]);
	}
	else if(!strcmp(params, "spawnarmor", true))
	{
	    if(PlayerInfo[playerid][pSpawnArmor] > 100 && PlayerInfo[playerid][pVIPPackage] == 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your spawn armor is at maximum (100).");
	    }
	    else if(PlayerInfo[playerid][pSpawnArmor] > 125 && PlayerInfo[playerid][pVIPPackage] <= 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your spawn armor is at maximum (125).");
	    }
	    else if(PlayerInfo[playerid][pSpawnArmor] > 150 && PlayerInfo[playerid][pVIPPackage] == 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your spawn armor is at maximum (150).");
	    }

	    PlayerInfo[playerid][pSpawnArmor] += 2.0;
	    PlayerInfo[playerid][pUpgradePoints]--;

	    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your spawn armor. You will now spawn with %.1f armor after death.", PlayerInfo[playerid][pSpawnArmor]);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /upgrade [option] (%i points available)", PlayerInfo[playerid][pUpgradePoints]);
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Inventory, Addict, Trader, Asset, Labor, SpawnHealth, SpawnArmor");
		return 1;
	}

	if(PlayerInfo[playerid][pInventoryUpgrade] == 5 || PlayerInfo[playerid][pAddictUpgrade] == 3 || PlayerInfo[playerid][pTraderUpgrade] == 3 || PlayerInfo[playerid][pAssetUpgrade] == 4 || PlayerInfo[playerid][pLaborUpgrade] == 5 || PlayerInfo[playerid][pSpawnHealth] == 100 || PlayerInfo[playerid][pSpawnArmor] == 100)
	{
	    AwardAchievement(playerid, "Benefits");
	}

	return 1;
}

CMD:charity(playerid, params[])
{
	new option[10], param[64];

	if(PlayerInfo[playerid][pLevel] < 5)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot donate to charity if you're under level 5. /buylevel to level up.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /charity [info | health | armor | song]");
	}
	if(!strcmp(option, "info", true))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Charity _______");
		SendClientMessage(playerid, COLOR_GREY3, "If you have at least $1,000 on hand you can donate to charity.");
		SendClientMessage(playerid, COLOR_GREY3, "You can donate to give health or armor for the entire server using '{FFD700}/charity health/armor{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "You can also donate to globally play a song of your choice using '{FFD700}/charity song{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "You can also donate your money the traditional way using '{FFD700}/charity [amount]{AAAAAA}'.");
		SendClientMessage(playerid, COLOR_GREY3, "Once the charity bank hits a milestone, some of it will be given back to the community!");
		SendClientMessageEx(playerid, COLOR_AQUA, "** %s has been donated to charity so far.", FormatNumber(gCharity));
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(PlayerInfo[playerid][pCash] < 150000)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You need at least $150,000 on hand for this option.");
		}
		if(gCharityHealth)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 150000;
		gCharityHealth = 1;
		AddToTaxVault(150000);

		SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s has generously donated $150,000 to heal everyone to 150 health!", GetPlayerRPName(playerid));
		GivePlayerCash(playerid, -150000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(PlayerInfo[playerid][pCash] < 200000)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You need at least $200,000 on hand for this option.");
		}
		if(gCharityArmor)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}

		gCharity += 200000;
		gCharityArmor = 1;
		AddToTaxVault(200000);

		SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s has generously donated $200,000 to give full armor to everyone!", GetPlayerRPName(playerid));
		GivePlayerCash(playerid, -10000);
	}
  	else if(!strcmp(option, "song", true))
	{
	 	if(isnull(param))
 		{
		 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /charity [song] [songfolder/name.mp3]");
		}
		if(PlayerInfo[playerid][pCash] < 25000)
		{
  			return SendClientMessage(playerid, COLOR_GREY, "You need at least $25,000 on hand for this option.");
		}
		if(gettime() - gLastMusic < 300)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Music can only be played globally every 5 minutes.");
		}

		new
		    url[144];

		format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, param);

		foreach(new i : Player)
		{
		    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
		    {
				PlayAudioStreamForPlayer(i, url);
			}
		}
		gLastMusic = gettime();

		gCharity += 25000;
		AddToTaxVault(25000);

		SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s has generously donated $25,000 to play %s for the entire server!", GetPlayerRPName(playerid), param);
		GivePlayerCash(playerid, -25000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > PlayerInfo[playerid][pCash])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
		if(amount > 100000)
		{
		    SendClientMessageToAllEx(COLOR_ROYALBLUE, "Charity: %s has generously donated %s to charity!", GetPlayerRPName(playerid), FormatNumber(amount));
		}
	}

	return 1;
}

CMD:music(playerid, params[])
{
 	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____________________ List of Music _____________________");
    HTTP(playerid, HTTP_GET, SERVER_FETCH_URL, "", "HTTP_OnMusicFetchResponse");
 	return 1;
}

CMD:stopmusic(playerid, params[])
{
	SendClientMessage(playerid, COLOR_YELLOW, "You have stopped all active audio streams playing for yourself.");
	PlayerInfo[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplay(playerid, params[])
{
	new url[144];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gplay [songfolder/name.mp3]");
	}

    format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, params);

    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
	    {
			PlayAudioStreamForPlayer(i, url);
			SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of %s.", GetPlayerRPName(playerid), params);
			SendClientMessageEx(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}

	return 1;
}

CMD:gplayurl(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gplayurl [link]");
	}
	if(strfind(params, ".php", true) != -1)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "No .php links allowed!");
	}
    foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
	    {
			PlayAudioStreamForPlayer(i, params);
			SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: %s has started the global playback of a custom URL.", GetPlayerRPName(playerid));
			SendClientMessageEx(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}
	return 1;
}

CMD:gstop(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

    foreach(new i: Player)
	{
	    if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
	    {
		    StopAudioStreamForPlayer(i);
			SendClientMessageEx(i, COLOR_LIGHTRED, "AdmCmd: %s has stopped all active audio streams.", GetPlayerRPName(playerid));
		}
	}

	return 1;
}

CMD:dm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}

	PlayerInfo[targetid][pDMWarnings]++;

	if(PlayerInfo[targetid][pDMWarnings] < 3)
	{
	    new minutes = PlayerInfo[targetid][pDMWarnings] * 30;

	    PlayerInfo[targetid][pJailType] = 2;
    	PlayerInfo[targetid][pJailTime] = PlayerInfo[targetid][pDMWarnings] * (/* This is minutes */15 * 60);
    	PlayerInfo[targetid][pWeaponRestricted] = PlayerInfo[targetid][pDMWarnings] * 4;

		ResetPlayer(targetid);
		ResetPlayerWeapons(targetid);
		SetPlayerInJail(targetid);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was DM Warned & Prisoned for %i minutes by %s, reason: DM (%i/3)", GetPlayerRPName(targetid), minutes, GetPlayerRPName(playerid), PlayerInfo[targetid][pDMWarnings]);
		GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(PlayerInfo[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);
		SendClientMessageEx(targetid, COLOR_WHITE, "You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SendClientMessageEx(targetid, COLOR_WHITE, "Your punishment is %i hours of weapon restriction and %i/5 DM warning.", PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: DM (3/3 warnings)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		PlayerInfo[targetid][pDMWarnings] = 0;

		BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (3/3 warnings)");
		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was banned by %s, reason: DM (3/3 warnings)", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", PlayerInfo[targetid][pJailType], PlayerInfo[targetid][pJailTime], PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pWeaponRestricted], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:cleardm(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pAdminDuty])
	{
	    ClearDeathList(playerid);
	    SendClientMessage(playerid, COLOR_WHITE, "Death messages cleared.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are either not authorized to use this command or not on admin duty.");
	}

	return 1;
}

CMD:aduty(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty])
	{
	    if(PlayerInfo[playerid][pUndercover][0])
		{
            OnUndercover(playerid, 0, "", 0, 0.0, 0.0);
		}
		//SetPlayerSpecialTag(playerid, TAG_ADMIN);

	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);

		SetPlayerHealth(playerid, 32767);
		SetScriptArmour(playerid, 0.0);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s is now on admin duty.", GetPlayerRPName(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, "You are now on admin duty. Your stats will not be saved until you're off duty.");

        PlayerInfo[playerid][pAdminDuty] = 1;
        PlayerInfo[playerid][pTogglePhone] = 1;
        if(strcmp(PlayerInfo[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
		}
	}
	else
	{
		new savecheck = 0;
		SetPlayerSpecialTag(playerid, TAG_NONE);
		if(PlayerInfo[playerid][pPaycheck] > 1)
		{
		    savecheck = PlayerInfo[playerid][pPaycheck];
		}
  		if(PlayerInfo[playerid][pNoDamage])
	    {
	        PlayerInfo[playerid][pNoDamage] = 0;
	        SendClientMessage(playerid, COLOR_GREY, "Your god mode was turned off.");
	    }
		ClearDeathList(playerid);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
		PlayerInfo[playerid][pPaycheck] = savecheck;
	}

	return 1;
}

CMD:adminname(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /adminname [name ('none' to reset)]");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The name specified is not supported by the SA-MP client.");
	}

	strcpy(PlayerInfo[playerid][pAdminName], name, MAX_PLAYER_NAME);

	if(PlayerInfo[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, name);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminname = '%e' WHERE uid = %i", name, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s changed their administrator name to %s.", PlayerInfo[playerid][pUsername], name);
	return 1;
}

CMD:getip(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /getip [playerid]");
	}
	if(PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[targetid][pAdmin] > 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command on another administrator");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "** %s[%i]'s IP: %s **", GetPlayerRPName(targetid), targetid, GetPlayerIP(targetid));
	return 1;
}

CMD:ogetip(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ogetip [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

CMD:iplookup(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /iplookup [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid, params[])
{
	new username[24], specifiers[] = "%D of %M, %Y @ %k:%i";

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lastactive [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM users WHERE username = '%e'", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}

CMD:listjailed(playerid, params[])
{
	new type[14];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Jailed Players ______");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJailType] > 0)
	    {
	        switch(PlayerInfo[i][pJailType])
	        {
	            case 1: type = "OOC jailed";
				case 2: type = "OOC prisoned";
				case 3: type = "IC prisoned";
			}

			SendClientMessageEx(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Time: %i seconds", i, GetPlayerRPName(i), type, PlayerInfo[i][pJailTime]);
		}
	}

	return 1;
}

CMD:prisoninfo(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /prisoninfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pJailType] != 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not in OOC prison.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "** %s was prisoned by %s, reason: %s (%i seconds left.) **", GetPlayerRPName(targetid), PlayerInfo[targetid][pPrisonedBy], PlayerInfo[targetid][pPrisonReason], PlayerInfo[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /relog [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to relog.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);

	ToggleLoginTDForPlayer(targetid, true);

	PlayerInfo[targetid][pLogged] = 0;
	CallLocalFunction("OnPlayerRequestClass", "ii", targetid, 0);
	return 1;
}

CMD:setint(playerid, params[])
{
    new targetid, interiorid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setint [playerid] [int]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!(0 <= interiorid <= 19))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid interior. Valid interiors range from 0 to 19.");
	}

	SetPlayerInterior(targetid, interiorid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's interior set to ID %i.", GetPlayerRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid, params[])
{
    new targetid, worldid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setvw [playerid] [vw]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's virtual world set to ID %i.", GetPlayerRPName(targetid), worldid);
	return 1;
}

CMD:setskin(playerid, params[])
{
    new targetid, skinid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setskin [playerid] [skinid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin specified.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher admin level than you. You can't change their skin.");
	}

	SetScriptSkin(targetid, skinid);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's skin set to ID %i.", GetPlayerRPName(targetid), skinid);
	return 1;
}

CMD:revive(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /revive [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not injured.");
	}

	PlayerInfo[targetid][pInjured] = 0;

	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);

	SendClientMessage(targetid, COLOR_YELLOW, "You have been revived by an admin!");
	if(PlayerInfo[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SendClientMessageEx(PlayerInfo[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetPlayerRPName(targetid));
	    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has revived %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:heject(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /heject [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pHospital])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not in hospital.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s ejected %s from the hospital.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	PlayerInfo[targetid][pHospitalTime] = 1;
	SendClientMessage(targetid, COLOR_YELLOW, "You have been ejected from hospital by an admin!");
	return 1;
}

CMD:goto(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerInfo[targetid][pToggleTP] == 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Target id has togged teleports");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /goto [playerid/location]");
 		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Airport, Bank");
 		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Dealership, VIP, Paintball, DMV, Casino, Spawn, Allsaints, Casino");
		return 1;
	}

	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Los Santos.");
    }
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to San Fierro.");
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Las Venturas.");
    }
    else if(!strcmp(params, "grove", true))
    {
		TeleportToCoords(playerid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Grove Street.");
    }
    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Idlewood.");
    }
    else if(!strcmp(params, "unity", true))
    {
		TeleportToCoords(playerid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Unity Station.");
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Jefferson Motel.");
    }
    else if(!strcmp(params, "market", true))
    {
		TeleportToCoords(playerid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Market.");
    }
    else if(!strcmp(params, "airport", true))
    {
		TeleportToCoords(playerid, 1938.7185, -2370.6375, 13.5469, 0.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to LS airport.");
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Mulholland bank.");
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Grotti dealership.");
    }
    else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1024.2438, -1553.4551, 13.5691, 90.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to VIP lounge.");
	}
	else if(!strcmp(params, "paintball", true))
    {
        TeleportToCoords(playerid, 1310.1538, -1366.9827, 13.5144, 315.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Paintball.");
	}
	else if(!strcmp(params, "dmv", true))
    {
        TeleportToCoords(playerid, 1224.1537, -1824.5253, 13.5900, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to DMV.");
	}
	else if(!strcmp(params, "casino", true))
    {
        TeleportToCoords(playerid, 1022.5992, -1122.8069, 23.8710, 180.0000, 0, 0);
        SendClientMessage(playerid, COLOR_GREY2, "Teleported to Casino.");
	}
	else if(!strcmp(params, "spawn", true))
	{
	    TeleportToCoords(playerid, 1723.4384, -1380.0234, 13.5469, 270.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to Spawn.");
	}
	else if(!strcmp(params, "allsaints", true))
	{
	    TeleportToCoords(playerid, 1189.5807, -1301.7474, 13.5584, 180.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to Allsaints.");
	}
	else if(!strcmp(params, "county", true))
	{
	    TeleportToCoords(playerid, 1999.4670, -1448.2010, 13.5601, 315.0000, 0, 0);
	    SendClientMessage(playerid, COLOR_GREY2, "Teleported to County.");
	}
	else
	{
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!IsPlayerSpawned(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(playerid, targetid);
		SendClientMessageEx(playerid, COLOR_GREY2, "Teleported to %s's position.", GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:gethere(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gethere [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
    if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't teleport an admin who has a higher admin level than you.");
	}
	/*if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the event.");
	}*/

	TeleportToPlayer(targetid, playerid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported %s to your position.", GetPlayerRPName(targetid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotocar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle specified.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported to vehicle ID %i.", vehicleid);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid, driverid;

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /getcar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle specified.");
	}
    if((driverid = GetVehicleDriver(vehicleid)) != INVALID_PLAYER_ID && PlayerInfo[driverid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't teleport the vehicle of an admin who has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SendClientMessageEx(playerid, COLOR_GREY2, "Teleported vehicle ID %i to your position.", vehicleid);
	return 1;
}

CMD:gotocoords(playerid, params[])
{
	new Float:x, Float:y, Float:z, interiorid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotocoords [x] [y] [z] [int (optional)]");
	}

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interiorid);
	return 1;
}

CMD:gotoint(playerid, params[])
{
	static list[4096];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Choose an interior to teleport to.", list, "Select", "Cancel");
	return 1;
}

CMD:jetpack(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

    PlayerInfo[playerid][pJetpack] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(playerid, "~g~Jetpack", 3000, 3);

	switch(random(4))
	{
	    case 0: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: The jetpack is part of an experiment conducted at the Area 69 facility.");
	    case 1: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: You stole this from Area 69 in that one single player mission. Remember?");
	    case 2: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: You probably don't need this anyway. All you admins seem to do is airbreak around the map.");
	    case 3: SendClientMessage(playerid, COLOR_WHITE, "** Random Fact: You probably aren't reading this anyway. Fuck you.");
	}

	return 1;
}


CMD:sendto(playerid, params[])
{
	new targetid, option[12], param[32];

    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sendto [playerid] [location]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Player, Vehicle, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Bank");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Dealership, VIP, Paintball, DMV, Casino");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
	if(PlayerInfo[targetid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is in jail so you can't teleport them.");
	}
	if(PlayerInfo[targetid][pPaintball] > 0 && PlayerInfo[playerid][pPaintball] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the paintball arena.");
	}
	if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in the event.");
	}
	if(PlayerInfo[playerid][pAdmin] < 2 && isnull(PlayerInfo[targetid][pHelpRequest]) && PlayerInfo[playerid][pAcceptedHelp] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't submitted a help request. Therefore you can't teleport them.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't teleport an admin who has a higher admin level than you.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1544.4407, -1675.5522, 13.5584, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Los Santos.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Los Santos.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1421.5629, -288.9972, 14.1484, 135.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to San Fierro.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to San Fierro.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1670.6908, 1423.5240, 10.7811, 270.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Las Venturas.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Las Venturas.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "grove", true))
    {
		TeleportToCoords(targetid, 2497.8274, -1668.9033, 13.3438, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Grove Street.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Grove Street.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2090.0664, -1816.9071, 13.3904, 90.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Idlewood.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Idlewood.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "unity", true))
    {
		TeleportToCoords(targetid, 1782.2683, -1865.5726, 13.5725, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Unity Station.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Unity Station.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438, -1164.5013, 25.7331, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Jefferson Motel.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Jefferson Motel.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "market", true))
    {
		TeleportToCoords(targetid, 818.1782, -1349.2217, 13.5260, 0.0000, 0, 0);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Market.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Market.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1463.8929, -1026.6189, 23.8281, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the Bank.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the Bank.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 546.7000, -1281.5160, 17.2482, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Grotti car dealership.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Grotti car dealership.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1024.2438, -1553.4551, 13.5691, 90.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the VIP lounge.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the VIP lounge.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "paintball", true))
    {
        TeleportToCoords(targetid, 1310.1538, -1366.9827, 13.5144, 315.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Paintball.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Paintball.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid, 1224.1537, -1824.5253, 13.5900, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to the DMV.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to the DMV.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "casino", true))
    {
        TeleportToCoords(targetid, 1022.5992, -1122.8069, 23.8710, 180.0000, 0, 0);

        SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to Casino.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to Casino.", GetPlayerRPName(playerid));
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SendClientMessage(playerid, COLOR_GREY, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sendto [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The target specified is disconnected.");
		}
		if(!IsPlayerSpawned(sendtargetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The target specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(targetid, sendtargetid);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to %s's location.", GetPlayerRPName(targetid), GetPlayerRPName(sendtargetid));
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to %s's location.", GetPlayerRPName(playerid), GetPlayerRPName(sendtargetid));
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(PlayerInfo[playerid][pAdmin] < 1)
        {
            return SendClientMessage(playerid, COLOR_GREY, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sendto [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle specified.");
		}

		TeleportToVehicle(targetid, vehicleid);

		SendClientMessageEx(playerid, COLOR_GREY2, "You have sent %s to vehicle ID %i.", GetPlayerRPName(targetid), vehicleid);
		SendClientMessageEx(targetid, COLOR_GREY2, "%s has sent you to vehicle ID %i.", GetPlayerRPName(playerid), vehicleid);
	}

	return 1;
}

CMD:listen(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!PlayerInfo[playerid][pListen])
	{
		PlayerInfo[playerid][pListen] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "You are now listening to all IC & local OOC chats.");
	}
	else
	{
		PlayerInfo[playerid][pListen] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "You are no longer listening to IC & local OOC chats.");
	}

	return 1;
}

CMD:jail(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /jail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /ojail.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerInfo[targetid][pJailType] = 1;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was jailed for %i minutes by %s, reason: %s", GetPlayerRPName(targetid), minutes, GetPlayerRPName(playerid), reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been admin jailed for %i minutes by %s.", minutes, GetPlayerRPName(playerid));
    return 1;
}

CMD:rwarn(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rwarn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pReportMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is muted from reports.");
	}

	PlayerInfo[targetid][pReportWarns]++;

	SendClientMessageEx(targetid, COLOR_LIGHTRED, "** %s issued you a report warning, reason: %s (%i/3)", GetPlayerRPName(playerid), reason, PlayerInfo[targetid][pReportWarns]);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was given a report warning by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);

	if(PlayerInfo[targetid][pReportWarns] >= 3)
	{
	    PlayerInfo[targetid][pReportMuted] = 12;
	    SendClientMessage(targetid, COLOR_LIGHTRED, "** You have been muted from reports for 12 playing hours.");
	}

	return 1;
}

CMD:runmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /runmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pReportMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is not muted from reports.");
	}

	PlayerInfo[targetid][pReportWarns] = 0;
	PlayerInfo[targetid][pReportMuted] = 0;

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from reports by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	SendClientMessageEx(targetid, COLOR_YELLOW, "Your report mute has been lifted by %s. Your report warnings were reset.", GetPlayerRPName(playerid));
	return 1;
}

CMD:nmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pNewbieMuted])
	{
	    PlayerInfo[targetid][pNewbieMuted] = 1;
		PlayerInfo[targetid][pNewbieMuteTime] = gettime() + 14400;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from newbie chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from newbie chat by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pNewbieMuted] = 0;
		PlayerInfo[targetid][pNewbieMuteTime] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from newbie chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from newbie chat by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:hmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pHelpMuted])
	{
	    PlayerInfo[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from help requests by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from help requests by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from help requests by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from help requests by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:admute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /admute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pAdMuted])
	{
	    PlayerInfo[targetid][pAdMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from advertisements by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from advertisements by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from advertisements by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from advertisements by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:gmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pGlobalMuted])
	{
	    PlayerInfo[targetid][pGlobalMuted] = 1;
	    PlayerInfo[targetid][pGlobalMuteTime] = gettime() + 14400;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from global chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from global chat by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pGlobalMuted] = 0;
	    PlayerInfo[targetid][pGlobalMuteTime] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from global chat by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from global chat by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:rmute(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(!PlayerInfo[targetid][pReportMuted])
	{
	    PlayerInfo[targetid][pReportMuted] = 99999;
        PlayerInfo[targetid][pReportMuteTime] = gettime() + 14400;

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was muted from submitting reports by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been muted from submitting reports by %s.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[targetid][pReportMuted] = 0;
		PlayerInfo[targetid][pReportMuteTime] = 0;

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was unmuted from submitting reports by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	    SendClientMessageEx(targetid, COLOR_WHITE, "You have been unmuted from submitting reports by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:freeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /freeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	TogglePlayerControllable(targetid, 0);
	PlayerInfo[playerid][pAdminFrozen] = 1;
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was frozen by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unfreeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(PlayerInfo[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		PlayerInfo[targetid][pTazedTime] = 0;
	}

	PlayerInfo[targetid][pTied] = 0;
	PlayerInfo[playerid][pAdminFrozen] = 0;
	TogglePlayerControllable(targetid, 1);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s was unfrozen by %s.", GetPlayerRPName(targetid), GetPlayerRPName(playerid));
	return 1;
}

CMD:skiptut(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skiptut [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pTutorial])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player isn't currently watching the tutorial.");
	}

	SendClientMessageEx(targetid, COLOR_WHITE, "%s has forced you out of the tutorial.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s forced %s out of the tutorial.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	KillTimer(PlayerInfo[targetid][pTutorialTimer]);
	TutorialTimer(targetid, 11);
	return 1;
}

CMD:listguns(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listguns [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ %s's Weapons _______", GetPlayerRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
		{

			if(!PlayerHasWeapon(targetid, weapon, true)) {
		        SendClientMessageEx(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SendClientMessageEx(playerid, COLOR_GREY2, "-> %s", GetWeaponNameEx(weapon));
			}
		}
	}

	return 1;
}

CMD:disarm(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /disarm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

 	ResetPlayerWeaponsEx(targetid);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has disarmed %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:nrn(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /nrn [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
/*	if(PlayerInfo[targetid][pLevel] > 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is level 3 or above and doesn't need a free namechange.");
	} */
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "");
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to change their name for being Non-RP.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}


CMD:odm(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /odm [username]");
	}
    if(IsPlayerOnline(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /dm instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, ip, adminlevel, dmwarnings FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineDM", "is", playerid, name);
	return 1;
}

CMD:prison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /prison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerInfo[targetid][pJailType] = 2;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

	ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);

	SetPlayerInJail(targetid);
	GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", GetPlayerNameEx(playerid), reason, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, PlayerInfo[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(PlayerInfo[targetid][pPrisonReason], reason, 128);

	Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by %s, reason: %s", GetPlayerRPName(targetid), minutes, GetPlayerRPName(playerid), reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by %s.", minutes, GetPlayerRPName(playerid));
    return 1;
}

CMD:oprison(playerid, params[])
{
	new username[MAX_PLAYERS], minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /oprison [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /prison instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:release(playerid, params[])
{
    new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /release [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not jailed.");
	}

	PlayerInfo[targetid][pJailTime] = 1;
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was released from jail/prison by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	return 1;
}

CMD:fine(playerid, params[])
{
	new targetid, amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fine [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be fined.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was fined %s by %s, reason: %s", GetPlayerRPName(targetid), FormatNumber(amount), GetPlayerRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
	return 1;
}

CMD:pfine(playerid, params[])
{
	new targetid, percent, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /pfine [playerid] [percent] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The percentage value must be between 1 and 100.");
	}

	new amount = ((PlayerInfo[targetid][pCash] + PlayerInfo[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was fined %s by %s, reason: %s", GetPlayerRPName(targetid), FormatNumber(amount), GetPlayerRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i (%i percent), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, percent, reason);
	return 1;
}

CMD:ofine(playerid, params[])
{
	new username[MAX_PLAYERS], amount, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ofine [username] [amount] [reason]");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid amount.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /fine instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sethp [playerid] [amount]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(amount < 1.0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this to an admin with a higher level than you.");
	}

	SetPlayerHealth(targetid, amount);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
    new targetid, Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SetScriptArmour(targetid, amount);
	SendClientMessageEx(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:refillcars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i: Vehicle)
	{
 		vehicleFuel[i] = 100;
	}

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s refilled all vehicles to maximum fuel.", GetPlayerRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /refilldrug [seeds | cocaine | ephedrine]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command refills the specified drug stock to maximum value.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has refilled the seeds in the drug den.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    gCocaineStock = 500;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has refilled the cocaine in the crack house.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has refilled the ephedrine in the drug den.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:togooc(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SendClientMessageToAllEx(COLOR_WHITE, "(( Administrator %s enabled the OOC channel. ))", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SendClientMessageToAllEx(COLOR_WHITE, "(( Administrator %s disabled the OOC channel. ))", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:tognewbie(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SendClientMessageToAllEx(COLOR_NEWBIE, "** Administrator %s enabled the newbie channel.", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SendClientMessageToAllEx(COLOR_NEWBIE, "** Administrator %s disabled the newbie channel.", GetPlayerRPName(playerid));
	}
	return 1;
}
CMD:god(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6 || PlayerInfo[playerid][pAdminDuty])
	{
		if(!PlayerInfo[playerid][pNoDamage])
		{
			PlayerInfo[playerid][pNoDamage] = 1;
			SendClientMessage(playerid, COLOR_GREY, "You are now in GODMODE, you will no longer take damage from ANYTHING.");
		}
		else
		{
		    PlayerInfo[playerid][pNoDamage] = 0;
		    SendClientMessage(playerid, COLOR_GREY, "You've turned off GODMODE, you will now take damage normally.");
		}
	    return 1;
	}
	return 0;
}

CMD:togglobal(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SendClientMessageToAllEx(COLOR_GLOBAL, "(( Administrator %s enabled the global channel. ))", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SendClientMessageToAllEx(COLOR_GLOBAL, "(( Administrator %s disabled the global channel. ))", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has enabled the report channel.", GetPlayerRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has disabled the report channel.", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listpvehs [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehicles", "ii", playerid, targetid);
	return 1;
}

CMD:removepveh(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepveh [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehiclesForRemoval", "ii", playerid, targetid);
	return 1;
}

CMD:despawnpveh(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /despawnpveh [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or not owned by any player.");
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "You have despawned %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid, params[])
{
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /veh [modelid/name] [color1 (optional)] [color2 (optional)]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle model.");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid color. Valid colors range from -1 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Cannot spawn vehicle. The vehicle pool is currently full.");
	}

	ResetVehicleObjects(vehicleid);

	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	PutPlayerInVehicle(playerid, vehicleid, 0);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s spawned a %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_WHITE, "%s (ID %i) spawned. Use '/savevehicle %i' to save this vehicle to the database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid, params[])
{
	new vehicleid, gangid, type, delay, vip, Float:x, Float:y, Float:z, Float:a;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iiiiI(0)", vehicleid, gangid, type, delay, vip))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /savevehicle [vehicleid] [gangid (-1 = none)] [faction type] [respawn delay (seconds)] [vip level (optional)]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Army");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is either invalid or not an admin spawned vehicle.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(!(0 <= type <= 7))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(!(0 <= vip <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

    SendClientMessageEx(playerid, COLOR_WHITE, "%s saved. This vehicle will now spawn here from now on.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, gangid, factiontype, vippackage, respawndelay, interior, world) VALUES(%i, '%f', '%f', '%f', '%f', %i, %i, %i, %i, %i, %i, %i, %i)",
		GetVehicleModel(vehicleid), x, y, z, a, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, vip, delay, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:editvehicle(playerid, params[])
{
	new vehicleid, option[14], param[32], value;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Spawn, Price, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Gang, Faction, Job, VIP, Respawndelay, Siren, Rank");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or a static vehicle.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    /*if(VehicleInfo[vehicleid][vFactionType] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't set the spawn of a faction vehicle indoors.");
	    }*/

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_AQUA, "** You have moved the spawn point for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "price", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [price] [value]");
		}

		VehicleInfo[vehicleid][vPrice] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET price = %i WHERE id = %i", VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the price of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [tickets] [value]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the tickets of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Faction vehicles can't be locked.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the locked state of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [plate] [text]");
		}

		strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ResyncVehicle(vehicleid);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the license plate of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
		SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle will need to be respawned for changes to take effect.");
	}
    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [color] [color 1] [color 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The colors must range from 0 to 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the colors of %s (ID %i) to %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The paintjob must range from -1 to 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't change the paintjob on a faction vehicle.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the paintjob of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [neon] [color]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "List of colors: None, Red, Blue, Green, Yellow, Pink, White");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "red", true)) {
			SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "blue", true)) {
			SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "green", true)) {
			SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "yellow", true)) {
			SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "white", true)) {
			SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid color.");
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the trunk of %s's %s (ID %i) to level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [health] [amount]");
		}
		if(!(300.0 <= amount <= 10000.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The health value must range from 300.0 to 10000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the health of %s (ID %i) to %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You have reset the gang for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the gang of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(0 <= type <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've reset the faction type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "** You've set the faction type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [job] [type]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (-1) None (0) Pizzaman (1) Courier (2) Fisherman (3) Bodyguard (4) Weapon Dealer (5) Mechanic");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (6) Miner (7) Sweeper (8) Uper Driver (9) Drug Dealer (10) Lawyer (11) Detective (12) Thief");
			return 1;
		}
		if(!(-1 <= value <= 12))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid job.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've reset the job type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "** You've set the job type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
	else if(!strcmp(option, "vip", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [vip] [level (0-3)]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level.");
		}

		VehicleInfo[vehicleid][vVIP] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET vippackage = %i WHERE id = %i", VehicleInfo[vehicleid][vVIP], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == 0)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've reset the VIP restriction for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "** You've set the VIP restriction of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetVIPRank(value), value);
	}
    else if(!strcmp(option, "respawndelay", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [respawndelay] [seconds (-1 = none)]");
		}

	    VehicleInfo[vehicleid][vRespawnDelay] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET respawndelay = %i WHERE id = %i", VehicleInfo[vehicleid][vRespawnDelay], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the respawn delay of %s (ID %i) to %i seconds.", GetVehicleName(vehicleid), vehicleid, value);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "siren", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] == FACTION_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option can only be adjusted on faction vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [siren] [1/0]");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET siren = %i WHERE id = %i", value, id);
		mysql_tquery(connectionID, queryBuffer);

	 	SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the siren of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	 	SendClientMessage(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	else if(!strcmp(option, "rank", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editvehicle [vehicleid] [rank] [rank(0-12)]");
		}
		if(!(0 <= value <= 12))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

		VehicleInfo[vehicleid][vRank] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET rank = %i WHERE id = %i", VehicleInfo[vehicleid][vRank], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == 0)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've reset the rank restriction for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "** You've set the rank restriction of %s (ID %i) to %i (%i).", GetVehicleName(vehicleid), vehicleid, VehicleInfo[vehicleid][vRank], value);
	}

	return 1;
}

CMD:removevehicle(playerid, params[])
{
	new vehicleid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or a static vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:vehicleinfo(playerid, params[])
{
	new vehicleid, neon[12], gang[32], Float:health;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vehicleinfo [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vehicle specified is invalid or a static vehicle.");
	}

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	if(VehicleInfo[vehicleid][vGang] >= 0)
	{
		strcat(gang, GangInfo[VehicleInfo[vehicleid][vGang]][gName]);
	}
	else
	{
	    gang = "None";
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ %s Stats _______", GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Owner: %s - Value: %s - Tickets: %s - License Plate: %s", VehicleInfo[vehicleid][vOwner], FormatNumber(VehicleInfo[vehicleid][vPrice]), FormatNumber(VehicleInfo[vehicleid][vTickets]), VehicleInfo[vehicleid][vPlate]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Neon: %s - Trunk Level: %i/3 - Alarm Level: %i/3 - Health: %.1f - Fuel: %i/100", neon, VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vAlarm], health, vehicleFuel[vehicleid]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Gang: %s - Faction: %s - Rank: %i - Job Type: %s - Respawn Delay: %i seconds", gang, factionTypes[VehicleInfo[vehicleid][vFactionType]], VehicleInfo[vehicleid][vRank], GetJobName(VehicleInfo[vehicleid][vJob]), VehicleInfo[vehicleid][vRespawnDelay]);
	return 1;
}

CMD:aclearwanted(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /aclearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has no active charges to clear.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_WHITE, "Your crimes were cleared by %s.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has cleared %s's crimes and wanted level.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:removedm(playerid, params[])
{
    new targetid;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removedm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pDMWarnings] && !PlayerInfo[targetid][pWeaponRestricted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't been punished for DM recently.");
	}

	PlayerInfo[targetid][pDMWarnings]--;
	PlayerInfo[targetid][pWeaponRestricted] = 0;

	if(PlayerInfo[targetid][pJailType] == 2)
	{
	    PlayerInfo[targetid][pJailType] = 0;
		PlayerInfo[targetid][pJailTime] = 0;

		SetPlayerPos(targetid, 1544.4407, -1675.5522, 13.5584);
		SetPlayerFacingAngle(targetid, 90.0000);
		SetPlayerInterior(targetid, 0);
		SetPlayerVirtualWorld(targetid, 0);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SendClientMessageEx(targetid, COLOR_AQUA, "** Your DM punishment has been reversed by %s.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reversed %s's DM punishment.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", PlayerInfo[targetid][pDMWarnings], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SendClientMessage(playerid, COLOR_GREY, "Admin vehicle destroyed.");
	}

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(adminVehicle{i})
	    {
	        if(IsValidDynamicObject(vehicleSiren[i]))
			{
			    DestroyDynamicObject(vehicleSiren[i]);
			    vehicleSiren[i] = INVALID_OBJECT_ID;
			}

	        DestroyVehicleEx(i);
	        adminVehicle{i} = false;
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s destroyed all admin spawned vehicles.", GetPlayerRPName(playerid));
	return 1;
}

CMD:respawncars(playerid, params[])
{
	new option[10], param[12];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /respawncars [job | faction | nearby | all]");
	}
	if(!strcmp(option, "job", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if((pizzaVehicles[0] <= i <= pizzaVehicles[5]) || (courierVehicles[0] <= i <= courierVehicles[6]) || (sweeperVehicles[0] <= i <= sweeperVehicles[3]) || (taxiVehicles[0] <= i <= taxiVehicles[3]) || (garbageVehicles[0] <= i <= garbageVehicles[5]) || (VehicleInfo[i][vJob] != JOB_NONE))
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied job vehicles.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /respawncars [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(1 <= type <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction type.");
		}

		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied {F7A763}%s{FF6347} vehicles.", GetPlayerRPName(playerid), factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles in %s.", GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		foreach(new i: Vehicle)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s respawned all unoccupied vehicles.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:broadcast(playerid, params[])
{
	new style, text[128];

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid style.");
	}
	if(style == 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Style 2 only disappears after death and is therefore disabled.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't fix a vehicle if you're not sitting in one.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_GREY, "Vehicle fixed.");
	return 1;
}

CMD:clearchat(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    ClearChat(i);
	}

	return 1;
}

CMD:healrange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /healrange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);

			    if(GetPlayerArmourEx(i) < 100.0)
			    {
				    SetScriptArmour(i, 100.0);
				}
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has healed everyone nearby.");
		}
	}

	return 1;
}

CMD:freezerange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /freezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, false);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has frozen everyone nearby.");
		}
	}

	return 1;
}

CMD:unfreezerange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unfreezerange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!PlayerInfo[i][pAdminDuty])
		    {
			    TogglePlayerControllable(i, true);
			}

		    SendClientMessage(i, COLOR_WHITE, "An admin has unfrozen everyone nearby.");
		}
	}

	return 1;
}

CMD:reviverange(playerid, params[])
{
	new Float:radius;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /reviverange [radius]");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius) && PlayerInfo[i][pInjured])
		{
			PlayerInfo[i][pInjured] = 0;
			if(PlayerInfo[i][pAcceptedEMS] != INVALID_PLAYER_ID)
			{
			    SendClientMessageEx(PlayerInfo[i][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetPlayerRPName(i));
			    PlayerInfo[i][pAcceptedEMS] = INVALID_PLAYER_ID;
			}

			SetPlayerHealth(i, 100.0);
			ClearAnimations(i, 1);

		    SendClientMessage(i, COLOR_WHITE, "An admin has revived everyone nearby.");
		}
	}

	return 1;
}

CMD:shots(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /shots [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM shots WHERE playerid = %i ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListShots", "ii", playerid, targetid);
	return 1;
}

CMD:damages(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /damages [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, playerid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListDamages", "ii", playerid, targetid);
	return 1;
}

CMD:kills(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /kills [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 20", PlayerInfo[targetid][pID], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	gLastAd = 0;
	SendClientMessage(playerid, COLOR_GREY, "Advertisement timer reset.");
	return 1;
}


CMD:setname(playerid, params[])
{
	new targetid, name[24];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setname [playerid] [name]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
 	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pAdminDuty] && strcmp(PlayerInfo[targetid][pAdminName], "None", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't change the name of a player on admin duty. They're using their admin name.");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The name specified is not supported by the SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

CMD:explode(playerid, params[])
{
	new targetid, damage;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /explode [playerid] [damage(amount)]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 6, 20.0);
    DamagePlayer(targetid, damage, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	SendClientMessageEx(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetPlayerRPName(targetid));
	return 1;
}

CMD:event(playerid, params[])
{
	new option[10], param[128];

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SendClientMessage(playerid, COLOR_AQUA, "You have set the spawn point for {FF0000}Red{33CCFF} team.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SendClientMessage(playerid, COLOR_AQUA, "You have set the spawn point for {0000FF}Blue{33CCFF} team.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessage(playerid, COLOR_AQUA, "You have set the event spawn point.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [type] [1=DM 2=TDM 3=Race 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	    }
	    /*if(EventInfo[eReady])
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The type can only be adjusted during event setup.");
		}*/

		EventInfo[eType] = type;

	    switch(type)
	    {
	        case 1:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Deathmatch{33CCFF}.");
	        }
	        case 2:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Team Deathmatch{33CCFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SendClientMessage(playerid, COLOR_LIGHTRED, "** Red Team position not set. '/event position red' to set position.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SendClientMessage(playerid, COLOR_LIGHTRED, "** Blue Team position not set. '/event position blue' to set position.");
	        }
            case 3:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Race{33CCFF}. /veh to spawn the vehicles.");
	        }
	        case 4:
	        {
	            SendClientMessage(playerid, COLOR_AQUA, "You have set the event type to {FF6347}Other{33CCFF}.");
	        }
		}
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [health] [amount]");
		}

	    EventInfo[eHealth] = amount;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the event health to %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [armor] [amount]");
		}

	    EventInfo[eArmor] = amount;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the event armor to %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [jointext] [text]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SendClientMessageEx(playerid, COLOR_AQUA, "You set the join text to '%s'.", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
	    }
	    if(!(0 <= weaponid <= 46))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon.");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SendClientMessageEx(playerid, COLOR_AQUA, "You set the weapon in slot %i to %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [skin] [red/blue] [skinid]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin ID.");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SendClientMessageEx(playerid, COLOR_AQUA, "You set the skin for {FF0000}Red{33CCFF} team to %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SendClientMessageEx(playerid, COLOR_AQUA, "You set the skin for {0000FF}Blue{33CCFF} team to %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [skin] [skinid (0 = reset)]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin ID.");
			}

			EventInfo[eSkin][0] = skinid;
   			SendClientMessageEx(playerid, COLOR_AQUA, "You set the event skin to %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can only set rules for DM & TDM events.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} crackshooting in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} crackshooting in the event.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} quickswapping in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} quickswapping in the event.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SendClientMessage(playerid, COLOR_AQUA, "You have {00AA00}allowed{33CCFF} healing in the event.");
	        else
	            SendClientMessage(playerid, COLOR_AQUA, "You have {FF6347}disallowed{33CCFF} healing in the event.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /event [ready] [confirm]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "This command will announce to the whole server that an event is ready to join.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The event is already marked as ready.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no spawn point set for red team.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no spawn point set for blue team.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no skin set for red team.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "There is no skin set for blue team.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "The event type has not been set.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "The spawn point has not been set.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a DM event, use /joinevent to join!", GetPlayerRPName(playerid));
	    	case 2: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a TDM event, use /joinevent to join!", GetPlayerRPName(playerid));
	    	case 3: SendClientMessageToAllEx(COLOR_AQUA, "%s has started a Race event, use /joinevent to join!", GetPlayerRPName(playerid));
	    	case 4: SendClientMessageToAllEx(COLOR_AQUA, "%s has started an event, use /joinevent to join!", GetPlayerRPName(playerid));
	    }

	    SendClientMessage(playerid, COLOR_WHITE, "Use '/event lock' to lock the event and '/event start' to start.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SendClientMessageToAllEx(COLOR_AQUA, "The event has been locked by %s.", GetPlayerRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SendClientMessageToAllEx(COLOR_AQUA, "The event was unlocked by %s.", GetPlayerRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The event has already started.");
	    }

	    foreach(new i : Player)
		{
	        if(PlayerInfo[i][pJoinedEvent])
				SendClientMessage(i, COLOR_AQUA, "The event has started. Good luck!");
			else
			    SendClientMessage(i, COLOR_AQUA, "The event has started. Better luck next time!");
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SendClientMessage(playerid, COLOR_AQUA, "You have initiated a countdown for all players in the event.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The event currently active is not a TDM event.");
		}

		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pJoinedEvent])
		    {
				PlayerInfo[i][pEventTeam] = teamid;

				SetTimerEx("teamBalance", 300+random(500), false, "ii", playerid, teamid);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(PlayerInfo[i][pEventTeam] == RED_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~r~Red Team", 3000, 4);
				} else if(PlayerInfo[i][pEventTeam] == BLUE_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~b~Blue Team", 3000, 6);
				}

				SendClientMessageEx(i, COLOR_AQUA, "%s has balanced the teams. You are now in %s{33CCFF} team.", GetPlayerRPName(playerid), (PlayerInfo[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SendClientMessage(playerid, COLOR_AQUA, "You have balanced the event teams.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is no event ready. Please set one up first.");
	    }

	    ResetEvent();
	    SendClientMessageToAllEx(COLOR_AQUA, "The event was ended by %s.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid, params[])
{
	new username[MAX_PLAYERS], reason[128], targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /oban [username] [reason]");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be kicked.");
	}
    if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /ban instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:joinevent(playerid, params[])
{
	if(PlayerInfo[playerid][pJailType])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are in jail and therefore cannot participate in an event.");
	}
	if(PlayerInfo[playerid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You already joined the event. /quitevent to leave.");
	}
	if(!EventInfo[eReady])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There are no events you can join at the moment.");
	}
	if(EventInfo[eLocked])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The event is locked. Better luck next time!");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you are playing paintball.");
	}
	if(PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you are in a duel.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pAcceptedHelp] || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event at the moment.");
	}
    if((PlayerInfo[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are restricted from weapons and therefore can't join this type of event.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:quitevent(playerid, params[])
{
    if(!PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pHunted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in an event which you can quit.");
	}

 	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s has left the event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /permaban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

    Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was permanently banned by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid, params[])
{
	new string[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 3 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /baninfo [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%e' OR ip = '%e'", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 3 && !PlayerInfo[playerid][pBanAppealer] && !PlayerInfo[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, users b WHERE a.uid = b.uid AND b.username = '%e' ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:unban(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unban [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new string[25];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unbanip [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = '%s'", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");

	UnBlockIpAddress(params);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has unbanned IP '%s'.", GetPlayerRPName(playerid), params);
	return 1;
}

CMD:banip(playerid, params[])
{
	new ip[16], reason[128], targetid;

    if(PlayerInfo[playerid][pAdmin] < 4 && !PlayerInfo[playerid][pBanAppealer])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /banip [ip address] [reason (optional)]");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(!IsAnIP(ip))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid IP address.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = '%s'", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:lockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked, adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unlockaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unlockaccount [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sprison(playerid, params[])
{
	new targetid, minutes, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sprison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of minutes cannot be below one. /unjail to release a player.");
	}

    PlayerInfo[targetid][pJailType] = 2;
    PlayerInfo[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
    ResetPlayer(targetid);
    SetPlayerInJail(targetid);

    Log_Write("log_punishments", "%s (uid: %i) silently prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, reason);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was prisoned for %i minutes by an Admin, reason: %s", GetPlayerRPName(targetid), minutes, reason);
    SendClientMessageEx(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by an admin.", minutes);
    return 1;
}

CMD:sethpall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sethpall [amount]");
	}
	if(amount < 1.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Health can't be under 1.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetPlayerHealth(i, amount);
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s set everyone's health to %.1f.", GetPlayerRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid, params[])
{
	new Float:amount;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setarmorall [amount]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pJoinedEvent] && !PlayerInfo[i][pPaintball] && PlayerInfo[i][pDueling] == INVALID_PLAYER_ID)
	    {
		    SetScriptArmour(i, amount);
		}
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s set everyone's armor to %.1f.", GetPlayerRPName(playerid), amount);
	return 1;
}
CMD:fwsall(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(sscanf(params, "s", "confirm"))
		{
			SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /fwsall [confirm]");
			return 1;
		}
		foreach(new targetid : Player)
		{
		    if(!PlayerInfo[playerid][pLogged])
		        continue;

			GivePlayerWeaponEx(targetid, 12);
			GivePlayerWeaponEx(targetid, 24);
			GivePlayerWeaponEx(targetid, 25);
			GivePlayerWeaponEx(targetid, 27);
			GivePlayerWeaponEx(targetid, 31);
			GivePlayerWeaponEx(targetid, 34);
			SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from %s.", GetPlayerRPName(playerid));
		}
		SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s gave a full weapon set to everyone.", GetPlayerRPName(playerid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}
CMD:fws(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /fws [playerid]");
			return 1;
		}
		GivePlayerWeaponEx(targetid, 12);
		GivePlayerWeaponEx(targetid, 24);
		GivePlayerWeaponEx(targetid, 25);
		GivePlayerWeaponEx(targetid, 27);
		GivePlayerWeaponEx(targetid, 31);
		GivePlayerWeaponEx(targetid, 34);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s gave a full weapon set to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from %s.", GetPlayerRPName(playerid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}


CMD:healup(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 1)
	{
		 return SendClientMessage(playerid, COLOR_GREY, "You are not {D909D9}Daisy VIP.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1811.1191, -1294.0303, 1131.7552))
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in the {D909D9}Daisy VIP{afafaf} Lounge");
	}
	SetScriptArmour(playerid, 100);
	SetPlayerHealth(playerid, 100);
	return 1;
}
CMD:getboombox(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not {D909D9}Ivy VIP.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1814.8076, -1297.4489, 1131.7552))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}Ivy VIP{Afafaf} Lounge.");
	}
    if(!strcmp(params, "confirm", true))
	{
		PlayerInfo[playerid][pBoombox] = 1;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have earned a free {D909D9}Ivy VIP{FFFFFF} boombox.");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:placegiftbox(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}

		new Float:Position[4];
		if(mysteryegg == 0)
		{
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			mysteryegg = CreateDynamicObject(19056, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
			mysteryegg3DText = CreateDynamic3DTextLabel("Gift Box\n{FF0000}/claimgift{FFFFFF}\nTo get your gift ",COLOR_WHITE,Position[0], Position[1], Position[2]+0.25,8.0);
			SetPlayerPos(playerid, Position[0], Position[1], Position[2]+3);
			SendAdminMessage(COLOR_YELLOW, "ADMWarn: %s has placed the Gift Box.", GetPlayerRPName(playerid));
			SendClientMessageToAllEx(COLOR_AQUA, "{FFFF00}GiftBox:{33CCFF} Management %s has placed the giftbox. Staff will give hints where to find it", GetPlayerRPName(playerid));
		}
		else
		{
			DestroyDynamicObject(mysteryegg);
			mysteryegg = 0;
			DestroyDynamic3DTextLabel( Text3D:mysteryegg3DText );
			SendAdminMessage(COLOR_YELLOW, "ADMWARN: %s has destroyed the Gift Box.", GetPlayerRPName(playerid));
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:giftall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 8)
	{
    	if(GiftAllowed)
     	{
      		SendAdminMessage(COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: %s has just sent a Gift to all players.", GetPlayerNameEx(playerid));
			GiftAllowed = 0;
			foreach(new i:Player)
			{
			    GiftBox(playerid, i);
			}
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "This command has already been used, wait until the next paycheck!");
		}
	}
	return 1;
}

CMD:claimgift(playerid, params[])
{
	if(mysteryegg != 0)
	{
		new Float:Position[3];
		GetDynamicObjectPos(mysteryegg, Position[0], Position[1], Position[2]);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Position[0], Position[1], Position[2]))
		{			
            if(PlayerInfo[playerid][pVIPPackage] == 3)
			{
				GiftBox(MAX_PLAYERS, playerid);
				SendClientMessage(playerid, COLOR_YELLOW, "VIP: You got a random gift for free as a {D909D9}Ivy VIP");
			}
			else if(PlayerInfo[playerid][pCookies] >= 5)
			{
                PlayerInfo[playerid][pCookies] -= 5;
     			GiftBox(MAX_PLAYERS, playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "Server: You have traded your 5 Narcons for the Gift Box");
			}
    		else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You do not have enough Narcons for that Gift Box.");
			}
   		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "You are not at the Gift Box please follow the check point to exchange your Narcons");
			SetPlayerCheckpoint(playerid, Position[0], Position[1], Position[2], 5);
		}
	}
	return 1;
}

CMD:vweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not {D909D9}Ivy VIP.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1813.2942, -1290.4213, 1131.7552))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}Ivy VIP{Afafaf} Lounge.");
	}
	GivePlayerWeaponEx(playerid, 12);
	GivePlayerWeaponEx(playerid, 24);
	GivePlayerWeaponEx(playerid, 25);
	GivePlayerWeaponEx(playerid, 27);
	GivePlayerWeaponEx(playerid, 31);
	GivePlayerWeaponEx(playerid, 34);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from your vip weapons.");
 	return 1;
}

CMD:givegun(playerid, params[])
{
	new targetid, weaponid;

    if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givegun [playerid] [weaponid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(!(1 <= weaponid <= 46))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon.");
	}

	if(weaponid == 38 && PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The minigun was disabled due to abuse.");
	}


	GivePlayerWeaponEx(targetid, weaponid);

	SendClientMessageEx(targetid, COLOR_AQUA, "You have received a {00AA00}%s{33CCFF} from %s.", GetWeaponNameEx(weaponid), GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a %s to %s.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid), GetPlayerRPName(targetid));

	Log_Write("log_givegun", "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", weatherid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setweather [weatherid]");
	}

	gWeather = weatherid;
	SetWeather(weatherid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Weather changed to %i.", weatherid);
	return 1;
}

CMD:settime(playerid, params[])
{
	new hour;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settime [hour]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The hour must range from 0 to 23.");
	}

	gWorldTime = hour;

	SetWorldTime(hour);
	SendClientMessageToAllEx(COLOR_GREY2, "Time of day changed to %i hours.", hour);
	return 1;
}

CMD:setstat(playerid, params[])
{
	new targetid, option[24], param[32], value;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [option]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: Gender, Age, Cash, Bank, Level, Respect, UpgradePoints, Hours, Warnings");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: SpawnHealth, SpawnArmor, FightStyle, Accent, Narcons, Phone, Crimes, Arrested");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: WantedLevel, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, WalkieTalkie");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: Channel, Spraycans, Boombox, Phonebook, Paycheck, CarLicense, Seeds, Ephedrine");
		SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, LaborUpgrade");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: MP3Player, Job, MuriaticAcid, BakingSoda, Components, Watch, GPS, GasCan");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: DMWarnings, WeaponRestricted, CourierSkill, FishingSkill, GuardSkill, WeaponSkill");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: MechanicSkill, LawyerSkill, SmugglerSkill, DetectiveSkill, ThiefSkill");
        SendClientMessageEx(playerid, COLOR_SYNTAX, "List of options: Bombs, FirstAid, PoliceScanner, Bodykits, Rimkits, Diamonds, Marriage, Skates");
	    return 1;
	}
	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [gender] [male | female | shemale]");
		}
		if(!strcmp(param, "male", true))
		{
		    PlayerInfo[targetid][pGender] = 1;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Male.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    PlayerInfo[targetid][pGender] = 2;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Female.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "shemale", true))
		{
		    PlayerInfo[targetid][pGender] = 3;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gender to Shemale.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 3 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [age] [value]");
		}
		if(!(0 <= value <= 128))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 128.");
		}

		PlayerInfo[targetid][pAge] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's age to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [cash] [value]");
		}

		PlayerInfo[targetid][pCash] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cash to $%i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bank] [value]");
		}

		PlayerInfo[targetid][pBank] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bank money to $%i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [level] [value]");
		}

		PlayerInfo[targetid][pLevel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's level to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [respect] [value]");
		}

		PlayerInfo[targetid][pEXP] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's respect points to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "upgradepoints", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [upgradepoints] [value]");
		}

		PlayerInfo[targetid][pUpgradePoints] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's upgrade points to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET upgradepoints = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [hours] [value]");
		}

		PlayerInfo[targetid][pHours] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's playing hours to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hours = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [warnings] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 3.");
		}

		PlayerInfo[targetid][pWarnings] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's warnings to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [spawnhealth] [value]");
		}

		PlayerInfo[targetid][pSpawnHealth] = amount;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spawn health to %.1f.", GetPlayerRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnhealth = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [spawnarmor] [value]");
		}

		PlayerInfo[targetid][pSpawnArmor] = amount;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spawn armor to %.1f.", GetPlayerRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnarmor = '%f' WHERE uid = %i", amount, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [fightstyle] [option]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Normal, Boxing, Kungfu, Kneehead, Grabkick, Elbow");
	        return 1;
		}
		if(!strcmp(param, "normal", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Normal.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "boxing", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Boxing.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kungfu", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Kung Fu.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kneehead", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Kneehead.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "grabkick", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Grabkick.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "elbow", true))
		{
		    PlayerInfo[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fight style to Elbow.", GetPlayerRPName(targetid));
		    SetPlayerFightingStyle(targetid, PlayerInfo[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", PlayerInfo[targetid][pFightStyle], PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [accent] [text]");
		}

		strcpy(PlayerInfo[targetid][pAccent], accent, 16);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's accent to '%s'.", GetPlayerRPName(targetid), accent);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", accent, PlayerInfo[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "narcons", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [narcons] [value]");
		}

		PlayerInfo[targetid][pCookies] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's narcons to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cookies = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phone", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [phone] [number]");
		}
		if(value == 911)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
		}

		if(value == 0)
		{
		    PlayerInfo[targetid][pPhone] = 0;
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's phone number to 0.", GetPlayerRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", value);
			mysql_tquery(connectionID, queryBuffer, "OnAdminSetPhoneNumber", "iii", playerid, targetid, value);
			return 1;
		}
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [crimes] [value]");
		}

		PlayerInfo[targetid][pCrimes] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's commited crimes to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crimes = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [arrested] [value]");
		}

		PlayerInfo[targetid][pArrested] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's arrested count to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET arrested = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [wantedlevel] [value]");
		}
		if(!(0 <= value <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY3, "The value specified can't be under 0 or above 6.");
		}

		PlayerInfo[targetid][pWantedLevel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's wanted level to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [materials] [value]");
		}

		PlayerInfo[targetid][pMaterials] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's materials to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [weed] [value]");
		}

		PlayerInfo[targetid][pWeed] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weed to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [cocaine] [value]");
		}

		PlayerInfo[targetid][pCocaine] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cocaine to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [meth] [value]");
		}

		PlayerInfo[targetid][pMeth] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's meth to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [painkillers] [value]");
		}

		PlayerInfo[targetid][pPainkillers] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's painkillers to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [cigars] [value]");
		}

		PlayerInfo[targetid][pCigars] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's cigars to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "walkietalkie", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [walkietalkie] [0/1]");
		}

		PlayerInfo[targetid][pWalkieTalkie] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's walkie talkie to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [channel] [value]");
		}

		PlayerInfo[targetid][pChannel] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's radio channel to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [spraycans] [value]");
		}

		PlayerInfo[targetid][pSpraycans] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's spraycans to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [boombox] [0/1]");
		}

		if((value == 0) && PlayerInfo[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		PlayerInfo[targetid][pBoombox] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's boombox to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [phonebook] [0/1]");
		}

		PlayerInfo[targetid][pPhonebook] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's phonebook to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [paycheck] [value]");
		}

		PlayerInfo[targetid][pPaycheck] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's paycheck to $%i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [carlicense] [0/1]");
		}

		PlayerInfo[targetid][pCarLicense] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's car license to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [seeds] [value]");
		}

		PlayerInfo[targetid][pSeeds] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's seeds to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [ephedrine] [value]");
		}

		PlayerInfo[targetid][pEphedrine] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's ephedrine to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [job] [value (-1 = none)]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (0) Pizzaman (1) Courier (2) Fisherman (3) Bodyguard (4) Weapon Dealer (5) Mechanic (6) Miner");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of jobs: (7) Sweeper (8) Uper Driver (9) Drug Dealer (10) Lawyer (11) Detective (12) Thief (13) Garbage Man (14) Farmer");
			return 1;
		}
		if(!(-1 <= value <= 14))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid job.");
		}

		PlayerInfo[targetid][pJob] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's job to %s.", GetPlayerRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "inventoryupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [inventoryupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 5.");
		}

		PlayerInfo[targetid][pInventoryUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's inventory upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET inventoryupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "addictupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [addictupgrade] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 3.");
		}

		PlayerInfo[targetid][pAddictUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's addict upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "traderupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [traderupgrade] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 3.");
		}

		PlayerInfo[targetid][pTraderUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's trader upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET traderupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "assetupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [assetupgrade] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 4.");
		}

		PlayerInfo[targetid][pAssetUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's asset upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "laborupgrade", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [laborupgrade] [value]");
		}
		if(!(0 <= value <= 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 5.");
		}

		PlayerInfo[targetid][pLaborUpgrade] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's labor upgrade to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET laborupgrade = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [mp3player] [0/1]");
		}

		PlayerInfo[targetid][pMP3Player] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's MP3 player to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [muriaticacid] [value]");
		}

		PlayerInfo[targetid][pMuriaticAcid] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's muriatic acid to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bakingsoda] [value]");
		}

		PlayerInfo[targetid][pBakingSoda] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's baking soda to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [dmwarnings] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The value must range from 0 to 4.");
		}

		PlayerInfo[targetid][pDMWarnings] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's DM warnings to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [weaponrestricted] [hours]");
		}

		PlayerInfo[targetid][pWeaponRestricted] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weapon restriction to %i hours.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponrestricted = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "components", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [components] [value]");
		}

		PlayerInfo[targetid][pComponents] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's components to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "watch", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [watch] [0/1]");
		}

		PlayerInfo[targetid][pWatch] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's watch to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [gps] [0/1]");
		}

		PlayerInfo[targetid][pGPS] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's GPS to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [gascan] [value]");
		}

		PlayerInfo[targetid][pGasCan] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's gas can to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "courierskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [courierskill] [value]");
		}

		PlayerInfo[targetid][pCourierSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's courier skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fishingskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [fishingskill] [value]");
		}

		PlayerInfo[targetid][pFishingSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's fishing skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "guardskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [guardskill] [value]");
		}

		PlayerInfo[targetid][pGuardSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bodyguard skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET guardskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [weaponskill] [value]");
		}

		PlayerInfo[targetid][pWeaponSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's weapon skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "mechanicskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [mechanicskill] [value]");
		}

		PlayerInfo[targetid][pMechanicSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's mechanic skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mechanicskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lawyerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [lawyerskill] [value]");
		}

		PlayerInfo[targetid][pLawyerSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's lawyer skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "detectiveskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [detectiveskill] [value]");
		}

		PlayerInfo[targetid][pDetectiveSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's detective skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "thiefskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [thiefskill] [value]");
		}

		PlayerInfo[targetid][pThiefSkill] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's thief skill to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thiefskill = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bombs", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bombs] [value]");
		}

		PlayerInfo[targetid][pBombs] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bombs to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "firstaid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [firstaid] [value]");
		}

		PlayerInfo[targetid][pFirstAid] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's first aid kits to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "policescanner", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [policescanner] [0/1]");
		}

		PlayerInfo[targetid][pPoliceScanner] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's police scanner to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET policescanner = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bodykits", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [bodykits] [value]");
		}

		PlayerInfo[targetid][pBodykits] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's bodykits to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "rimkits", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [rimkits] [value]");
		}

		PlayerInfo[targetid][pRimkits] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's rimkits to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rimkits = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [diamonds] [value]");
		}

		PlayerInfo[targetid][pDiamonds] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's diamonds to %i.", GetPlayerRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			PlayerInfo[targetid][pMarriedTo] = PlayerInfo[value][pID];
			strcpy(PlayerInfo[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's marriage to %s.", GetPlayerRPName(targetid), GetPlayerRPName(value));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", PlayerInfo[value][pID], PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			PlayerInfo[targetid][pMarriedTo] = -1;
			strcpy(PlayerInfo[targetid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have reset %s's marriage.", GetPlayerRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i",  PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "skates", true))
	{
	    if(sscanf(param, "i", value) || !(0<=value<=1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [skates] [1/0]");
		}
		else
		{
			PlayerInfo[targetid][pSkates] = value;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's skates to %i.", GetPlayerRPName(targetid), value);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rollerskates = %i WHERE uid = %i", value, PlayerInfo[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else
	{
	    return 1;
	}

	Log_Write("log_setstat", "%s (uid: %i) set %s's (uid: %i) %s to %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], option, param);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s set %s's %s to %s", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid), option, param);
	return 1;
}

CMD:givemoney(playerid, params[])
{
	new targetid, amount;

	if(PlayerInfo[playerid][pAdmin] < 7)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givemoney [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	GivePlayerCash(targetid, amount);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given %s to %s.", GetPlayerRPName(playerid), FormatNumber(amount), GetPlayerRPName(targetid));
	Log_Write("log_givemoney", "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:givenarcon(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /givenarcon [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	/*if(PlayerInfo[targetid][pCookies] > 500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player already has 400 narcons");
	}*/

 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {DAA520}Narcon{FF6347} to %s, reason: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
 	SendClientMessageEx(targetid, COLOR_LIGHTRED, "You have been awarded a {DAA520}Narcon{FF6347} by %s for %s", GetPlayerRPName(playerid), reason);
 	PlayerInfo[targetid][pCookies]++;
 	if(PlayerInfo[targetid][pCookies] >= 5)
 	{
        	AwardAchievement(targetid, "Narcons boi!");
 	}
  	Log_Write("log_givecookie", "%s (uid: %i) has given a narcon to %s (uid: %i) for reason %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	return 1;
}

CMD:givenarconall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged])
		{
		    if(PlayerInfo[i][pCookies] > 500)
			{
				continue;
			}
		    PlayerInfo[i][pCookies]++;

		    if(PlayerInfo[i][pCookies] >= 5)
		    {
		        AwardAchievement(i, "Narcons boi!");
			}
		}
	}

	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s has given a {DAA520}narcon{FF6347} to every player online.", GetPlayerRPName(playerid));
	Log_Write("log_givecookie", "%s (uid: %i) has given a narcon to every player online", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID]);

	return 1;
}
CMD:osetvip(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level, time;

	if(PlayerInfo[playerid][pAdmin] < 5) // HEAD ADMIN+ ONLY
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]iI(0)", username, level, time))
	{
		SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /osetvip [username] [level(0-3)] [days]");
		SendClientMessage(playerid, COLOR_GREY3, "List of ranks: (0) None (1) Silver (2) Diamond (3) Royal");
		return 1;
	}
	if(!(0 <= level <= 3))
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 3.");
	}
	if(!(1 <= time <= 365))
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "The amount of days must range from 1 to 365.");
	}
	if(IsPlayerOnline(username))
	{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /setvip instead.");
	}
	if(level == 0)
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's donator package.", GetPlayerRPName(playerid), username);
		time = 0;
	}
	else if(time >= 30)
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {A028AD}%s{FF6347} donator package to %s for %i months.", GetPlayerRPName(playerid), GetVIPRank(level), username, time / 30);
		time = gettime() + (time * 86400);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {A028AD}%s{FF6347} donator package to %s for %i days.", GetPlayerRPName(playerid), GetVIPRank(level), username, time);
		time = gettime() + (time * 86400);
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE username = '%e'", level, time, username);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:setvip(playerid, params[])
{
	new targetid, rank, days, drugs, weed, cocaine, meth, painkillers, seeds;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiii", targetid, rank, days))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setvip [playerid] [rank] [days]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of ranks: (1) Silver (2) Diamond (3) Royal");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(1 <= rank <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
	}
	if(!(1 <= days <= 365))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount of days must range from 1 to 365.");
	}

	weed = GetPlayerCapacity(playerid, CAPACITY_WEED);
	cocaine = GetPlayerCapacity(playerid, CAPACITY_COCAINE);
	meth = GetPlayerCapacity(playerid, CAPACITY_METH);
    painkillers = GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS);
    seeds = GetPlayerCapacity(playerid, CAPACITY_SEEDS);

	if(drugs)
	{
	    PlayerInfo[targetid][pWeed] = weed;
	    PlayerInfo[targetid][pCocaine] = cocaine;
	    PlayerInfo[targetid][pMeth] = meth;
	    PlayerInfo[targetid][pPainkillers] = painkillers;
	    PlayerInfo[targetid][pSeeds] = seeds;
	    PlayerInfo[targetid][pBoombox] = 1;
	    PlayerInfo[targetid][pMP3Player] = 1;
	    SendClientMessageEx(targetid, COLOR_VIP, "%s %s has given you a full load of drugs with your %s VIP Package", GetAdminRank(playerid), GetPlayerRPName(playerid), GetVIPRank(rank));
	}


	PlayerInfo[targetid][pVIPPackage] = rank;
	PlayerInfo[targetid][pVIPTime] = gettime() + (days * 86400);
	PlayerInfo[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0, weed = %i, cocaine = %i, meth = %i, painkillers = %i, seeds = %i WHERE uid = %i", PlayerInfo[targetid][pVIPPackage], PlayerInfo[targetid][pVIPTime], PlayerInfo[targetid][pWeed], PlayerInfo[targetid][pCocaine], PlayerInfo[targetid][pMeth], PlayerInfo[targetid][pPainkillers], PlayerInfo[targetid][pSeeds], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {D909D9}%s{FF6347} donator package to %s for %i months.", GetPlayerRPName(playerid), GetVIPRank(rank), GetPlayerRPName(targetid), days / 30);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have given %s a {D909D9}%s{33CCFF} donator package for %i months.", GetPlayerRPName(targetid), GetVIPRank(rank), days / 30);
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s has given you a {D909D9}%s{33CCFF} donator package for %i months.", GetPlayerRPName(playerid), GetVIPRank(rank), days / 30);
	}
	else
	{
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given a {D909D9}%s{FF6347} donator package to %s for %i days.", GetPlayerRPName(playerid), GetVIPRank(rank), GetPlayerRPName(targetid), days);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have given %s a {D909D9}%s{33CCFF} donator package for %i days.", GetPlayerRPName(targetid), GetVIPRank(rank), days);
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s has given you a {D909D9}%s{33CCFF} donator package for %i days.", GetPlayerRPName(playerid), GetVIPRank(rank), days);
	}

	Log_Write("log_vip", "%s (uid: %i) has given %s (uid: %i) a %s donator package for %i days.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetVIPRank(rank), days);
	return 1;
}

CMD:removevip(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removevip [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!PlayerInfo[targetid][pVIPPackage])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player doesn't have a VIP subscription which you can remove.");
	}

	if(PlayerInfo[targetid][pTagType] == TAG_VIP)
	{
	    SetPlayerSpecialTag(targetid, TAG_NONE);
	}

	Log_Write("log_vip", "%s (uid: %i) has removed %s's (uid: %i) %s donator package.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GetVIPRank(PlayerInfo[targetid][pVIPPackage]));

	PlayerInfo[targetid][pVIPPackage] = 0;
	PlayerInfo[targetid][pVIPTime] = 0;
	PlayerInfo[targetid][pVIPColor] = 0;
    PlayerInfo[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has revoked %s's VIP subscription.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has revoked your VIP subscription.", GetPlayerRPName(playerid));
	return 1;
}

CMD:rangeban(playerid, params[])
{
	new targetid, reason[128];

 	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rangeban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be banned.");
	}

    Log_Write("log_punishments", "%s (uid: %i) rangebanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was rangebanned by %s, reason: %s", GetPlayerRPName(targetid), GetPlayerRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s", "confirm"))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcepayday [confirm] (gives everyone a paycheck)");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}

CMD:setpassword(playerid, params[])
{
	new username[MAX_PLAYER_NAME], password[128];

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setpassword [username] [new password]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't change their password.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	new username[MAX_PLAYER_NAME];

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't delete their account.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}

CMD:doublexp(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(!gDoubleXP)
	{
      	SetDoubleXP(true);
	    SendClientMessageToAllEx(COLOR_AQUA, "** %s enabled double XP. You will now gain double the respect points and job skill points.", GetPlayerRPName(playerid));
	}
	else
	{
		SetDoubleXP(false);
	    SendClientMessageToAllEx(COLOR_AQUA, "** %s disabled double XP.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:createhouse(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /createhouse [type (1-%i)]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a house in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "House slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	new houseid, option[10], param[32];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Entrance, Exit, World, Type, Owner, Price, RentPrice, Level, Locked, Delivery");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the entrance of house %i.", houseid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the exit of house %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the virtual world of house %i to %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [type] [value (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the type of house %i to %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetHouseOwner(houseid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the owner of house %i to %s.", houseid, GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [rentprice] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the rent price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [level] [value (0-5)]");
		}
		if(!(0 <= level <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the level of house %i to %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the lock state of house %i to %i.", houseid, locked);
	}
	 else if(!strcmp(option, "delivery", true))
	{
	    new delivery;

	    if(sscanf(param, "i", delivery) || !(0 <= delivery <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hDelivery] = delivery;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET delivery = %i WHERE id = %i", HouseInfo[houseid][hDelivery], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the ability to be to delivered of house %i to %i.", houseid, delivery);
	}

	return 1;
}

CMD:removefurniture(playerid, params[])
{
	new houseid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removefurniture [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	RemoveAllFurniture(houseid);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed all furniture for house %i.", houseid);
	return 1;
}

CMD:removehouse(playerid, params[])
{
	new houseid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removehouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	RemoveAllFurniture(houseid);

	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
//	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

 	Iter_Remove(House, houseid);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed house %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotohouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hOutsideInt]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid, params[])
{
	new type, string[32];

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /previewint [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	GameTextForPlayer(playerid, string, 5000, 1);

	SetPlayerPos(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	SetPlayerFacingAngle(playerid, houseInteriors[type][intA]);
	SetPlayerInterior(playerid, houseInteriors[type][intID]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid, params[])
{
	new id;

	if(PlayerInfo[playerid][pAdmin] < 5 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Nearest Items _______");

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of house ID %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of garage ID %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of business ID %i.", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of entrance ID %i.", id);
	}
	if((id = GetNearbyLand(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of land ID %i.", id);
	}
	if((id = GetNearbyPoint(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of point ID %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of turf ID %i.", id);
	}
	if((id = GetNearbyLocker(playerid)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of locker ID %i.", id);
	}
	if((id = GetNearbyLocation(playerid, 20.0)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of (location) %s [%i].", LocationInfo[id][locName], id);
	}
	if((id = GetNearbyAtm(playerid)) >= 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of atm ID %i", id);
	}

	return 1;
}

CMD:dynamichelp(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_GREEN, "HOUSES:{DDDDDD} /createhouse, /edithouse, /removehouse, /gotohouse, /asellhouse, /removefurniture.");
	SendClientMessage(playerid, COLOR_GREEN, "GARAGES:{DDDDDD} /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
    SendClientMessage(playerid, COLOR_GREEN, "BUSINESSES:{DDDDDD} /createbiz, /editbiz, /removebiz, /gotobiz, /asellbiz.");
	SendClientMessage(playerid, COLOR_GREEN, "ENTRANCES:{DDDDDD} /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	SendClientMessage(playerid, COLOR_GREEN, "LANDS:{DDDDDD} /createland, /landcancel, /removeland, /gotoland, /asellland, /removelandobjects.");
	SendClientMessage(playerid, COLOR_GREEN, "FACTIONS:{DDDDDD} /createfaction, /editfaction, /removefaction, /switchfaction, /purgefaction.");
    SendClientMessage(playerid, COLOR_GREEN, "GANGS:{DDDDDD} /creategang, /editgang, /removegang, /gangstrike, /switchgang, /caplimit, /setcooldown.");
    SendClientMessage(playerid, COLOR_GREEN, "POINTS:{DDDDDD} /createpoint, /editpoint, /removepoint, /gotopoint.");
    SendClientMessage(playerid, COLOR_GREEN, "TURFS:{DDDDDD} /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
	SendClientMessage(playerid, COLOR_GREEN, "FIRES:{DDDDDD} /randomfire, /killfire, /spawnfire.");
	SendClientMessage(playerid, COLOR_GREEN, "LOCKERS:{DDDDDD} /createlocker, /editlocker, /removelocker.");
	SendClientMessage(playerid, COLOR_GREEN, "LOCATIONS:{DDDDDD} /createlocation, /editlocation, /removelocation.");
	SendClientMessage(playerid, COLOR_GREEN, "ATMS:{DDDDDD} /createatm, /editatm, /removeatm");
	SendClientMessage(playerid, COLOR_GREEN, "Gun Racks:{DDDDDD} /createrack, /editrack, /destroyrack");
	SendClientMessage(playerid, COLOR_GREEN, "Gang Tags:{DDDDDD} /creategangtag, /destroygangtag");
	SendClientMessage(playerid, COLOR_GREEN, "Speed Cameras:{DDDDDD} /createspeed, /destroyspeed");

	return 1;
}

CMD:listassets(playerid, params[])
{
	new targetid;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /listassets [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s's Assets _____", GetPlayerRPName(targetid));

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && IsHouseOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {33CC33}House{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]), (gettime() - HouseInfo[i][hTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && IsBusinessOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {FFD700}Business{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]), (gettime() - BusinessInfo[i][bTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && IsGarageOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {004CFF}Garage{C8C8C8} | ID: %i | Location: %s | Status: %s", i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]), (gettime() - GarageInfo[i][gTimestamp]) > 2592000 ? ("{FF6347}Inactive") : ("{00AA00}Active"));
		}
	}

	foreach(new i : Land)
	{
	    if(LandInfo[i][lExists] && IsLandOwner(targetid, i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** {33CCFF}Land{C8C8C8} | ID: %i | Location: %s", i, GetZoneName(LandInfo[i][lMaxX], LandInfo[i][lMaxY], LandInfo[i][lHeight]));
		}
	}

	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellhouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid house.");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have admin sold house %i.", houseid);
	return 1;
}

CMD:asellgarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellgarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have admin sold garage %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellbiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have admin sold business %i.", businessid);
	return 1;
}

CMD:asellland(playerid, params[])
{
	new landid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /asellland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have admin sold land %i.", landid);
	return 1;
}

CMD:enter(playerid, params[])
{
	if(PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1310.1538, -1366.9827, 13.5144))
	{
		if(PlayerInfo[playerid][pAcceptedHelp])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can not enter the paintball arena while on helper duty!");
	    }
	    if(PlayerInfo[playerid][pWeaponRestricted] > 0)
    	{
        	return SendClientMessage(playerid, COLOR_GREY, "You are restricted from weapons and therefore can't join paintball.");
    	}
	    ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}

CMD:exit(playerid, params[])
{
    if(PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(PlayerInfo[playerid][pPaintball] > 0)
	{
 		foreach(new i : Player)
		{
		    if(PlayerInfo[playerid][pPaintball] == PlayerInfo[i][pPaintball])
	    	{
	        	SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s has left the paintball arena. ))", GetPlayerRPName(playerid));
			}
		}

        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		PlayerInfo[playerid][pPaintball] = 0;
		PlayerInfo[playerid][pPaintballTeam] = -1;
		GangZoneHideForPlayer(playerid, zone_paintball[0]);
		GangZoneHideForPlayer(playerid, zone_paintball[1]);
		SetPlayerToSpawn(playerid);
	}
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no house in range. You must be near a house.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buyhouse [confirm]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this house.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid %s to make this house yours! /househelp for a list of commands.", FormatNumber(HouseInfo[houseid][hPrice]));
	Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], type, HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
	return 1;
}

CMD:lock(playerid, params[])
{
	new id, houseid = GetInsideHouse(playerid), landid = GetNearbyLand(playerid);

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[houseid][hID] || PlayerInfo[playerid][pFurniturePerms] == houseid))
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You don't have permission from the house owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if(landid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
			{
			    if(!(IsLandOwner(playerid, landid) || PlayerInfo[playerid][pLandPerms] == landid))
			    {
			        return SendClientMessage(playerid, COLOR_GREY, "You don't have permission from the land owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || PlayerInfo[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == PlayerInfo[playerid][pGang])))
	{
	    if(!VehicleInfo[id][vLocked])
	    {
            new string[24];
			VehicleInfo[id][vLocked] = 1;
   		    format(string, sizeof(string), "~r~%s locked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s locks their %s.", GetPlayerRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
            new string[24];
            format(string, sizeof(string), "~b~%s unlocked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s unlocks their %s.", GetPlayerRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || PlayerInfo[playerid][pRentingHouse] == HouseInfo[id][hID]))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			GameTextForPlayer(playerid, "~r~House locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s locks their house door.", GetPlayerRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			GameTextForPlayer(playerid, "~g~House unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s unlocks their house door.", GetPlayerRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			GameTextForPlayer(playerid, "~r~Garage locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s locks their garage door.", GetPlayerRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			GameTextForPlayer(playerid, "~g~Garage unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s unlocks their garage door.", GetPlayerRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s locks their business door.", GetPlayerRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s unlocks their business door.", GetPlayerRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lock [password]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SendClientMessage(playerid, COLOR_GREY, "Incorrect password.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				GameTextForPlayer(playerid, "~r~Entrance locked", 3000, 6);
				SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s locks their entrance door.", GetPlayerRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				GameTextForPlayer(playerid, "~g~Entrance unlocked", 3000, 6);
				SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s unlocks their entrance door.", GetPlayerRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not close to anything which you can lock.");

	return 1;
}

CMD:alock(playerid, params[])
{
	new id;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerLockLandDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}
		}
	}

    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID)
	{
	    if(!VehicleInfo[id][vLocked])
	    {
			VehicleInfo[id][vLocked] = 1;
			GameTextForPlayer(playerid, "~r~Vehicle locked", 3000, 6);
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
			GameTextForPlayer(playerid, "~g~Vehicle unlocked", 3000, 6);
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;
			GameTextForPlayer(playerid, "~r~House locked", 3000, 6);
		}
		else
		{
			HouseInfo[id][hLocked] = 0;
			GameTextForPlayer(playerid, "~g~House unlocked", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;
			GameTextForPlayer(playerid, "~r~Garage locked", 3000, 6);
		}
		else
		{
			GarageInfo[id][gLocked] = 0;
			GameTextForPlayer(playerid, "~g~Garage unlocked", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;
			GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;
			GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    if(!EntranceInfo[id][eLocked])
	    {
			EntranceInfo[id][eLocked] = 1;
			GameTextForPlayer(playerid, "~r~Entrance locked", 3000, 6);
		}
		else
		{
			EntranceInfo[id][eLocked] = 0;
			GameTextForPlayer(playerid, "~g~Entrance unlocked", 3000, 6);
		}

        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not close to anything which you can lock.");

	return 1;
}

CMD:househelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** HOUSE HELP *** type a command for more information.");
    SendClientMessage(playerid, COLOR_GREY, "*** HOUSE *** /buyhouse /lock /stash /furniture /upgradehouse /sellhouse /sellmyhouse");
	SendClientMessage(playerid, COLOR_GREY, "*** HOUSE *** /door /renthouse /unrent /setrent /tenants /evict /evictall /houseinfo");
	SendClientMessage(playerid, COLOR_GREY, "*** HOUSE *** /houseinvite /hlights");
	return 1;
}

CMD:stash(playerid, params[])
{
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This house has no stash upgrade. '/upgradehouse level' to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [balance | deposit | withdraw]");
	    }
	    if(PlayerInfo[playerid][pAdminDuty])
	    {
			return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
		}
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Stash Balance ______");
	        SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i/$%i", HouseInfo[houseid][hCash], GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SendClientMessageEx(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", HouseInfo[houseid][hWeed], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCocaine], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));

			if(count > 0)
			{
				SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Stash Weapons ______");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Materials, Weed, Cocaine, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %s at your house's level.", FormatNumber(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH)));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %s in your house stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i materials at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerInfo[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %i materials in your house stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [weed] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hWeed] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i grams of weed at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    PlayerInfo[playerid][pWeed] -= value;
			    HouseInfo[houseid][hWeed] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weed = %i WHERE id = %i", HouseInfo[houseid][hWeed], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %ig of weed in your house stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [cocaine] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCocaine] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i grams of cocaine at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerInfo[playerid][pCocaine] -= value;
			    HouseInfo[houseid][hCocaine] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cocaine = %i WHERE id = %i", HouseInfo[houseid][hCocaine], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %ig of cocaine in your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i grams of meth at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    PlayerInfo[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %ig of meth in your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your stash can only hold up to %i painkillers at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerInfo[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %i painkillers in your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(IsLawEnforcement(playerid))
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Law enforcement is prohibited from storing weapons.");
				}
				if(GetPlayerHealthEx(playerid) < 60)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), i + 1);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "Your house stash has no more slots available for weapons.");
			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Weed, Cocaine, Meth, Painkillers, Weapon");

	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %s from your house stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerInfo[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %i materials from your house stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [weed] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pWeed] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerInfo[playerid][pWeed] += value;
			    HouseInfo[houseid][hWeed] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weed = %i WHERE id = %i", HouseInfo[houseid][hWeed], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %ig of weed from your house stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [cocaine] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pCocaine] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerInfo[playerid][pCocaine] += value;
			    HouseInfo[houseid][hCocaine] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cocaine = %i WHERE id = %i", HouseInfo[houseid][hCocaine], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %ig of cocaine from your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerInfo[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %ig of meth from your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerInfo[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %i painkillers from your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /stash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SendClientMessage(playerid, COLOR_GREY, "The slot specified contains no weapon which you can take.");
				}
				if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
				{
					return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
				}

				GivePlayerWeaponEx(playerid, HouseInfo[houseid][hWeapons][value-1]);
				SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0 WHERE id = %i", value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any stash which you can use.");
	}

	return 1;
}

CMD:upgradehouse(playerid, params[])
{
	new
		houseid = GetNearbyHouseEx(playerid),
		option[10],
		param[12],
		string[20];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradehouse [level/interior]");
	}
	if(!strcmp(option, "level", true))
	{
	    new cost = (HouseInfo[houseid][hLevel] * 25000) + 25000;

	    if(HouseInfo[houseid][hLevel] >= 5)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your house is already at the maximum level possible.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradehouse [level] [confirm]");
		    SendClientMessageEx(playerid, COLOR_SYNTAX, "You are about to upgrade to level %i/5 which will cost you $%i.", HouseInfo[houseid][hLevel] + 1, cost);
			return 1;
		}
		if(PlayerInfo[playerid][pCash] < cost)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much cash.");
		}

		HouseInfo[houseid][hLevel]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = level + 1 WHERE id = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "~r~-$%i", cost);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -cost);
		ReloadHouse(houseid);

		if(HouseInfo[houseid][hLevel] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your house to level %i/5. You unlocked a stash for your house! (/stash)", HouseInfo[houseid][hLevel]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your house to level %i/5. Your stash capacity was increased.", HouseInfo[houseid][hLevel]);
		}

		SendClientMessageEx(playerid, COLOR_GREEN, "Your tenant and furniture capacity were also both increased to %i/%i.", GetHouseTenantCapacity(houseid), GetHouseFurnitureCapacity(houseid));
		Log_Write("log_property", "%s (uid: %i) upgraded their house (id: %i) to level %i for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	}
	else if(!strcmp(option, "interior", true))
	{
	    static interiors[sizeof(houseInteriors) * 64];

	    if(isnull(interiors))
	    {
	        interiors = "#\tClass\tPrice";

	  		for(new i = 0; i < sizeof(houseInteriors); i ++)
			{
			    format(interiors, sizeof(interiors), "%s\n%i\t%s\t{00AA00}$%i{FFFFFF}", interiors, i + 1, houseInteriors[i][intClass], houseInteriors[i][intPrice]);
			}
		}

		ShowPlayerDialog(playerid, DIALOG_HOUSEINTERIORS, DIALOG_STYLE_TABLIST_HEADERS, "Choose an interior to preview.", interiors, "Preview", "Cancel");
	}

	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellhouse [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pHouseOffer] = playerid;
	PlayerInfo[targetid][pHouseOffered] = houseid;
	PlayerInfo[targetid][pHousePrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered you their house for %s (/accept house).", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered %s to buy your house for %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmyhouse(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmyhouse [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your house back to the state. You will receive %s back.", FormatNumber(percent(HouseInfo[houseid][hPrice], 75)));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your house to the state and received %s back.", FormatNumber(percent(HouseInfo[houseid][hPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their house (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}

CMD:houseinfo(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM users WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}

CMD:makeadmin(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] == 8 || PlayerInfo[playerid][pAdminPersonnel])
	{
		if(sscanf(params, "ui", targetid, level))
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /makeadmin [playerid] [level]");
		}
		
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}
		if(!(0 <= level <= 9))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 9.");
		}
		/*if(level > PlayerInfo[playerid][pAdmin])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Level cannot be higher than your admin level.");
		}*/
		if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && level < PlayerInfo[targetid][pAdmin])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be demoted.");
		}

		if(level <= 1 && PlayerInfo[targetid][pAdminDuty])
		{
		    SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
			SetPlayerSpecialTag(targetid, TAG_NONE);
			PlayerInfo[targetid][pAdminDuty] = 0;
	    }

	    PlayerInfo[targetid][pAdmin] = level;
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s (%i).", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GetAdminRank(targetid), level);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		if(level == 0)
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetPlayerRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetPlayerRPName(playerid));
			PlayerInfo[playerid][pDeveloper] = 0;
			PlayerInfo[playerid][pFactionMod] = 0;
			PlayerInfo[playerid][pWebDev] = 0;
			PlayerInfo[playerid][pBanAppealer] = 0;
			PlayerInfo[playerid][pGangMod] = 0;
			PlayerInfo[playerid][pHelperManager] = 0;
			PlayerInfo[playerid][pDynamicAdmin] = 0;
			PlayerInfo[playerid][pAdminPersonnel] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, webdev = 0, helpermanager = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's admin level to {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GetAdminRank(targetid), level);
			SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your admin level to {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GetAdminRank(targetid), level);
		}

		Log_Write("log_makeadmin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
		
	}
	else
	{
 		return SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use that command!");
	}

	return 1;

}

/*CMD:makeadmin(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] => 8 || PlayerInfo[playerid][pAdminPersonnel]  )
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /makeadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 9))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 9.");
	}
	if(PlayerInfo[playerid][pAdminPersonnel] && level > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Level cannot be higher than your admin level.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && level < PlayerInfo[targetid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be demoted.");
	}

	if(level <= 1 && PlayerInfo[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, PlayerInfo[targetid][pUsername]);
		SetPlayerSpecialTag(targetid, TAG_NONE);
		PlayerInfo[targetid][pAdminDuty] = 0;
    }

    PlayerInfo[targetid][pAdmin] = level;
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s (%i).", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetPlayerRPName(playerid));
		PlayerInfo[playerid][pDeveloper] = 0;
		PlayerInfo[playerid][pFactionMod] = 0;
		PlayerInfo[playerid][pWebDev] = 0;
		PlayerInfo[playerid][pBanAppealer] = 0;
		PlayerInfo[playerid][pGangMod] = 0;
		PlayerInfo[playerid][pHelperManager] = 0;
		PlayerInfo[playerid][pDynamicAdmin] = 0;
		PlayerInfo[playerid][pAdminPersonnel] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET scripter = 0, gangmod = 0, banappealer = 0, factionmod = 0, webdev = 0, helpermanager = 0, dynamicadmin = 0, adminpersonnel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's admin level to {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GetAdminRank(targetid), level);
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your admin level to {FF6347}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_makeadmin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}*/

CMD:makehelper(playerid, params[])
{
	new targetid, level;

    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pHelper] < 3 && !PlayerInfo[playerid][pHelperManager])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /makehelper [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 4))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 4.");
	}
	if((PlayerInfo[playerid][pAdmin] < 6) && PlayerInfo[targetid][pHelper] > PlayerInfo[playerid][pHelper] && level < PlayerInfo[targetid][pHelper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher helper level than you. They cannot be demoted.");
	}

	if(level == 0)
	{
		if(PlayerInfo[targetid][pTagType] == TAG_HELPER)
		{
			SetPlayerSpecialTag(targetid, TAG_NONE);
		}
		if(PlayerInfo[targetid][pAcceptedHelp])
		{
		    callcmd::return(targetid, "\1");
		}
	}

	SendStaffMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a level %i helper.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), level);
	PlayerInfo[targetid][pHelper] = level;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE uid = %i", level, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GetHelperRank(targetid), level);
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GetHelperRank(targetid), level);

	Log_Write("log_makehelper", "%s (uid: %i) set %s's (uid: %i) helper level to %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], level);
	return 1;
}

CMD:omakeadmin(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /omakeadmin [username] [level]");
	}
	if(!(0 <= level <= 6))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 6.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /makeadmin instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:omakehelper(playerid, params[])
{
	new username[MAX_PLAYER_NAME], level;

    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pHelper] < 3 && !PlayerInfo[playerid][pHelperManager])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /omakehelper [username] [level]");
	}
	if(!(0 <= level <= 4))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 4.");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use /makehelper instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT helperlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetHelperLevel", "isi", playerid, username, level);
	return 1;
}

CMD:addtoevent(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /addtoevent [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is either not spawned, or spectating.");
	}
	if(!EventInfo[eReady])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There are no active events which you can add this player to.");
	}
	if(PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is already in the event.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently playing paintball.");
	}

	SetPlayerInEvent(targetid);

	SendClientMessageEx(targetid, COLOR_WHITE, "%s has added you to the event.", GetPlayerRPName(playerid));
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has added %s to the event.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:eventkick(playerid, params[])
{
	new targetid, reason[128];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /eventkick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pJoinedEvent])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is currently not in the event.");
	}

 	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pJoinedEvent])
	    {
	        SendClientMessageEx(i, COLOR_LIGHTORANGE, "(( %s was kicked from the event, reason: %s ))", GetPlayerNameEx(targetid), reason);
		}
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has kicked %s from the event, reason: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
	SendClientMessageEx(targetid, COLOR_WHITE, "%s has kicked you from the event, reason: %s", GetPlayerRPName(playerid), reason);

	ResetPlayerWeapons(targetid);
	PlayerInfo[targetid][pJoinedEvent] = 0;
	SetPlayerToSpawn(targetid);
	return 1;
}

CMD:olisthelpers(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pHelper] < 3 && !PlayerInfo[playerid][pHelperManager])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, helperlevel FROM users WHERE helperlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_HELPERS, playerid);
	return 1;
}
CMD:oadmins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pAdminPersonnel] && !PlayerInfo[playerid][pHumanResources])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM users WHERE adminlevel > 0 ORDER BY adminlevel DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:ovips(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, vippackage, viptime FROM users WHERE vippackage > 0 ORDER BY vippackage DESC", "OnQueryFinished", "ii", THREAD_LIST_VIPS, playerid);
	return 1;
}

CMD:sellinactive(playerid, params[])
{
	new houses, garages, businesses;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : House)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 2592000)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

 	foreach(new i : Garage)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 2592000)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

 	foreach(new i : Business)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has sold all inactive properties.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "** You have sold %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}

CMD:inactivecheck(playerid, params[])
{
    new houses, garages, businesses;

    if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : House) if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 2592000)
		houses++;
	foreach(new i : Garage) if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 2592000)
		garages++;
	foreach(new i : Business) if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
		businesses++;

	SendClientMessageEx(playerid, COLOR_WHITE, "** There are currently %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}
CMD:setcooldown(playerid, params[])
{
    new option[12], amount;
    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pGangMod] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[12]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /setcooldown [ganginvite] [minutes]");
	}
	if(!strcmp(option, "ganginvite", true))
	{
	    if(-1 > amount > gacooldown)
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "Amount must be above -1 and less then %i", gacooldown);
	    }
	    gacooldown = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the invite cooldown for gangs to %i.", GetPlayerRPName(playerid), amount);
	}
	return 1;
}
CMD:caplimit(playerid, params[])
{
	new option[8], amount;
    if(PlayerInfo[playerid][pAdmin] < 7 && PlayerInfo[playerid][pGangMod] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /caplimit [turfs/points] [amount]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Amount must be above 0 and less then %i.", MAX_TURFS);
		}
		MaxCapCount[0] = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the max active turf claim limit for gangs to %i.", GetPlayerRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Amount must be above 0 and less then %i.", MAX_POINTS);
		}
	    MaxCapCount[1] = amount;
	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the max active point cap limit for gangs to %i.", GetPlayerRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}
CMD:setmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pHelperManager] && PlayerInfo[playerid][pHelper] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /setmotd [admin/helper/global] [text ('none' to reset)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You may not include the '|' character in the MOTD.");
	}
	if(!strcmp(option, "global", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	gServerMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "** You have reset the Global MOTD text.");
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the global MOTD.", GetPlayerRPName(playerid));
		}
		else
		{
	    	strcpy(gServerMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** You have changed the Global MOTD text to '%s'.", gServerMOTD);
	    	SendAdminMessage(COLOR_YELLOW, "AdmCmd: %s has set the global MOTD to '%s'", GetPlayerRPName(playerid), gServerMOTD);
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	adminMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "** You have reset the Admin MOTD text.");
      		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the admin MOTD.", GetPlayerRPName(playerid));
		}
		else
		{
	    	strcpy(adminMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** You have changed the Admin MOTD text to '%s'.", adminMOTD);
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the admin MOTD to '%s'", GetPlayerRPName(playerid), adminMOTD);
		}
	}
	if(!strcmp(option, "helper", true))
	{
 		if(!strcmp(newval, "none", true))
		{
	    	helperMOTD[0] = 0;
	    	SendClientMessage(playerid, COLOR_WHITE, "** You have reset the Helper MOTD text.");
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the helper MOTD.", GetPlayerRPName(playerid));
		}
		else
		{
	    	strcpy(helperMOTD, newval, 128);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** You have changed the Helper MOTD text to '%s'.", helperMOTD);
	    	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the helper MOTD to '%s'", GetPlayerRPName(playerid), helperMOTD);
		}
	}

	SaveServerInfo();
	return 1;
}

CMD:makeformeradmin(playerid, params[])
{
	new targetid, status;
	if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /makeformeradmin [playerid] [status (0/1)]");
		return 1;
	}
    PlayerInfo[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET FormerAdmin = %i WHERE uid = %i", PlayerInfo[targetid][pFormerAdmin], PlayerInfo[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    if(status)
    {
        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Former Admin.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Former Admin.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}Former Admin{33CCFF}.", GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}Former Admin{33CCFF}.", GetPlayerRPName(playerid));
	}
	else
    {
        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Former Admin status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Former Admin status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}Former Admin{33CCFF} status.", GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}Former Admin{33CCFF} status.", GetPlayerRPName(playerid));
	}
	return 1;
}

CMD:setstaff(playerid, params[])
{
	new targetid, option[16], status;

    if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstaff [playerid] [option] [status (0/1)]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: FactionMod, GangMod, BanAppealer, AdminPersonnel, PublicRelations, GameAffairs");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: DynamicAdmin, Scripter, ComplaintMod, HumanResources, WebDev");
		return 1;
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Target player must be an administrator!");
	}
	if(!strcmp(option, "webdev", true))
	{
	    PlayerInfo[targetid][pWebDev] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET webdev = %i WHERE uid = %i", PlayerInfo[targetid][pWebDev], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a website developer.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a website developer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}website developer{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}website developer{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's website developer status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) website developer status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}website developer{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}website developer{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}

	if(!strcmp(option, "factionmod", true))
	{
	    PlayerInfo[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionmod = %i WHERE uid = %i", PlayerInfo[targetid][pFactionMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a faction moderator.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a faction moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}faction moderator{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}faction moderator{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's faction moderator status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) faction moderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}faction moderator{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}faction moderator{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "gangmod", true))
	{
	    PlayerInfo[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangmod = %i WHERE uid = %i", PlayerInfo[targetid][pGangMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a gang moderator.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a gang moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}gang moderator{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}gang moderator{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's gang moderator status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) gang moderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}gang moderator{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}gang moderator{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "banappealer", true))
	{
	    PlayerInfo[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET banappealer = %i WHERE uid = %i", PlayerInfo[targetid][pBanAppealer], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a ban appealer.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a ban appealer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}ban appealer{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}ban appealer{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's ban appealer status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) ban appealer status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}ban appealer{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}ban appealer{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "scripter", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 8) return SendClientMessage(playerid, COLOR_GREY, "You must be server management to set someone as a scripter.");
	    PlayerInfo[targetid][pDeveloper] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET scripter = %i WHERE uid = %i", PlayerInfo[targetid][pDeveloper], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a developer.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a developer.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}developer{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}developer{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's developer status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) developer status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}developer{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}developer{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "publicrelations", true))
	{
	    PlayerInfo[targetid][pHelperManager] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helpermanager = %i WHERE uid = %i", PlayerInfo[targetid][pHelperManager], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Public Relations.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Public Relations.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}Public Relations{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}Public Relations{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Public Relations status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Public Relations status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}Public Relations{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}PR{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "dynamicadmin", true))
	{
	    PlayerInfo[targetid][pDynamicAdmin] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dynamicadmin = %i WHERE uid = %i", PlayerInfo[targetid][pDynamicAdmin], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a dynamic admin.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a dynamic admin.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}dynamic admin{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}dynamic admin{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's dynamic admin status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) dynamic admin status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}dynamic admin{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}dynamic admin{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "adminpersonnel", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 8) return SendClientMessage(playerid, COLOR_GREY, "You must be server management to set someone as AP.");
	    PlayerInfo[targetid][pAdminPersonnel] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminpersonnel = %i WHERE uid = %i", PlayerInfo[targetid][pAdminPersonnel], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s admin personnel.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) admin perosnnel.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s {FF6347}admin personnel{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you {FF6347}admin personnel{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's admin personnel status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) admin personnel status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}admin personnel{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}admin personnel{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "gameaffairs", true))
	{
	    PlayerInfo[targetid][pGameAffairs] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gameaffairs = %i WHERE uid = %i", PlayerInfo[targetid][pGameAffairs], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a part of the department of game affairs.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a part of the department of game affairs.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a part of the department of {FF6347}game affairs{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a part of the department of{FF6347}game affairs{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's game affairs status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) game affairs status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}game affairs{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}game affairs{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
    else if(!strcmp(option, "humanresources", true))
	{
	    PlayerInfo[targetid][pHumanResources] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET humanresources = %i WHERE uid = %i", PlayerInfo[targetid][pHumanResources], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a part of the human resources.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a part of the human resources.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a part of the {FF6347}human resources{33CCFF}.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a part of the {FF6347}human resources{33CCFF}.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's human resources status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) human resources status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}human resources{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}human resources{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}
	else if(!strcmp(option, "complaintmod", true))
	{
	    PlayerInfo[targetid][pComplaintMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET complaintmod = %i WHERE uid = %i", PlayerInfo[targetid][pComplaintMod], PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a complaint moderator status.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a complaint moderator status.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have made %s a {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(playerid));
		}
		else
	    {
	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's complaint moderator.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) complaint moderator.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	        SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(targetid));
		    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your {FF6347}complaint moderator{33CCFF} status.", GetPlayerRPName(playerid));
		}
	}

	return 1;
}
CMD:renamecmd(playerid, params[])
{
    new cmd[64], newcmd[64];
    if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[64]s[64]", cmd, newcmd))
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /renamecmd [old] [new] (64 chars)");
	}
	if(PC_CommandExists(cmd))
	{
	 	PC_RenameCommand(cmd, newcmd);
	 	SendClientMessageEx(playerid, COLOR_AQUA, "You've renamed command %s to %s.", cmd, newcmd);
	 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s renamed /%s to /%s", GetPlayerRPName(playerid), cmd, newcmd);
	}
	return 1;
}

CMD:createalias(playerid, params[])
{
	new cmd[64], alias[64];
	if(PlayerInfo[playerid][pAdmin] < 8 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s[64]s[64]", cmd, alias))
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createalias [cmd] [newcmd] (64 chars)");
	}
	if(PC_CommandExists(cmd))
	{
     	PC_RegAlias(cmd, alias);
     	SendClientMessageEx(playerid, COLOR_AQUA, "You've created alias %s for %s.", alias, cmd);
	 	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s created a alias for /%s (/%s)", GetPlayerRPName(playerid), cmd, alias);
	}
	return 1;
}


CMD:changelist(playerid, params[])
{
	new slot, option[10], param[64];

    if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changelist [edit] [slot (1-10)] [text]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, '%e') ON DUPLICATE KEY UPDATE text = '%e'", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** Change text for slot %i changed to '%s'.", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changelist [clear] [slot (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** Change text for slot %i cleared.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pAdminPersonnel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forceaduty [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player needs to be at least a level 2 administrator.");
	}
	if(PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified has a higher admin level than you. They cannot be forced into admin duty.");
	}

	if(!PlayerInfo[targetid][pAdminDuty])
	{
		SendClientMessageEx(targetid, COLOR_WHITE, "%s has forced you to be on admin duty.", GetPlayerRPName(playerid));
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_WHITE, "%s has forced you to be off admin duty.", GetPlayerRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Help Requests _____");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pHelpRequest]))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** %s[%i] asks: %s", GetPlayerRPName(i), i, PlayerInfo[i][pHelpRequest]);
		}
	}

	SendClientMessage(playerid, COLOR_AQUA, "** Use /accepthelp [id] or /denyhelp [id] to handle help requests.");
	SendClientMessage(playerid, COLOR_AQUA, "** Use /answerhelp [id] [msg] to PM an answer without the need to teleport.");
	return 1;
}

CMD:accepthelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to leave the paintball arena first.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /accepthelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}

	if(PlayerInfo[playerid][pTagType] == TAG_NONE)
	{
 		SetPlayerSpecialTag(playerid, TAG_HELPER);
	}

	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	TogglePlayerControllable(targetid, 0);
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767);
	//SetScriptArmour(playerid, 0.0);

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[playerid][pAcceptedHelp] = 1;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has accepted %s's help request.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "You accepted %s's help request and were sent to their position. /return to go back.", GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_GREEN, "%s has accepted your help request. They are now assisting you.", GetPlayerRPName(playerid));
	return 1;
}

CMD:denyhelp(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /denyhelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}

	PlayerInfo[targetid][pHelpRequest][0] = 0;

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has denied %s's help request.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "You denied %s's help request.", GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "** %s has denied your help request.", GetPlayerRPName(playerid));
	return 1;
}

CMD:sta(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sta [playerid] (Sends /helpme to admins)");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}

//    AddReportToQueue(targetid, PlayerInfo[targetid][pHelpRequest]);
    PlayerInfo[targetid][pHelpRequest][0] = 0;

    SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has sent %s's help request to all online admins.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, "You sent %s's help request to all online admins.", GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has sent your help request to all online admins.", GetPlayerRPName(playerid));
	return 1;
}

CMD:return(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't accepted any help requests.");
	}

	if(PlayerInfo[playerid][pTagType] == TAG_HELPER)
	{
	    SetPlayerSpecialTag(playerid, TAG_NONE);
	}

	SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	SetScriptArmour(playerid, PlayerInfo[playerid][pArmor]);

	SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
	SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
	SetCameraBehindPlayer(playerid);

	SendClientMessage(playerid, COLOR_WHITE, "You were returned to your previous position.");
    PlayerInfo[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid, params[])
{
	new targetid, msg[128];

	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /answerhelp [playerid] [message]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(isnull(PlayerInfo[targetid][pHelpRequest]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested any help since they connected.");
	}

	PlayerInfo[playerid][pHelpRequests]++;
	PlayerInfo[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", PlayerInfo[playerid][pHelpRequests], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SendClientMessageEx(targetid, COLOR_YELLOW, "** Answer from %s: %.*s... **", GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SendClientMessageEx(targetid, COLOR_YELLOW, "** Answer from %s: ...%s **", GetPlayerRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_YELLOW, "** Answer from %s: %s **", GetPlayerRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has answered %s's help request.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:hc(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hc [helper chat]");
	}
	if(PlayerInfo[playerid][pToggleHelper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the helper chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
		if((PlayerInfo[i][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0) && !PlayerInfo[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0xBDF38BFF, "** %s %s: %.*s... **", GetStaffRank(playerid), GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0xBDF38BFF, "** %s %s: ...%s **", GetStaffRank(playerid), GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0xBDF38BFF, "** %s %s: %s **", GetStaffRank(playerid), GetPlayerRPName(playerid), params);
			}
			return 1;
		}
		/*if(PlayerInfo[playerid][pAdmin] > 0 && !PlayerInfo[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0xBDF38BFF, "** %s %s: %.*s... **", GetAdminRank(playerid), GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0xBDF38BFF, "** %s %s: ...%s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0xBDF38BFF, "** %s %s: %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), params);
			}
			return 1;
		}*/
	}
	return 1;
}

CMD:hh(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:hhelp(playerid, params[])
{
	return callcmd::helperhelp(playerid, params);
}

CMD:helperhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 1:{DDDDDD} /hc, /listhelp, /accepthelp, /answerhelp, /denyhelp, /sta, /return.");
	}
    if(PlayerInfo[playerid][pHelper] >= 2)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 2:{DDDDDD} /nmute, /hmute, /gmute");
	}
    if(PlayerInfo[playerid][pHelper] >= 3)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 3:{DDDDDD} /olisthelpers, /checknewbies, /makehelper, /omakehelper.");
	}
	if(PlayerInfo[playerid][pHelper] >= 4)
	{
		SendClientMessage(playerid, COLOR_AQUA, "LEVEL 4:{DDDDDD} /setmotd.");
	}

	return 1;
}

CMD:activity(playerid, params[])
{
	new type[16];

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ My Properties _______");

    foreach(new i : House)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Other";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

	        if((gettime() - HouseInfo[i][hTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as {FF6347}Inactive{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Your %s house in %s is currently marked as {00AA00}Active{C8C8C8}.", type, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
			}
		}
	}

 	foreach(new i : Garage)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
	        if((gettime() - GarageInfo[i][gTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as {FF6347}Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Your %s garage in %s is currently marked as {00AA00}Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
			}
		}
	}

 	foreach(new i : Business)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
	        if((gettime() - BusinessInfo[i][bTimestamp]) > 2592000)
    	    {
        	    SendClientMessageEx(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as {FF6347}Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
			else
			{
		    	SendClientMessageEx(playerid, COLOR_GREY2, "Your %s business in %s is currently marked as {00AA00}Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
			}
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "** Your properties become inactive if you don't enter them for 30+ days.");
	return 1;
}

CMD:hlights(playerid, params[])
{
	new option, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", option) || !(0 <= option <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hlights [lights (1/0)]");
	}
	if(option)
	{
	    SendClientMessage(playerid, COLOR_AQUA, "** You've turned on the lights to this house.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_AQUA, "** You've turned off the lights to this house.");
	}
	HouseInfo[houseid][hLights] = option;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET lights = %i WHERE id = %i", option, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);
	foreach(new i : Player)
	{
	    if(GetInsideHouse(i) == houseid)
	    {
	        if(HouseInfo[houseid][hLights] == 1)
	        {
	            TextDrawHideForPlayer(i, houseLights);
	        }
	        else
	        {
	            TextDrawShowForPlayer(i, houseLights);
			}
	    }
	}

	return 1;
}

CMD:setrent(playerid, params[])
{
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", price))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setrent [price ('0' to disable)]");
	}
	if(!(0 <= price <= 10000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid price. The price must range between $0 and $10,000.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You've set the rental price to $%i.", price);
	return 1;
}

CMD:renthouse(playerid, params[])
{
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no house in range. You must be near a house.");
	}
	/*if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /renthouse [confirm]");
	}*/
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house is not owned and therefore cannot be rented.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This house's owner has chosen to disable renting for this house.");
	}
	if(PlayerInfo[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to rent here.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are the owner of this house. You can't rent here.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(!PlayerInfo[playerid][pRentingHouse])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not renting at any property. You can't use this command.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[playerid][pRentingHouse] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "You have ripped up your rental contract.");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid, params[])
{
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /evict [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid, params[])
{
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}

	foreach(new i : Player)
    {
        if(PlayerInfo[i][pLogged] && PlayerInfo[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            PlayerInfo[i][pRentingHouse] = 0;
            SendClientMessage(i, COLOR_RED, "You have been evicted from your home by the owner.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SendClientMessage(playerid, COLOR_WHITE, "You have evicted all tenants from your home.");
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /houseinvite [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    //return SendClientMessage(playerid, COLOR_GREY, "You can't invite yourself to your own home.");
	}

	PlayerInfo[targetid][pInviteOffer] = playerid;
	PlayerInfo[targetid][pInviteHouse] = houseid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has offered you an invitation to their house in %s. (/accept invite)", GetPlayerRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered %s an invitation to your house.", GetPlayerRPName(targetid));
	return 1;
}

CMD:furniture(playerid, params[])
{
	new houseid = GetInsideHouse(playerid), option[14], param[32];

	if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any house of yours.");
	}
	if(sscanf(params, "s[14]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /furniture [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Buy, Edit, Duplicate, Sell, Clear, Allow, Disallow, Labels");
	    return 1;
	}
	if(!strcmp(option, "buy", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FURNITURE, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /furniture [edit] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SendClientMessage(playerid, COLOR_GREY, "Invalid object. This furniture object is not inside of your house.");
        }

        PlayerInfo[playerid][pEditType] = EDIT_FURNITURE;
        PlayerInfo[playerid][pEditObject] = objectid;
        PlayerInfo[playerid][pFurnitureHouse] = houseid;

		EditDynamicObject(playerid, objectid);
        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	}
	else if(!strcmp(option, "duplicate", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /furniture [duplicate] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SendClientMessage(playerid, COLOR_GREY, "Invalid object. This furniture object is not inside of your house.");
        }

	    PlayerInfo[playerid][pSelected] = objectid;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECKDUPE_FURNITURE, playerid);


	}
	else if(!strcmp(option, "sell", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /furniture [sell] [objectid] (75%% refund)");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SendClientMessage(playerid, COLOR_GREY, "Invalid object. This furniture object is not inside of your house.");
        }

        PlayerInfo[playerid][pSelected] = objectid;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM furniture WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_FURNITURE, playerid);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /furniture [clear] [confirm]");
			SendClientMessage(playerid, COLOR_SYNTAX, "This sells all of your furniture in your house. This action is irreversible.");
			return 1;
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_FURNITURE, playerid);
	}
	else if(!strcmp(option, "allow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /furniture [allow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] == houseid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You already allowed that player to access your furniture.");
		}

		PlayerInfo[targetid][pFurniturePerms] = houseid;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has allowed you to access their home's furniture.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have allowed %s to access your home's furniture.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "disallow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /furniture [disallow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
		}
		if(PlayerInfo[targetid][pFurniturePerms] != houseid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You haven't allowed that player to access your furniture.");
		}

		PlayerInfo[targetid][pFurniturePerms] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed your access to their home's furniture.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s's access to your home's furniture.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "labels", true))
	{
	    if(!HouseInfo[houseid][hLabels])
	    {
	        HouseInfo[houseid][hLabels] = 1;
         	SendClientMessage(playerid, COLOR_AQUA, "You will now see labels appear above all of your furniture.");
	    }
	    else
	    {
	        HouseInfo[houseid][hLabels] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "You will no longer see any labels appear above your furniture.");
	    }

	    ReloadAllFurniture(houseid);
	}


	return 1;
}

CMD:creategarage(playerid, params[])
{
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /creategarage [small/medium/large]");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a garage in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot create garages indoors.");
	}

	if(!strcmp(size, "small", true)) {
	    type = 0;
	} else if(!strcmp(size, "medium", true)) {
	    type = 1;
	} else if(!strcmp(size, "large", true)) {
	    type = 2;
	}

	if(type == -1)
	{
	     SendClientMessage(playerid, COLOR_GREY, "Invalid size. Valid sizes range from Small, Medium and Large.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

  		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SendClientMessage(playerid, COLOR_GREY, "Garage slots are currently full. Ask developers to increase the internal limit.");
	}

	return 1;
}

CMD:editgarage(playerid, params[])
{
	new garageid, option[10], param[32];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Entrance, Exit, Type, Owner, Price, Locked, Freeze");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the entrance of garage %i.", garageid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [freeze] [0/1]");
		}

		GarageInfo[garageid][gFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET freeze = %i WHERE id = %i", GarageInfo[garageid][gFreeze], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've enabled freeze & object loading for entrance %i.", garageid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've disabled freeze & object loading for entrance %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the vehicle exit spawn of garage %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [type] [small/medium/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "medium", true)) {
		    type = 1;
		} else if(!strcmp(size, "large", true)) {
		    type = 2;
		}

		if(type == -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the type of garage %i to %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetGarageOwner(garageid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the owner of garage %i to %s.", garageid, GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the price of garage %i to $%i.", garageid, price);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgarage [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the lock state of garage %i to %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid, params[])
{
	new garageid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removegarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;
    Iter_Remove(Garage, garageid);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed garage %i.", garageid);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new garageid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotogarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid garage.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	SetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** GARAGE HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "*** GARAGE *** /buygarage /lock /upgradegarage /sellgarage /sellmygarage /garageinfo");
	SendClientMessage(playerid, COLOR_GREY, "*** GARAGE *** /repair /refuel");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no garage in range. You must be near a garage.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buygarage [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This garage already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this garage.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid %s to make this garage yours! /garagehelp for a list of commands.", FormatNumber(GarageInfo[garageid][gPrice]));
    Log_Write("log_property", "%s (uid: %i) purchased %s garage (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], GarageInfo[garageid][gPrice]);
	return 1;
}

CMD:upgradegarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}
	if(GarageInfo[garageid][gType] >= 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your garage is already at its maximum possible size. You cannot upgrade it further.");
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradegarage [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "The next garage size available is %s and costs %s to upgrade to.", garageInteriors[GarageInfo[garageid][gType] + 1][intName], FormatNumber(garageInteriors[GarageInfo[garageid][gType] + 1][intPrice]));
		return 1;
	}
	if(PlayerInfo[playerid][pCash] < garageInteriors[GarageInfo[garageid][gType] + 1][intPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to upgrade your garage.");
	}

	foreach(new i: Vehicle)
	{
	    if(IsVehicleInGarage(i, garageid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You must remove all vehicles from your garage before proceeding.");
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i AND interior > 0 AND world = %i", PlayerInfo[playerid][pID], GarageInfo[garageid][gWorld]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerUpgradeGarage", "ii", playerid, garageid);
	return 1;
}

CMD:sellgarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellgarage [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pGarageOffer] = playerid;
	PlayerInfo[targetid][pGarageOffered] = garageid;
	PlayerInfo[targetid][pGaragePrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered you their garage for %s (/accept garage).", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered %s to buy your garage for %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmygarage(playerid, params[])
{
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmygarage [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your garage back to the state. You will receive %s back.", FormatNumber(percent(GarageInfo[garageid][gPrice], 75)));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your garage to the state and received %s back.", FormatNumber(percent(GarageInfo[garageid][gPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their %s garage (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid, params[])
{
    new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any garage of yours.");
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ Garage ID %i _______", garageid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Value: %s - Size: %s - Location: %s - Active: %s - Locked: %s", FormatNumber(GarageInfo[garageid][gPrice]), garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 2592000) ? ("{FF6347}No{C8C8C8}") : ("Yes"), (GarageInfo[garageid][gLocked]) ? ("Yes") : ("No"));
	return 1;
}

CMD:createbiz(playerid, params[])
{
	new type, Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", type))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createbiz [type]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Tool Shop");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a business in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Business slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editbiz(playerid, params[])
{
	new businessid, option[14], param[32];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Entrance, Exit, Interior, World, Type, Owner, Price, EntryFee, Products, Materials, Locked");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the entrance of business %i.", businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the exit of business %i.", businessid);
	}
	else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    PlayerInfo[playerid][pSelected] = businessid;
	    ShowPlayerDialog(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Choose an interior to set for this business.", string, "Select", "Cancel");
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the virtual world of business %i to %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [type] [value (1-%i)]", sizeof(bizInteriors));
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar (8) Tool Shop");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the type of business %i to %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetBusinessOwner(businessid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the owner of business %i to %s.", businessid, GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [price] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the price of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "entryfee", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [entryfee] [value]");
		}
		if(price < 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bEntryFee] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the entry fee of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [products] [value]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the products amount of business %i to %i.", businessid, amount);
	}
	else if(!strcmp(option, "materials", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [materials] [value]");
		}

		BusinessInfo[businessid][bMaterials] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the materials amount of business %i to %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editbiz [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the lock state of business %i to %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid, params[])
{
	new businessid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removebiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

	RemoveAllFurniture(businessid);

	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;
	Iter_Remove(Business, businessid);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed business %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid, params[])
{
	new businessid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotobiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid business.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	SetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);
	SetPlayerInterior(playerid, BusinessInfo[businessid][bOutsideInt]);
	SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "*** BUSINESS HELP *** type a command for more information.");
	SendClientMessage(playerid, COLOR_GREY, "*** BUSINESS *** /buybiz /lock /bwithdraw /bdeposit /entryfee /sellbiz /sellmybiz /bizinfo");
	SendClientMessage(playerid, COLOR_GREY, "*** BUSINESS *** /bdepositmats /bwithdrawmats");
	return 1;
}

CMD:buybiz(playerid, params[])
{
	new businessid;

	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no business in range. You must be near a business.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buybiz [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This business already has an owner.");
	}
	if(PlayerInfo[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this business.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid $%i for this %s. /bizhelp for a list of commands.", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType]);
    Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], BusinessInfo[businessid][bPrice]);
	return 1;
}

CMD:bwithdraw(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bwithdraw [amount] (%s available)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have withdrawn %s from the business vault. There is now %s remaining.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:bdeposit(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bdeposit [amount] (%s available)", FormatNumber(BusinessInfo[businessid][bCash]));
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have deposited %s in the business vault. There is now %s available.", FormatNumber(amount), FormatNumber(BusinessInfo[businessid][bCash]));
	return 1;
}

CMD:bwithdrawmats(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(BusinessInfo[businessid][bType] != BUSINESS_TOOLSHOP)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command can only be used in tool shops.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bwithdrawmats [amount] (%i available)", BusinessInfo[businessid][bMaterials]);
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bMaterials])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(PlayerInfo[playerid][pMaterials] + amount > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	BusinessInfo[businessid][bMaterials] -= amount;
	PlayerInfo[playerid][pMaterials] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have withdrawn %i materials from the business vault. There is now %i remaining.", amount, BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:bdepositmats(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any business of yours.");
	}
	if(BusinessInfo[businessid][bType] != BUSINESS_TOOLSHOP)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command can only be used in tool shops.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /bdepositmats [amount] (%i available)", BusinessInfo[businessid][bMaterials]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pMaterials])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	BusinessInfo[businessid][bMaterials] += amount;
	PlayerInfo[playerid][pMaterials] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET materials = %i WHERE id = %i", BusinessInfo[businessid][bMaterials], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have deposited %i materials in the business vault. There is now %i available.", amount, BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellbiz [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pBizOffer] = playerid;
	PlayerInfo[targetid][pBizOffered] = businessid;
	PlayerInfo[targetid][pBizPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered you their business for %s (/accept business).", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered %s to buy your business for %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmybiz [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your business back to the state. You will receive %s back.", FormatNumber(percent(BusinessInfo[businessid][bPrice], 75)));
	    return 1;
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your business to the state and received %s back.", FormatNumber(percent(BusinessInfo[businessid][bPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their %s business (id: %i) to the state for %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
	return 1;
}

CMD:bizinfo(playerid, params[])
{
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ Business ID %i _______", businessid);
	SendClientMessageEx(playerid, COLOR_GREY2, "Value: %s - Type: %s - Location: %s - Active: %s - Status: %s", FormatNumber(BusinessInfo[businessid][bPrice]), bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 2592000) ? ("{FF6347}No{C8C8C8}") : ("Yes"), (BusinessInfo[businessid][bLocked]) ? ("Closed") : ("Opened"));
	SendClientMessageEx(playerid, COLOR_GREY2, "Vault: %s - Entry Fee: %s - Products: %i - Materials: %i", FormatNumber(BusinessInfo[businessid][bCash]), FormatNumber(BusinessInfo[businessid][bEntryFee]), BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bMaterials]);
	return 1;
}

CMD:entryfee(playerid, params[])
{
	new businessid = GetNearbyBusinessEx(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /entryfee [amount]");
	}
	if(amount < 0 || amount > 5000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The entry fee can't be below $0 or above $5,000.");
	}

	BusinessInfo[businessid][bEntryFee] = amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the entry fee to $%i.", amount);
	return 1;
}

CMD:buy(playerid, params[])
{
	new businessid = GetInsideBusiness(playerid), title[64];

	if(businessid == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any business where you can buy stuff.");
	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SendClientMessage(playerid, COLOR_GREY, "This business is out of stock.");
   	}

	format(title, sizeof(title), "%s's %s [%i products]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Mobile phone ($525)\nWalkie talkie ($5000)\nCigars ($125)\nSpraycans ($400)\nPhonebook ($200)\nCamera ($200)\nMP3 player ($2400)\nFishing rod ($1000)\nFish bait ($790)\nMuriatic acid ($1500)\nBaking soda ($1290)\nPocket watch ($1000)\nGPS system ($750)\nGasoline can ($500)\nRope ($175)", "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "9mm pistol ($1500)\nShotgun ($2000)\nRifle ($4000)\nLight armor ($1500)\nMedium Armor($2500)", "Select", "Cancel");
		}
		case BUSINESS_CLOTHES:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Clothes ($1000)\nGlasses ($500)\nBandanas & masks ($375)\nHats & caps ($240)\nMisc clothing ($500)", "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Normal (Free)\nBoxing ($4725)\nKung Fu ($7650)\nKneehead ($9275)\nGrabkick ($1250)\nElbow ($2950)", "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Water ($50)\nSprunk ($100)\nFrench fries ($250)\nHamburger ($400)\nCheeseburger ($450)\nMac & cheese ($525)\nClub sandwich ($600)\nFish & chips ($925)\nPan pizza ($1200)", "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, title, "Water ($50)\nSprunk ($100)\nBeer ($200)\nWine ($350)\nWhiskey ($475)", "Select", "Cancel");
		}
		case BUSINESS_TOOLSHOP:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST_HEADERS, title, "Item\tCost\nFirst aid kit\t500 materials\nBody repair kit\t1000 materials\nPolice scanner\t2000 materials\nRimkit\t4000 materials", "Select", "Cancel");
		}

	}

	return 1;
}

CMD:advertise(playerid, params[])
{
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid, params[])
{
    new businessid = GetInsideBusiness(playerid), price = strlen(params) * 25;

	if((PlayerInfo[playerid][pVIPPackage] == 0) && (businessid == -1 || BusinessInfo[businessid][bType] != 5))
	{
	    if(GetClosestBusiness(playerid, BUSINESS_AGENCY) == -1)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "There are no advertisement agencies in town.");
	        return 1;
	    }
	    businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(ad)vertise [advertisement] ($25/char)");
	}
	if(PlayerInfo[playerid][pAdMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(PlayerInfo[playerid][pHours] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to play at least 2 hours in order to post an advertisement.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Advertisements can only be posted every 30 seconds.");
	}
	if(PlayerInfo[playerid][pVIPPackage] < 3 && PlayerInfo[playerid][pCash] < price)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need %s in order to place the advertisement. You can't afford that.", FormatNumber(price));
	}

	new
		string[20];

	gLastAd = gettime();

	if(PlayerInfo[playerid][pVIPPackage] == 3)
	{
	    SendClientMessage(playerid, COLOR_VIP, "VIP Perk: Your advertisement was posted free of charge!");
	}
	else
	{
		format(string, sizeof(string), "~r~-$%i", price);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -price);

		if(businessid >= 0)
		{
		    if(BusinessInfo[businessid][bProducts] > 0)
		    {
				BusinessInfo[businessid][bCash] += (price/100) * 75;
			}
			BusinessInfo[businessid][bProducts]--;
			gNewsVault += (price/100)*5;
			SaveServerInfo();

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}

	SendClientMessageToAllEx((PlayerInfo[playerid][pVIPPackage] > 0) ? (COLOR_LIGHTORANGE) : (COLOR_DARKGREEN), "Advertisement: %s, Contact: %s, Ph: %i", params, GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
	return 1;
}

CMD:mark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /mark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SendClientMessageEx(playerid, COLOR_AQUA, "** Position saved in slot %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid, params[])
{
	new slot;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotomark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no position in the slot selected.");
	}

	slot--;

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	SetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);
	SetPlayerInterior(playerid, MarkedPositions[playerid][slot][mInterior]);
	SetPlayerVirtualWorld(playerid, MarkedPositions[playerid][slot][mWorld]);
	SetCameraBehindPlayer(playerid);

	return 1;
}

CMD:createentrance(playerid, params[])
{
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createentrance [name]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is an entrance in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES('%e', '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Entrance slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editentrance(playerid, params[])
{
	new entranceid, option[14], param[64];

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Entrance, Exit, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Faction, Gang, VIP, Vehicles, Freeze, Label, Password, Type, MapIcon, Color");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid entrance.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the entrance of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the exit of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [name] [text]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = '%e' WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the name of entrance %i to '%s'.", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid model ID.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the pickup icon model of entrance %i to %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the virtual world of entrance %i to %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SendClientMessageEx(playerid, COLOR_AQUA, "** You've reset the owner of entrance %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(!PlayerInfo[targetid][pLogged])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the owner of entrance %i to %s.", entranceid, GetPlayerRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the lock state of entrance %i to %i.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The entry radius must range between 1.0 and 20.0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the entry radius of entrance %i to %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level. Valid levels range from 0 to 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the admin level of entrance %i to %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [faction] [type]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal");
	        return 1;
		}
		if(!(0 <= type <= 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've reset the faction type of entrance %i.", entranceid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the faction type of entrance %i to %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

	    if(sscanf(param, "i", gangid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [gang] [gangid]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		EntranceInfo[entranceid][eGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET gang = %i WHERE id = %i", EntranceInfo[entranceid][eGang], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(gangid == -1)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've reset the gang of entrance %i.", entranceid);
		else
	    	SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the gang of entrance %i to %s (%i).", entranceid, GangInfo[gangid][gName], gangid);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [vip] [rankid]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of ranks: (0) None (1) Daisy (2) Rose (3) Ivy");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SendClientMessage(playerid, COLOR_GREY, "Invalid VIP rank.");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the VIP rank of entrance %i to {D909D9}%s{33CCFF} (%i).", entranceid, GetVIPRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've allowed vehicle entry for entrance %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've disallowed vehicle entry for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've enabled freeze & object loading for entrance %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've disabled freeze & object loading for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've enabled the 3D text label for entrance %i.", entranceid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've disabled the 3D text label for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [password] [text ('none' to reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = '%e' WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the password of entrance %i to '%s'.", entranceid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [type] [type id]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Duel Arena (2) Repair");
	        return 1;
		}
		if(!(0 <= type <= 2))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

        EntranceInfo[entranceid][eType] = type;

		if(type == 1)
		{
		    EntranceInfo[entranceid][eIntX] = 1419.6472;
			EntranceInfo[entranceid][eIntY] = 4.0132;
			EntranceInfo[entranceid][eIntZ] = 1002.3906;
			EntranceInfo[entranceid][eIntA] = 90.0000;
			EntranceInfo[entranceid][eInterior] = 1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, type = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eType], EntranceInfo[entranceid][eID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET type = %i WHERE id = %i", EntranceInfo[entranceid][eType], EntranceInfo[entranceid][eID]);
		    mysql_tquery(connectionID, queryBuffer);
		}

		ReloadEntrance(entranceid);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You've set the special type for entrance %i to %i.", entranceid, type);
	}
	else if(!strcmp(option, "mapicon", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [mapicon] [type (0-63)]");
		}
		if(!(0 <= type <= 63))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid map icon.");
		}

		EntranceInfo[entranceid][eMapIcon] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET mapicon = %i WHERE id = %i", EntranceInfo[entranceid][eMapIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the map icon of entrance %i to %i.", entranceid, type);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editentrance [entranceid] [color] [0xRRGGBBAA]");
		}

		EntranceInfo[entranceid][eColor] = (color & ~0xFF) | 0xFF;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET color = %i WHERE id = %i", EntranceInfo[entranceid][eColor], EntranceInfo[entranceid][eID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have set the {%06x}color{33CCFF} of entrance ID %i.", color >>> 8, entranceid);
	}

	return 1;
}

CMD:removeentrance(playerid, params[])
{
	new entranceid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid entrance.");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;
	Iter_Remove(Entrance, entranceid);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed entrance %i.", entranceid);
	return 1;
}

CMD:gotoentrance(playerid, params[])
{
	new entranceid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotoentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid entrance.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	SetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);
	SetPlayerInterior(playerid, EntranceInfo[entranceid][eOutsideInt]);
	SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:join(playerid, params[])
{
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
	    {
	    	ApplyActorAnimation(jobLocations[i][jobActorID], "PED", "IDLE_CHAT", 4.1, 0, 1, 1, 0, 3000);
	    		
	        if(PlayerInfo[playerid][pJob] != JOB_NONE)
	        {
	            if(PlayerInfo[playerid][pVIPPackage] >= 2)
	        	{
	        	    if(PlayerInfo[playerid][pSecondJob] != JOB_NONE)
	        	    {
	        	        return SendClientMessage(playerid, COLOR_GREY, "You have two jobs already. Please quit one of them before getting another one.");
	        	    }
	        	    if(PlayerInfo[playerid][pJob] == i)
	        	    {
	        	        return SendClientMessage(playerid, COLOR_GREY, "You have this job already.");
	        	    }

	        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					PlayerInfo[playerid][pSecondJob] = i;
					SendClientMessageEx(playerid, COLOR_AQUA, "You are now a {FF6347}%s{33CCFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
	            }
	            else
	            {
	            	SendClientMessage(playerid, COLOR_GREY, "You have a job already. Please quit your current job before getting another one.");
				}

				return 1;
			}

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", i, PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pJob] = i;
			SendClientMessageEx(playerid, COLOR_AQUA, "You are now a {FF6347}%s{33CCFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any job icon.");
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new slot;

	if(PlayerInfo[playerid][pVIPPackage] >= 2 && sscanf(params, "i", slot))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /quitjob [1/2]");
	}

	if((PlayerInfo[playerid][pVIPPackage] < 2) || (PlayerInfo[playerid][pVIPPackage] >= 2 && slot == 1))
	{
	    if(PlayerInfo[playerid][pJob] == JOB_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have a job which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have quit your job as a {00AA00}%s{33CCFF}.", GetJobName(PlayerInfo[playerid][pJob]));
		PlayerInfo[playerid][pJob] = JOB_NONE;
	}
	else if(slot == 2 && PlayerInfo[playerid][pVIPPackage] >= 2)
	{
	    if(PlayerInfo[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have a job in this slot which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have quit your secondary job as a {00AA00}%s{33CCFF}.", GetJobName(PlayerInfo[playerid][pSecondJob]));
		PlayerInfo[playerid][pSecondJob] = JOB_NONE;
	}

	return 1;
}

CMD:getpizza(playerid, params[])
{
	new houseid;

    if(!PlayerHasJob(playerid, JOB_PIZZAMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Pizzaman.");
	}
	if(PlayerInfo[playerid][pPizzaCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before you can load another pizza.", PlayerInfo[playerid][pPizzaCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 448)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a pizza bike.");
	}
	/*if(PlayerInfo[playerid][pPizzas] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have pizzas already. Deliver them first.");
	}*/
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, jobLocations[JOB_PIZZAMAN][jobX], jobLocations[JOB_PIZZAMAN][jobY], jobLocations[JOB_PIZZAMAN][jobZ]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be closer to the job icon at the pizza stacks.");
	}
	if((houseid = GetRandomHouse(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There are no houses in the server to deliver pizza to. Ask an admin to set them up.");
	}

	PlayerInfo[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    PlayerInfo[playerid][pPizzas] = 1;
	PlayerInfo[playerid][pLastPizza] = gettime();
    PlayerInfo[playerid][pPizzaTime] = 0;
    PlayerInfo[playerid][pPizzaCooldown] = 60;

	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
    PlayerInfo[playerid][pCP] = CHECKPOINT_PIZZA;

	GameTextForPlayer(playerid, "~w~Deliver to ~r~marker", 5000, 1);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You loaded your bike with a hot and ready pizza. Deliver it to %s.", GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	return 1;
}

CMD:load(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Courier.");
	}
	if(PlayerInfo[playerid][pCourierCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before you can load another delivery.", PlayerInfo[playerid][pCourierCooldown]);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Mule or a Boxville.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, -63.4372, -1121.4932, 1.1103))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the loading dock.");
	}
	if(PlayerInfo[playerid][pShipment] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have a shipment loaded already. You need to deliver it first.");
	}

	ShowPlayerDialog(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Choose the load you want to deliver.", "Grocery supplies\nAmmunition\nClothing items\nFood & drinks\nBeverages\nTools & equipment", "Select", "Cancel");
	return 1;
}

CMD:deliver(playerid, params[])
{
	new businessid, products, amount;

    if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Courier.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Mule or a Boxville.");
	}
	if(PlayerInfo[playerid][pShipment] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no shipment loaded which you can deliver.");
	}
	if((businessid = GetNearbyBusiness(playerid, 7.0)) == -1 || BusinessInfo[businessid][bType] != PlayerInfo[playerid][pShipment])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of a business which accepts this type of load.");
	}

	if(gettime() - PlayerInfo[playerid][pLastLoad] < 20 && PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pKicked])
    {
        PlayerInfo[playerid][pACWarns]++;

        if(PlayerInfo[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
        {
            SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly teleport delivering (time: %i).", GetPlayerRPName(playerid), playerid, gettime() - PlayerInfo[playerid][pLastLoad]);
		}
		else
		{
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd: %s was autobanned by %s, reason: Teleport delivering", GetPlayerRPName(playerid), SERVER_ANTICHEAT);
		    BanPlayer(playerid, SERVER_ANTICHEAT, "Teleport delivering");
		}
    }

	products = (GetJobLevel(playerid, JOB_COURIER) * 5) + 5;

	if(PlayerInfo[playerid][pShipment] == BUSINESS_STORE) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 470;
  	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_GUNSHOP) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 525;
    } else if(PlayerInfo[playerid][pShipment] == BUSINESS_CLOTHES) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 545;
  	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_RESTAURANT) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 490;
 	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_BARCLUB) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 440;
	} else if(PlayerInfo[playerid][pShipment] == BUSINESS_TOOLSHOP) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 200) + 560;
	}

	amount += floatround(GetPlayerDistanceFromPoint(playerid, -63.4372, -1121.4932, 1.1103) / 2.0);

    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have earned {00AA00}$%i{33CCFF} on your paycheck for delivering %i products.", amount, products);
	AddToPaycheck(playerid, amount);

	BusinessInfo[businessid][bProducts] += products;
	PlayerInfo[playerid][pShipment] = -1;
	PlayerInfo[playerid][pCourierCooldown] = 120;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_COURIER);

	return 1;
}

CMD:skill(playerid, params[])
{
	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skill [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Courier, Fishing, Bodyguard, WeaponDealer, Mechanic, DrugSmuggler, Lawyer, Detective, Thief");
	    return 1;
	}
	if(!strcmp(params, "courier", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your courier skill level is %i/5.", GetJobLevel(playerid, JOB_COURIER));

	    if(GetJobLevel(playerid, JOB_COURIER) < 5)
	    {
	        if(PlayerInfo[playerid][pCourierSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 50 - PlayerInfo[playerid][pCourierSkill]);
	        } else if(PlayerInfo[playerid][pCourierSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 100 - PlayerInfo[playerid][pCourierSkill]);
	        } else if(PlayerInfo[playerid][pCourierSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 200 - PlayerInfo[playerid][pCourierSkill]);
            } else if(PlayerInfo[playerid][pCourierSkill] < 350) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to deliver %i more shipments in order to level up.", 350 - PlayerInfo[playerid][pCourierSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "fishing", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your fishing skill level is %i/5.", GetJobLevel(playerid, JOB_FISHERMAN));

	    if(GetJobLevel(playerid, JOB_FISHERMAN) < 5)
	    {
	        if(PlayerInfo[playerid][pFishingSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 50 - PlayerInfo[playerid][pFishingSkill]);
	        } else if(PlayerInfo[playerid][pFishingSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 100 - PlayerInfo[playerid][pFishingSkill]);
	        } else if(PlayerInfo[playerid][pFishingSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 200 - PlayerInfo[playerid][pFishingSkill]);
            } else if(PlayerInfo[playerid][pFishingSkill] < 350) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to catch %i more fish in order to level up.", 350 - PlayerInfo[playerid][pFishingSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "bodyguard", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your bodyguard skill level is %i/5.", GetJobLevel(playerid, JOB_BODYGUARD));

	    if(GetJobLevel(playerid, JOB_BODYGUARD) < 5)
	    {
	        if(PlayerInfo[playerid][pGuardSkill] < 25) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more vests in order to level up.", 25 - PlayerInfo[playerid][pGuardSkill]);
	        } else if(PlayerInfo[playerid][pGuardSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more vests in order to level up.", 50 - PlayerInfo[playerid][pGuardSkill]);
	        } else if(PlayerInfo[playerid][pGuardSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more vests in order to level up.", 100 - PlayerInfo[playerid][pGuardSkill]);
            } else if(PlayerInfo[playerid][pGuardSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more vests in order to level up.", 200 - PlayerInfo[playerid][pGuardSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "weapondealer", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your weapons dealer skill level is %i/5.", GetJobLevel(playerid, JOB_WEAPONDEALER));

	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 5)
	    {
	        if(PlayerInfo[playerid][pWeaponSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 50 - PlayerInfo[playerid][pWeaponSkill]);
	        } else if(PlayerInfo[playerid][pWeaponSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 100 - PlayerInfo[playerid][pWeaponSkill]);
	        } else if(PlayerInfo[playerid][pWeaponSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 200 - PlayerInfo[playerid][pWeaponSkill]);
            } else if(PlayerInfo[playerid][pWeaponSkill] < 500) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to sell %i more weapons in order to level up.", 500 - PlayerInfo[playerid][pWeaponSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your mechanic skill level is %i/5.", GetJobLevel(playerid, JOB_MECHANIC));

	    if(GetJobLevel(playerid, JOB_MECHANIC) < 5)
	    {
	        if(PlayerInfo[playerid][pMechanicSkill] < 25) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 25 - PlayerInfo[playerid][pMechanicSkill]);
	        } else if(PlayerInfo[playerid][pMechanicSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 50 - PlayerInfo[playerid][pMechanicSkill]);
	        } else if(PlayerInfo[playerid][pMechanicSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 100 - PlayerInfo[playerid][pMechanicSkill]);
            } else if(PlayerInfo[playerid][pMechanicSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to fix & refuel %i more vehicles in order to level up.", 200 - PlayerInfo[playerid][pMechanicSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "drugsmuggler", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your drug smuggler skill level is %i/5.", GetJobLevel(playerid, JOB_DRUGDEALER));

	    if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	    {
	        if(PlayerInfo[playerid][pSmugglerSkill] < 25) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 25 - PlayerInfo[playerid][pSmugglerSkill]);
	        } else if(PlayerInfo[playerid][pSmugglerSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 50 - PlayerInfo[playerid][pSmugglerSkill]);
	        } else if(PlayerInfo[playerid][pSmugglerSkill] < 75) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 75 - PlayerInfo[playerid][pSmugglerSkill]);
            } else if(PlayerInfo[playerid][pSmugglerSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to smuggle %i more packages in order to level up.", 100 - PlayerInfo[playerid][pSmugglerSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your lawyer skill level is %i/5.", GetJobLevel(playerid, JOB_LAWYER));

	    if(GetJobLevel(playerid, JOB_LAWYER) < 5)
	    {
	        if(PlayerInfo[playerid][pLawyerSkill] < 25) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 25 - PlayerInfo[playerid][pLawyerSkill]);
	        } else if(PlayerInfo[playerid][pLawyerSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 50 - PlayerInfo[playerid][pLawyerSkill]);
	        } else if(PlayerInfo[playerid][pLawyerSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 100 - PlayerInfo[playerid][pLawyerSkill]);
            } else if(PlayerInfo[playerid][pLawyerSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to defend %i more clients in order to level up.", 200 - PlayerInfo[playerid][pLawyerSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "detective", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your detective skill level is %i/5.", GetJobLevel(playerid, JOB_DETECTIVE));

	    if(GetJobLevel(playerid, JOB_DETECTIVE) < 5)
	    {
	        if(PlayerInfo[playerid][pDetectiveSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 50 - PlayerInfo[playerid][pDetectiveSkill]);
	        } else if(PlayerInfo[playerid][pDetectiveSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 100 - PlayerInfo[playerid][pDetectiveSkill]);
	        } else if(PlayerInfo[playerid][pDetectiveSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 200 - PlayerInfo[playerid][pDetectiveSkill]);
            } else if(PlayerInfo[playerid][pDetectiveSkill] < 400) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to find %i more people in order to level up.", 400 - PlayerInfo[playerid][pDetectiveSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else if(!strcmp(params, "thief", true))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Your thief skill level is %i/5.", GetJobLevel(playerid, JOB_THIEF));

	    if(GetJobLevel(playerid, JOB_THIEF) < 5)
	    {
	        if(PlayerInfo[playerid][pThiefSkill] < 50) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to drop off or crack into %i more cars in order to level up.", 50 - PlayerInfo[playerid][pThiefSkill]);
	        } else if(PlayerInfo[playerid][pThiefSkill] < 100) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to drop off or crack into %i more cars in order to level up.", 100 - PlayerInfo[playerid][pThiefSkill]);
	        } else if(PlayerInfo[playerid][pThiefSkill] < 200) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to drop off or crack into %i more cars in order to level up.", 200 - PlayerInfo[playerid][pThiefSkill]);
            } else if(PlayerInfo[playerid][pThiefSkill] < 500) {
	        	SendClientMessageEx(playerid, COLOR_GREEN, "You need to drop off or crack into %i more cars in order to level up.", 500 - PlayerInfo[playerid][pThiefSkill]);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "You have reached the maximum skill level for this job.");
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /skill [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Courier, Fishing, Bodyguard, WeaponDealer, Mechanic, DrugSmuggler, Lawyer, Detective, Thief");
	}

	return 1;
}

CMD:fish(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Fisherman.");
	}
	if(!PlayerInfo[playerid][pFishingRod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a fishing rod. You need a fishing rod to fish!");
	}
	if(PlayerInfo[playerid][pFishTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are fishing already. Wait for your line to be reeled in first.");
	}
	if(PlayerInfo[playerid][pFishWeight] >= 1500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have too much fish and can't fish any longer.");
	}
	if(IsABoat(GetPlayerVehicleID(playerid)))
	{
	    //return SendClientMessage(playerid, COLOR_GREY, "You are not close to anywhere where you can fish.");
	}
	else if(!IsPlayerAtFishingPlace(playerid) && GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}

	ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0, 1);

	SetPlayerAttachedObject(playerid, 9, 18632, 6, 0.112999, 0.024000, 0.000000, -172.999954, 28.499994, 0.000000);
	//SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s reels the line of their fishing rod into the water.", GetPlayerRPName(playerid));
	GameTextForPlayer(playerid, "~w~Fishing...", 6000, 3);

	PlayerInfo[playerid][pFishTime] = 6;

	if(PlayerInfo[playerid][pFishingBait] > 0)
	{
	    PlayerInfo[playerid][pFishingBait]--;
	    PlayerInfo[playerid][pUsedBait] = 1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = fishingbait - 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		//SendClientMessage(playerid, COLOR_AQUA, "** You used one fish bait. Your odds of catching a bigger fish are increased!");
	}
	else
	{
	    PlayerInfo[playerid][pUsedBait] = 0;
	}

	return 1;
}

CMD:sellfish(playerid, params[])
{
	new businessid;

	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Fisherman.");
	}
	if((businessid = GetInsideBusiness(playerid)) == -1 || BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any Supermarket business.");
	}
	if(!PlayerInfo[playerid][pFishWeight])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no fish which you can sell.");
	}

	new amount = (PlayerInfo[playerid][pFishWeight] * 1) + random(300)+50;

    if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "** You earned {00AA00}$%i{33CCFF} on your paycheck for selling %i kg of fish.", amount, PlayerInfo[playerid][pFishWeight]);
	AddToPaycheck(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerInfo[playerid][pFishWeight] = 0;
	return 1;
}

CMD:myfish(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Fisherman.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ My Fish _______");
	SendClientMessageEx(playerid, COLOR_GREY2, "You have %i/1500 kg of fish in your inventory.", PlayerInfo[playerid][pFishWeight]);
	return 1;
}

CMD:sellvest(playerid, params[])
{
	new targetid, amount;

	if(!PlayerHasJob(playerid, JOB_BODYGUARD))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Bodyguard.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellvest [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1000 || amount > 5000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount specified must range between $1000 and $5000.");
	}
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
	if(GetPlayerArmourEx(targetid) >= 50.0 + (GetJobLevel(playerid, JOB_BODYGUARD) * 5))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player already has a vest.");
	}

	PlayerInfo[playerid][pLastSell] = gettime();
	PlayerInfo[targetid][pVestOffer] = playerid;
	PlayerInfo[targetid][pVestPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered you a vest with %.1f points of armor for %s (/accept vest).", GetPlayerRPName(playerid), 50.0 + (GetJobLevel(playerid, JOB_BODYGUARD) * 5), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You offered %s a vest with %.1f points of armor for %s.", GetPlayerRPName(targetid), 50.0 + (GetJobLevel(playerid, JOB_BODYGUARD) * 5), FormatNumber(amount));
	return 1;
}

CMD:smugglemats(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_WEAPONDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Weapons Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467) && !IsPlayerInRangeOfPoint(playerid, 20.0, 714.5344, -1565.1694, 1.7680) && !IsPlayerInRangeOfPoint(playerid, 20.0, 2112.3240,-2432.8130,13.5469))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any materials pickup.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerInfo[playerid][pCash] < 50)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need at least $50 in cash to smuggle materials.");
	}
    if(PlayerInfo[playerid][pMaterials] + 250 > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
	}

	PlayerInfo[playerid][pCP] = CHECKPOINT_MATS;
	PlayerInfo[playerid][pSmuggleTime] = gettime();

	GivePlayerCash(playerid, -150);
	SendClientMessage(playerid, COLOR_AQUA, "** You paid $150 for a load of materials. Smuggle them to the depot to collect them.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547))
	{
	    AddPointMoney(POINT_MATPICKUP1, 25);
		SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
		PlayerInfo[playerid][pSmuggleMats] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    AddPointMoney(POINT_MATPICKUP2, 25);
		SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
		PlayerInfo[playerid][pSmuggleMats] = 2;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 714.5344, -1565.1694, 1.76807))
	{
 		//AddPointMoney(POINT_MATPICKUP2, 25);
		SetPlayerCheckpoint(playerid, 29.0318,-1399.3555,1.7680, 20.0);
		PlayerInfo[playerid][pSmuggleMats] = 3;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 1409.69, -2593.87, 13.55))
	{
		// get random checkpoint
		new rand = random(5);
		switch(rand)
		{
		    case 0: { SetPlayerCheckpoint(playerid, -1368.1206,-203.7393,14.1484, 30.0); }
		    case 1: { SetPlayerCheckpoint(playerid, 310.8307,2033.6459,17.6406, 30.0); }
		    case 2: { SetPlayerCheckpoint(playerid, 401.2192,2502.6482,16.4844, 30.0); }
		    case 3: { SetPlayerCheckpoint(playerid, 1582.8756,1356.8186,10.8556, 30.0); }
		    case 4: { SetPlayerCheckpoint(playerid, 1574.8552,1505.5690,10.8361, 30.0); }
		}
		PlayerInfo[playerid][pSmuggleMats] = 4;
	}

	if(!IsPlayerInAnyVehicle(playerid))
		PlayerInfo[playerid][pDedication] = 1;
	else
		PlayerInfo[playerid][pDedication] = 0;

	return 1;
}

CMD:getmats(playerid, params[])
{
	return callcmd::smugglemats(playerid, params);
}

CMD:sellgun(playerid, params[])
{
	new targetid, weapon[10], price;

    if(!PlayerHasJob(playerid, JOB_WEAPONDEALER) && PlayerInfo[playerid][pVIPPackage] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Weapons Dealer.");
	}
	if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
    }
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell weapons from within a vehicle.");
	}
	if(sscanf(params, "us[10]I(0)", targetid, weapon, price))
	{
		SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ Weapons Crafting _______");

		if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 1) {
		    SendClientMessage(playerid, COLOR_WHITE, "Level 1: Bat [50], Shovel [50], Golfclub [50], Poolcue [50]");
			SendClientMessage(playerid, COLOR_WHITE, "Level 1: Katana [50], Dildo [50], Flowers [50], Cane [50]");
			SendClientMessage(playerid, COLOR_WHITE, "Level 1: 9mm [100], Sdpistol [150], Shotgun [200]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 2) {
			SendClientMessage(playerid, COLOR_WHITE, "Level 2: MP5 [1000], Deagle [2000]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 3) {
			SendClientMessage(playerid, COLOR_WHITE, "Level 3: Uzi [500], Tec9 [500], Rifle [1000]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 4) {
			SendClientMessage(playerid, COLOR_WHITE, "Level 4: Ak47 [3500], M4 [4500]");
		} if(GetJobLevel(playerid, JOB_WEAPONDEALER) >= 5 || PlayerInfo[playerid][pVIPPackage] >= 3) {
		    if(PlayerInfo[playerid][pVIPPackage] >= 3) {
		        SendClientMessage(playerid, COLOR_VIP, "(VIP){FFFFFF} Level 5: Spas12 [5000], Sniper [5000]");
			} else {
				SendClientMessage(playerid, COLOR_WHITE, "Level 5: Spas12 [7500], Sniper [7500]");
			}
		}

		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellgun [playerid] [name] [price]");
		return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pHours] < 2 || PlayerInfo[targetid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is either weapon restricted or played less than two playing hours.");
    }
	if(gettime() - PlayerInfo[playerid][pLastSell] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastSell]));
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use this command at the moment.");
	}
	if(price < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $0.");
	}

    if(!strcmp(weapon, "bat", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 5))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 5);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 5;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a baseball bat for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a baseball bat for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shovel", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 6))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 6);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 6;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a shovel for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a shovel for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "golfclub", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 2))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 2);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 2;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a golf club for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a golf club for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "poolcue", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 7))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 7);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 7;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a pool cue for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a pool cue for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "katana", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 8))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 8);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 8;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a katana for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a katana for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "dildo", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 10))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 10);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 10;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a dildo for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a dildo for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "flowers", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 14))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 14);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 14;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you flowers for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s flowers for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "cane", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 50)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 15))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 15);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 15;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a cane for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a cane for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "9mm", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 100)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 22))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 22);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
		    PlayerInfo[playerid][pLastSell] = gettime();
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 22;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a 9mm for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a 9mm for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sdpistol", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 150)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 23))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 23);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 23;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a silenced pistol for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a silenced pistol for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shotgun", true))
	{
	    if(PlayerInfo[playerid][pMaterials] < 200)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 25))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 25);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 25;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a shotgun for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a shotgun for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "mp5", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 1000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 29))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 29);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 29;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you an MP5 for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s an MP5 for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "deagle", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 2000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 24))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 24);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 24;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a Desert Eagle for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a Desert Eagle for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "uzi", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 28))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 28);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 28;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a Micro Uzi for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a Micro Uzi for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "tec9", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 32))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 32);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 32;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a Tec-9 for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a Tec-9 for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "ak47", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 4)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 3500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 30))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 30);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 30;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you an AK-47 for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s an AK-47 for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "m4", true))
	{
	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 4)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < 4500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 31))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 31);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 31;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you an M4 for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s an M4 for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "spas12", true))
	{
	    new cost;

	    if(PlayerInfo[playerid][pVIPPackage] == 3)
			cost = 5000;
		else
	        cost = 7500;

	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 5 && PlayerInfo[playerid][pVIPPackage] < 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < cost)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 27))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 27);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 27;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a SPAS-12 for $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a SPAS-12 for $%i.", GetPlayerRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sniper", true))
	{
	    new cost;

	    if(PlayerInfo[playerid][pVIPPackage] == 3)
			cost = 5000;
		else
	        cost = 7500;

	    if(GetJobLevel(playerid, JOB_WEAPONDEALER) < 5 && PlayerInfo[playerid][pVIPPackage] < 3)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your skill level is not high enough to craft this weapon.");
		}
	    if(PlayerInfo[playerid][pMaterials] < cost)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 34))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 34);
		}
		else if(price < 1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
		}
		else
		{
   			PlayerInfo[targetid][pSellOffer] = playerid;
   			PlayerInfo[targetid][pSellType] = ITEM_SELLGUN;
   			PlayerInfo[targetid][pSellExtra] = 34;
   			PlayerInfo[targetid][pSellPrice] = price;

   			SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered to sell you a sniper rifle or $%i. (/accept weapon)", GetPlayerRPName(playerid), price);
   			SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to sell %s a sniper rifle for $%i.", GetPlayerRPName(targetid), price);
		}
	}

	return 1;
}

CMD:buycomps(playerid, params[])
{
	new amount, price, cost = 1200 - (GetJobLevel(playerid, JOB_MECHANIC) * 200);

	if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2330.0369, -2315.4553, 13.5469))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the component shop.");
	}
	if(sscanf(params, "i", amount))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buycomps [amount]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "You are paying $%i per component at your current skill level.", cost);
		return 1;
	}
	if(!(1 <= amount <= 10))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount must range between 1 and 10.");
	}
	if(PlayerInfo[playerid][pComponents] + amount > 50)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't carry more than 50 components.");
	}

	price = amount * cost;

	if(PlayerInfo[playerid][pCash] < price)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford to purchase %i components for $%i.", amount, price);
	}
	else
	{
	    PlayerInfo[playerid][pComponents] += amount;

		GivePlayerCash(playerid, -price);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have purchased %i components for $%i.", amount, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", PlayerInfo[playerid][pComponents], PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:repair(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!PlayerHasJob(playerid, JOB_MECHANIC) && PlayerInfo[playerid][pVIPPackage] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must either be a mechanic, or a Ivy VIP to use this command.");
	}
	if(GetInsideGarage(playerid) >= 0)
	{
	    if(gettime() - PlayerInfo[playerid][pLastRepair] < 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastRepair]));
		}
		if(!vehicleid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be repaired.");
		}

		GetVehicleHealth(vehicleid, health);

		if(health >= 1000.0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be repaired.");
		}
		else
		{
			PlayerInfo[playerid][pLastRepair] = gettime();
			SetVehicleHealth(vehicleid, 1000.0);

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s repairs the vehicle.", GetPlayerRPName(playerid));
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		}
	}
    else if(PlayerHasJob(playerid, JOB_MECHANIC) && PlayerInfo[playerid][pVIPPackage] < 3)
	{
		if(PlayerInfo[playerid][pVIPPackage] < 3 && PlayerInfo[playerid][pComponents] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
		}
		if(gettime() - PlayerInfo[playerid][pLastRepair] < 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastRepair]));
		}
		if(!vehicleid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be repaired.");
		}

		GetVehicleHealth(vehicleid, health);

		if(health >= 1000.0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be repaired.");
		}
		else
		{
			PlayerInfo[playerid][pComponents]--;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", PlayerInfo[playerid][pComponents], PlayerInfo[playerid][pID]);
  			mysql_tquery(connectionID, queryBuffer);

			PlayerInfo[playerid][pLastRepair] = gettime();
			SetVehicleHealth(vehicleid, 1000.0);

			if(GetJobLevel(playerid, JOB_MECHANIC) == 5)
			{
			    RepairVehicle(vehicleid);
			    SendClientMessage(playerid, COLOR_WHITE, "You have repaired the health and bodywork on this vehicle..");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "You have repaired this vehicle to maximum health.");
			}

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s repairs the vehicle.", GetPlayerRPName(playerid));

			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			IncreaseJobSkill(playerid, JOB_MECHANIC);
		}
	}
 	else if(PlayerInfo[playerid][pVIPPackage] == 3)
	{
		if(PlayerInfo[playerid][pVIPPackage] < 3 && !PlayerInfo[playerid][pComponents])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
		}
		if(gettime() - PlayerInfo[playerid][pLastRepair] < 20)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastRepair]));
		}
		if(!vehicleid)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be repaired.");
		}

		GetVehicleHealth(vehicleid, health);

		if(health >= 1000.0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be repaired.");
		}
		else
		{
 			SendClientMessage(playerid, COLOR_VIP, "VIP Perk: You repaired this vehicle free of charge.");

			PlayerInfo[playerid][pLastRepair] = gettime();

			SetVehicleHealth(vehicleid, 1000.0);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s repairs the vehicle.", GetPlayerRPName(playerid));

			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			IncreaseJobSkill(playerid, JOB_MECHANIC);
		}
	}
	return 1;
}

CMD:refill(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(!PlayerInfo[playerid][pComponents])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRefuel] < 20)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only refuel a vehicle every 20 seconds. Please wait %i more seconds.", 20 - (gettime() - PlayerInfo[playerid][pLastRefuel]));
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which can be refueled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be refueled.");
	}

	if(vehicleFuel[vehicleid] + 10 >= 100)
	{
		vehicleFuel[vehicleid] = 100;
	}
	else
	{
	    vehicleFuel[vehicleid] += 10;
	}

	PlayerInfo[playerid][pComponents]--;
	PlayerInfo[playerid][pLastRefuel] = gettime();

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s pours some gasoline to the vehicle.", GetPlayerRPName(playerid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", PlayerInfo[playerid][pComponents], PlayerInfo[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_MECHANIC);
	return 1;
}

CMD:nos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!PlayerHasJob(playerid, JOB_MECHANIC) && PlayerInfo[playerid][pVIPPackage] != 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(PlayerInfo[playerid][pVIPPackage] == 0 && !PlayerInfo[playerid][pComponents])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}

	switch(GetVehicleModel(vehicleid))
    {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449:
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle can't be modified with nitrous.");
    }

	if(PlayerInfo[playerid][pVIPPackage] < 3)
	{
		PlayerInfo[playerid][pComponents]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", PlayerInfo[playerid][pComponents], PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
    	SendClientMessage(playerid, COLOR_VIP, "VIP Perk: You added nitrous to this vehicle free of charge.");
	}

	AddVehicleComponent(vehicleid, 1009);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attaches a 2x NOS Canister on the engine feed.", GetPlayerRPName(playerid));
	return 1;
}

CMD:hyd(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!PlayerHasJob(playerid, JOB_MECHANIC) && PlayerInfo[playerid][pVIPPackage] != 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic.");
	}
	if(PlayerInfo[playerid][pMechanicSkill] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 2 mechanic to use this command.");
	}
	if(PlayerInfo[playerid][pVIPPackage] == 0 && !PlayerInfo[playerid][pComponents])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no components left.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}

	if(PlayerInfo[playerid][pVIPPackage] < 3)
	{
		PlayerInfo[playerid][pComponents]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", PlayerInfo[playerid][pComponents], PlayerInfo[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
    	SendClientMessage(playerid, COLOR_VIP, "VIP Perk: You added hydraulics to this vehicle free of charge.");
	}

	AddVehicleComponent(vehicleid, 1087);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s attaches a set of hydraulics to the vehicle.", GetPlayerRPName(playerid));
	return 1;
}

CMD:tow(playerid, params[])
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be in a tow truck to use this command.");
	}
 	if(!PlayerHasJob(playerid, JOB_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(PlayerInfo[playerid][pMechanicSkill] < 3 && !IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 3 mechanic to use this command.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lowers their tow hook, attaching it to the vehicle.", GetPlayerRPName(playerid));
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s raises the tow hook, locking the vehicle in place..", GetPlayerRPName(playerid));
        }
    }
    if (!Found) {
        SendClientMessage(playerid, COLOR_GREY, "There is no vehicle in range that you can tow.");
    }
    return 1;
}

CMD:stoptow(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be in a tow truck to use this command.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not towing a vehicle.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lowers their tow hook, detaching it from the vehicle.", GetPlayerRPName(playerid));
    return 1;
}

CMD:fill(playerid, params[])
{
	return callcmd::refuel(playerid, params);
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerAtFuelStation(playerid) && GetInsideGarage(playerid) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be at a gas station or inside of a garage.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine and can't be refilled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The fuel tank in this vehicle is already full.");
	}
	if(PlayerInfo[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * 2)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough cash. It will cost you at least $%i.", (100 - vehicleFuel[vehicleid]) * 2);
	}

	if(PlayerInfo[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
	    GivePlayerCash(playerid, -PlayerInfo[playerid][pRefuelAmount]);
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, 1);
        SendClientMessageEx(playerid, COLOR_AQUA, "** You've refilled your vehicle's gas tank for $%i.", PlayerInfo[playerid][pRefuelAmount]);

        PlayerInfo[playerid][pRefuel] = INVALID_VEHICLE_ID;
        PlayerInfo[playerid][pRefuelAmount] = 0;
	}
	else
	{
		PlayerInfo[playerid][pRefuel] = vehicleid;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, 0);
		PlayerInfo[playerid][pRefuelAmount] = 0;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins to refuel their vehicle's gas tank.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "This will take about %i seconds. You will be notified once completed.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}

CMD:withdraw(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /withdraw [amount] ($%i available)", PlayerInfo[playerid][pBank]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	PlayerInfo[playerid][pBank] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have withdrawn {00AA00}%s{33CCFF} from your bank account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerInfo[playerid][pBank]));
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deposit [amount]");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	   return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	PlayerInfo[playerid][pBank] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have deposited {00AA00}%s{33CCFF} into your bank account. Your new balance is %s.", FormatNumber(amount), FormatNumber(PlayerInfo[playerid][pBank]));
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only use this command if you are level 2+.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /wiretransfer [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or hasn't logged in yet.");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pBank])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't transfer funds to yourself.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	   return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while on admin duty");
	}

	PlayerInfo[targetid][pBank] += amount;
	PlayerInfo[playerid][pBank] -= amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[playerid][pBank], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", PlayerInfo[targetid][pBank], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have transferred {00AA00}%s{33CCFF} to %s. Your new balance is %s.", FormatNumber(amount), GetPlayerRPName(targetid), FormatNumber(PlayerInfo[playerid][pBank]));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has transferred {00AA00}%s{33CCFF} to your bank account.", GetPlayerRPName(playerid), FormatNumber(amount));
	Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerRPName(targetid), PlayerInfo[targetid][pID], GetPlayerIP(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
	{
	    SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s (IP: %s) has transferred %s to %s (IP: %s).", GetPlayerRPName(playerid), GetPlayerIP(playerid), FormatNumber(amount), GetPlayerRPName(targetid), GetPlayerIP(targetid));
	}

	return 1;
}

CMD:balance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}

	SendClientMessageEx(playerid, COLOR_GREEN, "Your bank account balance is $%i.", PlayerInfo[playerid][pBank]);
	return 1;
}

CMD:rt(playerid, params[])
{
	return callcmd::rsms(playerid, params);
}


CMD:rsms(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rsms [text]");
	}
	if(PlayerInfo[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't received a text by anyone since you joined the server.");
	}
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pJailType] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player is currently imprisoned and cannot use their phone.");
    }
    if(PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTogglePhone])
    {
        return SendClientMessage(playerid, COLOR_GREY, "That player has their mobile phone switched off.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}

	PlayerInfo[PlayerInfo[playerid][pTextFrom]][pTextFrom] = playerid;
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a cellphone and sends a message.", GetPlayerRPName(playerid));

    SendClientMessageEx(PlayerInfo[playerid][pTextFrom], COLOR_YELLOW, "** SMS from %s: %s, Ph: %i **", GetPlayerRPName(playerid), params, PlayerInfo[playerid][pPhone]);
    SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS to %s: %s, Ph: %i **", GetPlayerRPName(PlayerInfo[playerid][pTextFrom]), params, PlayerInfo[PlayerInfo[playerid][pTextFrom]][pPhone]);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
    return 1;
}

CMD:t(playerid, params[])
{
	return callcmd::sms(playerid, params);
}

CMD:sms(playerid, params[])
{
	new number, msg[128];

	if(sscanf(params, "is[128]", number, msg))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sms [number] [message]");
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pPhone] == number)
	    {
	        if(PlayerInfo[i][pJailType] > 0)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(PlayerInfo[i][pTogglePhone])
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "That player has their mobile phone switched off.");
			}

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a cellphone and sends a message.", GetPlayerRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SendClientMessageEx(i, COLOR_YELLOW, "** SMS from %s: %.*s..., Ph: %i **", GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, msg, PlayerInfo[playerid][pPhone]);
			    SendClientMessageEx(i, COLOR_YELLOW, "** SMS from %s: ...%s, Ph: %i **", GetPlayerRPName(playerid), msg[MAX_SPLIT_LENGTH], PlayerInfo[playerid][pPhone]);

			    SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS to %s: %.*s..., Ph: %i **", GetPlayerRPName(i), MAX_SPLIT_LENGTH, msg, PlayerInfo[i][pPhone]);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS to %s: ...%s, Ph: %i **", GetPlayerRPName(i), msg[MAX_SPLIT_LENGTH], PlayerInfo[i][pPhone]);
			}
			else
			{
		        SendClientMessageEx(i, COLOR_YELLOW, "** SMS from %s: %s, Ph: %i **", GetPlayerRPName(playerid), msg, PlayerInfo[playerid][pPhone]);
		        SendClientMessageEx(playerid, COLOR_YELLOW, "** SMS to %s: %s, Ph: %i **", GetPlayerRPName(i), msg, PlayerInfo[i][pPhone]);
			}

			if(PlayerInfo[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SendClientMessage(i, COLOR_WHITE, "** You can use '/rsms [message]' to reply to this text message.");
			}

			PlayerInfo[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}

CMD:texts(playerid, params[])
{
    if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a cellphone and therefore can't use this command.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", PlayerInfo[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}

CMD:call(playerid, params[])
{
	new number = strval(params);

	if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /call [number]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Special numbers: 911, News, Mechanic, Uper");
	    return 1;
	}
	if(!PlayerInfo[playerid][pPhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a cellphone and therefore can't use this command.");
	}
	if(PlayerInfo[playerid][pTogglePhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have a call in session. /(h)angup to end that call.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}

	if(!strcmp(params, "911"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 911;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dials a number on their keypad and begins a call.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_YELLOW, "Dispatch: 911, what is your emergency? Enter 'police' or 'medic'.");
		return 1;
	}
	else if(!strcmp(params, "news"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6397;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dials a number on their keypad and begins a call.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_NAVYBLUE, "News Team: This is SANews here. Leave a message and we'll get back to you! *BEEP*");
		return 1;
	}
	else if(!strcmp(params, "mechanic"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 6324;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dials a number on their keypad and begins a call.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_LIGHTORANGE, "Dispatch: This is the mechanic hotline. Please explain your situation to us.");
		return 1;
	}
	else if(!strcmp(params, "uper"))
	{
	    PlayerInfo[playerid][pCallLine] = playerid;
		PlayerInfo[playerid][pCallStage] = 8294;

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dials a number on their keypad and begins a call.", GetPlayerRPName(playerid));
		SendClientMessage(playerid, COLOR_YELLOW, "Dispatch: This is the cab company. Please state your location and destination.");
		return 1;
	}
	else
	{
		if(number == 0 || number == PlayerInfo[playerid][pPhone])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
		}
		if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
		}

		foreach(new i : Player)
		{
		    if(PlayerInfo[i][pPhone] == number)
		    {
		        if(PlayerInfo[i][pJailType] > 0)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "That player is currently imprisoned and cannot use their phone.");
		        }
		        if(PlayerInfo[i][pCallLine] != INVALID_PLAYER_ID)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "This player is currently in a call. Wait until they hang up.");
		        }
		        if(PlayerInfo[i][pTogglePhone])
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "That player has their mobile phone switched off.");
				}
				if(PlayerInfo[i][pLiveBroadcast] != INVALID_PLAYER_ID)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "That player is currently in a live interview and can't talk on the phone.");
		        }

		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

				PlayerInfo[playerid][pCallLine] = i;
				PlayerInfo[playerid][pCallStage] = 0;

				PlayerInfo[i][pCallLine] = playerid;
				PlayerInfo[i][pCallStage] = 1;

				SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s dials a number on their keypad and begins a call.", GetPlayerRPName(playerid));
				SendProximityMessage(i, 20.0, COLOR_PURPLE, "** %s's mobile phone begins to ring.", GetPlayerRPName(i));

		        SendClientMessageEx(playerid, COLOR_YELLOW, "** You've placed a call to number: %i. Please wait for your call to be answered.", number);
		        SendClientMessageEx(i, COLOR_YELLOW, "** Incoming call from %s [%i]. Use /pickup to take this call.", GetPlayerRPName(playerid), PlayerInfo[playerid][pPhone]);
		        return 1;
			}
		}

		SendClientMessage(playerid, COLOR_GREY, "That number is either not in service or the owner is offline.");
	}

	return 1;
}

CMD:p(playerid, params[])
{
	return callcmd::pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallStage] != 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no incoming calls which you can answer right now.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are unable to use your cellphone at the moment.");
	}

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s presses a button and answers their mobile phone.", GetPlayerRPName(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	PlayerInfo[PlayerInfo[playerid][pCallLine]][pCallStage] = 2;
	PlayerInfo[playerid][pCallStage] = 2;

	SendClientMessage(playerid, COLOR_WHITE, "You have answered the call. You can now speak in chat to talk to the caller.");
	SendClientMessage(PlayerInfo[playerid][pCallLine], COLOR_WHITE, "They answered the call. You can now speak in chat to talk to them.");
	return 1;
}

CMD:h(playerid, params[])
{
	return callcmd::hangup(playerid, params);
}

CMD:hangup(playerid, params[])
{
	if(PlayerInfo[playerid][pCallLine] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no calls in session which you can hangup.");
	}

	HangupCall(playerid, HANGUP_USER);
	return 1;
}

CMD:tog(playerid, params[])
{
	return callcmd::toggle(playerid, params);
}

CMD:toggle(playerid, params[])
{
	if(isnull(params))
	{
 		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(tog)gle [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Textdraws, OOC, Global, Phone, Whisper, Bugged, Newbie, WalkieTalkie, Radio, Streams, News");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: SpawnCam, HUD, Admin, Helper, VIP, Reports, Faction, Gang");
	    return 1;
	}
	if(!strcmp(params, "textdraws", true))
	{
	    if(!PlayerInfo[playerid][pToggleTextdraws])
	    {
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][0]);
	        //PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][1]);
	        HideCWSpeedo(playerid);
	        //PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][2]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);

			TextDrawHideForPlayer(playerid, WebsiteTD);
	        TextDrawHideForPlayer(playerid, TimeTD);

	        PlayerInfo[playerid][pToggleTextdraws] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Textdraws toggled. You will no longer see any textdraws.");
	    }
	    else
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)))
	        {
	        	/*
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][1]);
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][2]);
	            */
	            ShowCWSpeedo(playerid);
	        }
	        if(PlayerInfo[playerid][pGPSOn])
	        {
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][0]);
	        }
	        if(PlayerInfo[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!PlayerInfo[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
	            PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	        }

	        TextDrawShowForPlayer(playerid, WebsiteTD);

	        PlayerInfo[playerid][pToggleTextdraws] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Textdraws enabled. You will now see textdraws again.");
	    }
	}
	else if(!strcmp(params, "ooc", true))
	{
	    if(!PlayerInfo[playerid][pToggleOOC])
	    {
	        PlayerInfo[playerid][pToggleOOC] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "OOC chat toggled. You will no longer see any messages in /o.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleOOC] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "OOC chat enabled. You will now see messages in /o again.");
	    }
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerInfo[playerid][pToggleGlobal])
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Global chat toggled. You will no longer see any messages in /g.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGlobal] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Global chat enabled. You can now speak to other players in /g.");
	    }
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!PlayerInfo[playerid][pTogglePhone])
	    {
	        if(PlayerInfo[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You can't do this while in a call.");
	        }

	        PlayerInfo[playerid][pTogglePhone] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Phone toggled. You will no longer receive calls or texts.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pTogglePhone] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Phone enabled. You can now receive calls and texts again.");
	    }
	}
	else if(!strcmp(params, "whisper", true))
	{
	    if(!PlayerInfo[playerid][pToggleWhisper])
	    {
	        PlayerInfo[playerid][pToggleWhisper] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Whispers toggled. You will no longer receive any whispers from players.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleWhisper] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Whispers enabled. You will now receive whispers from players again.");
	    }
	}
	else if(!strcmp(params, "bugged", true))
	{
	    if(GetFactionType(playerid) != FACTION_FEDERAL)
			return SendClientMessage(playerid, COLOR_GREY, "You must be a federal agent to use the bug channel.");

	    if(!PlayerInfo[playerid][pToggleBug])
	    {
	        PlayerInfo[playerid][pToggleBug] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Bug channel toggled. You will no longer receive any recordings from bugged players.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleBug] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Bug channel enabled. You will now receive recordings from bugged players again.");
		}
	}
    else if(!strcmp(params, "admin", true))
	{
	    if(!PlayerInfo[playerid][pAdmin] && !PlayerInfo[playerid][pDeveloper] && !PlayerInfo[playerid][pFormerAdmin])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleAdmin])
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Admin chat toggled. You will no longer see any messages in admin chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleAdmin] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Admin chat enabled. You will now see messages in admin chat again.");
	    }
	}
	else if(!strcmp(params, "reports", true))
	{
	    if(PlayerInfo[playerid][pAdmin] < 1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleReports])
	    {
	        PlayerInfo[playerid][pToggleReports] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Reports toggled. You will no longer see any incoming reports.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleReports] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Reports enabled. You will now see incoming reports again.");
	    }
	}
	else if(!strcmp(params, "helper", true))
	{
	    if(!PlayerInfo[playerid][pHelper])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not a helper and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleHelper])
	    {
	        PlayerInfo[playerid][pToggleHelper] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Helper chat toggled. You will no longer see any messages in helper chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHelper] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Helper chat enabled. You will now see messages in helper chat again.");
	    }
	}
	else if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerInfo[playerid][pToggleNewbie])
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Newbie chat toggled. You will no longer see any messages in newbie chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNewbie] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Newbie chat enabled. You will now see messages in newbie chat again.");
	    }
	}
    else if(!strcmp(params, "walkietalkie", true))
	{
	    if(!PlayerInfo[playerid][pWalkieTalkie])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You don't have a walkie talkie.");
		}

	    if(!PlayerInfo[playerid][pToggleWT])
	    {
	        PlayerInfo[playerid][pToggleWT] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Walkie talkie toggled. You will no longer receive any messages on your walkie talkie.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleWT] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Walkie talkie enabled. You will now receive messages on your walkie talkie again.");
	    }
	}
	else if(!strcmp(params, "radio", true))
	{
 		if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a faction and therefore can't toggle your radio.");
		}

	    if(!PlayerInfo[playerid][pToggleRadio])
	    {
	        PlayerInfo[playerid][pToggleRadio] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Radio chat toggled. You will no longer receive any messages on your radio.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleRadio] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Radio chat enabled. You will now receive messages on your radio again.");
	    }
	}
	else if(!strcmp(params, "streams", true))
	{
	    if(!PlayerInfo[playerid][pToggleMusic])
	    {
	        PlayerInfo[playerid][pToggleMusic] = 1;
	        StopAudioStreamForPlayer(playerid);
	        SendClientMessage(playerid, COLOR_AQUA, "Music streams toggled. You will no longer hear any music played locally & globally.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleMusic] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Music streams enabled. You will now hear music played locally & globally again.");
	    }
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!PlayerInfo[playerid][pVIPPackage])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not a VIP member and therefore cannot toggle this feature.");
		}

	    if(!PlayerInfo[playerid][pToggleVIP])
	    {
	        PlayerInfo[playerid][pToggleVIP] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "VIP chat toggled. You will no longer see any messages in VIP chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleVIP] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "VIP chat enabled. You will now see messages in VIP chat again.");
	    }
	}
	else if(!strcmp(params, "faction", true))
	{
	    if(PlayerInfo[playerid][pFaction] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a faction and therefore can't toggle this chat.");
		}

	    if(!PlayerInfo[playerid][pToggleFaction])
	    {
	        PlayerInfo[playerid][pToggleFaction] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Faction chat toggled. You will no longer see any messages in faction chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleFaction] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Faction chat enabled. You will now see messages in faction chat again.");
	    }
	}
	else if(!strcmp(params, "gang", true))
	{
	    if(PlayerInfo[playerid][pGang] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not a gang member and therefore can't toggle this chat.");
		}

	    if(!PlayerInfo[playerid][pToggleGang])
	    {
	        PlayerInfo[playerid][pToggleGang] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Gang chat toggled. You will no longer see any messages in gang chat.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleGang] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Gang chat enabled. You will now see messages in gang chat again.");
	    }
	}
	else if(!strcmp(params, "news", true))
	{
	    if(!PlayerInfo[playerid][pToggleNews])
	    {
	        PlayerInfo[playerid][pToggleNews] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "News chat toggled. You will no longer see any news broadcasts.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleNews] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "News chat enabled. You will now see news broadcasts again.");
	    }
	}
	else if(!strcmp(params, "lands", true))
	{
	    callcmd::lands(playerid, "\1");
	}
	else if(!strcmp(params, "turfs", true))
	{
	    callcmd::turfs(playerid, "\1");
	}
	else if(!strcmp(params, "spawncam", true))
	{
	    if(!PlayerInfo[playerid][pToggleCam])
	    {
	        PlayerInfo[playerid][pToggleCam] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "Spawn camera toggled. You will no longer see the camera effects upon spawning.");
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleCam] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "Spawn camera enabled. You will now see the camera effects when you spawn again.");
	    }
	}
	else if(!strcmp(params, "hud", true))
	{
	    if(!PlayerInfo[playerid][pToggleHUD])
	    {
	        PlayerInfo[playerid][pToggleHUD] = 1;
	        SendClientMessage(playerid, COLOR_AQUA, "HUD toggled. You will no longer see your health & armor indicators.");

	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][5]);
	    }
	    else
	    {
	        PlayerInfo[playerid][pToggleHUD] = 0;
	        SendClientMessage(playerid, COLOR_AQUA, "HUD enabled. You will now see your health & armor indicators again.");

	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][3]);
	        PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][4]);
	    }
	}
	else
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(tog)gle [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Textdraws, OOC, Global, Phone, Whisper, Bugged, Newbie, WalkieTalkie, Radio, Streams, News");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: SpawnCam, HUD, Admin, Helper, VIP, Reports, Faction, Gang");
	}

	return 1;
}
CMD:locate(playerid, params[])
{
	if(isnull(params))
	{
	    return ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	}
	else
	{
	    LocateMethod(playerid, params);
	}
	return 1;
}
CMD:findjob(playerid, params[])
{
	return ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "GPS - Select Destination", "Pizzaman\nCourier\nFisherman\nBodyguard\nWeapon Dealer\nMechanic\nMiner\nSweeper\nUper Driver\nDrug Dealer\nLawyer\nDetective\nThief\nGarbage Man\nFarmer\nTrucker", "Select", "Close");
}


CMD:ccp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:kcp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:killcp(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:killcheckpoint(playerid, params[])
{
	return callcmd::cancelcp(playerid, params);
}

CMD:cancelcp(playerid, params[])
{
	CancelActiveCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	return 1;
}

CMD:afk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /afk [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(PlayerInfo[targetid][pAdmin] >= 8 && PlayerInfo[playerid][pAdmin] < 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to check that player's AFK status.");
	}

	if(PlayerInfo[targetid][pAFK])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** %s has been marked as Away from keyboard for %i minutes.", GetPlayerRPName(targetid), PlayerInfo[targetid][pAFKTime] / 60);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** %s is currently not marked as Away from keyboard.", GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Away from Keyboard _______");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pAdmin] >= 8 && PlayerInfo[playerid][pAdmin] < 8)
	        continue;

	    if(PlayerInfo[i][pAFK])
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s - Time: %i seconds", i, GetPlayerRPName(i), PlayerInfo[i][pAFKTime]);
		}
	}

	return 1;
}

CMD:atm(playerid, params[])
{
    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
	    {
			ShowDialogToPlayer(playerid, DIALOG_ATM);
	        return 1;
		}
	}
	if(GetNearbyAtm(playerid) >= 0)
	{
	    ShowDialogToPlayer(playerid, DIALOG_ATM);
     	return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any ATM machines.");
	return 1;
}

CMD:fixplayerid(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", targetid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fixplayerid [playerid]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Sometimes player IDs can become bugged causing sscanf to not identify that ID until server restart.");
    	SendClientMessage(playerid, COLOR_SYNTAX, "(e.g. a command used upon a valid player ID saying the player is disconnected, invalid or offline.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), IsPlayerNPC(targetid));
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "** Player ID %i has been fixed.", targetid);
	return 1;
}


CMD:disablevpn(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /disablevpn [0/1]");
	}

	if(status) {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has disabled joining with VPN.", GetPlayerRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has enabled joining with VPN.", GetPlayerRPName(playerid));
	}

//	gDisabledVPN = status; //temporarily disabled
	return 1;
}

CMD:obscurent(playerid, params[])
{
	new status;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /obscurent [0/1]");
	}

	if(!status) {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has disabled nametags obfuscation.", GetPlayerRPName(playerid));
	} else {
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has enabled nametags obfuscation.", GetPlayerRPName(playerid));
	}

	antiNT = status;
	return 1;
}


CMD:animhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "______________________________________________________________________________");
	SendClientMessage(playerid, COLOR_GREY2, "/dance, /wave, /point, /salute, /laugh, /cry, /deal, /sit, /lay, /fall, /handsup.");
	SendClientMessage(playerid, COLOR_GREY2, "/tired, /cower, /crack, /injured, /fishing, /reload, /aim, /bomb, /checktime.");
	SendClientMessage(playerid, COLOR_GREY2, "/dodge, /stop, /scratch, /what, /wash, /come, /hitch, /cpr, /slapass, /drunk.");
	SendClientMessage(playerid, COLOR_GREY2, "/vomit, /fucku, /taichi, /shifty, /smoke, /chat, /lean, /wank, /crossarms.");
	SendClientMessage(playerid, COLOR_GREY2, "/ghands, /rap, /dj, /walk, /fuckme, /bj, /kiss, /piss, /robman, /eat, /stopanim.");
	SendClientMessage(playerid, COLOR_GREEN, "______________________________________________________________________________");
	return 1;
}

CMD:dance(playerid, params[])
{
	new count, animname[32], animlib[32];

	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1..4: SetPlayerSpecialAction(playerid, (SPECIAL_ACTION_DANCE1 + (strval(params) - 1)));
		case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0);
        case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0);
		case 12: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0);
		case 13: ApplyAnimationEx(playerid, "DANCING", "dnce_M_d", 4.1, 1, 0, 0, 0, 0);
		case 14: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dance [1-14]");
	}

	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
		{
		    GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));

			if((SPECIAL_ACTION_DANCE1 <= GetPlayerSpecialAction(i) <= SPECIAL_ACTION_DANCE4) || !strcmp(animlib, "DANCING", true))
			{
			    count++;
			}
	    }
	}

	if(count >= 5)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInRangeOfPlayer(i, playerid, 20.0))
			{
		    	GetAnimationName(GetPlayerAnimationIndex(i), animlib, sizeof(animlib), animname, sizeof(animname));

				if((SPECIAL_ACTION_DANCE1 <= GetPlayerSpecialAction(i) <= SPECIAL_ACTION_DANCE4) || !strcmp(animlib, "DANCING", true))
				{
				    AwardAchievement(i, "Flash mob");
	            }
	        }
		}
	}

	return 1;
}

CMD:wave(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /wave [1-3]");
	}

	return 1;
}

CMD:point(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "ON_LOOKERS", "panic_point", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /point [1-2]");
	}

	return 1;
}

CMD:salute(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:laugh(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:cry(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:deal(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:sit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0);
	    case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 0, 0, 0, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
     	case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0);
       	case 8: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0);
       	case 9: ApplyAnimationEx(playerid, "FOOD", "FF_Sit_Eat1", 4.1, 1, 0, 0, 0, 0);
       	case 10: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sit [1-10]");
	}

	return 1;
}

CMD:lay(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lay [1-3]");
	}

	return 1;
}

CMD:fall(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0);
	    case 2: ApplyAnimationEx(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0);
	    case 3: ApplyAnimationEx(playerid, "PED", "KO_shot_face", 4.1, 0, 1, 1, 1, 0);
	    case 4: ApplyAnimationEx(playerid, "PED", "KO_shot_front", 4.1, 0, 1, 1, 1, 0);
	    case 5: ApplyAnimationEx(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 0);
	    case 6: ApplyAnimationEx(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fall [1-6]");
	}

	return 1;
}

CMD:handsup(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SHOP", "SHP_HandsUp_Scr", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:tired(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /tired [1-2]");
	}

	return 1;
}

CMD:hide(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cover(playerid, params[])
{
	return callcmd::cower(playerid, params);
}

CMD:cower(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "cower", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:crack(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0);
        case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0);
        case 4: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crack [1-4]");
	}

	return 1;
}

CMD:injured(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SWAT", "gnstwall_injurd", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SWEET", "Sweet_injuredloop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /injured [1-2]");
	}

	return 1;
}

CMD:fishing(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:reload(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "RIFLE", "RIFLE_load", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /reload [1-4]");
	}

	return 1;
}

CMD:aim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SHOP", "ROB_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /aim [1-2]");
	}

	return 1;
}

CMD:bomb(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:checktime(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:dodge(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "DODGE", "Crush_Jump", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stop(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "endchat_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:scratch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MISC", "Scratchballs_01", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:what(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:wash(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:come(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "WUZI", "Wuzi_follow", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:hitch(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MISC", "Hiker_Pose", 4.1, 0, 0, 0, 1, 0);
	return 1;
}

CMD:cpr(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:slapass(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SWEET", "sweet_ass_slap", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:drunk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "WALK_DRUNK", 4.1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:vomit(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:fucku(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:taichi(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:shifty(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:smoke(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /smoke [1-2]");
	}

	return 1;
}

CMD:chat(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkA", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkC", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkF", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkG", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 4.1, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /chat [1-9]");
	}

	return 1;
}

CMD:lean(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "GANGS", "leanIDLE", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "MISC", "Plyrlean_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /lean [1-2]");
	}

	return 1;
}

CMD:wank(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0);
	return 1;
}

CMD:traffic(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /traffic [1-2]");
	}

	return 1;
}

CMD:rap(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "RAPPING", "RAP_A_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "RAPPING", "RAP_B_LOOP", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "RAPPING", "RAP_C_LOOP", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /rap [1-3]");
	}

	return 1;
}

CMD:dj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0);
        case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0);
        case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dj [1-4]");
	}

	return 1;
}

CMD:crossarms(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0);
	    case 2: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 1, 0, 0, 0, 0);
        case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0);
	    default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crossarms [1-3]");
	}

	return 1;
}

CMD:ghands(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimationEx(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0);
        case 6: ApplyAnimationEx(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0);
		case 7: ApplyAnimationEx(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0);
		case 8: ApplyAnimationEx(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0);
		case 9: ApplyAnimationEx(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ghands [1-10]");
	}

	return 1;
}

CMD:walk(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
		case 1: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1);
        case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimationEx(playerid, "PED", "WALK_shuffle", 4.1, 1, 1, 1, 1, 1);
		case 10: ApplyAnimationEx(playerid, "PED", "WALK_Wuzi", 4.1, 1, 1, 1, 1, 1);
		case 11: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1);
		case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1);
		case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1);
		case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1);
		case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walkpro", 4.1, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /walk [1-15]");
	}

	return 1;
}

CMD:fuckme(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEW", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "SNM", "SPANKING_IDLEP", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "SNM", "SPANKINGW", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "SNM", "SPANKINGP", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "SNM", "SPANKEDW", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "SNM", "SPANKEDP", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDW", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "SNM", "SPANKING_ENDP", 4.1, 0, 1, 1, 1, 0);
        default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fuckme [1-8]");
	}

	return 1;
}

CMD:bj(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 1, 1, 1, 0);
		case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 0, 1, 1, 1, 0);
		case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 0, 1, 1, 1, 0);
		case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 0, 1, 1, 1, 0);
		case 5: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.1, 0, 1, 1, 1, 0);
		case 6: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.1, 0, 1, 1, 1, 0);
		case 7: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.1, 0, 1, 1, 1, 0);
		case 8: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.1, 0, 1, 1, 1, 0);
		case 9: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0);
		case 10: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0);
		case 11: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.1, 0, 1, 1, 1, 0);
		case 12: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 0, 1, 1, 1, 0);
        default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /bj [1-12]");
	}

	return 1;
}

CMD:kiss(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

    ApplyAnimationEx(playerid, "KISSING", "Playa_Kiss_01", 4.0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:piss(playerid, params[])
{
    if(!PlayerUseAnims(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:robman(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

    ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:eat(playerid, params[])
{
	if(!PlayerUseAnims(playerid))
    {
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use animations at this moment.");
	}

	switch(strval(params))
	{
	    case 1: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0);
	    case 2: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /eat [1-3]");
	}

	return 1;
}

CMD:stopani(playerid, params[])
{
	return callcmd::stopanim(playerid, params);
}

CMD:stopanim(playerid, params[])
{
    if(!PlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're currently unable to use this command at this moment.");
	}

    PlayerInfo[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);
	TextDrawHideForPlayer(playerid, AnimationTD);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    SendClientMessage(playerid, COLOR_GREY, "Animations cleared.");
    return 1;
}

CMD:gmx(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6 && !PlayerInfo[playerid][pDeveloper])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params) && strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gmx [confirm]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command save all player accounts and restarts the server.");
	    return 1;
	}
	if(gGMX)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have already called for a server restart. You can't cancel it.");
	}

	gGMX = 1;

	foreach(new i : Player)
	{
	    if(i != playerid)
	    {
	        if(PlayerInfo[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
			PlayerInfo[i][pHurt] = 0;
	    	TogglePlayerControllable(i, 0);
	    	SendClientMessageEx(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", GetPlayerRPName(playerid));
		}

		SavePlayerVariables(i);
		GameTextForPlayer(i, "~w~Restarting server...", 100000, 3);
	}

	SendClientMessage(playerid, COLOR_WHITE, "** The server will restart once all accounts have been saved.");
	return 1;
}

CMD:changepass(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "{FF1AFF}EndLess Roleplay{FFFFFF} | Change password", "Please change your password for security purposes\nEnter your new password below:", "Submit", "Cancel");
	return 1;
}

CMD:usenarcons(playerid, params[])
{
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pHurt] - 40 > 0)
	{
        return SendClientMessageEx(playerid, COLOR_GREY, "You are too hurt to use this command. Please wait %i seconds before trying again.", (PlayerInfo[playerid][pHurt] - 40));
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	new string[1536] = "Perk\tDescription\tCost", title[64];

    strcat(string, "\nReplenish\tReplenishes you with full health & armor.\t{F7A763}2 narcons{FFFFFF}");
	strcat(string, "\nJail Time\tReduce your IC jailtime by 50 percent.\t{F7A763}5 narcons{FFFFFF}");
	strcat(string, "\nRespect\tGives you 4 respect points.\t{F7A763}6 narcons{FFFFFF}");
	strcat(string, "\nNumber\tChoose a phone number of your choice.\t{F7A763}10 narcons{FFFFFF}");
	strcat(string, "\nJob\tChoose a job to 1x level up.\t{F7A763}10 narcons{FFFFFF}");
	strcat(string, "\nDouble XP\tAwards you with 8 hours of double XP.\t{F7A763}20 narcons{FFFFFF}");

	format(title, sizeof(title), "Narcon rewards (You have %i narcons.)", PlayerInfo[playerid][pCookies]);
	ShowPlayerDialog(playerid, DIALOG_USECOOKIES, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Cancel");

	return 1;
}


CMD:clothing(playerid, params[])
{
	new string[MAX_PLAYER_CLOTHING * 64], title[64], count;

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s {FFD700}(Attached)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) {00AA00}%s{FFFFFF}", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }

	        count++;
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Empty Slot{FFFFFF}", string, i + 1);
		}
	}

	format(title, sizeof(title), "My clothing items (%i/%i slots)", count, MAX_PLAYER_CLOTHING);
	ShowPlayerDialog(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, title, string, "Select", "Cancel");
	return 1;
}

CMD:taketest(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.2953, -117.4508, 1035.1719))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the desk in the Licensing department.");
	}
	if(PlayerInfo[playerid][pCarLicense])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have your drivers license already.");
	}
	if(PlayerInfo[playerid][pDrivingTest])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already taking your drivers test.");
	}
	if(PlayerInfo[playerid][pCash] < 400)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need $400 to pay the licensing fee if you pass the test.");
	}

	SendClientMessage(playerid, COLOR_WHITE, "** You've taken on the drivers test. Go outside and enter one of the vehicles to begin.");
	SendClientMessage(playerid, COLOR_WHITE, "** Once you have passed the test, you will receive your license and pay a $500 licensing fee.");

	PlayerInfo[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pDrivingTest] = 1;
	PlayerInfo[playerid][pTestCP] = 0;
	return 1;
}

CMD:buyvehicle(playerid, params[])
{
    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    {
        return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
    }

	PlayerInfo[playerid][pGangCar] = 0;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	{
		ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLE);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYBOAT);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYAIRCRAFT);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any dealership.");
	}

	return 1;
}

CMD:spawncar(playerid, params[])
{
	//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
	//mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_VEHICLES, playerid);
	SendClientMessage(playerid, COLOR_WHITE, "This command was removed. /carstorage if you wish to spawn your car now.");
	return 1;
}

CMD:carstorage(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
	return 1;
}

CMD:vst(playerid, params[])
{
	return callcmd::carstorage(playerid, params);
}

CMD:vstorage(playerid, params[])
{
	return callcmd::carstorage(playerid, params);
}

CMD:park(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't park this vehicle as it doesn't belong to you.");
	}

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s parks their %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
 	SendClientMessageEx(playerid, COLOR_AQUA, "You have parked your {00AA00}%s{33CCFF} which will spawn in this spot from now on.", GetVehicleName(vehicleid));

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, true);

	return 1;
}

CMD:givekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't give keys to yourself.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player already has keys to your vehicle.");
	}

	PlayerInfo[targetid][pVehicleKeys] = vehicleid;

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives %s the keys to their %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GetVehicleName(vehicleid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you the keys to their {00AA00}%s{33CCFF}.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have given %s the keys to your {00AA00}%s{33CCFF}.", GetPlayerRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:takekeys(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /takekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't take keys from yourself.");
	}
	if(PlayerInfo[targetid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player doesn't have the keys to your vehicle.");
	}

	PlayerInfo[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes back the keys to their %s from %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GetVehicleName(vehicleid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken back the keys to their {00AA00}%s{33CCFF}.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have taken back the keys to your {00AA00}%s{33CCFF} from %s.", GetPlayerRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:despawncar(playerid, params[])
{
 	/*new string[MAX_SPAWNED_VEHICLES * 64], count;

 	string = "#\tModel\tLocation";

 	foreach(new i: Vehicle)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_DESPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to despawn.", string, "Select", "Cancel");
	}*/

	SendClientMessage(playerid, COLOR_WHITE, "This command was removed. /carstorage if you wish to despawn your car now.");
	return 1;
}

CMD:findcar(playerid, params[])
{
    new string[MAX_SPAWNED_VEHICLES * 64], count;

 	string = "#\tModel\tLocation";

 	foreach(new i: Vehicle)
 	{
 	    if(VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to track.", string, "Select", "Cancel");
	}

	return 1;
}

CMD:upgradevehicle(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), option[8], param[32];

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Grotti car dealership.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [trunk | neon | alarm | plate]");
	}

	if(!strcmp(option, "trunk", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [trunk] [confirm]");
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "Your vehicle's trunk level is at %i/3. Upgrading your trunk will cost you $10,000.", VehicleInfo[vehicleid][vTrunk]);
	        return 1;
		}
		if(VehicleInfo[vehicleid][vTrunk] >= 3)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle's trunk is already at its maximum level.");
		}
		if(PlayerInfo[playerid][pCash] < 10000)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to upgrade your trunk.");
		}

		VehicleInfo[vehicleid][vTrunk]++;

		GivePlayerCash(playerid, -10000);
		GameTextForPlayer(playerid, "~r~-$10000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You have paid $10,000 for trunk level %i/3. '/vsafe balance' to see your new capacities.", VehicleInfo[vehicleid][vTrunk]);
		Log_Write("log_property", "%s (uid: %i) upgraded the trunk of their %s (id: %i) to level %i/3.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [neon] [color] (costs $30,000)");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of colors: Red, Blue, Green, Yellow, Pink, White");
			return 1;
	    }
	    if(PlayerInfo[playerid][pCash] < 30000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least $30,000 to upgrade your neon.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't support neon.");
		}

		if(!strcmp(param, "red", true))
		{
		    SetVehicleNeon(vehicleid, 18647);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for red neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased red neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "blue", true))
		{
		    SetVehicleNeon(vehicleid, 18648);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for blue neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased blue neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "green", true))
		{
		    SetVehicleNeon(vehicleid, 18649);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for green neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased green neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "yellow", true))
		{
		    SetVehicleNeon(vehicleid, 18650);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for yellow neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased yellow neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "pink", true))
		{
		    SetVehicleNeon(vehicleid, 18651);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for pink neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased pink neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "white", true))
		{
		    SetVehicleNeon(vehicleid, 18652);
		    GivePlayerCash(playerid, -30000);
			GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

			SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 for white neon. You can use /neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased white neon for their %s (id: %i)", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
	}
	else if(!strcmp(option, "alarm", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "** Level 1: Alarm sound effects and notification to owner. {FFD700}($15,000)");
            SendClientMessage(playerid, COLOR_WHITE, "** Level 2: Alarm sound effects and notification to owner and online LEO. {FFD700}($30,000)");
            SendClientMessage(playerid, COLOR_WHITE, "** Level 3: Alarm alarm effects and notification to owner and blip for online LEO. {FFD700}($60,000)");
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [alarm] [level]");
	        return 1;
		}
		if(!(1 <= level <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level.");
		}

		switch(level)
		{
		    case 1:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 1)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's alarm is already at this level.");
		        }
		        if(PlayerInfo[playerid][pCash] < 15000)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this alarm level.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -15000);
		        GameTextForPlayer(playerid, "~r~-$15000", 5000, 1);

		        SendClientMessage(playerid, COLOR_GREEN, "You have paid $15,000 to install a level 1 alarm on your vehicle.");
		        Log_Write("log_property", "%s (uid: %i) purchased a level 1 alarm for their %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
            case 2:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 2)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's alarm is already at this level.");
		        }
		        if(PlayerInfo[playerid][pCash] < 30000)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this alarm level.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 2;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 2 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -30000);
		        GameTextForPlayer(playerid, "~r~-$30000", 5000, 1);

				SendClientMessage(playerid, COLOR_GREEN, "You have paid $30,000 to install a level 2 alarm on your vehicle.");
				Log_Write("log_property", "%s (uid: %i) purchased a level 1 alarm for their %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
			case 3:
		    {
		        if(VehicleInfo[vehicleid][vAlarm] == 3)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Your vehicle's alarm is already at this level.");
		        }
		        if(PlayerInfo[playerid][pCash] < 60000)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this alarm level.");
		        }

		        VehicleInfo[vehicleid][vAlarm] = 3;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET alarm = 3 WHERE id = %i", VehicleInfo[vehicleid][vID]);
		        mysql_tquery(connectionID, queryBuffer);

		        GivePlayerCash(playerid, -60000);
		        GameTextForPlayer(playerid, "~r~-$60000", 5000, 1);

				SendClientMessage(playerid, COLOR_GREEN, "You have paid $60,000 to install a level 3 alarm on your vehicle.");
				Log_Write("log_property", "%s (uid: %i) purchased a level 3 alarm for their %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
			}
		}
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /upgradevehicle [plate] [text] (costs $20,000)");
	    }
	    if(!VehicleHasEngine(vehicleid))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no license plate. Therefore you can't buy this upgrade.");
	    }

	    strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		SetVehicleNumberPlate(vehicleid, param);
	    ResyncVehicle(vehicleid);

	    GivePlayerCash(playerid, -20000);
		GameTextForPlayer(playerid, "~r~-$20000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", param, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_GREEN, "You have paid $20,000 for license plate '%s'. Changes will take effect once vehicle is parked.", param);
		Log_Write("log_property", "%s (uid: %i) paid $20000 to set the license plate of their %s (id: %i) to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], param);
	}

	return 1;
}

CMD:neon(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no neon installed.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s presses a button to activate their neon tubes.", GetPlayerRPName(playerid));
	    //SendClientMessage(playerid, COLOR_AQUA, "** Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s presses a button to deactivate their neon tubes.", GetPlayerRPName(playerid));
	    //SendClientMessage(playerid, COLOR_AQUA, "** Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:vsafe(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[14], param[32];

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 5; i ++)
	        {
	            if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	                count++;
	            }
	        }

	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Stash Balance ______");
	        SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			SendClientMessageEx(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", VehicleInfo[vehicleid][vWeed], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCocaine], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	        SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));

			if(count > 0)
			{
				SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Stash Weapons ______");

            	for(new i = 0; i < 5; i ++)
	            {
    	            if(VehicleInfo[vehicleid][vWeapons][i])
	    	        {
	        	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

            if(IsPlayerInAnyVehicle(playerid))
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
			}
	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Materials, Weed, Cocaine, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [cash] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %s at its level.", FormatNumber(GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH)));
    			}

			    GivePlayerCash(playerid, -value);
			    VehicleInfo[vehicleid][vCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %s in your vehicle stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [materials] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i materials at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
			    }

			    PlayerInfo[playerid][pMaterials] -= value;
			    VehicleInfo[vehicleid][vMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %i materials in your vehicle stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [weed] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vWeed] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i grams of weed at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
			    }

			    PlayerInfo[playerid][pWeed] -= value;
			    VehicleInfo[vehicleid][vWeed] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = %i WHERE id = %i", VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %ig of weed in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [cocaine] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCocaine] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i grams of cocaine at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
			    }

			    PlayerInfo[playerid][pCocaine] -= value;
			    VehicleInfo[vehicleid][vCocaine] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = %i WHERE id = %i", VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %ig of cocaine in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [meth] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i grams of meth at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
			    }

			    PlayerInfo[playerid][pMeth] -= value;
			    VehicleInfo[vehicleid][vMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %ig of meth in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > PlayerInfo[playerid][pPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "Your vehicle's stash can only hold up to %i painkillers at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
			    }

			    PlayerInfo[playerid][pPainkillers] -= value;
			    VehicleInfo[vehicleid][vPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored %i painkillers in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{

   				if(GetFactionType(playerid) != FACTION_NONE)
   					return SendClientMessage(playerid, COLOR_GREY, "Faction members cannot use this command.");

   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(IsLawEnforcement(playerid))
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Law enforcement is prohibited from storing weapons.");
				}
				if(GetPlayerHealthEx(playerid) < 60)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "You can't store weapons as your health is below 60.");
				}

				for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!VehicleInfo[vehicleid][vWeapons][i])
   				    {
						VehicleInfo[vehicleid][vWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], VehicleInfo[vehicleid][vID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SendClientMessageEx(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "This vehicle has no more slots available for weapons.");
			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

            if(IsPlayerInAnyVehicle(playerid))
	    	{
	        	return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
			}
	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [option]");
	            SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Cash, Weed, Cocaine, Meth, Painkillers, Weapon");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCash])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    VehicleInfo[vehicleid][vCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %s from your vehicle stash.", FormatNumber(value));
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMaterials] + value > GetPlayerCapacity(playerid, CAPACITY_MATERIALS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMaterials], GetPlayerCapacity(playerid, CAPACITY_MATERIALS));
				}

			    PlayerInfo[playerid][pMaterials] += value;
			    VehicleInfo[vehicleid][vMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", PlayerInfo[playerid][pMaterials], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %i materials from your vehicle stash.", value);
   			}
			else if(!strcmp(option, "weed", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [weed] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vWeed])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pWeed] + value > GetPlayerCapacity(playerid, CAPACITY_WEED))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
				}

			    PlayerInfo[playerid][pWeed] += value;
			    VehicleInfo[vehicleid][vWeed] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = %i WHERE id = %i", VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %ig of weed from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "cocaine", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [cocaine] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCocaine])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pCocaine] + value > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
				}

			    PlayerInfo[playerid][pCocaine] += value;
			    VehicleInfo[vehicleid][vCocaine] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = %i WHERE id = %i", VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %ig of cocaine from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pMeth] + value > GetPlayerCapacity(playerid, CAPACITY_METH))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pMeth], GetPlayerCapacity(playerid, CAPACITY_METH));
				}

			    PlayerInfo[playerid][pMeth] += value;
			    VehicleInfo[vehicleid][vMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %ig of meth from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
			    }
			    if(PlayerInfo[playerid][pPainkillers] + value > GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS))
			    {
			        return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pPainkillers], GetPlayerCapacity(playerid, CAPACITY_PAINKILLERS));
				}

			    PlayerInfo[playerid][pPainkillers] += value;
			    VehicleInfo[vehicleid][vPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken %i painkillers from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /vsafe [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(!(1 <= value <= slots))
				{
				    return SendClientMessage(playerid, COLOR_GREY, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   			    {
   			        return SendClientMessage(playerid, COLOR_GREY, "The slot specified contains no weapon which you can take.");
				}
                if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
				{
					return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
				}

				GivePlayerWeaponEx(playerid, VehicleInfo[vehicleid][vWeapons][value-1]);
				SendClientMessageEx(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);

				VehicleInfo[vehicleid][vWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", value, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle of yours.");
	}

	return 1;
}

CMD:unmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "** Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "** All vehicle modifications have been removed.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no neon which you can remove.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "** Neon has been removed from vehicle.");
	}

	return 1;
}

CMD:gunmod(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle of yours.");
	}
	if(VehicleInfo[vehicleid][vGang] >= 0 && VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to your gang.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gunmod [color | paintjob | mods]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, 3);
	    SendClientMessage(playerid, COLOR_WHITE, "** Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessage(playerid, COLOR_WHITE, "** All vehicle modifications have been removed.");
	}

	return 1;
}

CMD:colorcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), color1, color2;

	if(sscanf(params, "ii", color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /colorcar [color1] [color2]");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sitting inside any vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && !PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't belong to you, therefore you can't respray it.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pMechanicSkill] < 5)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 5 mechanic to paint cars you dont own.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The color specified must range between 0 and 255.");
	}

	if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
		if(PlayerInfo[playerid][pSpraycans] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
		}
		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerInfo[playerid][pSpraycans]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses their spraycan to spray their vehicle a different color.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "** Vehicle resprayed. You have %i spraycans left.", PlayerInfo[playerid][pSpraycans]);
		ChangeVehicleColor(vehicleid, color1, color2);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    if(PlayerInfo[playerid][pMechanicSkill] < 5)
	    {
    		if(PlayerInfo[playerid][pSpraycans] <= 0)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
			}
			if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
			{
			    VehicleInfo[vehicleid][vColor1] = color1;
			    VehicleInfo[vehicleid][vColor2] = color2;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
			PlayerInfo[playerid][pSpraycans]--;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses their spraycan to spray their vehicle a different color.", GetPlayerRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "** Vehicle resprayed. You have %i spraycans left.", PlayerInfo[playerid][pSpraycans]);
			ChangeVehicleColor(vehicleid, color1, color2);
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			return 1;
		}
		if(PlayerInfo[playerid][pComponents] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough components for this.");
		}
 		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerInfo[playerid][pComponents]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", PlayerInfo[playerid][pComponents], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s sprays the vehicle to a different color.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "** Vehicle resprayed. You have %i components left.", PlayerInfo[playerid][pComponents]);
		ChangeVehicleColor(vehicleid, color1, color2);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	    return 1;
	}

	return 1;
}

CMD:paintcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), paintjobid;

	if(sscanf(params, "i", paintjobid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /paintcar [paintjobid (-1 = none)]");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sitting inside any vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && !PlayerHasJob(playerid, JOB_MECHANIC))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't belong to you, therefore you can't respray it.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pMechanicSkill] < 5)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You must be a skill level 5 mechanic to paint cars you dont own.");
	}
	if(!(-1 <= paintjobid <= 5))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The paintjob specified must range between -1 and 5.");
	}
	if(paintjobid == -1) paintjobid = 3;

	if(!PlayerHasJob(playerid, JOB_MECHANIC))
	{
		if(PlayerInfo[playerid][pSpraycans] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
		}
		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerInfo[playerid][pSpraycans]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses their spraycan to spray their vehicle a different color.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "** Vehicle resprayed. You have %i spraycans left.", PlayerInfo[playerid][pSpraycans]);
		ChangeVehiclePaintjob(vehicleid, paintjobid);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		return 1;
	}
	if(PlayerHasJob(playerid, JOB_MECHANIC))
	{
		if(PlayerInfo[playerid][pMechanicSkill] < 5)
		{
			if(PlayerInfo[playerid][pSpraycans] <= 0)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough spraycans for this.");
			}
			if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
			{
			    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
			PlayerInfo[playerid][pSpraycans]--;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", PlayerInfo[playerid][pSpraycans], PlayerInfo[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses their spraycan to spray their vehicle a different color.", GetPlayerRPName(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "** Vehicle resprayed. You have %i spraycans left.", PlayerInfo[playerid][pSpraycans]);
			ChangeVehiclePaintjob(vehicleid, paintjobid);
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			return 1;
		}

		if(PlayerInfo[playerid][pComponents] <= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough components for this.");
		}

		if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
		{
		    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		PlayerInfo[playerid][pComponents]--;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET components = %i WHERE uid = %i", PlayerInfo[playerid][pComponents], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s sprays the vehicle to a different color.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_WHITE, "** Vehicle resprayed. You have %i components left.", PlayerInfo[playerid][pComponents]);
		ChangeVehiclePaintjob(vehicleid, paintjobid);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	    return 1;
	}
	return 1;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellcar [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}
	if(PlayerInfo[playerid][pCP] == CHECKPOINT_DROPCAR)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't sell your vehicle unless you cancel your car delivery. (/killcp)");
	}

	PlayerInfo[targetid][pCarOffer] = playerid;
	PlayerInfo[targetid][pCarOffered] = vehicleid;
	PlayerInfo[targetid][pCarPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered you their %s for %s (/accept vehicle).", GetPlayerRPName(playerid), GetVehicleName(vehicleid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered %s to buy your %s for %s.", GetPlayerRPName(targetid), GetVehicleName(vehicleid), FormatNumber(amount));
	return 1;
}

CMD:sellmycar(playerid, params[])
{
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Grotti car dealership.");
	}

	new price = percent(GetVehicleValue(vehicleid), 75);

	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmycar [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command permanently deletes your vehicle. You will receive %s back.", FormatNumber(price));
	    return 1;
	}

	GivePlayerCash(playerid, price);

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your %s to the dealership and received %s back.", GetVehicleName(vehicleid), FormatNumber(price));
    Log_Write("log_property", "%s (uid: %i) sold their %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);

	return 1;
}

CMD:harvest(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != JOB_FARMER && PlayerInfo[playerid][pSecondJob] != JOB_FARMER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not a Farmer!");
	}
 	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsAFarmerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		GameTextForPlayer(playerid, "Proceed to the~n~Checkpoint", 5000, 3);
		SendClientMessage(playerid, COLOR_AQUA, "Follow the checkpoints to harvest the crops.");
		SetPlayerCheckpoint(playerid, -309.0990,-1381.1797,10.7049, 10);
		PlayerInfo[playerid][pCP] = CHECKPOINT_FARMER;
		Harvesting[playerid] = 1;
 	}
  	else return SendClientMessage(playerid, COLOR_GREY, "FARMER: You must be driving a farming vehicle!");
	return 1;
}

CMD:mine(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_MINER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Miner.");
	}
	if(PlayerInfo[playerid][pMiningTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are mining already. Wait until you are done.");
	}
	if(PlayerInfo[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to drop off your current rock first.");
	}
	if(!IsPlayerInMiningArea(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the mining area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}

    GameTextForPlayer(playerid, "~w~Mining...", 6000, 3);
    ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);
	SetPlayerAttachedObject(playerid, 9, 337, 6);

	PlayerInfo[playerid][pMiningTime] = 6;
	return 1;
}

CMD:startsweeping(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_SWEEPER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Street Sweeper.");
	}
	if(PlayerInfo[playerid][pSweeping])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are sweeping already. /stopsweeping to stop.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 574)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sitting inside a Sweeper.");
	}

	PlayerInfo[playerid][pSweeping] = 1;
	PlayerInfo[playerid][pSweepTime] = 30;
	PlayerInfo[playerid][pSweepEarnings] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "** You are now sweeping. Drive around with your sweeper to earn money towards your paycheck.");
	SendClientMessage(playerid, COLOR_WHITE, "** When you are finished your sweeping shift, use /stopsweeping in order to end your shift.");
	return 1;
}

CMD:stopsweeping(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_SWEEPER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Street Sweeper.");
	}
	if(!PlayerInfo[playerid][pSweeping])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sweeping right now.");
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "** You are no longer sweeping. You earned a total of {00AA00}$%i{33CCFF} towards your paycheck during your shift.", PlayerInfo[playerid][pSweepEarnings]);
    PlayerInfo[playerid][pSweeping] = 0;
	PlayerInfo[playerid][pSweepTime] = 0;
	PlayerInfo[playerid][pSweepEarnings] = 0;
	return 1;
}

CMD:v(playerid, params[])
{
	return callcmd::vip(playerid, params);
}

CMD:vip(playerid, params[])
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(v)ip [vip chat]");
	}
    if(PlayerInfo[playerid][pToggleVIP])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the VIP chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pVIPPackage] > 0 && !PlayerInfo[i][pToggleVIP])
	    {
			SendClientMessageEx(i, COLOR_VIP, "** %s VIP %s: %s **", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:viptag(playerid, params[])
{
    if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}
	if(PlayerInfo[playerid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't enable your VIP tag until you stop assisting. (/return)");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't enable your VIP tag until you are off admin duty.");
	}

	if(PlayerInfo[playerid][pTagType] != TAG_VIP)
	{
        if(PlayerInfo[playerid][pAdminDuty])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't enable your VIP tag while on admin duty.");
		}
		if(PlayerInfo[playerid][pAcceptedHelp])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't enable your VIP tag while assisting someone.");
	    }

        SetPlayerSpecialTag(playerid, TAG_VIP);
	    SendClientMessage(playerid, COLOR_AQUA, "** You have enabled the VIP tag above your head.");
	}
	else
	{
		SetPlayerSpecialTag(playerid, TAG_NONE);
	    SendClientMessage(playerid, COLOR_AQUA, "** You have removed the VIP tag from above your head.");
	}

	return 1;
}

CMD:vipcolor(playerid, params[])
{
    if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}

	if(!PlayerInfo[playerid][pVIPColor])
	{
        PlayerInfo[playerid][pVIPColor] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "** You have enabled the VIP nametag color.");
	}
	else
	{
	    PlayerInfo[playerid][pVIPColor] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "** You have disabled the VIP nametag color.");
	}

	return 1;
}

CMD:vipinvite(playerid, params[])
{
	new targetid;

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}
	if((PlayerInfo[playerid][pVIPTime] - gettime()) < 259200)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your VIP subscription expires in less than 3 days. You can't do this now.");
	}

	if(sscanf(params, "u", targetid))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vipinvite [playerid]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command grants a temporary VIP subscription which lasts one hour to a player of your choice.");

	    if(PlayerInfo[playerid][pVIPCooldown] > gettime()) {
			SendClientMessageEx(playerid, COLOR_SYNTAX, "You can only use this command once every 24 hours. You have %i hours left until you can use it again.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
		} else {
		    SendClientMessage(playerid, COLOR_SYNTAX, "You can only use this command once every 24 hours. You currently have no cooldown for this command.");
		}

		return 1;
	}
	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You have already used this command today. Please wait another %i hours.", (PlayerInfo[playerid][pVIPCooldown] - gettime()) / 3600);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(PlayerInfo[targetid][pVIPPackage])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player already has a VIP subscription.");
	}

	PlayerInfo[targetid][pVIPPackage] = PlayerInfo[playerid][pVIPPackage];
	PlayerInfo[targetid][pVIPTime] = gettime() + 10800;
	PlayerInfo[playerid][pVIPCooldown] = gettime() + 86400;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i WHERE uid = %i", PlayerInfo[targetid][pVIPPackage], PlayerInfo[targetid][pVIPTime], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipcooldown = %i WHERE uid = %i", PlayerInfo[playerid][pVIPCooldown], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has given you a temporary three hour {D909D9}%s{33CCFF} VIP package.", GetPlayerRPName(playerid), GetVIPRank(PlayerInfo[targetid][pVIPPackage]));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have given %s a temporary three hour {D909D9}%s{33CCFF} VIP package.", GetPlayerRPName(targetid), GetVIPRank(PlayerInfo[targetid][pVIPPackage]));

	Log_Write("log_vip", "%s VIP %s (uid: %i) has given %s (uid: %i) a temporary three hour package.", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	return 1;
}

CMD:vipinfo(playerid, params[])
{
	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "______ VIP Package ______");
	SendClientMessageEx(playerid, COLOR_GREY2, "Your {D909D9}%s{C8C8C8} VIP subscription expires on %s.", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetDateFromTimestamp(PlayerInfo[playerid][pVIPTime], 4));

	if(PlayerInfo[playerid][pVIPCooldown] > gettime())
	{
	    new time = PlayerInfo[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        SendClientMessageEx(playerid, COLOR_GREY2, "You will be able to use the /vipinvite command again in %i hours.", time / 3600);
		} else {
			SendClientMessageEx(playerid, COLOR_GREY2, "You will be able to use the /vipinvite command again in %i minutes.", time / 60);
	    }
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Your cooldown period for /vipinvite is over and you may use it again.");
	}

	return 1;
}

CMD:vipnumber(playerid, params[])
{
	new number;

	if(!PlayerInfo[playerid][pVIPPackage])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}
	if(sscanf(params, "i", number))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vipnumber [phone number]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "This command costs $10,000 and changes your phone number to your chosen one.");
	    return 1;
	}
	if(PlayerInfo[playerid][pCash] < 10000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need at least $10,000 for pay for this.");
	}
	if(number == 0 || number == 911)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid number.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyPhoneNumber", "ii", playerid, number);
	return 1;
}

CMD:setfare(playerid, params[])
{
	new amount;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Uper Driver.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setfare [amount]");
	}
	if(!(0 <= amount <= 500))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The fare must range between $0 and $500.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in a taxi type vehicle.");
	}

	if(amount == 0)
	{
	    if(PlayerInfo[playerid][pTaxiFare] == 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The fare is already set to zero.");
	    }

	    PlayerInfo[playerid][pTaxiFare] = 0;
	    SendClientMessage(playerid, COLOR_YELLOW, "** You have set the fare to $0 and went off duty.");
	}
	else
	{
	    if(PlayerInfo[playerid][pTaxiFare] == amount)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The fare is already set to this amount.");
	    }

	    PlayerInfo[playerid][pTaxiFare] = amount;
	    SendClientMessageToAllEx(COLOR_YELLOW, "** Uper Driver %s is now on duty, fare: $%i. /call taxi for a ride.", GetPlayerRPName(playerid), amount);
	}

	return 1;
}

CMD:createfaction(playerid, params[])
{
	new type[12], name[48], type_id = -1;

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createfaction [type] [name]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of types: Police, Medic, News, Government, Hitman, Federal, Army");
		return 1;
	}

	if(!strcmp(type, "police", true)) {
	    type_id = FACTION_POLICE;
	} else if(!strcmp(type, "medic", true)) {
	    type_id = FACTION_MEDIC;
	} else if(!strcmp(type, "news", true)) {
	    type_id = FACTION_NEWS;
	} else if(!strcmp(type, "government", true)) {
	    type_id = FACTION_GOVERNMENT;
	} else if(!strcmp(type, "hitman", true)) {
	    type_id = FACTION_HITMAN;
	} else if(!strcmp(type, "federal", true)) {
	    type_id = FACTION_FEDERAL;
	} else if(!strcmp(type, "army", true)) {
		type_id = FACTION_ARMY;
	}

	if(type_id == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has created a {F7A763}%s{FF6347} faction named '%s'.", GetPlayerRPName(playerid), factionTypes[type_id], name);
	        SendClientMessageEx(playerid, COLOR_WHITE, "** This faction's ID is %i. /editfaction to edit.", i);
	        return 1;
		}
	}

    SendClientMessage(playerid, COLOR_GREY, "Faction slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editfaction(playerid, params[])
{
	new factionid, option[12], param[48];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, TurfTokens, Budget");
		return 1;
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [name] [text]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET name = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the name of faction ID %i to '%s'.", GetPlayerRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [shortname] [text]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET shortname = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLockers(factionid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the short name of faction ID %i to '%s'.", GetPlayerRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [type] [option]");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of types: Police, Medic, News, Government, Hitman, Federal, Army");
			return 1;
		}

		if(!strcmp(param, "police", true)) {
		    type_id = FACTION_POLICE;
		} else if(!strcmp(param, "medic", true)) {
		    type_id = FACTION_MEDIC;
		} else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "hitman", true)) {
		    type_id = FACTION_HITMAN;
		} else if(!strcmp(param, "federal", true)) {
		    type_id = FACTION_FEDERAL;
		} else if(!strcmp(param, "army", true)) {
			type_id = FACTION_ARMY;
		}

		if(type_id == -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the type of faction ID %i to %s.", GetPlayerRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of faction ID %i.", GetPlayerRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [rankcount] [amount]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "The amount of ranks must range from 1 to %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the rank count of faction ID %i to %i.", GetPlayerRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Rank Names ______");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [rankname] [slot (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of faction ID %i to '%s'.", GetPlayerRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Faction Skins ______");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin.");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

        if(FactionInfo[factionid][fType] == FACTION_HITMAN)
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't set the paychecks for hitman factions.");
		}
	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Rank Paychecks ______");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s ($%i)", i, FactionRanks[factionid][i], FactionInfo[factionid][fPaycheck][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [paycheck] [slot (0-%i)] [amount]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}
		if(!(0 <= amount <= 100000))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from $0 to $100000.");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's paycheck of faction ID %i to $%i.", GetPlayerRPName(playerid), rankid, factionid, amount);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [leader] [name]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /factions. Use /switchfaction to appoint someone as faction leader.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of faction ID %i to %s.", GetPlayerRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This option has been removed in favor of the dynamic locker system.");
	    SendClientMessage(playerid, COLOR_WHITE, "Use /dynamichelp for a list of commands related to dynamic lockers.");
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [turftokens] [amount]");
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE || FactionInfo[factionid][fType] != FACTION_FEDERAL || FactionInfo[factionid][fType] != FACTION_ARMY)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can only set the turf tokens for police factions.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of faction ID %i to %i.", GetPlayerRPName(playerid), factionid, amount);
	}
	else if(!strcmp(option, "budget", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [budget] [amount (max 100k)]");
		}
		if(amount > 100000)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Faction budget cannot be over $100,000!");
		}
		FactionInfo[factionid][fBudget] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET budget = %i WHERE id = %i", FactionInfo[factionid][fBudget], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set %s's faction budget to %i.", GetPlayerRPName(playerid), FactionInfo[factionid][fName], amount);
	}

	return 1;
}

CMD:purgefaction(playerid, params[])
{
	new factionid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /purgefaction [factionid]");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == factionid)
	    {
	        SetPlayerFaction(i, -1);
	        SendClientMessageEx(i, COLOR_LIGHTRED, "The faction you were apart of has been purged by an administrator.");
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "No-one", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = 'No-one' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has purged faction %s.", GetPlayerRPName(playerid), FactionInfo[factionid][fName]);
	Log_Write("log_faction", "%s (uid: %i) has purged faction %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);

	return 1;
}

CMD:removefaction(playerid, params[])
{
	new factionid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removefaction [factionid]");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has deleted faction %s.", GetPlayerRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	Log_Write("log_faction", "%s (uid: %i) has deleted faction %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], FactionInfo[factionid][fName], factionid);
	return 1;
}

CMD:switchfaction(playerid, params[])
{
	new targetid, factionid, rankid, leader;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)I(0)", targetid, factionid, rankid, leader))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /switchfaction [playerid] [factionid (-1 = none)] [rank (optional)] [leader (0/1)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(-1 <= factionid < MAX_FACTIONS) || (factionid >= 0 && FactionInfo[factionid][fType] == FACTION_NONE))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
	}

	if(factionid == -1)
	{
        SetPlayerFaction(targetid, -1);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from your faction.", GetPlayerRPName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their faction.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

	    SetPlayerFaction(targetid, factionid, rankid, leader);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {00AA00}%s{33CCFF} in %s.", GetPlayerRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	return 1;
}

CMD:factions(playerid, params[])
{
    SendClientMessage(playerid, COLOR_NAVYBLUE, "_________________ Factions _________________");

	for(new i = 0; i < MAX_FACTIONS; i ++)
	{
	    if(FactionInfo[i][fType] != FACTION_NONE)
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE faction = %i", i);
	        mysql_tquery(connectionID, queryBuffer, "OnPlayerListFactions", "ii", playerid, i);
	    }
	}

	return 1;
}

CMD:setfreq(playerid, params[])
{
	new channel;

	if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a walkie talkie.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setfreq [freq]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The channel must range from 0 to 9999999.");
	}

	PlayerInfo[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", channel, PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** You have set the channel to 0 and disabled your walkie talkie.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** Channel set to %i, use /wt to broadcast over this channel.", channel);
	}

	return 1;
}

CMD:wt(playerid, params[])
{
    if(!PlayerInfo[playerid][pWalkieTalkie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a walkie talkie.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /wt [walkie talkie]");
	}
	if(!PlayerInfo[playerid][pChannel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your walkie talkie is not tuned into any channel. /channel to set one.");
	}
    if(PlayerInfo[playerid][pToggleWT])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your walkie talkie as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use /wt while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
		if(PlayerInfo[i][pWalkieTalkie] && PlayerInfo[i][pChannel] == PlayerInfo[playerid][pChannel] && !PlayerInfo[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SendClientMessageEx(i, COLOR_WALKIETALKIE, "** [CH: %i] %s: %.*s... **", PlayerInfo[playerid][pChannel], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
				SendClientMessageEx(i, COLOR_WALKIETALKIE, "** [CH: %i] %s: ...%s **", PlayerInfo[playerid][pChannel], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_WALKIETALKIE, "** [CH: %i] %s: %s **", PlayerInfo[playerid][pChannel], GetPlayerRPName(playerid), params);
			}
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[WT]: %s", params);
    if(PlayerInfo[playerid][pBugged])
	{
		foreach(new i : Player)
		{
		    if(GetFactionType(i) == FACTION_FEDERAL)
		    {
		    	SendClientMessageEx(i, 0x9ACD3200, "(bug) %s says [WT]: %s", GetPlayerRPName(playerid), params);
			}
		}
	}
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s speaks into their walkie talkie.", GetPlayerRPName(playerid));
	return 1;
}

CMD:g(playerid, params[])
{
 	new string[64];

 	if(isnull(params))
 	{
     	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /g [global chat]");
	}
	if(!enabledGlobal && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The global channel is disabled at the moment.");
	}
	if(PlayerInfo[playerid][pGlobalMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from speaking in this channel. /unmute to unmute yourself.");
	}
	if(PlayerInfo[playerid][pToggleGlobal])
 	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the global chat as you have it toggled.");
	}
	if(gettime() - PlayerInfo[playerid][pLastGlobal] < 3)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only speak in this channel every 3 seconds. Please wait %i more seconds.", 3 - (gettime() - PlayerInfo[playerid][pLastGlobal]));
	}
    if((!isnull(PlayerInfo[playerid][pCustomTitle]) && strcmp(PlayerInfo[playerid][pCustomTitle], "None", true) != 0) && PlayerInfo[playerid][pAdminHide] == 0) {
	    new color;
		if(PlayerInfo[playerid][pCustomTColor] == -1 || PlayerInfo[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = PlayerInfo[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{FFA500}", color >>> 8, PlayerInfo[playerid][pCustomTitle]);
	}
	else if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0) {
	  format(string, sizeof(string), "{FF6347}%s{FFA500}", GetAdminRank(playerid));
	}
	else if(PlayerInfo[playerid][pHelper] > 0) {
	   format(string, sizeof(string), "{33CCFF}%s{FFA500}", GetHelperRank(playerid));
	}
	else if(PlayerInfo[playerid][pFormerAdmin]) {
	    string = "{FF69B5}Former Admin{FFA500}";
	}
	else if(PlayerInfo[playerid][pVIPPackage] > 0) {
	    format(string, sizeof(string), "{D909D9}%s VIP{FFA500}", GetVIPRank(PlayerInfo[playerid][pVIPPackage]));
	}
	else if(PlayerInfo[playerid][pLevel] >= 3) {
	    format(string, sizeof(string), "Level %i Player", PlayerInfo[playerid][pLevel]);
	}
	else {
	       string = "Newbie";
	}

	foreach(new i : Player)
	{
	  	if(!PlayerInfo[i][pToggleGlobal])
	  	{
	      	if(strlen(params) > MAX_SPLIT_LENGTH)
	    	{
	        	SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: %.*s...))", string, GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	        	SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: ...%s ))", string, GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
	   		}
	   		else
	   		{
	       		SendClientMessageEx(i, COLOR_GLOBAL, "(( %s %s: %s ))", string, GetPlayerRPName(playerid), params);
	   		}
	  	}
 	}

	if(PlayerInfo[playerid][pAdmin] < 2)
 	{
 		PlayerInfo[playerid][pLastGlobal] = gettime();
 	}
 	return 1;
}

CMD:fc(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /fc [faction chat]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
    if(PlayerInfo[playerid][pToggleFaction])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the faction chat as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /fc if you're dead!");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cant speak in /fc while tied.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pToggleFaction])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: %.*s... ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: ...%s ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
   			{
			    SendClientMessageEx(i, COLOR_FACTIONCHAT, "(( %s %s: %s ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:crew(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [crew chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pCrew] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any crew in your gang.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && PlayerInfo[i][pCrew] == PlayerInfo[playerid][pCrew])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:div(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /div [division chat]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pDivision] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any divisions in your faction.");
	}

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == PlayerInfo[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:r(playerid, params[])
{
	return callcmd::radio(playerid, params);
}

CMD:radio(playerid, params[])
{
    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(r)adio [faction radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
 	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /r if you're dead!");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /r while tied.");
	}
	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && !PlayerInfo[i][pToggleRadio]) || (PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn] && IsEmergencyFaction(playerid)))
	    {
	        new color = (FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);

			if(strlen(params) > MAX_SPLIT_LENGTH)
			{
			    if(PlayerInfo[playerid][pDivision] == -1)
			    {
				    SendClientMessageEx(i, color, "** %s %s: %.*s... **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SendClientMessageEx(i, color, "** %s %s: ...%s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
				else
				{
				    SendClientMessageEx(i, color, "** [%s] %s %s: %.*s... **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
				    SendClientMessageEx(i, color, "** [%s] %s %s: ...%s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pDivision] == -1)
			    {
				    SendClientMessageEx(i, color, "** %s %s: %s **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
				}
				else
				{
				    SendClientMessageEx(i, color, "** [%s] %s %s: %s **", FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
				}
			}

			if((PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn]) && random(100) <= 3)
            {
                SendProximityMessage(i, 20.0, COLOR_PURPLE, "** %s's police scanner would shoot a spark and short out.", GetPlayerRPName(i));
                SendClientMessage(i, COLOR_GREY2, "Your police scanner shorted out and is now broken.");

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET policescanner = 0, scanneron = 0 WHERE uid = %i", PlayerInfo[i][pID]);
                mysql_tquery(connectionID, queryBuffer);

            	PlayerInfo[i][pPoliceScanner] = 0;
            	PlayerInfo[i][pScannerOn] = 0;
	        }
		}
	}

	SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);

	return 1;
}

CMD:d(playerid, params[])
{
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /d [department radio]");
	}
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(PlayerInfo[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /d if you're dead!");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}

    if(!strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], "None", true))
	{
	    if(PlayerInfo[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
	}
	else
	{
		if(PlayerInfo[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[PlayerInfo[playerid][pFaction]][fShortName], FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pDivision]], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
		}
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_ARMY:
	    {
			foreach(new i : Player)
			{
			    if((PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn]) || ((!PlayerInfo[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_ARMY)))
			    {
       				if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			            SendClientMessageEx(i, COLOR_YELLOW, "** %s: %.*s... **", header, MAX_SPLIT_LENGTH, params);
				        SendClientMessageEx(i, COLOR_YELLOW, "** %s: ...%s **", header, params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SendClientMessageEx(i, COLOR_YELLOW, "** %s: %s **", header, params);
					}

					if((PlayerInfo[i][pPoliceScanner] && PlayerInfo[i][pScannerOn]) && random(100) <= 3)
		            {
		                SendProximityMessage(i, 20.0, COLOR_PURPLE, "** %s's police scanner would shoot a spark and short out.", GetPlayerRPName(i));
		                SendClientMessage(i, COLOR_GREY2, "Your police scanner shorted out and is now broken.");

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET policescanner = 0, scanneron = 0 WHERE uid = %i", PlayerInfo[i][pID]);
		                mysql_tquery(connectionID, queryBuffer);

		            	PlayerInfo[i][pPoliceScanner] = 0;
		            	PlayerInfo[i][pScannerOn] = 0;
					}
				}
			}
		}
		default:
		{
		    SendClientMessage(playerid, COLOR_GREY, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);
	return 1;
}

CMD:faction(playerid, params[])
{
	new targetid, option[14], param[128];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(sscanf(params, "s[14]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: MOTD, Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Leadership, Respawncars, Budget");
	    return 1;
	}
	if(!strcmp(option, "motd", true))
	{
        if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessageEx(playerid, COLOR_YELLOW, "** Faction MOTD: %s", FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD]);
		}
		if(isnull(param))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [motd] [text ('none' to reset)]");
		    SendClientMessageEx(playerid, COLOR_SYNTAX, "Current MOTD: %s", FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD]);
		    return 1;
		}

		strcpy(FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD], param, 128);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have changed the MOTD for your faction.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET motd = '%e' WHERE id = %i", param, PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "invite", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to invite members to your faction.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of a faction.");
		}
		if(PlayerInfo[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_HITMAN)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is apart of a gang and therefore can't join a faction.");
		}
		if(PlayerInfo[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_FEDERAL)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is apart of a gang and therefore can't join a faction.");
		}
		if(PlayerInfo[targetid][pGang] >= 0 && GetFactionType(playerid) != FACTION_NEWS)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is apart of a gang and therefore can't join a faction.");
		}
		PlayerInfo[targetid][pFactionOffer] = playerid;
		PlayerInfo[targetid][pFactionOffered] = PlayerInfo[playerid][pFaction];

		SendClientMessageEx(targetid, COLOR_AQUA, "** %s has invited you to join {00AA00}%s{33CCFF} (/accept faction).", GetPlayerRPName(playerid), FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have invited %s to join your faction.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to kick members from your faction.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
		/*if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}*/

		Log_Write("log_faction", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);

		SetPlayerFaction(targetid, -1);
		SendClientMessageEx(targetid, COLOR_AQUA, "%s has kicked you from the faction.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have kicked %s from your faction.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /faction [rank] [playerid] [rankid (0-%i)]", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid >= FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
		/*if(PlayerInfo[targetid][pFactionRank] > PlayerInfo[playerid][pFactionRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}*/

		PlayerInfo[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your rank to {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's rank to {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(targetid), FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
		Log_Write("log_faction", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "leadership", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [leadership] [playerid]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "This command grants or revokes a fellow faction member's leadership flags.");
		    return 1;
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}

	    if(!PlayerInfo[targetid][pFactionLeader])
	    {
	        PlayerInfo[targetid][pFactionLeader] = 1;

	        SendClientMessageEx(targetid, COLOR_AQUA, "%s has {00AA00}granted{33CCFF} you the leadership flags to the faction.", GetPlayerRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_AQUA, "You have {00AA00}granted{33CCFF} %s the leadership flags to your faction.", GetPlayerRPName(targetid));
	        Log_Write("log_faction", "%s (uid: %i) granted leadership flags to %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		}
		else
		{
	        PlayerInfo[targetid][pFactionLeader] = 0;

	        SendClientMessageEx(targetid, COLOR_AQUA, "%s has {FF6347}revoked{33CCFF} your leadership flags to the faction.", GetPlayerRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_AQUA, "You have {FF6347}revoked{33CCFF} %s's leadership flags to your faction.", GetPlayerRPName(targetid));
	        Log_Write("log_faction", "%s (uid: %i) revoked leadership flags from %s (uid: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionleader = %i WHERE uid = %i", PlayerInfo[targetid][pFactionLeader], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM users WHERE faction = %i ORDER BY factionrank DESC", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [quit] [confirm]");
	    }

	    SendClientMessageEx(playerid, COLOR_AQUA, "You have quit %s as a {00AA00}%s{33CCFF} (%i).", FactionInfo[PlayerInfo[playerid][pFaction]][fName], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);
		Log_Write("log_faction", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], FactionInfo[PlayerInfo[playerid][pFaction]][fName], PlayerInfo[playerid][pFaction], FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank]);
		SetPlayerFaction(playerid, -1);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

  		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /faction [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use '/faction kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
		}

		foreach(new i: Vehicle)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[PlayerInfo[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has respawned all unoccupied faction vehicles. ))", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
        SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their faction vehicles.", GetPlayerRPName(playerid), playerid);
	}

	return 1;
}

CMD:division(playerid, params[])
{
	new targetid, divisionid, option[10], param[32];

	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Hitman factions do not have access to the division system.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[PlayerInfo[playerid][pFaction]][i], param, 32);
		        SendClientMessageEx(playerid, COLOR_AQUA, "You have created division {FFA763}%s{33CCFF}. The ID of this division is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, '%e')", PlayerInfo[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SendClientMessageEx(playerid, COLOR_GREY, "Your faction can only have up to %i divisions.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid division ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction] && PlayerInfo[i][pDivision] == divisionid)
	        {
	            PlayerInfo[i][pDivision] = -1;
	            SendClientMessage(i, COLOR_LIGHTRED, "The division you were apart of has been deleted by the faction owner.");
		    }
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "You have deleted division {F7A763}%s{33CCFF} (%i).", FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", PlayerInfo[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE faction = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Divisions List _____");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][i]))
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, FactionDivisions[PlayerInfo[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid division ID.");
	    }
	    if(PlayerInfo[targetid][pDivision] == divisionid)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of that division.");
	    }
	    if(PlayerInfo[targetid][pDivision] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of another division.");
	    }

	    PlayerInfo[targetid][pDivision] = divisionid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{33CCFF} division.", GetPlayerRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{33CCFF} division.", GetPlayerRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = %i WHERE uid = %i", divisionid, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(!PlayerInfo[playerid][pFactionLeader])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /division [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pFaction] != PlayerInfo[playerid][pFaction])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your faction.");
		}
	    if(PlayerInfo[targetid][pDivision] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of any division.");
	    }

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{33CCFF} division.", GetPlayerRPName(playerid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{33CCFF} division.", GetPlayerRPName(targetid), FactionDivisions[PlayerInfo[playerid][pFaction]][PlayerInfo[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerInfo[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:managecrew(playerid, params[])
{
	new targetid, crewid, option[10], param[32];

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /managecrew [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(isnull(param))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [create] [name]");
		}

		for(new i = 0; i < MAX_GANG_CREWS; i ++)
		{
		    if(isnull(GangCrews[PlayerInfo[playerid][pGang]][i]))
		    {
		        strcpy(GangCrews[PlayerInfo[playerid][pGang]][i], param, 32);
		        SendClientMessageEx(playerid, COLOR_AQUA, "You have created crew {FFA763}%s{33CCFF}. The ID of this crew is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO crews VALUES(%i, %i, '%e')", PlayerInfo[playerid][pGang], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SendClientMessageEx(playerid, COLOR_GREY, "Your gang can only have up to %i crews.", MAX_GANG_CREWS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "i", crewid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [remove] [crewid]");
		}
		if(!(0 <= crewid < MAX_GANG_CREWS) || isnull(GangCrews[PlayerInfo[playerid][pGang]][crewid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid crew ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && PlayerInfo[i][pCrew] == crewid)
	        {
	            PlayerInfo[i][pCrew] = -1;
	            SendClientMessage(i, COLOR_LIGHTRED, "The crew you were apart of has been deleted by the gang owner.");
		    }
		}

		SendClientMessageEx(playerid, COLOR_AQUA, "You have deleted crew {F7A763}%s{33CCFF} (%i).", GangCrews[PlayerInfo[playerid][pGang]][crewid], crewid);
		GangCrews[PlayerInfo[playerid][pGang]][crewid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM crews WHERE id = %i AND crewid = %i", PlayerInfo[playerid][pGang], crewid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crew = -1 WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Crews List _____");

	    for(new i = 0; i < MAX_GANG_CREWS; i ++)
	    {
	        if(isnull(GangCrews[PlayerInfo[playerid][pGang]][i]))
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SendClientMessageEx(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, GangCrews[PlayerInfo[playerid][pGang]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "ui", targetid, crewid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [assign] [playerid] [crewid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
		if(!(0 <= crewid < MAX_GANG_CREWS) || isnull(GangCrews[PlayerInfo[playerid][pGang]][crewid]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid crew ID.");
	    }
	    if(PlayerInfo[targetid][pCrew] == crewid)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of that crew.");
	    }
	    if(PlayerInfo[targetid][pCrew] >= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of another crew.");
	    }

	    PlayerInfo[targetid][pCrew] = crewid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{33CCFF} crew.", GetPlayerRPName(playerid), GangCrews[PlayerInfo[playerid][pGang]][crewid]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{33CCFF} crew.", GetPlayerRPName(targetid), GangCrews[PlayerInfo[playerid][pGang]][crewid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crew = %i WHERE uid = %i", crewid, PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /crew [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
			return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
	    if(PlayerInfo[targetid][pCrew] == -1)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of any crew.");
	    }

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{33CCFF} crew.", GetPlayerRPName(playerid), GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[targetid][pCrew]]);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{33CCFF} crew.", GetPlayerRPName(targetid), GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[targetid][pCrew]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crew = -1 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        PlayerInfo[targetid][pCrew] = -1;
	}

	return 1;
}


CMD:cells(playerid, params[])
{
	new status;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

    for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
		if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
		    status = true;
		}
		else
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
		    status = false;
		}
	}

	if(status)
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has opened all cells in the prison.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
	else
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has closed all cells in the prison.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));

	return 1;
}

CMD:cell(playerid, params[])
{
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, cellPositions[i][0], cellPositions[i][1], cellPositions[i][2]))
		{
	        if(!IsLawEnforcement(playerid))
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to open this cell.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses their key to open the cell door.", GetPlayerRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s uses their key to close the cell door.", GetPlayerRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any prison cells.");
	return 1;
}

CMD:door(playerid, params[])
{
	if(!DoorCheck(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any door which you can open.");
	}

	return 1;
}

CMD:gate(playerid, params[])
{
	if(!GateCheck(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not in range of any gates which you can open.");
	}

	return 1;
}

CMD:locker(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, PlayerInfo[playerid][pFaction]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any of your faction lockers.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to use the lockers. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_FEDERAL, FACTION_ARMY:
	    {
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms\nClothing", "Select", "Cancel");
		}
		case FACTION_MEDIC:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_HITMAN:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
		}
	}

	return 1;
}

CMD:showbadge(playerid, params[])
{
	new targetid, factionid, rankid;

    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    if(sscanf(params, "uii", targetid, factionid, rankid))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /showbadge [playerid] [factionid] [rankid]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "Use /factions for a list of factions to use with factionid parameter.");
	        return 1;
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}
		if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "Invalid rank. Valid ranks for this faction range from 0 to %i.", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You can't use this faction for your fake badge.");
	    }

	    SendClientMessageEx(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetPlayerRPName(playerid), FactionRanks[factionid][rankid], rankid, FactionInfo[factionid][fName]);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s shows their badge to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
		if(sscanf(params, "u", targetid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /showbadge [playerid]");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
		}

	    SendClientMessageEx(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetPlayerRPName(playerid), FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], PlayerInfo[playerid][pFactionRank], FactionInfo[PlayerInfo[playerid][pFaction]][fName]);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s shows their badge to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:m(playerid, params[])
{
	return callcmd::megaphone(playerid, params);
}

CMD:megaphone(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[PlayerInfo[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your faction is not authorized to use the megaphone.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[%s %s:o< %s]", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
	return 1;
}

CMD:tazer(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you are weapon restricted.");
	}
    if(PlayerInfo[playerid][pHurt] && PlayerInfo[playerid][pTazer] == 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to pull out your tazer. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}
	if(!PlayerInfo[playerid][pTazer])
	{
	    PlayerInfo[playerid][pTazer] = 1;
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s reaches for their tazer.", GetPlayerRPName(playerid));

		GivePlayerWeaponEx(playerid, 23, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    PlayerInfo[playerid][pTazer] = 0;
		SetPlayerWeapons(playerid);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s puts their tazer back in their duty belt.", GetPlayerRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pWeapons][2]);
		}
	}

	return 1;
}


CMD:mir(playerid, params[])
{
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}
CMD:cuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /cuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't cuff yourself.");
	}
	if(PlayerInfo[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already handcuffed.");
	}
	if(PlayerInfo[targetid][pTazedTime] == 0 && GetPlayerSpecialAction(targetid) != SPECIAL_ACTION_DUCK && GetPlayerAnimationIndex(targetid) != 1437)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player must either be tazed, crouched, or hands up.");
	}
	if(PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't handcuff an injured player.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to cuff anyone. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}

	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(PlayerInfo[targetid][pCallLine], HANGUP_DROPPED);
	}

	PlayerInfo[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(targetid, 0);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s tightens a pair of handcuffs around %s's wrists.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	GameTextForPlayer(targetid, "~r~Cuffed", 3000, 3);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_TERRORIST && PlayerInfo[playerid][pAdminDuty] == 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /uncuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && PlayerInfo[playerid][pAdminDuty] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't uncuff yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not handcuffed.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to uncuff anyone. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}

	PlayerInfo[targetid][pCuffed] = 0;
 	PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s loosens the pair of handcuffs from around %s's wrists.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	GameTextForPlayer(targetid, "~g~Uncuffed", 3000, 3);
	return 1;
}

CMD:drag(playerid, params[])
{
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drag [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drag yourself.");
	}
	if(!PlayerInfo[targetid][pInjured] && !PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not injured, handcuffed or tied.");
	}
	if(PlayerInfo[targetid][pInjured] && GetFactionType(playerid) != FACTION_MEDIC)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drag an injured player unless you're a medic.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to drag anyone. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}

	if(PlayerInfo[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		PlayerInfo[targetid][pDraggedBy] = playerid;
		//TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs onto %s and begins to drag them.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    //TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s stops dragging %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:detain(playerid, params[])
{
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && PlayerInfo[targetid][pCuffed])
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /detain [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't detain yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed] && !PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not handcuffed or tied.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			PlayerInfo[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			PlayerInfo[targetid][pVehicleCount] = 0;

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws %s into their vehicle.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "There are no unoccupied back seats left. Find another vehicle.");
	return 1;
}

CMD:charge(playerid, params[])
{
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /charge [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't charge yourself.");
	}
	if(PlayerInfo[targetid][pWantedLevel] >= 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is already at the maximum wanted level (6).");
	}
	if(GetFactionType(targetid) == FACTION_FEDERAL && GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_ARMY)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is in a faction of higher authority and therefore can't be charged.");
	}

	PlayerInfo[targetid][pWantedLevel]++;
	PlayerInfo[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i, crimes = %i WHERE uid = %i", PlayerInfo[targetid][pWantedLevel], PlayerInfo[targetid][pCrimes], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, '%s', NOW(), '%e')", PlayerInfo[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i))
	    {
			SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: %s %s has charged %s with {FF6347}%s{9999FF}. **", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid), reason);
		}
	}

	SendClientMessageEx(targetid, COLOR_LIGHTRED, "** Officer %s has charged you with %s.", GetPlayerRPName(playerid), reason);
	Log_Write("log_faction", "%s (uid: %i) has charged %s (uid: %i) with %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], reason);
	return 1;
}
CMD:su(playerid, params[])
{
	return callcmd::charge(playerid, params);
}
CMD:bug(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_FEDERAL)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not a federal agent.");
	}
	if(!PlayerInfo[playerid][pToggleBug])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Enable the bug channel first! (/tog bugged)");
	}
    new
		targetid;

    if(sscanf(params, "u", targetid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bug [playerid]");
	}
    if(PlayerInfo[targetid][pAdminDuty])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't place bugs on admins.");
	}
	if(PlayerInfo[targetid][pBugged] == 1)
	{
		PlayerInfo[targetid][pBugged] = 0;
 		SendClientMessageEx(playerid, COLOR_GREY, "The bug on %s has been disabled.", GetPlayerRPName(targetid));
	}
	else if(IsPlayerInRangeOfPlayer(playerid, targetid, 4.0))
	{
		PlayerInfo[targetid][pBugged] = 1;
    	SendClientMessageEx(playerid, COLOR_GREY ,"You have placed a bug on %s.",GetPlayerRPName(targetid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You need to be closer to that person.");
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
	new targetid, minutes, fine;

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /arrest [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't arrest yourself.");
	}
	if(!PlayerInfo[targetid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not handcuffed.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't arrest a player with no active charges. /charge to add them.");
	}

	for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]))
	    {
	        minutes = PlayerInfo[targetid][pWantedLevel] * 5;
	        fine = PlayerInfo[targetid][pWantedLevel] * 1000;

	        if(PlayerInfo[targetid][pVIPPackage] == 1)
			{
	            SendClientMessageEx(targetid, COLOR_VIP, "VIP Perk: Your %i minutes of jail time has been reduced by 50 percent to %i minutes.", minutes, percent(minutes, 50));
	            minutes = percent(minutes, 50);
	        }
	        else if(PlayerInfo[targetid][pVIPPackage] >= 2)
			{
	            SendClientMessageEx(targetid, COLOR_VIP, "VIP Perk: Your %i minutes of jail time has been reduced by 75 percent to %i minutes.", minutes, percent(minutes, 75));
	            minutes = percent(minutes, 25);
	        }

		    PlayerInfo[targetid][pJailType] = 3;
    		PlayerInfo[targetid][pJailTime] = minutes * 60;
			PlayerInfo[targetid][pWantedLevel] = 0;
			PlayerInfo[targetid][pArrested]++;

		    ResetPlayerWeaponsEx(targetid);
			ResetPlayer(targetid);
			TogglePlayerControllable(targetid, 1);

			SetPlayerInJail(targetid);
			GivePlayerCash(targetid, -fine);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", PlayerInfo[targetid][pArrested], PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			SendClientMessageToAllEx(COLOR_LIGHTRED, "<< %s %s has completed their arrest. %s has been sent to jail for %i days. >>", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid), minutes);
			//SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has arrested %s for %i minutes, fine: $%i.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid), minutes, fine);
    		SendClientMessageEx(targetid, COLOR_AQUA, "** You've been arrested for %i minutes, fine: $%i.", minutes, fine);
    		Log_Write("log_faction", "%s (uid: %i) has arrested %s (uid: %i) for %i minutes, fine: $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], minutes, fine);
    		return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any arrest points.");
    return 1;
}

CMD:wanted(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && !PlayerHasJob(playerid, JOB_LAWYER))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement or a lawyer.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Wanted Players _____");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pWantedLevel] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s - Wanted Level: %i", i, GetPlayerRPName(i), PlayerInfo[i][pWantedLevel]);
		}
	}

	return 1;
}

CMD:find(playerid, params[])
{
	new targetid;

    if(!PlayerHasJob(playerid, JOB_DETECTIVE) && GetFactionType(playerid) != FACTION_POLICE &&  GetFactionType(playerid) != FACTION_FEDERAL && GetFactionType(playerid) != FACTION_ARMY)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Detective.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /find [playerid]");
	}
	if(PlayerInfo[playerid][pDetectiveCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds to use this command again.", PlayerInfo[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is in an interior. You can't find them at the moment.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on an on duty administrator.");
	}
	if(PlayerInfo[targetid][pTogglePhone])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player's phone is turned off. Therefore you can't find them.");
	}

	switch(GetJobLevel(playerid, JOB_DETECTIVE))
	{
	    case 1:
	    {
	        PlayerInfo[playerid][pFindTime] = 6;
	        PlayerInfo[playerid][pDetectiveCooldown] = 120;
		}
		case 2:
	    {
	        PlayerInfo[playerid][pFindTime] = 8;
	        PlayerInfo[playerid][pDetectiveCooldown] = 90;
		}
		case 3:
	    {
	        PlayerInfo[playerid][pFindTime] = 10;
	        PlayerInfo[playerid][pDetectiveCooldown] = 60;
		}
		case 4:
	    {
	        PlayerInfo[playerid][pFindTime] = 12;
	        PlayerInfo[playerid][pDetectiveCooldown] = 30;
		}
		case 5:
	    {
	        PlayerInfo[playerid][pFindTime] = 14;
	        PlayerInfo[playerid][pDetectiveCooldown] = 15;
		}
	}

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);

    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a cellphone and begins to track someone.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetPlayerRPName(targetid), PlayerInfo[playerid][pFindTime]);

	IncreaseJobSkill(playerid, JOB_DETECTIVE);
	PlayerInfo[playerid][pFindPlayer] = targetid;
	return 1;
}

CMD:frisk(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /frisk [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
    if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot frisk yourself.");
	}

	if(PlayerHasJob(playerid, JOB_BODYGUARD) || IsLawEnforcement(playerid))
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    PlayerInfo[targetid][pFriskOffer] = playerid;

	    SendClientMessageEx(targetid, COLOR_AQUA, "** %s is attempting to frisk you for illegal items. (/accept frisk)", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You have sent a frisk offer to %s.", GetPlayerRPName(targetid));
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new targetid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /take [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapons, Weed, Cocaine, Meth, Painkillers, CarLicense");
		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes away %s's weapons.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your weapons.", GetPlayerRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(!PlayerInfo[targetid][pWeed])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no weed on them.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes away %s's weed.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i grams of weed.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of weed.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pWeed]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pWeed] = 0;
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(!PlayerInfo[targetid][pCocaine])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no cocaine on them.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes away %s's cocaine.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i grams of cocaine.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of cocaine.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pCocaine]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCocaine] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[targetid][pMeth])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no meth on them.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes away %s's meth.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i grams of meth.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pMeth]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[targetid][pPainkillers])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no painkillers on them.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes away %s's painkillers.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your %i painkillers.", GetPlayerRPName(playerid), PlayerInfo[targetid][pWeed]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pPainkillers]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerInfo[targetid][pCarLicense])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "That player has no driving license on them.");
		}

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes away %s's drivers license.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken your drivers license.", GetPlayerRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    PlayerInfo[targetid][pCarLicense] = 0;
	}

	return 1;
}

CMD:ticket(playerid, params[])
{
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ticket [playerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't ticket yourself.");
	}
	if(!(1000 <= amount <= 10000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The ticket amount must range between $1000 and $10000.");
	}

	PlayerInfo[targetid][pTicketOffer] = playerid;
	PlayerInfo[targetid][pTicketPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s writes you a %s ticket for %s. (/accept ticket)", GetPlayerRPName(playerid), FormatNumber(amount), reason);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered a %s ticket to %s for %s.", FormatNumber(amount), GetPlayerRPName(targetid), reason);
	return 1;
}

CMD:gov(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
 	if(!PlayerInfo[playerid][pFactionLeader])
 	{
 	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gov [text]");
	}

	switch(FactionInfo[PlayerInfo[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_DOCTOR, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
		case FACTION_POLICE:
		{
            if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_BLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
        case FACTION_GOVERNMENT:
		{
		    if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Government News Announcement ____________");

			SendClientMessageToAllEx(COLOR_YELLOW2, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
		case FACTION_FEDERAL:
		{
		    if(!PlayerInfo[playerid][pGovTimer])
	        	SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);
			PlayerInfo[playerid][pGovTimer] = 30;
		}
		case FACTION_ARMY:
		{
		    if(!PlayerInfo[playerid][pGovTimer])
	       	 SendClientMessageToAll(COLOR_GREY1, "____________ Public Service Announcement ____________");

			SendClientMessageToAllEx(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), params);

			PlayerInfo[playerid][pGovTimer] = 30;
		}
		default:
		{
		    SendClientMessage(playerid, COLOR_GREY, "Your faction is not authorized to use this command.");
		}
	}

	return 1;
}

CMD:ram(playerid, params[])
{
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
			/*else if((id = GetNearbyLand(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[id][lID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM landobjects WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
				mysql_tquery(connectionID, queryBuffer, "OnPlayerRamLandDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
			    return 1;
			}*/
		}
	}

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This house is unlocked. You don't need to ram the door.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rams down %s's house door.", GetPlayerRPName(playerid), HouseInfo[id][hOwner]);
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This business is unlocked. You don't need to ram the door.");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rams down %s's business door.", GetPlayerRPName(playerid), BusinessInfo[id][bOwner]);
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This garage is unlocked. You don't need to ram the door.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rams down %s's garage door.", GetPlayerRPName(playerid), GarageInfo[id][gOwner]);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any door which can be rammed.");
	}

	return 1;
}

CMD:deploy(playerid, params[])
{
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deploy [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Spikestrip, Cone, Roadblock, Barrel, Flare");
	    return 1;
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't deploy objects inside.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	}

	if(type_id == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The deployable objects pool is full. Try deleting some first.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "** HQ: %s %s has deployed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}
CMD:undeployall(playerid, params[])
{
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "** HQ: %s %s has removed all deployed objects.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid));
	return 1;
}
CMD:undeploy(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_TERRORIST)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(PlayerInfo[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "** HQ: %s %s has removed a %s in %s.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any deployed objects.");
	return 1;
}

CMD:bk(playerid, params[])
{
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot call for backup when you are dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;
	}
	else
	{
	    PlayerInfo[playerid][pBackup] = 0;
	}


	foreach(new i : Player)
	{
        switch(GetFactionType(i))
		{
            case FACTION_POLICE, FACTION_MEDIC, FACTION_FEDERAL, FACTION_ARMY, FACTION_GOVERNMENT:
			{
	    	    if(PlayerInfo[playerid][pBackup])
	    	    {
	    	        SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
	    	        SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[PlayerInfo[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
				}
				else
				{
	    	        SendClientMessageEx(i, COLOR_ROYALBLUE, "** HQ: %s %s has cancelled their backup request.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
	    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
				}
			}
		}
	}

	return 1;
}

CMD:mdc(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(400 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 600))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside a police car or the police station.");
	}

	ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Wanted suspects\nPlayer lookup\nVehicle lookup", "Select", "Cancel");
	return 1;
}

CMD:clearwanted(playerid, params[])
{
    new targetid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /clearwanted [playerid]");
	}
	/*if((!IsPlayerInRangeOfPoint(playerid, 50.0, 1229.3544, -1311.8627, 796.7859)) && !(596 <= GetVehicleModel(GetPlayerVehicleID(playerid)) <= 599))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside a police car or the police station.");
	}*/
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't clear yourself.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player has no active charges to clear.");
	}

	PlayerInfo[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s calls in dispatch and asks for a warrant removal of %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetPlayerRPName(playerid));
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_ROYALBLUE, "** HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[PlayerInfo[playerid][pFaction]][PlayerInfo[playerid][pFactionRank]], GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:vticket(playerid, params[])
{
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vticket [amount]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}
	if(!(1000 <= amount <= 5000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from $1000 to $5000.");
	}
	if(VehicleInfo[vehicleid][vTickets] >= 50000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has over $50000 in tickets. You can't add anymore.");
	}

	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s writes up a %s ticket and attaches it to the %s.", GetPlayerRPName(playerid), FormatNumber(amount), GetVehicleName(vehicleid));
	Log_Write("log_faction", "%s (uid: %i) placed a ticket for $%i on %s's (uid: %i) %s (id: %i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	return 1;
}

CMD:siren(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SendClientMessage(playerid, COLOR_GREY, "This vehicle cannot have a siren attached to it.");
	}

	if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

		vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s places a detachable siren on the roof of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s detaches the siren from the roof of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	}

	return 1;
}

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /callsign [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SendClientMessage(playerid, COLOR_WHITE, "** Callsign removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SendClientMessage(playerid, COLOR_WHITE, "** Callsign attached. '/callsign none' to detach the callsign.");
	}

	return 1;
}

CMD:vfrisk(playerid, params[])
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}

    new count;

    for(new i = 0; i < 5; i ++)
    {
        if(VehicleInfo[vehicleid][vWeapons][i])
        {
            count++;
        }
    }

    SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Trunk Balance ______");
    SendClientMessageEx(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SendClientMessageEx(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SendClientMessageEx(playerid, COLOR_GREY2, "Weed: %i/%i grams | Cocaine: %i/%i grams", VehicleInfo[vehicleid][vWeed], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCocaine], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SendClientMessageEx(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));

	if(count > 0)
	{
		SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Trunk Weapons ______");

    	for(new i = 0; i < 5; i ++)
        {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
    	        SendClientMessageEx(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
			}
		}
    }

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s prys open the trunk of the %s and takes a look inside.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid, params[])
{
    new vehicleid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vtake [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapons, Weed, Cocaine, Meth, Painkillers");
	    return 1;
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}

	if(!strcmp(option, "weapons", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;
        VehicleInfo[vehicleid][vWeapons][3] = 0;
        VehicleInfo[vehicleid][vWeapons][4] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0, weapon_4 = 0, weapon_5 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes the weapons from the trunk of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessage(playerid, COLOR_AQUA, "You have taken the weapons from the trunk.");
		Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "weed", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes the weed from the trunk of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i grams of weed from the trunk.", VehicleInfo[vehicleid][vWeed]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of weed from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vWeed], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weed = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vWeed] = 0;
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes the cocaine from the trunk of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i grams of cocaine from the trunk.", VehicleInfo[vehicleid][vCocaine]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of cocaine from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vCocaine], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cocaine = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCocaine] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes the meth from the trunk of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i grams of meth from the trunk.", VehicleInfo[vehicleid][vMeth]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes the painkillers from the trunk of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the %i painkillers from the trunk.", VehicleInfo[vehicleid][vPainkillers]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:heal(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /heal [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't heal yourself.");
	}
	if(PlayerInfo[targetid][pReceivingAid])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player already has first aid effects.");
	}

	PlayerInfo[targetid][pReceivingAid] = 1;
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s administers first aid to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	SendClientMessageEx(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetPlayerRPName(targetid));
	return 1;
}

CMD:stretcher(playerid, params[])
{
    new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /stretcher [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not injured.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be driving an ambulance.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        PlayerInfo[targetid][pVehicleCount] = 0;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s places %s on a stretcher in the Ambulance.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}

CMD:deliverpatient(playerid, params[])
{
	new targetid, amount = 2000;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /deliverpatient [playerid]");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307, -1422.8580, 48.331) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485)
	&& !IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773, -2151.7322, 13.7483) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819, -2166.9712, 35.2578) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1539.1060, -2167.2058, 35.2578))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any delivery points at the hospital.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 7.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not injured.");
	}

	if(PlayerInfo[playerid][pLaborUpgrade] > 0)
	{
		amount += percent(amount, PlayerInfo[playerid][pLaborUpgrade]);
	}

    PlayerInfo[targetid][pInjured] = 0;
	PlayerInfo[targetid][pDelivered] = 0;
	PlayerInfo[playerid][pTotalPatients]++;

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2007.6256, -1410.2455, 16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2070.4307,-1422.8580,48.331))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_COUNTY);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1147.3577, -1345.3729, 13.6328) || IsPlayerInRangeOfPoint(playerid, 5.0, 1161.1458,-1364.4767,26.6485))
	{
		SetPlayerVirtualWorld(targetid, HOSPITAL_ALLSAINTS);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1510.7773,-2151.7322,13.7483) || IsPlayerInRangeOfPoint(playerid, 5.0, 1480.4819,-2166.9712,35.2578) || IsPlayerInRangeOfPoint(playerid, 5.0,  1539.1060,-2167.2058,35.2578))
	{
	    SetPlayerVirtualWorld(targetid, HOSPITAL_FMDHQ);
	}

	if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC)
	{
        SendClientMessage(targetid, COLOR_DOCTOR, "You have not been billed for your stay. You also keep all of your weapons!");
    }
	else
	{
		SendClientMessage(targetid, COLOR_DOCTOR, "You have been billed $500 for your stay. You also keep all of your weapons!");
	}

	SetPlayerPos(targetid, -10.4534, 149.3639, 999.0613);
	SetPlayerFacingAngle(targetid, 180.0000);
	SetPlayerInterior(targetid, 1);
	SetCameraBehindPlayer(targetid);

	if(!(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC))
	{
		GivePlayerCash(targetid, -500);
		GameTextForPlayer(targetid, "~w~Discharged~n~~r~-$500", 5000, 1);
	}

	TogglePlayerControllable(targetid, 1);
	SetPlayerDrunkLevel(targetid, 0);

	SetPlayerHealth(targetid, PlayerInfo[targetid][pSpawnHealth]);
	SetScriptArmour(targetid, PlayerInfo[targetid][pSpawnArmor]);
    PlayerInfo[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	AddToPaycheck(playerid, amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have delivered %s to the hospital and earned {00AA00}$%i{33CCFF} on your paycheck.", GetPlayerRPName(targetid), amount);
	return 1;
}
CMD:listbugs(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a federal agent.");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Bugged players:");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pBugged])
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Name: %s - Location: %s", GetPlayerRPName(i), GetPlayerZoneName(i));
		}
	}
	return 1;
}
CMD:listpt(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GREEN, "Injured - (/injuries):");
	foreach(new i : Player)
	{
		if(PlayerInfo[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(PlayerInfo[i][pAcceptedEMS]))
		    {
				accepted = GetPlayerRPName(PlayerInfo[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "None";
		    }
		    SendClientMessageEx(playerid, COLOR_GREY, "Name: %s - Location: %s - Medic: %s", GetPlayerRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SendClientMessage(playerid, COLOR_AQUA, "Use /getpt [playerid] to track them!");
	return 1;
}
CMD:getpt(playerid, params[])
{
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getpt [playerid]");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SendClientMessage(playerid, COLOR_AQUA, "You can't accept your own Emergency Dispatch call!");
				return 1;
		    }
		    if(!PlayerInfo[targetid][pInjured])
		    {
		        SendClientMessage(playerid, COLOR_GREY, "That person is not injured!");
		        return 1;
		    }
			if(!IsPlayerConnected(PlayerInfo[targetid][pAcceptedEMS]))
			{
				if(PlayerInfo[targetid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on jailed players.");
				SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_DOCTOR, "EMS Driver %s has accepted the Emergency Dispatch call for %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
				SendClientMessageEx(playerid, COLOR_AQUA, "* You have accepted EMS Call from %s, you will see the marker until you have reached it.", GetPlayerRPName(targetid));
				SendClientMessageEx(targetid, COLOR_AQUA, "* EMS Driver %s has accepted your EMS Call; please be patient as they are on the way!", GetPlayerNameEx(playerid));
				PlayerInfo[targetid][pAcceptedEMS] = playerid;
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
                PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Someone has already accepted that call!");
			}
		}
	}
	return 1;
}

CMD:loadpt(playerid, params[])
{
	return callcmd::stretcher(playerid, params);
}
CMD:deliverpt(playerid, params[])
{
	return callcmd::deliverpatient(playerid, params);
}
CMD:movept(playerid, params[])
{
	return callcmd::drag(playerid, params);
}
CMD:injuries(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /injuries [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerListInjuries", "ii", playerid, targetid);
	return 1;
}

CMD:news(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /news [text]");
	}
	if(PlayerInfo[playerid][pToggleNews])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't make news broadcasts as you have it toggled.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 488 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 582)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only use this command from within a news van or news chopper.");
	}

	foreach(new i : Player)
	{
	    if(!PlayerInfo[i][pToggleNews])
	    {
			SendClientMessageEx(i, COLOR_LIGHTGREEN, "News Reporter %s: %s", GetPlayerRPName(playerid), params);
		}
	}

	return 1;
}

CMD:live(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /live [playerid]");
	}
	if(PlayerInfo[playerid][pLiveMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are banned from live interviews. Ask a higher rank to lift your ban.");
	}
	if(PlayerInfo[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already doing a live interview. /endlive to finish it.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't interview yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[targetid][pLiveMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is banned from live interviews.");
	}
	if(PlayerInfo[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is on a phone call at the moment.");
	}

	PlayerInfo[targetid][pLiveOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered you a live interview. (/accept live)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered %s a live interview.", GetPlayerRPName(targetid));
	return 1;
}

CMD:endlive(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
    if(PlayerInfo[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are currently not doing a live interview.");
	}

	SendClientMessage(playerid, COLOR_AQUA, "You have ended the live interview.");
	SendClientMessageEx(PlayerInfo[playerid][pLiveBroadcast], COLOR_AQUA, "%s has ended the live interview.", GetPlayerRPName(playerid));

	PlayerInfo[PlayerInfo[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a news reporter.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 2);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /liveban [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}

	if(!PlayerInfo[targetid][pLiveMuted])
	{
		if(PlayerInfo[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	PlayerInfo[PlayerInfo[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	PlayerInfo[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		PlayerInfo[targetid][pLiveMuted] = 1;
		SendClientMessageEx(targetid, COLOR_LIGHTRED, "%s has banned you from live interviews.", GetPlayerNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have banned %s from live interviews.", GetPlayerNameEx(targetid));
	}
	else
	{
	    PlayerInfo[targetid][pLiveMuted] = 0;
		SendClientMessageEx(targetid, COLOR_YELLOW, "%s has unbanned you from live interviews.", GetPlayerNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have unbanned %s from live interviews.", GetPlayerNameEx(targetid));
	}

	return 1;
}

CMD:settax(playerid, params[])
{
	new amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of government.");
	}
	if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settax [rate]");
	}
	if(!(10 <= amount <= 50))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The tax percentage must range from 10 to 50.");
	}

	gTax = amount;
	SaveServerInfo();

	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has adjusted the income tax rate to %i percent.", GetPlayerRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have set the income tax rate to %i percent.", amount);
	Log_Write("log_faction", "%s (uid: %i) set the income tax rate to %i percent.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}

CMD:factionpay(playerid, params[])
{
	new factionid = PlayerInfo[playerid][pFaction];

	if(!PlayerInfo[playerid][pFactionLeader] && GetFactionType(playerid) != FACTION_NONE)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a faction leader or part of a faction altogether.");
	}
	if(sscanf(params, "s[5]", "edit"))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /factionpay [edit]");
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Hitman factions have no federal budget.");
	}

	PlayerInfo[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:adwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of the news faction.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /adwithdraw [amount] [reason] ($%i available)", gNewsVault);
	}
	if(amount < 1 || amount > gNewsVault)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	gNewsVault -= amount;
	SaveServerInfo();
	GivePlayerCash(playerid, amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have withdrawn %s from the advertisement vault. The new balance is %s.", FormatNumber(amount), FormatNumber(gVault));
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has withdrawn %s from the advertisement vault, reason: %s", GetPlayerRPName(playerid), FormatNumber(amount), reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the advertisement vault, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, reason);
	return 1;
}

CMD:addeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of the news faction.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /addeposit [amount] ($%i available)", gNewsVault);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	gNewsVault += amount;
	SaveServerInfo();
	GivePlayerCash(playerid, -amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have deposited $%i in the advertisement vault. The new balance is $%i.", amount, gNewsVault);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has deposited $%i in the advertisement vault.", GetPlayerRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the advertisement vault.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}


CMD:taxwithdraw(playerid, params[])
{
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of government.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /taxwithdraw [amount] [reason] ($%i available)", gVault);
	}
	if(amount < 1 || amount > gVault)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have withdrawn %s from the tax vault. The new balance is %s.", FormatNumber(amount), FormatNumber(gVault));
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has withdrawn %s from the tax vault, reason: %s", GetPlayerRPName(playerid), FormatNumber(amount), reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the tax vault, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount, reason);
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	new amount;

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of government.");
	}
    if(PlayerInfo[playerid][pFactionRank] < FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank %i+ to use this command.", FactionInfo[PlayerInfo[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /taxdeposit [amount] ($%i available)", gVault);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have deposited $%i in the tax vault. The new balance is $%i.", amount, gVault);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has deposited $%i in the tax vault.", GetPlayerRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the tax vault.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], amount);
	return 1;
}

CMD:contract(playerid, params[])
{
	new targetid, amount, reason[64];

	if(sscanf(params, "iis[64]", targetid, amount, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /contract [playerid] [amount] [reason]");
	}
	if(PlayerInfo[playerid][pLevel] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 5+ to contract players.");
	}
	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are a hitman and therefore can't contract other players.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't contract yourself.");
	}
	if(PlayerInfo[targetid][pLevel] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only contract level 5+ players.");
	}
	if(!(2500 <= amount <= 500000))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from $2500 to $500000.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(PlayerInfo[targetid][pContracted] + amount > 500000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player can't have more than $500000 on their head.");
	}

	foreach(new i : Player)
	{
	    if(GetFactionType(i) == FACTION_HITMAN)
	    {
	        SendClientMessageEx(i, COLOR_YELLOW, "** %s has contracted %s for $%i, reason: %s [/contracts]", GetPlayerRPName(playerid), GetPlayerRPName(targetid), amount, reason);
		}
	}

	GivePlayerCash(playerid, -amount);

	PlayerInfo[targetid][pContracted] += amount;
	GetPlayerName(playerid, PlayerInfo[targetid][pContractBy], MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = %i, contractby = '%e' WHERE uid = %i", PlayerInfo[targetid][pContracted], PlayerInfo[targetid][pContractBy], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have placed a contract on %s for $%i, reason: %s", GetPlayerRPName(targetid), amount, reason);
	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s placed a contract on %s for $%i, reason: %s", GetPlayerRPName(playerid), GetPlayerRPName(targetid), amount, reason);
 	Log_Write("log_contracts", "%s (uid: %i) placed a contract on %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], amount, reason);
 	return 1;
}
CMD:noknife(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(PlayerInfo[playerid][pNoKnife])
	{
	    PlayerInfo[playerid][pNoKnife] = 0;
     	SendClientMessage(playerid, COLOR_AQUA, "You've enabled no knife mode, your armed weapon will never be a knife.");
	}
	else
	{
	    PlayerInfo[playerid][pNoKnife] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "You've disabled no knife mode, your armed weapon can be anything");
	}
	return 1;
}
CMD:hfind(playerid, params[])
{
	new targetid;

    if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman or federal agent.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /hfind [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This player is an interior. You can't find them at the moment.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on an on duty administrator.");
	}

	PlayerInfo[playerid][pFindTime] = 15;
	PlayerInfo[playerid][pFindPlayer] = targetid;

    SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SendClientMessageEx(playerid, COLOR_WHITE, "** %s's location marked on your radar. 15 seconds remain until the marker disappears.", GetPlayerRPName(targetid));
	return 1;
}

CMD:contracts(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_______ Pending Contracts _______");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pContracted] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Target: %s | Bounty price: %s | Last contracter: %s", i, GetPlayerRPName(i), FormatNumber(PlayerInfo[i][pContracted]), PlayerInfo[i][pContractBy]);
		}
	}

	SendClientMessage(playerid, COLOR_YELLOW, "** Use /takehit [id] or /denyhit [id] to handle contracts.");
	return 1;
}

CMD:denyhit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /denyhit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't been contracted.");
	}

    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has cancelled the contract on %s for $%i.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pContracted]);

	if(GetFactionType(playerid) == FACTION_HITMAN)
	{
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has cancelled the contract on %s for %s. **", GetPlayerRPName(playerid), GetPlayerRPName(targetid), FormatNumber(PlayerInfo[targetid][pContracted]));
	}

	PlayerInfo[targetid][pContracted] = 0;
    strcpy(PlayerInfo[targetid][pContractBy], "No-one", MAX_PLAYER_NAME);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'No-one' WHERE uid = %i", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:takehit(playerid, params[])
{
	new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /takehit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(!PlayerInfo[targetid][pContracted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't been contracted.");
	}
	if(PlayerInfo[targetid][pCash] + PlayerInfo[targetid][pBank] < PlayerInfo[targetid][pContracted] / 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player's total wealth is lower than the contract price. You can't put them in debt.");
	}

	PlayerInfo[playerid][pContractTaken] = targetid;
	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_YELLOW, "** Hitman %s has accepted the contract to kill %s for %s. **", GetPlayerRPName(playerid), GetPlayerRPName(targetid), FormatNumber(PlayerInfo[targetid][pContracted]));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have taken the hit. You will receive %s once you have assassinated {00AA00}%s{33CCFF}.", FormatNumber(PlayerInfo[targetid][pContracted]), GetPlayerRPName(targetid));
	return 1;
}


CMD:propose(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /propose [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, targetid, 2240.9014, -1358.3053, 1500.9048))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be at the church desk to commence a wedding.");
	}
	if(PlayerInfo[playerid][pCash] < 25000 || PlayerInfo[targetid][pCash] < 25000)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You both need to have atleast $25,000 to have a wedding.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != -1)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're already married to %s.", PlayerInfo[playerid][pMarriedName]);
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't marry yourself faggot.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has asked you to marry them, Please be careful when chosing a partner, It will cost both parties $25,000. (/accept marriage)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have sent %s a proposal for marriage.", GetPlayerRPName(targetid));
	return 1;
}
CMD:divorce(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /divorce [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(PlayerInfo[playerid][pMarriedTo] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't even married.");
	}
	if(PlayerInfo[playerid][pMarriedTo] != PlayerInfo[targetid][pID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't married to that person.");
	}
	PlayerInfo[targetid][pMarriageOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has asked you to divorce them (/accept divorce)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have sent %s a request for divorce.", GetPlayerRPName(targetid));
	return 1;
}
CMD:profile(playerid, params[])
{
    new targetid;

	if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /profile [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s _____", GetPlayerRPName(targetid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Gender: %s", (PlayerInfo[targetid][pGender] == 2) ? ("Female") : ("Male"));
	SendClientMessageEx(playerid, COLOR_GREY2, "Age: %i years old", PlayerInfo[targetid][pAge]);

	if(PlayerInfo[targetid][pFaction] != -1)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Faction: %s", FactionInfo[PlayerInfo[targetid][pFaction]][fName]);
	    SendClientMessageEx(playerid, COLOR_GREY2, "Rank: %s (%i)", FactionRanks[PlayerInfo[targetid][pFaction]][PlayerInfo[targetid][pFactionRank]], PlayerInfo[targetid][pFactionRank]);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Faction: None");
	}

	if(PlayerInfo[targetid][pContracted] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "Contract: %s", FormatNumber(PlayerInfo[targetid][pContracted]));
		SendClientMessageEx(playerid, COLOR_GREY2, "Last Contracter: %s", PlayerInfo[targetid][pContractBy]);
	}

	SendClientMessageEx(playerid, COLOR_GREY2, "Completed Hits: %i", PlayerInfo[targetid][pCompletedHits]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Failed Hits: %i", PlayerInfo[targetid][pFailedHits]);
	return 1;
}

CMD:passport(playerid, params[])
{
	new name[24], level, skinid;

    if(PlayerInfo[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pPassportName]);
  		SetScriptSkin(playerid, PlayerInfo[playerid][pPassportSkin]);
		SendClientMessage(playerid, COLOR_AQUA, "You have burned your passport and received your old name, clothes, level and number back.");

		PlayerInfo[playerid][pLevel] = PlayerInfo[playerid][pPassportLevel];
		PlayerInfo[playerid][pPhone] = PlayerInfo[playerid][pPassportPhone];
		PlayerInfo[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, phone = %i WHERE uid = %i", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pPhone], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	if(GetFactionType(playerid) != FACTION_HITMAN && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman or federal agent.");
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /passport [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(name))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't allowed to change your name while on admin duty,");
	}
	if(!(1 <= level <= 10))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your level must range from 1 to 10.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The skin ID must range from 0 to 311.");
	}
	if(!isnull(PlayerInfo[playerid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have already requested a namechange. Please wait for a response.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerInfo[playerid][pBombs])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You don't have any bombs.");
	}
	if(PlayerInfo[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have planted a bomb already.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't plant a bomb inside.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't plant a bomb while inside of a vehicle");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	PlayerInfo[playerid][pPlantedBomb] = 1;
	PlayerInfo[playerid][pBombObject] = CreateDynamicObject(19602, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessage(playerid, COLOR_WHITE, "** Bomb has been planted, use /detonate to make it go BOOM!");
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_HITMAN)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a hitman.");
	}
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't planted a bomb which you can pickup.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your planted bomb.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;
	PlayerInfo[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", PlayerInfo[playerid][pBombs], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessage(playerid, COLOR_WHITE, "** You have picked up your bomb.");
	return 1;
}

CMD:detonate(playerid, params[])
{
	if(!PlayerInfo[playerid][pPlantedBomb])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't planted a bomb which you can detonate.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are too far away from your planted bomb.");
	}

	CreateExplosion(PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ], 11, 10.0);
    DestroyDynamicObject(PlayerInfo[playerid][pBombObject]);

	if(PlayerInfo[playerid][pContractTaken] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(PlayerInfo[playerid][pContractTaken], 10.0, PlayerInfo[playerid][pBombX], PlayerInfo[playerid][pBombY], PlayerInfo[playerid][pBombZ]))
	{
	    SetPlayerHealth(PlayerInfo[playerid][pContractTaken], 0.0);
	    HandleContract(PlayerInfo[playerid][pContractTaken], playerid);
	}

    PlayerInfo[playerid][pBombObject] = INVALID_OBJECT_ID;
	PlayerInfo[playerid][pPlantedBomb] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "** You have detonated your bomb!");
	return 1;
}

CMD:saveaccounts(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has saved all player accounts.", GetPlayerRPName(playerid));
	return 1;
}

CMD:adestroyboombox(playerid, params[])
{
	new boomboxid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no boombox in range.");
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "You have destroyed {00AA00}%s{33CCFF}'s boombox.", GetPlayerRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

CMD:setbanktimer(playerid, params[])
{
	new hours;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Hours can't be below 0.");
	}

	RobberyInfo[rTime] = hours;
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the bank robbery timer to %i hours.", GetPlayerRPName(playerid), hours);
	return 1;
}

CMD:resetrobbery(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	ResetRobbery();
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the active bank robbery.", GetPlayerRPName(playerid));
	return 1;
}

CMD:addtorobbery(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /addtorobbery [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!RobberyInfo[rPlanning] && !RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no bank robbery in progress.");
	}
    if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "There can't be more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
 	if(IsPlayerInBankRobbery(targetid))
 	{
 	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in the bank robbery.");
   	}

 	AddToBankRobbery(targetid);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has added %s to the bank robbery.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_AQUA, "%s has added you to the bank robbery.", GetPlayerRPName(playerid));
	return 1;
}

CMD:givepayday(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givepayday [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	SendPaycheck(targetid);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced a payday for %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:givepveh(playerid, params[])
{
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you your own {00AA00}%s{33CCFF}. /carstorage to spawn it.", GetPlayerRPName(playerid), vehicleNames[modelid - 400]);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have given %s their own {00AA00}%s{33CCFF}.", GetPlayerRPName(targetid), vehicleNames[modelid - 400]);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given %s their own %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), vehicleNames[modelid - 400]);
	Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], vehicleNames[modelid - 400]);
	return 1;
}

CMD:givedoublexp(playerid, params[])
{
	new targetid, hours;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /givedoublexp [playerid] [hours]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(hours < 1 && PlayerInfo[targetid][pDoubleXP] - hours < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player can't have under 0 hours of double XP.");
	}

	PlayerInfo[targetid][pDoubleXP] += hours;

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has given %i hours of double XP to %s.", GetPlayerRPName(playerid), hours, GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_YELLOW, "%s has given you %i hours of double XP.", GetPlayerRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET doublexp = %i WHERE uid = %i", PlayerInfo[targetid][pDoubleXP], PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(IsFireActive())
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a fire active already. /killfire to kill it!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	GetDynamicObjectPos(gFireObjects[0], x, y, z);
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has started a random fire in %s.", GetPlayerRPName(playerid), GetZoneName(x, y, z));
	return 1;
}

CMD:killfire(playerid, params[])
{
    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsFireActive())
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is currently no fire active.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SendClientMessage(playerid, COLOR_GREY, "Active fire killed.");
	return 1;
}

CMD:spawnfire(playerid, params[])
{
	new Float:px, Float:py, Float:pz;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't create fires indoors.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		PlayerInfo[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SendClientMessageEx(i, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 50.0;
			gFires++;

			return SendClientMessage(playerid, COLOR_GREY, "Fire created!");
		}
	}

	SendClientMessageEx(playerid, COLOR_GREY, "You can't create anymore fires. The limit is %i fires.", MAX_FIRES);
	return 1;
}

CMD:number(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /number [playerid]");
	}
	if(!PlayerInfo[playerid][pPhonebook])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a phonebook.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a cellphone and looks up a number.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Name: %s, Ph: %i", GetPlayerRPName(targetid), PlayerInfo[targetid][pPhone]);
	return 1;
}


CMD:boombox(playerid, params[])
{
	new option[10], param[128];

	if(!PlayerInfo[playerid][pBoombox])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no boombox and therefore can't use this command.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /boombox [place | pickup | play]");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have placed down a boombox already.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "There is already a boombox nearby. Place this one somewhere else.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "{FFFF00}Boombox placed by:\n{FF0000}%s{FFFF00}\n/boombox for more options.", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    PlayerInfo[playerid][pBoomboxPlaced] = 1;
    	PlayerInfo[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	PlayerInfo[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        PlayerInfo[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s places a boombox on the ground.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your boombox.");
		}

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s picks up their boombox and switches it off.", GetPlayerRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!PlayerInfo[playerid][pBoomboxPlaced])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, PlayerInfo[playerid][pBoomboxObject], 3.0))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your boombox.");
		}

    	PlayerInfo[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

CMD:switchspeedo(playerid, params[])
{
	if(!strcmp(params, "kmh", true))
	{
		PlayerInfo[playerid][pSpeedometer] = 1;
		SendClientMessage(playerid, COLOR_AQUA, "Your speedometer will now display speed as {00AA00}Kilometers per hour{33CCFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "mph", true))
	{
		PlayerInfo[playerid][pSpeedometer] = 2;
		SendClientMessage(playerid, COLOR_AQUA, "Your speedometer will now display speed as {00AA00}Miles per hour{33CCFF}.");

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET speedometer = 2 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(isnull(params))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /switchspeedo [kmh/mph]");
	}

	return 1;
}

CMD:shakehand(playerid, params[])
{
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /shakehand [playerid] [type (1-6)]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't shake your own hand.");
	}
	if(!(1 <= type <= 6))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type. Valid types range from 1 to 6.");
	}

	PlayerInfo[targetid][pShakeOffer] = playerid;
	PlayerInfo[targetid][pShakeType] = type;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has offered to shake your hand. (/accept handshake)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have sent %s a handshake offer.", GetPlayerRPName(targetid));
	return 1;
}

CMD:dropgun(playerid, params[])
{
	new weaponid = GetScriptWeapon(playerid), objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be onfoot in order to drop weapons.");
	}
	if(!weaponid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be holding the weapon you're willing to drop.");
	}
	if(PlayerInfo[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell this weapon as you don't have it.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(GetPlayerHealthEx(playerid) < 60)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drop weapons as your health is below 60.");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);
 	SetTimerEx("DestroyWeapon", 300000, false, "i", objectid);
	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, PlayerInfo[playerid][pFaction]);
	RemovePlayerWeapon(playerid, weaponid);



	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s drops their %s on the ground.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid));
	SendClientMessageEx(playerid, COLOR_AQUA, "You have dropped your {00AA00}%s{33CCFF}.", GetWeaponNameEx(weaponid));
	return 1;
}

CMD:grabgun(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be onfoot in order to pickup weapons.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
    if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    if(Streamer_GetExtraInt(i, E_OBJECT_FACTION) >= 0 && PlayerInfo[playerid][pFaction] != Streamer_GetExtraInt(i, E_OBJECT_FACTION))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "This weapon belongs to a specific faction. You may not pick it up.");
	    }

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID);

	    GivePlayerWeaponEx(playerid, weaponid);
	    DestroyDynamicObject(i);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s picks up a %s from the ground.", GetPlayerRPName(playerid), GetWeaponNameEx(weaponid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have picked up a {00AA00}%s{33CCFF}.", GetWeaponNameEx(weaponid));
	    return 1;
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any dropped weapons.");
	return 1;
}

CMD:createland(playerid, params[])
{
	new price;

    if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", price))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createland [price]");
	}
	if(price < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The price can't be below $1.");
	}
	if(GetNearbyLand(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a land in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot create lands indoors.");
	}

	PlayerInfo[playerid][pLandCost] = price;
	PlayerInfo[playerid][pZoneType] = ZONETYPE_LAND;
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Land creation system", "You have entered land creation mode. In order to create a land you need\nto mark four points around the area you want your land to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress {00AA00}Confirm{A9C4E4} to begin land creation.", "Confirm", "Cancel");
	return 1;
}

CMD:confirm(playerid, params[])
{
	new Float:x, Float:y, Float:z;

    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pZoneCreation])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not creating any land or turf at the moment.");
	}

    if(PlayerInfo[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMinX], y, z);
        PlayerInfo[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMinX], y, z, .playerid = playerid);
		SendClientMessage(playerid, COLOR_WHITE, "** Boundary 1/4 set (min X).");
	}
	else if(PlayerInfo[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMinY], z);
        PlayerInfo[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMinY], z, .playerid = playerid);
        SendClientMessage(playerid, COLOR_WHITE, "** Boundary 2/4 set (min Y).");
	}
	else if(PlayerInfo[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, PlayerInfo[playerid][pMaxX], y, z);
        PlayerInfo[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, PlayerInfo[playerid][pMaxX], y, z, .playerid = playerid);
        SendClientMessage(playerid, COLOR_WHITE, "** Boundary 3/4 set (max X).");
	}
	else if(PlayerInfo[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, PlayerInfo[playerid][pMaxY], z);
        SendClientMessage(playerid, COLOR_WHITE, "** Boundary 4/4 set (max Y).");

        PlayerInfo[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, PlayerInfo[playerid][pMaxY], z, .playerid = playerid);
        PlayerInfo[playerid][pZoneID] = GangZoneCreate(PlayerInfo[playerid][pMinX], PlayerInfo[playerid][pMinY], PlayerInfo[playerid][pMaxX], PlayerInfo[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, PlayerInfo[playerid][pZoneID], 0x33CC33FF);

        if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_LAND) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Land creation system", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your land. You can choose to start over or complete\nthe creation of your land.\n\nWhat would you like to do now?", "Create", "Restart");
		} else if(PlayerInfo[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your turf. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		}
	}

	return 1;
}

CMD:landcancel(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_LAND)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not creating a land at the moment.");
	}

	CancelZoneCreation(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gotoland(playerid, params[])
{
	new landid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotoland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removelandobjects(playerid, params[])
{
	new landid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelandobjects [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	RemoveAllLandObjects(landid);
    SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed all land objects for land %i.", landid);
	return 1;
}

CMD:removeland(playerid, params[])
{
	new landid;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", landid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeland [landid]");
	}
	if(!(0 <= landid < MAX_LANDS) || !LandInfo[landid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid land.");
	}

	RemoveAllLandObjects(landid);

	GangZoneDestroy(LandInfo[landid][lGangZone]);
	DestroyDynamicArea(LandInfo[landid][lArea]);
	DestroyDynamic3DTextLabel(LandInfo[landid][lTextdraw]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM lands WHERE id = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LandInfo[landid][lID] = 0;
	LandInfo[landid][lExists] = 0;
	LandInfo[landid][lOwnerID] = 0;
	Iter_Remove(Land, landid);

    SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed land %i.", landid);
	return 1;
}

CMD:buyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands.");
    }
    if(LandInfo[landid][lOwnerID] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "This land is already owned.");
	}
    if(strcmp(params, "confirm", true))
    {
        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /buyland [confirm] (This land costs %s.)", FormatNumber(LandInfo[landid][lPrice]));
	}
	if(PlayerInfo[playerid][pCash] < LandInfo[landid][lPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to purchase this land.");
	}

    SetLandOwner(landid, playerid);
	GivePlayerCash(playerid, -LandInfo[landid][lPrice]);

	SendClientMessageEx(playerid, COLOR_GREEN, "You paid %s for this land! /landhelp to see the available commands for your land.", FormatNumber(LandInfo[landid][lPrice]));
	Log_Write("log_property", "%s (uid: %i) purchased a land (id: %i) in %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], LandInfo[landid][lID], GetPlayerZoneName(playerid), LandInfo[landid][lPrice]);
	return 1;
}

CMD:sellland(playerid, params[])
{
	new landid = GetNearbyLand(playerid), targetid, amount;

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands of yours.");
    }
    if(sscanf(params, "ui", targetid, amount))
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellland [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must specify an amount above zero.");
	}

	PlayerInfo[targetid][pLandOffer] = playerid;
	PlayerInfo[targetid][pLandOffered] = landid;
	PlayerInfo[targetid][pLandPrice] = amount;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s offered you to buy their land for %s. (/accept land)", GetPlayerRPName(playerid), FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You offered %s to buy your land for %s.", GetPlayerRPName(targetid), FormatNumber(amount));
	return 1;
}

CMD:sellmyland(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands of yours.");
    }
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /sellmyland [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command sells your land back to the state. You will receive %s back.", FormatNumber(percent(LandInfo[landid][lPrice], 75)));
	    return 1;
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(LandInfo[landid][lPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your land to the state and received %s back.", FormatNumber(percent(LandInfo[landid][lPrice], 75)));
    Log_Write("log_property", "%s (uid: %i) sold their land (id: %i) to the state for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], LandInfo[landid][lID], percent(LandInfo[landid][lPrice], 75));
	return 1;
}

CMD:landinfo(playerid, params[])
{
    new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands.");
    }

    if(!LandInfo[landid][lOwnerID])
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "** This land is currently not owned and is for sale, price: {00AA00}$%i{FFFFFF}.", LandInfo[landid][lPrice]);
	}
	else if(!IsLandOwner(playerid, landid))
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** This land is owned by %s.", LandInfo[landid][lOwner]);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_INFORMATION, playerid);
	}

	return 1;
}
CMD:landperms(playerid, params[])
{
    new targetid, landid;

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, landid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /landperms [playerid] [landid (-1 to remove)]");
	}
	if(MAX_LANDS > landid > -1)
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has given you temporary access to land #%i's keys.", GetPlayerRPName(playerid), landid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have given temporary %s access to %i.", GetPlayerRPName(targetid), landid);
		PlayerInfo[targetid][pLandPerms] = landid;
	}
	else if(landid == -1)
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has taken away your temporary land keys.", GetPlayerRPName(playerid));
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have taken %s's temporary land access.", GetPlayerRPName(targetid));
		PlayerInfo[targetid][pLandPerms] = -1;
	}
	return 1;
}
CMD:droplandkeys(playerid, params[])
{
    if(PlayerInfo[playerid][pLandPerms] > -1)
    {
        SendClientMessageEx(playerid, COLOR_AQUA, "You have dropped land %i's keys.", PlayerInfo[playerid][pLandPerms]);
        PlayerInfo[playerid][pLandPerms] = -1;
        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET landkeys = -1 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You don't have keys to a land.");
	}
	return 1;
}

CMD:land(playerid, params[])
{
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any lands of yours.");
    }
    if(!HasLandPerms(playerid, landid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You don't have permission to build in this land.");
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	return 1;
}

CMD:mp3(playerid, params[])
{
	if(!PlayerInfo[playerid][pMP3Player])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have an MP3 player.");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in any vehicle.");
	}

	PlayerInfo[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:changename(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 361.235046, 171.199417, 1008.382812))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /changename [new name]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(params))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(PlayerInfo[playerid][pCash] < PlayerInfo[playerid][pLevel] * 7500)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need at least %s to change your name at your level.", FormatNumber(PlayerInfo[playerid][pLevel] * 7500));
	}
	if(PlayerInfo[playerid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't allowed to change your name while on admin duty,");
	}
	if(!isnull(PlayerInfo[playerid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have already requested a namechange. Please wait for a response.");
	}

    PlayerInfo[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}

CMD:acceptname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /acceptname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	/*if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}*/
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested a namechange.");
	}
	if(PlayerInfo[targetid][pFreeNamechange] == 0 && PlayerInfo[targetid][pCash] < PlayerInfo[targetid][pLevel] * 7500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player can't afford the namechange.");
	}

	new cost = PlayerInfo[targetid][pLevel] * 7500;

	if(PlayerInfo[targetid][pFreeNamechange])
	{
	    if(PlayerInfo[targetid][pFreeNamechange] == 2 && (GetFactionType(targetid) == FACTION_HITMAN || GetFactionType(targetid) == FACTION_FEDERAL))
	    {
	        GetPlayerName(targetid, PlayerInfo[targetid][pPassportName], MAX_PLAYER_NAME);

	        PlayerInfo[targetid][pPassport] = 1;
	        PlayerInfo[targetid][pPassportLevel] = PlayerInfo[targetid][pLevel];
	        PlayerInfo[targetid][pPassportSkin] = PlayerInfo[targetid][pSkin];
	        PlayerInfo[targetid][pPassportPhone] = PlayerInfo[targetid][pPhone];
			PlayerInfo[targetid][pLevel] = PlayerInfo[targetid][pChosenLevel];
			PlayerInfo[targetid][pSkin] = PlayerInfo[targetid][pChosenSkin];
			PlayerInfo[targetid][pPhone] = random(100000) + 899999;

			SetPlayerSkin(targetid, PlayerInfo[targetid][pSkin]);
			Log_Write("log_faction", "%s (uid: %i) used the /passport command to change their name to %s, level to %i and skin to %i.", GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pSkin]);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, skin = %i, phone = %i, passport = 1, passportname = '%s', passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pSkin], PlayerInfo[targetid][pPhone], PlayerInfo[targetid][pPassportName], PlayerInfo[targetid][pPassportLevel], PlayerInfo[targetid][pPassportSkin], PlayerInfo[targetid][pPassportPhone], PlayerInfo[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
	    }

		Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's free namechange to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pNameChange]);
		SendClientMessageEx(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for free.", PlayerInfo[targetid][pNameChange]);
		if(!IsPlayerLoggedIn(targetid))
		{
		    #if defined SERVER_INTRO
      			ShowServerIntro(targetid);
			#else
  				ShowDialogToPlayer(targetid, DIALOG_REGISTER);
			#endif
		}
		if(PlayerInfo[targetid][pFreeNamechange] == 2)
		{
		    SendClientMessage(targetid, COLOR_WHITE, "** You can use /passport again to return to your old name and stats.");
		}
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange], cost);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has accepted %s's namechange to %s for %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pNameChange], FormatNumber(cost));
		SendClientMessageEx(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for %s.", PlayerInfo[targetid][pNameChange], FormatNumber(cost));

        GivePlayerCash(targetid, -cost);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_namehistory VALUES(null, %i, '%s', '%s', '%s', NOW())", PlayerInfo[targetid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pNameChange], GetPlayerNameEx(playerid));
	mysql_tquery(connectionID, queryBuffer);

	Namechange(targetid, GetPlayerNameEx(targetid), PlayerInfo[targetid][pNameChange]);
	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}


CMD:denyname(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /denyname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	/*if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}*/
	if(isnull(PlayerInfo[targetid][pNameChange]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't requested a namechange.");
	}

	if(PlayerInfo[targetid][pFreeNamechange] == 1)
	{
	    if(!IsPlayerLoggedIn(targetid))
		{
            SendClientMessage(targetid, COLOR_LIGHTRED, "Please reconnect with a proper roleplay name in the Firstname_Lastname format.");
			KickPlayer(targetid);
			return 1;
		}
	    ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	}

    Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], PlayerInfo[targetid][pNameChange]);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has denied %s's namechange to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), PlayerInfo[targetid][pNameChange]);
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "Your namechange request to %s was denied.", PlayerInfo[targetid][pNameChange]);
	PlayerInfo[targetid][pNameChange] = 0;
	PlayerInfo[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Pending Namechanges ______");

	foreach(new i : Player)
	{
	    if(!isnull(PlayerInfo[i][pNameChange]))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s requested a namechange to %s", i, GetPlayerRPName(i), PlayerInfo[i][pNameChange]);
		}
	}

	return 1;
}

CMD:paytickets(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /paytickets [amount] (There is $%i in unpaid tickets.)", VehicleInfo[vehicleid][vTickets]);
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pCash])
	{
		return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There isn't that much in unpaid tickets to pay.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendClientMessageEx(playerid, COLOR_AQUA, "You have paid %s in unpaid tickets. This vehicle now has %s left in unpaid tickets.", FormatNumber(amount), FormatNumber(VehicleInfo[vehicleid][vTickets]));
	return 1;
}

CMD:carinfo(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside any vehicle of yours.");
	}

	new neon[12], Float:health;

	GetVehicleHealth(vehicleid, health);

	switch(VehicleInfo[vehicleid][vNeon])
	{
	    case 18647: neon = "Red";
		case 18648: neon = "Blue";
		case 18649: neon = "Green";
		case 18650: neon = "Yellow";
		case 18651: neon = "Pink";
		case 18652: neon = "White";
		default: neon = "None";
	}

	SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_______ %s Stats _______", GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_GREY2, "Owner: %s - Value: $%i - Tickets: $%i - License Plate: %s", VehicleInfo[vehicleid][vOwner], GetVehicleValue(vehicleid), VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
	SendClientMessageEx(playerid, COLOR_GREY2, "Neon: %s - Trunk Level: %i/3 - Alarm Level: %i/3 - Health: %.1f - Fuel: %i/100", neon, VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vAlarm], health, vehicleFuel[vehicleid]);
	return 1;
}

CMD:smuggle(playerid, params[])
{
	return callcmd::smuggledrugs(playerid, params);
}

CMD:smuggledrugs(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Drug Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 52.0937, -292.2513, 1.7001))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the smuggle point.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(PlayerInfo[playerid][pCash] < 500)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /smuggledrugs [seeds | cocaine | ephedrine]");
	}
	new amount = 500 / GetJobLevel(playerid, JOB_DRUGDEALER);
	if(!strcmp(params, "seeds", true))
	{
	    if(gSeedsStock + 10 > 1000)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The drug house can't hold anymore seeds. Therefore you can't smuggle them.");
	    }

	    PlayerInfo[playerid][pSmuggleDrugs] = 1;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -amount);
	    AddPointMoney(POINT_DRUGFACTORY, amount);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have paid $%i for a package of {00AA00}marijuana seeds{33CCFF}. Deliver it to the marker.", amount);
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    if(gCocaineStock + 10 > 500)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The crack house can't hold anymore cocaine. Therefore you can't smuggle it.");
	    }

	    PlayerInfo[playerid][pSmuggleDrugs] = 2;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -amount);
	    AddPointMoney(POINT_DRUGFACTORY, amount);

	    SetPlayerCheckpoint(playerid, 2349.7727, -1169.6304, 28.0243, 3.0);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have paid $%i for a package of {00AA00}cocaine{33CCFF}. Deliver it to the marker.", amount);
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    if(gEphedrineStock + 10 > 250)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "The drug house can't hold anymore ephedrine. Therefore you can't smuggle ir.");
	    }

	    PlayerInfo[playerid][pSmuggleDrugs] = 3;
	    PlayerInfo[playerid][pSmuggleTime] = gettime();
	    PlayerInfo[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -amount);
	    AddPointMoney(POINT_DRUGFACTORY, amount);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have paid $5i for a package of {00AA00}raw ephedrine{33CCFF}. Deliver it to the marker.", amount);
	}

	return 1;
}

CMD:buydrug(playerid, params[])
{
	new option[10], amount, cost;

	if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Drug Dealer.");
	}
	if(sscanf(params, "s[10]i", option, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /buydrug [seeds | cocaine | ephedrine] [amount]");
	}

	if(!strcmp(option, "seeds", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 321.8347, 1117.1797, 1083.8828))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't buy less than 1 or more than 10 seeds at a time.");
		}
		if(amount > gSeedsStock)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There aren't that many seeds left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 500))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy that many seeds.");
		}
		if(PlayerInfo[playerid][pSeeds] + amount > GetPlayerCapacity(playerid, CAPACITY_SEEDS))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pSeeds], GetPlayerCapacity(playerid, CAPACITY_SEEDS));
		}

		gSeedsStock -= amount;
		PlayerInfo[playerid][pSeeds] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased %i marijuana seeds for {00AA00}$%i{33CCFF}. /planthelp for more help.", amount, cost);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 323.7289, 1117.4187, 1083.8828))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't buy less than 1 or more than 5 grams at a time.");
		}
		if(amount > gEphedrineStock)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There isn't that much ephedrine left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 1000))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy that many grams.");
		}
		if(PlayerInfo[playerid][pEphedrine] + amount > GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pEphedrine], GetPlayerCapacity(playerid, CAPACITY_EPHEDRINE));
		}

		gEphedrineStock -= amount;
		PlayerInfo[playerid][pEphedrine] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", PlayerInfo[playerid][pEphedrine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased %i grams of raw ephedrine for {00AA00}$%i{33CCFF}.", amount, cost);
	}
	else if(!strcmp(option, "cocaine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2342.7766, -1187.0839, 1027.9766))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of the crack house.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't buy less than 1 or more than 10 grams at a time.");
		}
		if(amount > gCocaineStock)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "There isn't that much cocaine left in stock.");
		}
		if(PlayerInfo[playerid][pCash] < (cost = amount * 750))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy that many grams.");
		}
		if(PlayerInfo[playerid][pCocaine] + amount > GetPlayerCapacity(playerid, CAPACITY_COCAINE))
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i cocaine. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pCocaine], GetPlayerCapacity(playerid, CAPACITY_COCAINE));
		}

		gCocaineStock -= amount;
		PlayerInfo[playerid][pCocaine] += amount;

		GivePlayerCash(playerid, -cost);
        AddPointMoney(POINT_CRACKHOUSE, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "You have purchased %i grams of cocaine for {00AA00}$%i{33CCFF}.", amount, cost);
	}

	return 1;
}

CMD:plantweed(playerid, params[])
{
	if(PlayerInfo[playerid][pWeedPlanted])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You have an active weed plant already.");
	}
	if(PlayerInfo[playerid][pSeeds] < 10)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough seeds. You need at least 10 seeds in order to plant them.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't plant indoors.");
	}

	GetPlayerPos(playerid, PlayerInfo[playerid][pWeedX], PlayerInfo[playerid][pWeedY], PlayerInfo[playerid][pWeedZ]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pWeedA]);

	PlayerInfo[playerid][pSeeds] -= 10;
	PlayerInfo[playerid][pWeedPlanted] = 1;
	PlayerInfo[playerid][pWeedTime] = 60;
	PlayerInfo[playerid][pWeedGrams] = 0;
	PlayerInfo[playerid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[playerid][pWeedX], PlayerInfo[playerid][pWeedY], PlayerInfo[playerid][pWeedZ] - 1.8, 0.0, 0.0, PlayerInfo[playerid][pWeedA]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i, weedplanted = 1, weedtime = %i, weedgrams = %i, weed_x = '%f', weed_y = '%f', weed_z = '%f', weed_a = '%f' WHERE uid = %i", PlayerInfo[playerid][pSeeds], PlayerInfo[playerid][pWeedTime], PlayerInfo[playerid][pWeedGrams], PlayerInfo[playerid][pWeedX], PlayerInfo[playerid][pWeedY], PlayerInfo[playerid][pWeedZ], PlayerInfo[playerid][pWeedA], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s plants some seeds into the ground.", GetPlayerRPName(playerid));
	SendClientMessage(playerid, COLOR_GREEN, "You have planted a weed plant. Every two minutes your plant will grow one gram of weed.");
	SendClientMessage(playerid, COLOR_GREEN, "Your plant will be ready in 60 minutes. Be careful, as anyone who sees your plant can pick it!");
	return 1;
}

CMD:plantinfo(playerid, params[])
{
	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pWeedPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pWeedX], PlayerInfo[i][pWeedY], PlayerInfo[i][pWeedZ]))
	    {
	        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s inspects the plant.", GetPlayerRPName(playerid));
	        SendClientMessageEx(playerid, COLOR_WHITE, "** This plant has so far grown %i grams of weed. It will be ready in %i/60 minutes.", PlayerInfo[i][pWeedGrams], PlayerInfo[i][pWeedTime]);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any plants.");
	return 1;
}

CMD:pickplant(playerid, params[])
{
    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pWeedPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pWeedX], PlayerInfo[i][pWeedY], PlayerInfo[i][pWeedZ]))
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You need to be crouched in order to pick a plant.");
			}
			if(PlayerInfo[i][pWeedGrams] < 2)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "This plant hasn't grown that much yet. Wait a little while first.");
			}
			if(PlayerInfo[playerid][pWeed] + PlayerInfo[i][pWeedGrams] > GetPlayerCapacity(playerid, CAPACITY_WEED))
			{
			    return SendClientMessageEx(playerid, COLOR_GREY, "You currently have %i/%i weed. You can't carry anymore until you upgrade your inventory skill.", PlayerInfo[playerid][pWeed], GetPlayerCapacity(playerid, CAPACITY_WEED));
			}

			PlayerInfo[playerid][pPickPlant] = i;
			PlayerInfo[playerid][pPickTime] = 5;

			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s crouches down and starts picking at the weed plant.", GetPlayerRPName(playerid));
			SendClientMessage(playerid, COLOR_WHITE, "** Allow up to five seconds for you to pick the plant.");
			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any plants.");
	return 1;
}

CMD:seizeplant(playerid, params[])
{
    if(!IsLawEnforcement(playerid))
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

    foreach(new i : Player)
	{
	    if(PlayerInfo[i][pWeedPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, PlayerInfo[i][pWeedX], PlayerInfo[i][pWeedY], PlayerInfo[i][pWeedZ]))
	    {
	        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s seizes a weed plant weighing %i grams.", GetPlayerRPName(playerid), PlayerInfo[i][pWeedGrams]);
	        DestroyWeedPlant(i);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any plants.");
	return 1;
}

CMD:cookmeth(playerid, params[])
{
    if(!PlayerHasJob(playerid, JOB_DRUGDEALER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Drug Dealer.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1.2179, 2.8095, 999.4284))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in Heisenberg's trailer. You can't use this command.");
	}
	if(!PlayerInfo[playerid][pCookMeth])
	{
		if(!PlayerInfo[playerid][pEphedrine])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You don't have any raw ephedrine which you could turn into meth.");
		}
	    if(!PlayerInfo[playerid][pMuriaticAcid])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need muriatic acid in order to cook meth. Go buy some at 24/7.");
		}

		PlayerInfo[playerid][pCookMeth] = 1;
		PlayerInfo[playerid][pCookTime] = 15;
		PlayerInfo[playerid][pCookGrams] = 0;

		SendClientMessage(playerid, COLOR_GREEN, "You have started cooking meth. One gram of ephedrine will turn into 2 grams of meth every 15 seconds.");
	    SendClientMessage(playerid, COLOR_GREEN, "Type the /cookmeth command again in order to stop cooking.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have stopped cooking. You converted %i grams of ephedrine into %i grams of meth.", PlayerInfo[playerid][pCookGrams] / 2, PlayerInfo[playerid][pCookGrams]);
	    ResetCooking(playerid);
	}
	return 1;
}

CMD:usecigar(playerid, params[])
{
	if(!PlayerInfo[playerid][pCigars])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any cigars left.");
	}

	PlayerInfo[playerid][pCigars]--;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lights up a cigar and starts to smoke it.", GetPlayerRPName(playerid));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", PlayerInfo[playerid][pCigars], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:usedrug(playerid, params[])
{
    if(gettime() - PlayerInfo[playerid][pLastDrug] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only consume drugs every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastDrug]));
	}
	if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are stoned and therefore can't consume anymore drugs right now.");
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(PlayerInfo[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /usedrug [weed | cocaine | meth | painkillers]");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to use drugs. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}

	if(!strcmp(params, "weed", true))
	{
	    if(PlayerInfo[playerid][pWeed] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least two grams of weed.");
		}

        if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 20.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pWeed] -= 2;
		PlayerInfo[playerid][pDrugsUsed]++;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s smokes two grams of weed.", GetPlayerRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = %i WHERE uid = %i", PlayerInfo[playerid][pWeed], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "cocaine", true))
	{
	    if(PlayerInfo[playerid][pCocaine] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least two grams of cocaine.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra armor.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerArmour(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pCocaine] -= 2;
		PlayerInfo[playerid][pDrugsUsed]++;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s snorts two grams of cocaine.", GetPlayerRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = %i WHERE uid = %i", PlayerInfo[playerid][pCocaine], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "meth", true))
	{
	    if(PlayerInfo[playerid][pMeth] < 2)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You need at least two grams of meth.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f/%.1f extra health & armor.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0), (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 10.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pMeth] -= 2;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s smokes two grams of meth.", GetPlayerRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", PlayerInfo[playerid][pMeth], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(PlayerInfo[playerid][pPainkillers] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You don't have any painkillers left.");
		}

		if(PlayerInfo[playerid][pAddictUpgrade] > 0)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW3, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", PlayerInfo[playerid][pAddictUpgrade], (PlayerInfo[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 30.0 + (PlayerInfo[playerid][pAddictUpgrade] * 5.0));

		PlayerInfo[playerid][pPainkillers] -= 1;
		PlayerInfo[playerid][pReceivingAid] = 1;
		PlayerInfo[playerid][pDrugsUsed] += 2;
		PlayerInfo[playerid][pLastDrug] = gettime();

		if(PlayerInfo[playerid][pDrugsUsed] >= 4)
	    {
	        AwardAchievement(playerid, "High times");
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
	        PlayerInfo[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s pops a painkiller in their mouth.", GetPlayerRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", PlayerInfo[playerid][pPainkillers], PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:showid(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}

	SendClientMessage(targetid, COLOR_NAVYBLUE, "______ ID Card ______");
	SendClientMessageEx(targetid, COLOR_GREY1, "Name: %s", GetPlayerRPName(playerid));
	SendClientMessageEx(targetid, COLOR_GREY1, "Gender: %s", (PlayerInfo[playerid][pGender] == 2) ? ("Female") : ("Male"));
	SendClientMessageEx(targetid, COLOR_GREY1, "Age: %i years old", PlayerInfo[playerid][pAge]);
	SendClientMessageEx(targetid, COLOR_GREY1, "Drivers License: %s", (PlayerInfo[playerid][pCarLicense]) ? ("{00AA00}Yes") : ("{FF6347}No"));
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s shows their ID card to %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:inv(playerid, params[])
{
	return callcmd::inventory(playerid, params);
}

CMD:inventory(playerid, params[])
{
	DisplayInventory(playerid);
	return 1;
}

CMD:drop(playerid, params[])
{
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drop [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Weapons, Materials, Weed, Cocaine, Meth, Painkillers, Cigars, Spraycans");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Seeds, Ephedrine, CarLicense");
	    return 1;
	}
	if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drop [weapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their weapons.", GetPlayerRPName(playerid));
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!PlayerInfo[playerid][pMaterials])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no materials which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [materials] [confirm] (You have %i materials.)", PlayerInfo[playerid][pMaterials]);
	    }

	    PlayerInfo[playerid][pMaterials] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their materials.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weed", true))
	{
	    if(!PlayerInfo[playerid][pWeed])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no weed which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [weed] [confirm] (You have %i grams of weed.)", PlayerInfo[playerid][pWeed]);
	    }

	    PlayerInfo[playerid][pWeed] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their weed.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weed = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cocaine", true))
	{
	    if(!PlayerInfo[playerid][pCocaine])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no cocaine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [cocaine] [confirm] (You have %i grams of cocaine.)", PlayerInfo[playerid][pCocaine]);
	    }

	    PlayerInfo[playerid][pCocaine] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their cocaine.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cocaine = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!PlayerInfo[playerid][pMeth])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no meth which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [meth] [confirm] (You have %i grams of meth.)", PlayerInfo[playerid][pMeth]);
	    }

	    PlayerInfo[playerid][pMeth] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their meth.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!PlayerInfo[playerid][pPainkillers])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no painkillers which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [cocaine] [confirm] (You have %i painkillers.)", PlayerInfo[playerid][pPainkillers]);
	    }

	    PlayerInfo[playerid][pPainkillers] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their painkillers.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!PlayerInfo[playerid][pCigars])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no cigars which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [cigars] [confirm] (You have %i cigars.)", PlayerInfo[playerid][pCigars]);
	    }

	    PlayerInfo[playerid][pCigars] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their cigars.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!PlayerInfo[playerid][pSpraycans])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no spraycans which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [spraycans] [confirm] (You have %i spraycans.)", PlayerInfo[playerid][pSpraycans]);
	    }

	    PlayerInfo[playerid][pSpraycans] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their spraycanss.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!PlayerInfo[playerid][pSeeds])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no seeds which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [seeds] [confirm] (You have %i seeds.)", PlayerInfo[playerid][pSeeds]);
	    }

	    PlayerInfo[playerid][pSeeds] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their seeds.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!PlayerInfo[playerid][pEphedrine])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no ephedrine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /drop [ephedrine] [confirm] (You have %i grams of ephedrine.)", PlayerInfo[playerid][pEphedrine]);
	    }

	    PlayerInfo[playerid][pEphedrine] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s throws away their ephedrine.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!PlayerInfo[playerid][pCarLicense])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You have no drivers license which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /drop [carlicense] [confirm] (This drops your drivers license.)");
	    }

	    PlayerInfo[playerid][pCarLicense] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s rips up their drivers license.", GetPlayerRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

CMD:creategang(playerid, params[])
{
	new name[32];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /creategang [name]");
	}

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has setup gang {F7A763}%s{FF6347} in slot ID %i.", GetPlayerRPName(playerid), name, i);
	        SendClientMessageEx(playerid, COLOR_WHITE, "** This gang's ID is %i. /editgang to edit.", i);
	        return 1;
		}
	}

    SendClientMessage(playerid, COLOR_GREY, "Gang slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editgang(playerid, params[])
{
	new gangid, option[14], param[128];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, MOTD, Leader, Level, Color, Points, TurfTokens, RankName, Skin, Strikes");
		return 1;
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [name] [text]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET name = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the name of gang ID %i to '%s'.", GetPlayerRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [motd] [text]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has adjusted the MOTD of gang ID %i.", GetPlayerRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [leader] [name]");
	        SendClientMessage(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /gangs. Use /switchgang to appoint someone as gang leader.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the leader of gang ID %i to %s.", GetPlayerRPName(playerid), gangid, leader);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [level] [value (1-3)]");
		}
		if(!(1 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid level.");
		}

		GangInfo[gangid][gLevel] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = %i WHERE id = %i", GangInfo[gangid][gLevel], gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the level of gang ID %i to %i/3.", GetPlayerRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

  		foreach(new i : Turf)
		{
		    if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		    {
		        ReloadTurf(i);
			}
		}

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of gang ID %i.", GetPlayerRPName(playerid), color >>> 8, gangid);
	}
	else if(!strcmp(option, "points", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [points] [value]");
		}

		GangInfo[gangid][gPoints] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the gang points of gang ID %i to %i.", GetPlayerRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [turftokens] [value]");
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the turf tokens of gang ID %i to %i.", GetPlayerRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Rank Names ______");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set rank %i's name of gang ID %i to '%s'.", GetPlayerRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Gang Skins ______");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [strikes] [amount]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount must range from 0 to 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the strikes of gang ID %i to %i.", GetPlayerRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the alliance of gang ID %i.", GetPlayerRPName(playerid), gangid);
		}
		else
		{
		    if(!(0 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the alliance of gang ID %i to gang %i.", GetPlayerRPName(playerid), gangid, allyid);
		}
	}else if(!strcmp(option, "war", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editgang [gangid] [war] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gWar] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = -1 WHERE id = %i", GangInfo[gangid][gWar]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gWar]][gWar] = -1;
			}

			GangInfo[gangid][gWar] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the alliance of gang ID %i.", GetPlayerRPName(playerid), gangid);
		}
		else
		{
		    if(!(0 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		    }

			GangInfo[gangid][gWar] = allyid;
			GangInfo[allyid][gWar] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the war of gang ID %i to gang %i.", GetPlayerRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}
CMD:settitle(playerid, params[])
{
	new targetid, option[14], param[128];
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[128]", targetid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settitle [playerid] [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, Color");
		return 1;
	}
	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settitle [playerid] [name] [text ('none' to reset)]");
		}

		strcpy(PlayerInfo[targetid][pCustomTitle], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customtitle = '%e' WHERE uid = %i", param, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the customtitle of %s to '%s'.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), param);
	}
    else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /settitle [playerid] [color] [0xRRGGBBAA]");
		}

		PlayerInfo[targetid][pCustomTColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i WHERE uid = %i", PlayerInfo[targetid][pCustomTColor], PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the {%06x}color{FF6347} of %s's title.", GetPlayerRPName(playerid), color >>> 8, GetPlayerRPName(targetid));
	}
	return 1;
}
CMD:removegang(playerid, params[])
{
	new gangid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", gangid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removegang [gangid]");
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has deleted gang %s.", GetPlayerRPName(playerid), GangInfo[gangid][gName]);
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have permanently deleted the {F7A763}%s{FF6347} gang slot.", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	Log_Write("log_gang", "%s (uid: %i) has removed gang %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	return 1;
}

CMD:gangstrike(playerid, params[])
{
	new gangid, reason[128], color;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gangstrike [gangid] [reason]");
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This gang already has 3 strikes.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);
	Log_Write("log_gang", "%s (uid: %i) has striked gang %s (id: %i).", GetPlayerRPName(playerid), PlayerInfo[playerid][pID], GangInfo[gangid][gName], gangid);
	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	switch(GangInfo[gangid][gStrikes])
	{
		case 1: SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has received their 1st strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
		case 2: SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has received their 2nd strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
		case 3: SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has received their 3rd strike, reason: %s ))", color >>> 8, GangInfo[gangid][gName], reason);
	}

	return 1;
}

CMD:switchgang(playerid, params[])
{
	new targetid, gangid, rankid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /switchgang[playerid] [gangid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 6)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
	}

	if(gangid == -1)
	{
	    PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;
		PlayerInfo[targetid][pCrew] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has removed you from your gang.", GetPlayerRPName(playerid));
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s from their gang.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 6;
		}

	    /*if(rankid == 6)
	    {
	        GetPlayerName(targetid, GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", GangInfo[gangid][gLeader], gangid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		PlayerInfo[targetid][pGang] = gangid;
		PlayerInfo[targetid][pGangRank] = rankid;
		PlayerInfo[targetid][pCrew] = -1;

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has made you a {00AA00}%s{33CCFF} in %s.", GetPlayerRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has made %s a %s in %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = %i, crew = -1 WHERE uid = %i", gangid, rankid, PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:families(playerid, params[])
{
	return callcmd::gangs(playerid, params);
}

CMD:gangs(playerid, params[])
{
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SendClientMessage(playerid, COLOR_NAVYBLUE, "___________________ Gangs ___________________");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		return 1;
	}
	if(!(0 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1 && GangInfo[gangid][gWar] != -1)
		SendClientMessageEx(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - Alliance: %s - War: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName], GangInfo[GangInfo[gangid][gWar]][gName]);
	else if(GangInfo[gangid][gWar] != -1)
		SendClientMessageEx(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - War: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gWar]][gName]);
	else if(GangInfo[gangid][gAlliance] != -1)
	    SendClientMessageEx(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - Alliance: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Members Online _____");

	foreach(new i : Player)
	{
	    if(PlayerInfo[i][pLogged] && PlayerInfo[i][pGang] == gangid)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(%i) %s %s", PlayerInfo[i][pGangRank], GangRanks[gangid][PlayerInfo[i][pGangRank]], GetPlayerRPName(i));
		}
	}

	return 1;
}

CMD:points(playerid, params[])
{
	new name[32], color = -1, pointid;

	if(sscanf(params, "i", pointid))
	{
	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		for(new i = 0; i < MAX_POINTS; i ++)
		{
		    if(PointInfo[i][pExists])
		    {
		        if(PointInfo[i][pCapturedGang] == -1) {
		            name = "None";
		        } else {
		            strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName]);
		        }

		        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Name: %s | Owner: %s | Captured by: %s | Profits: %s | Time: %ih", i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], FormatNumber(PointInfo[i][pProfits]), PointInfo[i][pTime]);
			}
		}

		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /points [pointid]");
		return 1;
	}
    if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

	if(PointInfo[pointid][pCapturedGang] >= 0)
	{
    	strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
    	color = GangInfo[PointInfo[pointid][pCapturedGang]][gColor];
	}
	else
	{
	    name = "None";
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s ($%i) _____", PointInfo[pointid][pName], PointInfo[pointid][pProfits]);
    SendClientMessageEx(playerid, COLOR_WHITE, "** This point captured by %s for {%06x}%s{FFFFFF} will be available in %i hours.", PointInfo[pointid][pCapturedBy], color >>> 8, name, PointInfo[pointid][pTime]);

    if(PointInfo[pointid][pCapturer] != INVALID_PLAYER_ID)
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "** This point is being captured by %s and will be theirs in %i minutes.", GetPlayerRPName(PointInfo[pointid][pCapturer]), PointInfo[pointid][pCaptureTime]);
	}

	return 1;
}

CMD:lands(playerid, params[])
{
	if(!PlayerInfo[playerid][pShowLands])
	{
        ShowLandsOnMap(playerid, true);
        SendClientMessage(playerid, COLOR_AQUA, "You will now see lands on your mini-map.");
	}
	else
	{
        ShowLandsOnMap(playerid, false);
        SendClientMessage(playerid, COLOR_AQUA, "You will no longer see any lands on your mini-map.");
	}

	return 1;
}

CMD:f(playerid, params[])
{
    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /f [gang chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the gang chat as you have it toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot speak in /r while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
		new crew[32];
		if(PlayerInfo[playerid][pCrew] >= 0)
		{
			crew = GangCrews[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pCrew]];
		}
		else
		{
		    crew = "None";
		}
		if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_AQUA, "** [%i] %s (%s) %s: %.*s... **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], crew, GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_AQUA, "** [%i] %s (%s) %s: ...%s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], crew, GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_AQUA, "** [%i] %s (%s) %s: %s **", PlayerInfo[playerid][pGangRank], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], crew, GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:ally(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /ally [Alliance chat]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "Your gang isn't a part of an alliance.");
	}
    if(PlayerInfo[playerid][pToggleGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot speak in /ally while dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerInfo[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang] || PlayerInfo[i][pGang] == GangInfo[gangid][gAlliance])  && !PlayerInfo[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendClientMessageEx(i, COLOR_GREEN, "** [Alliance] %s %s: %.*s... **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendClientMessageEx(i, COLOR_GREEN, "** [Alliance] %s %s: ...%s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SendClientMessageEx(i, COLOR_GREEN, "** [Alliance] %s %s: %s **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), params);
			}
		}
	}

	return 1;
}


CMD:gang(playerid, params[])
{
	new targetid, option[16], param[128];

	if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: MOTD, Safe, Stats, Turfs, Rankname, NPC, Upgrade, War, Alliance");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [invite] [playerid]");
		}
		if(GangInfo[PlayerInfo[playerid][pGang]][gInvCooldown] > 0 && gacooldown)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Your gang is currently on a invite cooldown. Please wait %i minutes before the next invite.", GangInfo[PlayerInfo[playerid][pGang]][gInvCooldown]);
		}
		if(GangClaimingTurfs(PlayerInfo[playerid][pGang]) || GangCapturingPoints(PlayerInfo[playerid][pGang]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not use invite if your gang is attending a turf or point.");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is already apart of a gang.");
		}

		if(GetFactionType(targetid) == FACTION_POLICE || GetFactionType(targetid) == FACTION_MEDIC || GetFactionType(targetid) == FACTION_GOVERNMENT || GetFactionType(targetid) == FACTION_ARMY)
  		{
  		    return SendClientMessage(playerid, COLOR_GREY, "You cannot invite members that are in LSFMD, GOV, ARMY, or LSPD.");
  		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}
	else if(!strcmp(option, "kick", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}

		Log_Write("log_gang", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[targetid][pGang]][PlayerInfo[targetid][pGangRank]], PlayerInfo[targetid][pGangRank]);

		PlayerInfo[targetid][pGang] = -1;
		PlayerInfo[targetid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has kicked you from the gang.", GetPlayerRPName(playerid));
		SendClientMessageEx(playerid, COLOR_AQUA, "You have kicked %s from your gang.", GetPlayerRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /gang [rank] [playerid] [rankid (0-6)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > PlayerInfo[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The rank specified is either invalid or higher than your rank.");
		}
		if(PlayerInfo[targetid][pGang] != PlayerInfo[playerid][pGang])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player is not apart of your gang.");
		}
		if(PlayerInfo[targetid][pGangRank] > PlayerInfo[playerid][pGangRank])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player has a higher rank than you.");
		}

		PlayerInfo[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangrank = %i WHERE uid = %i", rankid, PlayerInfo[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(targetid, COLOR_AQUA, "%s has set your rank to {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(playerid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set %s's rank to {00AA00}%s{33CCFF} (%i).", GetPlayerRPName(targetid), GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
		Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetPlayerNameEx(targetid), PlayerInfo[targetid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "safe", true))
	{
		if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [safe] [confirm] (Moves the gang safe.)");
		}

		GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]);
		GangInfo[PlayerInfo[playerid][pGang]][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[PlayerInfo[playerid][pGang]][gStashWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ], GangInfo[PlayerInfo[playerid][pGang]][gStashInterior], GangInfo[PlayerInfo[playerid][pGang]][gStashWorld], PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have moved the gang safe to your location. /(f)amily(safe) to access your stash.");
	}
	else if(!strcmp(option, "turfs", true))
	{
		new perk[32];

	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

  		foreach(new i : Turf)
		{
		    if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == PlayerInfo[playerid][pGang])
		    {
		        switch(TurfInfo[i][tType])
				{
				    case 0: perk = "Normal";
				    case 1: perk = "Materials";
			     	case 2: perk = "Low class weapons";
				    case 3: perk = "Medium class weapons";
				    case 4: perk = "High class weapons";
				    case 5: perk = "Traphouse";
				    case 6: perk = "Crackhouse";
				    case 7: perk = "Sales tax";
				    case 8: perk = "Locked turf";
				}

		        SendClientMessageEx(playerid, COLOR_GREY2, "ID: %i | Name: %s | Captured by: %s | Perk: %s | Time left: %ih", i, TurfInfo[i][tName], TurfInfo[i][tCapturedBy], perk, TurfInfo[i][tTime]);
			}
		}
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM users WHERE gang = %i ORDER BY gangrank DESC", PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembers(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [quit] [confirm]");
	    }


	    SendClientMessageEx(playerid, COLOR_AQUA, "You have quit %s as a {00AA00}%s{33CCFF} (%i).", GangInfo[PlayerInfo[playerid][pGang]][gName], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);
		Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GangInfo[PlayerInfo[playerid][pGang]][gName], PlayerInfo[playerid][pGang], GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], PlayerInfo[playerid][pGangRank]);

	    PlayerInfo[playerid][pGang] = -1;
		PlayerInfo[playerid][pGangRank] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", PlayerInfo[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(PlayerInfo[playerid][pGangRank] < 5)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. Use '/gang kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
	    if(isnull(param))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [motd] [text]");
	        SendClientMessageEx(playerid, COLOR_SYNTAX, "Current MOTD: %s", GangInfo[PlayerInfo[playerid][pGang]][gMOTD]);
	        return 1;
		}

		strcpy(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, PlayerInfo[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(PlayerInfo[playerid][pGang]);
		SendClientMessage(playerid, COLOR_AQUA, "You have changed the MOTD for your gang.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Rank Names ______");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[PlayerInfo[playerid][pGang]][i]))
	            	SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SendClientMessageEx(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[PlayerInfo[playerid][pGang]][i]);
	        }

	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Invalid rank.");
		}

	    strcpy(GangRanks[PlayerInfo[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", PlayerInfo[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SendClientMessageEx(playerid, COLOR_AQUA, "You have set the name of rank %i to {00AA00}%s{33CCFF}.", rankid, rank);
	}
    else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [npc] [slot] [confirm]");
		    SendClientMessage(playerid, COLOR_SYNTAX, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gArmsDealer])
				{
		    		return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have the arms dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ]);
				SetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gArmsA]);
		        GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gArmsX], GangInfo[PlayerInfo[playerid][pGang]][gArmsY], GangInfo[PlayerInfo[playerid][pGang]][gArmsZ], GangInfo[PlayerInfo[playerid][pGang]][gArmsA], GangInfo[PlayerInfo[playerid][pGang]][gArmsWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SendClientMessage(playerid, COLOR_AQUA, "You have moved the position of the arms dealer for your gang.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[PlayerInfo[playerid][pGang]][gDrugDealer])
				{
		    		return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have the drug dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ]);
				SetPlayerPos(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugX] + 1.0, GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[PlayerInfo[playerid][pGang]][gDrugA]);
		        GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[PlayerInfo[playerid][pGang]][gDrugX], GangInfo[PlayerInfo[playerid][pGang]][gDrugY], GangInfo[PlayerInfo[playerid][pGang]][gDrugZ], GangInfo[PlayerInfo[playerid][pGang]][gDrugA], GangInfo[PlayerInfo[playerid][pGang]][gDrugWorld], PlayerInfo[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(PlayerInfo[playerid][pGang]);
		        SendClientMessage(playerid, COLOR_AQUA, "You have moved the position of the drug dealer for your gang.");
			}
		}
	}
	else if(!strcmp(option, "upgrade", true))
	{
	    if(PlayerInfo[playerid][pGangRank] < 6)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDescription\tCost";

		strcat(string, "\nDrug dealer\tAn NPC which sells individually stocked drugs\t{F7A763}500 GP {FFFFFF}+{00AA00} $50,000");
		strcat(string, "\nArms dealer\tAn NPC which sells individually stocked weapons\t{F7A763}500 GP {FFFFFF}+{00AA00} $50,000");
		strcat(string, "\nDuel arena\tAn OOC 1v1 duel arena for your gang.\t{F7A763}400 GP {FFFFFF}+{00AA00} $75,000");
	    strcat(string, "\nMapping\tUp to 50 mapped objects for your gang.\t{F7A763}4500 GP {FFFFFF}+{00AA00} $100,000");
	    strcat(string, "\nInterior\tCustom interior exclusively for your gang.\t{F7A763}5000 GP {FFFFFF}+{00AA00} $100,000");
		
		if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 2/3.\t{F7A763}6000 GP {FFFFFF}+{00AA00} $75,000");
		}
		else if(GangInfo[PlayerInfo[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 3/3.\t{F7A763}12000 GP {FFFFFF}+{00AA00} $100,000");
		}

		format(title, sizeof(title), "Gang upgrades (Your gang has %i GP.)", GangInfo[PlayerInfo[playerid][pGang]][gPoints]);
		ShowPlayerDialog(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Select", "Cancel");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = PlayerInfo[playerid][pGang];

		if(PlayerInfo[playerid][pGangRank] < 6)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You're already in an alliance, end it first! (/endalliance)");
	  	}
	  	if(PlayerInfo[targetid][pGangRank] < 6)
	  	{
			return SendClientMessage(playerid, COLOR_GREY, "The player you're offering to ally with must be R6 in their gang!");
	  	}
        if(PlayerInfo[targetid][pGang] == gangid)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You cannot form an alliance with your own gang!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You've offered to form a gang alliance with %s.", GetPlayerRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s has offered to form an alliance with your gang. (/accept alliance)", GetPlayerRPName(playerid));
			PlayerInfo[targetid][pAllianceOffer] = playerid;
		}
	}
	else if(!strcmp(option, "war", true)){

		new gangid = PlayerInfo[playerid][pGang];

		if(PlayerInfo[playerid][pGangRank] < 6)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 6+ to use this command.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gang [war] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gWar] >= 0)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You're already in a war, end it first! (/endwar)");
	  	}
	  	if(PlayerInfo[targetid][pGangRank] < 6)
	  	{
			return SendClientMessage(playerid, COLOR_GREY, "The player you're offering to war with must be R6 in their gang!");
	  	}
        if(PlayerInfo[targetid][pGang] == gangid)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You cannot form a war with your own gang!");
		}

		if(GangInfo[gangid][gWar] == -1)
		{
			SendClientMessageEx(playerid, COLOR_AQUA, "You've offered to form a gang war with %s.", GetPlayerRPName(targetid));
			SendClientMessageEx(targetid, COLOR_AQUA, "%s has offered to form an war with your gang. (/accept war)", GetPlayerRPName(playerid));
			PlayerInfo[targetid][pWarOffer] = playerid;
		}
	}
	else
		SendClientMessage(playerid, COLOR_GREY, "Invalid option");

	return 1;
}

CMD:fsafe(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}
	if(PlayerInfo[playerid][pFaction] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while in a faction.");
	}
    if(!(IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[PlayerInfo[playerid][pGang]][gStashX], GangInfo[PlayerInfo[playerid][pGang]][gStashY], GangInfo[PlayerInfo[playerid][pGang]][gStashZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[PlayerInfo[playerid][pGang]][gStashWorld]))
    {
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of your gang stash.");
	}
    if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to open the stash. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}
	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}

CMD:familysafe(playerid, params[]){
	callcmd::fsafe(playerid, params);
	return 1;
}

CMD:bandana(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}
    if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to takeoff your bandana. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}
	if(!PlayerInfo[playerid][pBandana])
	{
		if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your bandana on while in a event or paintball match.");
		}
	    PlayerInfo[playerid][pBandana] = 1;

	    SendClientMessage(playerid, COLOR_AQUA, "You have enabled your bandana. Your nametag color has been set to your gang color.");
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a bandana and wraps it around their head.", GetPlayerRPName(playerid));
	    SetPlayerColor(playerid, GangInfo[PlayerInfo[playerid][pGang]][gColor] & ~0xff);
	}
	else
	{
	    PlayerInfo[playerid][pBandana] = 0;

	    SendClientMessage(playerid, COLOR_AQUA, "You have disabled your bandana. Your nametag color was reset back to normal.");
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes off their bandana from around their head.", GetPlayerRPName(playerid));
	    SetPlayerColor(playerid, 0xFFFFFF00);
	}

	return 1;
}

CMD:gbuyvehicle(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(GetGangVehicles(PlayerInfo[playerid][pGang]) >= GetGangVehicleLimit(PlayerInfo[playerid][pGang]))
    {
        return SendClientMessageEx(playerid, COLOR_GREY, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(PlayerInfo[playerid][pGang]));
    }

	PlayerInfo[playerid][pGangCar] = 1;

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 542.0433, -1293.5909, 17.2422))
	{
		ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLE);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYBOAT);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
	{
	    ShowDialogToPlayer(playerid, DIALOG_BUYAIRCRAFT);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not in range of any dealership.");
	}

	return 1;
}

CMD:gpark(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't park this vehicle as it doesn't belong to your gang.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SendClientMessage(playerid, COLOR_AQUA, "** Gang vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid, false);

	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid, params[])
{
	new string[512], count;

    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of a gang at the moment.");
	}

	string = "#\tModel\tLocation";

	foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your gang has no vehicles which you can track.");
	}

	ShowPlayerDialog(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Cancel");
	return 1;
}

CMD:grespawncars(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}

    foreach(new i: Vehicle)
	{
	    if(VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == PlayerInfo[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] has respawned their gang vehicles.", GetPlayerRPName(playerid), playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "You have respawned all of your unoccupied gang vehicles.");
	return 1;
}

CMD:gsellcar(playerid, params[])
{
  	new vehicleid = GetPlayerVehicleID(playerid);

	if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't sell this vehicle as it doesn't belong to your gang.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 542.0433, -1293.5909, 17.2422))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the Grotti car dealership.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gsellcar [confirm]");
	    SendClientMessageEx(playerid, COLOR_SYNTAX, "This command permanently deletes your gang vehicle. You will receive %s back.", FormatNumber(percent(VehicleInfo[vehicleid][vPrice], 75)));
	    return 1;
	}

	GivePlayerCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 75));

	SendClientMessageEx(playerid, COLOR_GREEN, "You have sold your %s to the dealership and received %s back.", GetVehicleName(vehicleid), FormatNumber(percent(VehicleInfo[vehicleid][vPrice], 75)));
    Log_Write("log_gang", "%s (uid: %i) sold their gang owned %s (id: %i) to the dealership for $%i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 75));

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:createpoint(playerid, params[])
{
    new type, name[32];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createpoint [type] [name]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
	    return 1;
	}
	if(!(0 <= type <= 9))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "No-one", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 20;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, '%e', %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has created point {F7A763}%s{FF6347}.", GetPlayerRPName(playerid), name);
	        SendClientMessageEx(playerid, COLOR_AQUA, "You have created point {F7A763}%s{33CCFF}. /editpoint %i to edit this point.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid, params[])
{
	new pointid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [option]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [name] [text]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = '%e' WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the name of point %i to %s.", GetPlayerRPName(playerid), pointid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the name of point %i to {F7A763}%s{33CCFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has moved the location of point %i.", GetPlayerRPName(playerid), pointid);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have moved the location of point %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%e' WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of point %i to %s.", GetPlayerRPName(playerid), pointid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturer of point %i to {F7A763}%s{33CCFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		PointInfo[pointid][pCapturedGang] = gangid;
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedGang], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of point %i.", GetPlayerRPName(playerid), pointid);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have reset the capturing gang of point %i.", pointid);
		}
		else
		{
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of point %i to %s.", GetPlayerRPName(playerid), pointid, GangInfo[gangid][gName]);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturing gang of point %i to {00AA00}%s{33CCFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [type] [value]");
           	SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the type of point %i to %i.", GetPlayerRPName(playerid), pointid, type);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the type of point %i to %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the profits of point %i to $%i.", GetPlayerRPName(playerid), pointid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the profits of point %i to $%i.", pointid, value);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount of hours must range from 0 to 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SendClientMessageToAllEx(COLOR_YELLOW, "Point wars: %s is now available to capture.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the time of point %i to %i hours.", GetPlayerRPName(playerid), pointid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the time of point %i to %i hours.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid, params[])
{
	new pointid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid point.");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has deleted point %s.", GetPlayerRPName(playerid), PointInfo[pointid][pName]);
	SendClientMessageEx(playerid, COLOR_AQUA, "You have deleted point {F7A763}%s{33CCFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

CMD:capture(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in any gang at the moment.");
	}
	if(PlayerInfo[playerid][pCapturingPoint] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already attempting to capture the point.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't capture a point while injured.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}
    if(GangCapturingPoints(PlayerInfo[playerid][pGang]) >= MaxCapCount[1])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're gang is already capturing %i points.", MaxCapCount[1]);
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SendClientMessage(playerid, COLOR_GREY, "This point is not available to capture yet.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "This point is already being captured by you.");
		    }
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PlayerInfo[PointInfo[i][pCapturer]][pGang] == PlayerInfo[playerid][pGang])
		    {
		        return SendClientMessage(playerid, COLOR_GREY, "This point is already being captured by your gang.");
			}

		    foreach(new x : Player)
		    {
		        if(PlayerInfo[x][pCapturingPoint] == i && PlayerInfo[x][pCaptureTime] > 0)
		        {
		            return SendClientMessage(playerid, COLOR_GREY, "Someone else is already attempting to capture. Please wait until they're done.");
				}
			}

		    PlayerInfo[playerid][pCapturingPoint] = i;
		    PlayerInfo[playerid][pCaptureTime] = 10;

			GetPlayerPos(playerid, PlayerInfo[playerid][pPointX], PlayerInfo[playerid][pPointY], PlayerInfo[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_RED, "(( %s is attempting to capture %s. ))", GetPlayerRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any points.");
	return 1;
}

CMD:claim(playerid, params[])
{
	new turfid, count;

    if((PlayerInfo[playerid][pGang] == -1 || PlayerInfo[playerid][pGangRank] < 5) && !IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not rank 5+ in a gang or apart of law enforcement.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any turfs which you can claim.");
	}
	if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't claim a turf while injured.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is not yet available to claim.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This is a locked turf and therefore cannot be claimed.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is already being captured by you.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(PlayerInfo[playerid][pGang]) >= MaxCapCount[0])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're gang is already claiming %i turfs.", MaxCapCount[0]);
	}
	if(!IsLawEnforcement(playerid) && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] == PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is already being claimed by your gang.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be onfoot in order to use this command.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't claim a turf inside an interior.");
	}

	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerInfo[i][pInjured] && !PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pAcceptedHelp] && !PlayerInfo[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerInfo[i][pGang] == PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] && PlayerInfo[i][pGang] != GangInfo[PlayerInfo[playerid][pGang]][gAlliance])
			    {
					return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	if(PlayerInfo[playerid][pGang] >= 0)
	{
	    if(GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your gang doesn't have any turf tokens left.");
		}

	    foreach(new i : Player)
	    {
	        if(GetNearbyTurf(i) == turfid && PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
	        {
	            count++;
			}
		}

		if(count < 3)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You need at least 3 members of your gang in this turf to claim it.");
		}
		else
		{
			GangInfo[PlayerInfo[playerid][pGang]][gTurfTokens]--;
			SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s has attempted to claim %s for %s. It will be their turf in 10 minutes!", GetPlayerRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerInfo[playerid][pGang]][gName]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] == -1)
	{
	    if(FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Your faction doesn't have any turf tokens left.");
		}

	    FactionInfo[PlayerInfo[playerid][pFaction]][fTurfTokens]--;
	    SendClientMessageToAllEx(COLOR_YELLOW, "Turf wars: %s has attempted to claim back %s. It will be their turf in 10 minutes!", GetPlayerRPName(playerid), TurfInfo[turfid][tName]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens - 1 WHERE id = %i", PlayerInfo[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 10;
	ReloadTurf(turfid);

	return 1;
}

CMD:reclaim(playerid, params[])
{
	new turfid;

    if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any turfs.");
	}
	if(IsLawEnforcement(playerid) && PlayerInfo[playerid][pGang] >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't reclaim a turf while injured.");
	}
	if(TurfInfo[turfid][tCapturedGang] != PlayerInfo[playerid][pGang])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf does not belong to your gang. Therefore you can't reclaim it.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This is a locked turf and therefore cannot be claimed.");
	}
	if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This turf is not being claimed by anyone. Therefore you can't reclaim it.");
	}

 	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !PlayerInfo[i][pInjured] && !PlayerInfo[i][pAdminDuty] && !PlayerInfo[i][pAcceptedHelp] && !PlayerInfo[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] >= 0 && PlayerInfo[i][pGang] == PlayerInfo[TurfInfo[turfid][tCapturer]][pGang] && PlayerInfo[i][pGang] != GangInfo[PlayerInfo[playerid][pGang]][gAlliance])
			    {
					return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SendClientMessage(playerid, COLOR_GREY, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	SendTurfMessage(turfid, COLOR_YELLOW, "Turf wars: %s has reclaimed %s for %s and ended the turf war.", GetPlayerRPName(playerid), TurfInfo[turfid][tName], GangInfo[PlayerInfo[playerid][pGang]][gName]);

	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
	TurfInfo[turfid][tCaptureTime] = 0;
	ReloadTurf(turfid);

	return 1;
}

CMD:guninv(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ My Weapons _____");

	for(new i = 0; i < 13; i ++)
	{
     	if(PlayerInfo[playerid][pWeapons][i] > 0)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s", PlayerInfo[playerid][pWeapons][i], GetWeaponNameEx(PlayerInfo[playerid][pWeapons][i]));
		}
	}

	return 1;
}

CMD:armsdealer(playerid, params[])
{
    if(PlayerInfo[playerid][pHours] < 2 || PlayerInfo[playerid][pWeaponRestricted] > 0)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are either weapon restricted or you played less than two playing hours.");
    }

	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gArmsDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gArmsX], GangInfo[i][gArmsY], GangInfo[i][gArmsZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gArmsWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any gang owned arms dealers.");
	return 1;
}

CMD:drugdealer(playerid, params[])
{
	for(new i = 0; i < MAX_GANGS; i ++)
	{
	    if(GangInfo[i][gDrugDealer] && IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[i][gDrugX], GangInfo[i][gDrugY], GangInfo[i][gDrugZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][gDrugWorld])
	    {
	        PlayerInfo[playerid][pDealerGang] = i;
	        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
	        return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "You are not in range of any gang owned drug dealers.");
	return 1;
}


CMD:createturf(playerid, params[])
{
	new type, name[32];

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createturf [special type] [name]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Materials (2) Low weapons (3) Med weapons (4) High weapons");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (5) Traphouse (6) Crackhouse (7) Sales taxing (8) Locked");
	    return 1;
	}
	if(!(0 <= type <= 8))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot create turfs indoors.");
	}

	PlayerInfo[playerid][pTurfType] = type;
	PlayerInfo[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(PlayerInfo[playerid][pTurfName], name, 32);
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have entered turf creation mode. In order to create a turf you need\nto mark four points around the area you want your turf to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress {00AA00}Confirm{A9C4E4} to begin turf creation.", "Confirm", "Cancel");
	return 1;
}

CMD:turfcancel(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(PlayerInfo[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not creating a turf at the moment.");
	}

	CancelZoneCreation(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gototurf(playerid, params[])
{
	new turfid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gototurf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid turf.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid, params[])
{
	new turfid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeturf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid turf.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;
    Iter_Remove(Turf, turfid);

    SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed turf %i.", turfid);
	return 1;
}

CMD:editturf(playerid, params[])
{
	new turfid, option[14], param[32];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [option]");
		SendClientMessage(playerid, COLOR_SYNTAX, "List of options: Name, CapturedBy, Gang, Type, Time");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid turf.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [name] [text]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = '%e' WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the name of turf %i to %s.", GetPlayerRPName(playerid), turfid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the name of turf %i to {F7A763}%s{33CCFF}.", turfid, param);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%e' WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the capturer of turf %i to %s.", GetPlayerRPName(playerid), turfid, param);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturer of turf %i to {F7A763}%s{33CCFF}.", turfid, param);
	}
 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		TurfInfo[turfid][tCapturedGang] = gangid;
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has reset the capturing gang of turf %i.", GetPlayerRPName(playerid), turfid);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have reset the capturing gang of turf %i.", turfid);
		}
		else
		{
			SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the capturing gang of turf %i to %s.", GetPlayerRPName(playerid), turfid, GangInfo[gangid][gName]);
			SendClientMessageEx(playerid, COLOR_AQUA, "You have set the capturing gang of turf %i to {00AA00}%s{33CCFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [type] [value]");
           	SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (0) None (1) Materials (2) Low weapons (3) Med weapons (4) High weapons");
	   	 	SendClientMessage(playerid, COLOR_SYNTAX, "List of types: (5) Traphouse (6) Crackhouse (7) Sales taxing (8) Locked");
            return 1;
		}
		if(!(0 <= type <= 8))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the type of turf %i to %i.", GetPlayerRPName(playerid), turfid, type);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the type of turf %i to %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editturf [turfid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "The amount of hours must range from 0 to 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0 && TurfInfo[turfid][tType] != 8)
		{
		    SendTurfMessage(turfid, COLOR_YELLOW, "Turf wars: %s is now available to capture.", TurfInfo[turfid][tName]);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has set the time of turf %i to %i hours.", GetPlayerRPName(playerid), turfid, value);
		SendClientMessageEx(playerid, COLOR_AQUA, "You have set the time of turf %i to %i hours.", turfid, value);
	}

	return 1;
}

CMD:pointinfo(playerid, params[])
{
	new
		iCount,
		szMessage[128];

	SendClientMessage(playerid, COLOR_ORANGE, "Point Info:");
	for(new i; i < MAX_POINTS; i++) {
		if(PointInfo[i][pExists]) {
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)  {
				if(PointInfo[i][pCaptureTime] == 1) {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: Less than 1 minute", PointInfo[i][pName], GetPlayerRPName(PointInfo[i][pCapturer]), GangInfo[PlayerInfo[PointInfo[i][pCapturer]][pGang]][gName]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Gang: %s | Time left: %d minutes", PointInfo[i][pName], GetPlayerRPName(PointInfo[i][pCapturer]), GangInfo[PlayerInfo[PointInfo[i][pCapturer]][pGang]][gName], PointInfo[i][pCaptureTime]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid, COLOR_GREY, "No gang has attempted to capture a point at this time.");
	return 1;
}

CMD:turfinfo(playerid, params[])
{
	new turfid, name[32] = "None", perk[32], color = -1;

	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any turfs.");
	}

	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
    	strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
    	color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
	}

	switch(TurfInfo[turfid][tType])
	{
	    case 0: perk = "Normal";
	    case 1: perk = "Materials";
     	case 2: perk = "Low class weapons";
	    case 3: perk = "Medium class weapons";
	    case 4: perk = "High class weapons";
	    case 5: perk = "Traphouse";
	    case 6: perk = "Crackhouse";
	    case 7: perk = "Sales tax";
	    case 8: perk = "Locked turf";
	}

    SendClientMessageEx(playerid, COLOR_NAVYBLUE, "_____ %s (%s) _____", TurfInfo[turfid][tName], perk);

	if(TurfInfo[turfid][tType] == 8)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "** This turf is owned by {%06x}%s{FFFFFF} and is not available to capture.", color >>> 8, name);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "** This turf captured by %s for {%06x}%s{FFFFFF} will be available in %i hours.", TurfInfo[turfid][tCapturedBy], color >>> 8, name, TurfInfo[turfid][tTime]);

    	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID)
		{
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** This turf is being captured by %s and will be theirs in %i minutes.", GetPlayerRPName(TurfInfo[turfid][tCapturer]), TurfInfo[turfid][tCaptureTime]);
		}
	}

	return 1;
}



CMD:carhelp(playerid, params[])
{
	return callcmd::vehiclehelp(playerid, params);
}

CMD:armbomb(playerid, params[])
{
	return callcmd::plantbomb(playerid, params);
}


CMD:defend(playerid, params[])
{
	new targetid, amount, time = (5 - GetJobLevel(playerid, JOB_LAWYER)) * 30;

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Lawyer.");
	}
	if(gettime() - PlayerInfo[playerid][pLastDefend] < time)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only defend a player every %i seconds. Please wait %i more seconds.", time, time - (gettime() - PlayerInfo[playerid][pLastDefend]));
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /defend [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't defend yourself.");
	}
	if(!PlayerInfo[targetid][pWantedLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not wanted.");
	}
	if(amount < 1000 || amount > 10000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount can't be below $1000 or above $10000.");
	}

	PlayerInfo[targetid][pDefendOffer] = playerid;
	PlayerInfo[targetid][pDefendPrice] = amount;
	PlayerInfo[playerid][pLastDefend] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "** Lawyer %s has offered to defend your wanted level for $%i. (/accept lawyer)", GetPlayerRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have offered to defend %s's wanted level for $%i.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:free(playerid, params[])
{
	new targetid, time = GetJobLevel(playerid, JOB_LAWYER);

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Lawyer.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /free [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerInfo[targetid][pJailType] != 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not in IC jail.");
	}
	if(PlayerInfo[targetid][pJailTime] < time * 60)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't free this player, their jail time expires soon.");
	}

	PlayerInfo[targetid][pJailTime] -= time * 60;

	SendClientMessageEx(targetid, COLOR_AQUA, "** Lawyer %s has reduced your jail sentence by %i minutes.", GetPlayerRPName(playerid), time);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have reduced %s's jail sentence by %i minutes.", GetPlayerRPName(targetid), time);
	return 1;
}

CMD:eject(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /eject [playerid]");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected, or is not in your vehicle.");
	}

	RemovePlayerFromVehicle(targetid);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s ejects %s from the vehicle.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	return 1;
}

CMD:dicebet(playerid, params[])
{
	new targetid, amount;

	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1099.8420, 20.3554, 1000.6797))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the casino.");
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be at least level 3+ in order to dice bet.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dicebet [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerInfo[targetid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player must be at least level 3+ to bet with them.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount can't be below $1.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money to bet.");
	}
	if(gettime() - PlayerInfo[playerid][pLastBet] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastBet]));
	}

	PlayerInfo[targetid][pDiceOffer] = playerid;
	PlayerInfo[targetid][pDiceBet] = amount;
	PlayerInfo[targetid][pDiceRigged] = 0;
	PlayerInfo[playerid][pLastBet] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has initiated a dice bet with you for $%i (/accept dicebet).", GetPlayerRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have initiated a dice bet against %s for $%i.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:dicebetrigged(playerid, params[]) // Added to keep the economy in control. And to make people qq when they lose all their cash.
{
	new targetid, amount;

	if(PlayerInfo[playerid][pAdmin] < 8)
	{
	    return -1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1099.8420, 20.3554, 1000.6797))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the casino.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /dicebetrigged [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(PlayerInfo[targetid][pLevel] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player must be at least level 3+ to bet with them.");
	}
	if(amount < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The amount can't be below $1.");
	}
	if(PlayerInfo[playerid][pCash] < amount)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have that much money to bet.");
	}
	if(gettime() - PlayerInfo[playerid][pLastBet] < 10)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - PlayerInfo[playerid][pLastBet]));
	}

	PlayerInfo[targetid][pDiceOffer] = playerid;
	PlayerInfo[targetid][pDiceBet] = amount;
	PlayerInfo[targetid][pDiceRigged] = 1;
	PlayerInfo[playerid][pLastBet] = gettime();

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has initiated a dice bet with you for $%i (/accept dicebet).", GetPlayerRPName(playerid), amount);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have initiated a dice bet against %s for $%i.", GetPlayerRPName(targetid), amount);
	return 1;
}

CMD:calculate(playerid, params[])
{
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /calculate [value 1] [option] [value 2]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "List of options: (+) Add (-) Subtract (*) Multiply (/) Divide");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't divide by zero.");
	}

	if(option == '+') {
	    SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SendClientMessageEx(playerid, COLOR_GREEN, "** Result: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:serverstats(playerid, params[])
{
	new houses, businesses, garages, vehicles, lands, entrances, turfs, points, gangs, factions, lockers;

	houses = Iter_Count(House);
	businesses = Iter_Count(Business);
	garages = Iter_Count(Garage);
	vehicles = Iter_Count(Vehicle);
	lands = Iter_Count(Land);
	entrances = Iter_Count(Entrance);
	turfs = Iter_Count(Turf);
	for(new i = 0; i < MAX_POINTS; i ++) 	 if(PointInfo[i][pExists]) 		points++;
	for(new i = 0; i < MAX_GANGS; i ++) 	 if(GangInfo[i][gSetup]) 		gangs++;
	for(new i = 0; i < MAX_FACTIONS; i ++) 	 if(FactionInfo[i][fType]) 		factions++;
	for(new i = 0; i < MAX_LOCKERS; i ++) 	 if(LockerInfo[i][lExists]) 	lockers++;

	SendClientMessage(playerid, COLOR_NAVYBLUE, "______ EndLess Roleplay Stats ______");
	SendClientMessageEx(playerid, COLOR_GREY2, "Connections: %i - Registered: %i - Kill Counter: %i - Death Counter: %i - Hours Played: %i", gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours);
	SendClientMessageEx(playerid, COLOR_GREY2, "Houses: %i/%i - Businesses: %i/%i - Garages: %i/%i - Lands: %i/%i - Vehicles: %i/%i", houses, MAX_HOUSES, businesses, MAX_BUSINESSES, garages, MAX_GARAGES, lands, MAX_LANDS, vehicles, MAX_VEHICLES);
	SendClientMessageEx(playerid, COLOR_GREY2, "Entrances: %i/%i - Turfs: %i/%i - Points: %i/%i - Gangs: %i/%i - Factions: %i/%i - Lockers: %i/%i", entrances, MAX_ENTRANCES, turfs, MAX_TURFS, points, MAX_POINTS, gangs, MAX_GANGS, factions, MAX_FACTIONS, lockers, MAX_LOCKERS);
	SendClientMessageEx(playerid, COLOR_GREY2, "Players Online: %i/%i - Player Record: %i - Record Date: %s - Anticheat Bans: %i", Iter_Count(Player), MAX_PLAYERS, gPlayerRecord, gRecordDate, gAnticheatBans);
	return 1;
}

CMD:ww(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:watch(playerid, params[])
{
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid, params[])
{
	if(!PlayerInfo[playerid][pWatch])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a pocket watch. You can buy one at 24/7.");
	}

	if(!PlayerInfo[playerid][pWatchOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't turn on your watch as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pWatchOn] = 1;
	    TextDrawShowForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns on their pocket watch.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pWatchOn] = 0;
	    TextDrawHideForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns off their pocket watch.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:gps(playerid, params[])
{
	if(!PlayerInfo[playerid][pGPS])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a GPS. You can buy one at 24/7.");
	}

	if(!PlayerInfo[playerid][pGPSOn])
	{
	    if(PlayerInfo[playerid][pToggleTextdraws])
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "You can't turn on your GPS as you have textdraws toggled! (/toggle textdraws)");
		}

	    PlayerInfo[playerid][pGPSOn] = 1;

	    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pText][0], "Loading...");
	    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pText][0]);

	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns on their GPS.", GetPlayerRPName(playerid));
	}
	else
	{
	    PlayerInfo[playerid][pGPSOn] = 0;
	    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pText][0]);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns off their GPS.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:fixvw(playerid, params[])
{
	if(PlayerInfo[playerid][pPaintball] > 0 || PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pJailType] > 0 || PlayerInfo[playerid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendClientMessage(playerid, COLOR_GREY, "Your virtual world has been fixed.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "Your virtual world is not bugged at the moment.");
	}

	return 1;
}

CMD:stuck(playerid, params[])
{
	if(
		PlayerInfo[playerid][pTazedTime] > 0 || 
		PlayerInfo[playerid][pInjured] > 0 || 
		PlayerInfo[playerid][pHospital] > 0 || 
		PlayerInfo[playerid][pCuffed] > 0 || 
		PlayerInfo[playerid][pTied] > 0 || 
		PlayerInfo[playerid][pAcceptedHelp] || 
		PlayerInfo[playerid][pMiningTime] > 0 || 
		PlayerInfo[playerid][pFishTime] > 0 || 
		PlayerInfo[playerid][pLootTime] > 0 || 
		GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || 
		IsPlayerInAnyVehicle(playerid) ||
		PlayerInfo[playerid][pAdminFrozen])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
    if(gettime() - PlayerInfo[playerid][pLastStuck] < 5)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only use this command every 5 seconds. Please wait %i more seconds.", 5 - (gettime() - PlayerInfo[playerid][pLastStuck]));
	}

	new
	    Float:x,
    	Float:y,
    	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 0.5);

	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);

	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
	SendClientMessage(playerid, COLOR_GREY, "You are no longer stuck.");

	PlayerInfo[playerid][pLastStuck] = gettime();
	return 1;
}

CMD:badge(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_NEWS)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJailTime] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}

	if(!PlayerInfo[playerid][pDuty])
	{
	    if(PlayerInfo[playerid][pJoinedEvent] || PlayerInfo[playerid][pPaintballTeam] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your badge on while in a event or paintball match.");
		}
	    PlayerInfo[playerid][pDuty] = 1;
	    SendClientMessage(playerid, COLOR_WHITE, "You have enabled your badge. Your nametag color now shows for all players.");
	}
	else
	{
	    PlayerInfo[playerid][pDuty] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "You have disabled your badge. Your nametag color no longer shows for any players.");
	}

	return 1;
}

CMD:duel(playerid, params[])
{
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /duel [player1] [player2] [health] [armor] [weapon1] [weapon2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	if(health < 1.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Health can't be under 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon. Valid weapon IDs range from 0 to 46.");
	}

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, 1370.3395, -15.4556, 1000.9219);
	SetPlayerPos(target2, 1414.4841, -15.1239, 1000.9253);
	SetPlayerFacingAngle(target1, 270.0000);
	SetPlayerFacingAngle(target2, 90.0000);

	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, 0);
	SetPlayerVirtualWorld(target2, 0);

	SetPlayerHealth(target1, health);
	SetPlayerArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetPlayerArmour(target2, armor);

	GivePlayerWeaponEx(target1, weapon1, true);
	GivePlayerWeaponEx(target1, weapon2, true);
	GivePlayerWeaponEx(target2, weapon1, true);
	GivePlayerWeaponEx(target2, weapon2, true);

	GameTextForPlayer(target1, "~r~Duel time!", 3000, 3);
	GameTextForPlayer(target2, "~r~Duel time!", 3000, 3);

	PlayerInfo[target1][pDueling] = target2;
	PlayerInfo[target2][pDueling] = target1;

	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s and %s into a duel.", GetPlayerRPName(playerid), GetPlayerRPName(target1), GetPlayerRPName(target2));
	return 1;
}

CMD:mole(playerid, params[]) // MADE BY THE ONE AND ONLY Hernandez!
{
 	if(GetFactionType(playerid) != FACTION_HITMAN && PlayerInfo[playerid][pAdmin] < 3)
 	{
  		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
 	}
 	if(isnull(params))
 	{
     	SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /mole [text]");
     	SendClientMessage(playerid, COLOR_YELLOW, "This command sends a SMS to the entire server. Abusing this command will result in heavy punishment.");
     	return 1;
 	}
	SendClientMessageToAllEx(COLOR_YELLOW, "** SMS from Satan: %s, Ph: 666 **", params);
 	return 1;
}

CMD:info(playerid, params[])
{
	return callcmd::information(playerid, params);
}

CMD:information(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Server Information _____");
	SendClientMessage(playerid, COLOR_GREY2, "Website: www.endlessrp.xyz") ;
	SendClientMessage(playerid, COLOR_GREY2, "Forum: www.endlessrp.xyz/forum");
	SendClientMessage(playerid, COLOR_GREY2, "Shop: www.endlessrp.xyz/shop");
	SendClientMessage(playerid, COLOR_GREY2, "Discord: www.endlessrp.xyz/discord");
	return 1;
}

CMD:takecall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!PlayerHasJob(playerid, JOB_MECHANIC) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
     	return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Mechanic or Uper Driver.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /takecall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	if(PlayerHasJob(playerid, JOB_MECHANIC) && PlayerInfo[targetid][pMechanicCall] > 0)
	{
		if(GetPlayerInterior(targetid))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is currently unreachable.");
		}

		PlayerInfo[targetid][pMechanicCall] = 0;
		PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's mechanic call. Their location was marked on your map.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s has accepted your mechanic call. Please wait patiently until they arrive.", GetPlayerRPName(playerid));
	}
	else if(PlayerHasJob(playerid, JOB_TAXIDRIVER) && PlayerInfo[targetid][pTaxiCall] > 0)
	{
        if(GetPlayerInterior(targetid))
		{
	    	return SendClientMessage(playerid, COLOR_GREY, "That player is currently unreachable.");
		}

		PlayerInfo[targetid][pTaxiCall] = 0;
		PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's taxi call. Their location was marked on your map.", GetPlayerRPName(targetid));
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s has accepted your taxi call. Please wait patiently until they arrive.", GetPlayerRPName(playerid));
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "That player has no calls which can be taken.");
	}

	return 1;
}

CMD:listcallers(playerid, params[])
{
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Emergency Calls _____");

	foreach(new i : Player)
	{
	    if((PlayerInfo[i][pEmergencyCall] > 0) && ((PlayerInfo[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (PlayerInfo[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "** %s[%i] - Expiry: %i seconds - Emergency: %s", GetPlayerRPName(i), i, PlayerInfo[i][pEmergencyCall], PlayerInfo[i][pEmergency]);
		}
	}

	return 1;
}

CMD:trackcall(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /trackcall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pEmergencyCall])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't called 911 recently or their call expired.");
	}
	if(!GetPlayerPosEx(targetid, x, y, z))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently unreachable.");
	}

	//PlayerInfo[targetid][pEmergencyCall] = 0;
	PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;

	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have accepted %s's emergency call. Their location was marked on your map.", GetPlayerRPName(targetid));

	if(PlayerInfo[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SendClientMessageEx(targetid, COLOR_AQUA, "** %s has accepted your emergency call. Please wait patiently until they arrive.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:startchat(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /startchat [playerid]");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already in an active chat. /invitechat to invite them.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s has started a chat with you. /(re)ply to speak with this admin.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have started a chat with %s (ID %i). /(re)ply to speak to the player.", GetPlayerRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /invitechat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s has invited you to a chat. /(re)ply to speak with them.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have invited %s (ID %i) to your chat.", GetPlayerRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid, params[])
{
    new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /kickchat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently not in a chat with you.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SendClientMessageEx(targetid, COLOR_YELLOW, "Administrator %s has removed you from the chat.", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have removed %s (ID %i) from your chat.", GetPlayerRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have not started a chat yet. /startchat to start one.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SendClientMessageEx(i, COLOR_YELLOW, "Administrator %s has ended the chat.", GetPlayerRPName(playerid));
		}
	}

	return 1;
}

CMD:re(playerid, params[])
{
	return callcmd::reply(playerid, params);
}

CMD:reply(playerid, params[])
{
	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /(re)ply [text]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You haven't been invited to any chats by an admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminHide] == 0)
	        	SendClientMessageEx(i, COLOR_YELLOW, "** %s %s (ID %i): %s **", GetAdminRank(playerid), GetPlayerRPName(playerid), playerid, params);
			else
			    SendClientMessageEx(i, COLOR_YELLOW, "** Player %s (ID %i): %s **", GetPlayerRPName(playerid), playerid, params);
	    }
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no engine which runs off gas.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gascan [amount]");
	}
	if(amount < 1 || amount > PlayerInfo[playerid][pGasCan])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't add that much gasoline to the vehicle.");
	}

	PlayerInfo[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", PlayerInfo[playerid][pGasCan], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s refills the %s's gas tank with %i liters of gasoline.", GetPlayerRPName(playerid), GetVehicleName(vehicleid), amount);
	return 1;
}
CMD:robbiz(playerid, params[])
{
	new bizid;
	if(IsPlayerAdmin(playerid)) // disabled for now
	{
		if(PlayerInfo[playerid][pRobbingBiz] >= 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You're already robbing a business.");
		}
		if((bizid = GetInsideBusiness(playerid)) != -1)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You aren't inside a business that you can rob.");
		}
		if(PlayerInfo[playerid][pLootTime] > 0)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You are already looting a business.");
		}
		if(PlayerInfo[playerid][pRobCash] >= 10000)
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Your pockets can't hold more than $10,000 of money!");
		}

		PlayerInfo[playerid][pRobbingBiz] = bizid;
		PlayerInfo[playerid][pLootTime] = 5;
	}
	return 1;
}
CMD:stoprobbery(playerid, params[])
{
    if(PlayerInfo[playerid][pRobbingBiz] < 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't actively robbing a business.");
	}
	if(GetInsideBusiness(playerid) != PlayerInfo[playerid][pRobbingBiz])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't inside the business you were robbing.");
	}
	PlayerInfo[playerid][pRobbingBiz] = -1;
	PlayerInfo[playerid][pCP] = CHECKPOINT_ROBBERY;
    SendClientMessageEx(playerid, COLOR_AQUA, "You have robbed a total of %s. You need to get this cash immediately to the {FF6347}marker{33CCFF} before the cops catch you!", FormatNumber(PlayerInfo[playerid][pRobCash]));
	SetPlayerCheckpoint(playerid, 1429.9939, 1066.9581, 9.8938, 3.0);
	return 1;
}
CMD:robbank(playerid, params[])
{
	new count;

	if(PlayerInfo[playerid][pLevel] < 7)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be at least level 7+ to use this command.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1667.4260, -972.6691, 683.6873))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the bank.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "The bank can be robbed again in %i hours. You can't rob it now.", RobberyInfo[rTime]);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is a bank robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't rob the bank as a robbery has already started.");
	}
	if(IsLawEnforcement(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't rob the bank as a law enforcer. Ask your boss for a raise.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && !PlayerInfo[i][pAdminDuty])
	    {
	        count++;
		}
	}

	if(count < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There needs to be at least 5+ LEO online in order to rob the bank.");
	}

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    PlayerInfo[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, 1677.2610, -987.6659, 671.1152, 2.0);

    SendClientMessage(playerid, COLOR_AQUA, "You have setup a {FF6347}bank robbery{33CCFF}. You need to /robinvite at least 2 more people in order to begin the heist.");
	SendClientMessage(playerid, COLOR_AQUA, "After you've found two additional heisters, you can use /bombvault at the checkpoint to blow the vault.");
	return 1;
}

CMD:robinvite(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /robinvite [playerid]");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are currently not planning a bank robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in the robbery with you.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
 	if(IsLawEnforcement(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't invite law enforcement to rob the bank.");
	}

	PlayerInfo[targetid][pRobberyOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has invited you to a bank robbery. (/accept robbery)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have invited %s to join your bank robbery.", GetPlayerRPName(targetid));
	return 1;
}

CMD:bombvault(playerid, params[])
{
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are currently not planning a bank robbery.");
	}
	if(GetBankRobbers() < 3)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You need at least two other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1677.2610, -987.6659, 671.1152))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the vault.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The vault is already being bombed at the moment.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654, 1677.787475, -988.009765, 671.625366, 0.000000, 0.000000, 180.680709);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s firmly plants an explosive on the vault door.", GetPlayerRPName(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:lootbox(playerid, params[])
{
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in an active bank robbery.");
	}
	if(!RobberyInfo[rStarted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The bank robbery hasn't started yet.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -994.6146, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2335, -998.6115, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1680.2344, -1002.5356, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -998.4954, 671.0032) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1674.2708, -994.5173, 671.0032))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the deposit boxes.");
	}
	if(PlayerInfo[playerid][pLootTime] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already looting a deposit box.");
	}
	if(PlayerInfo[playerid][pRobCash] >= 100000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your pockets can't hold more than $100,000 of money!");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not apart of this bank robbery.");
	}

	PlayerInfo[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Looting deposit box...", 5000, 3);
	return 1;
}

CMD:robbers(playerid, params[])
{
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "There is no bank robbery currently active.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "______ Robbers Alive ______");

	foreach(new i : Player)
	{
	    if(IsPlayerInBankRobbery(i))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY2, "(ID: %i) %s {00AA00}(%s stolen)", i, GetPlayerRPName(i), FormatNumber(PlayerInfo[i][pRobCash]));
		}
	}

	return 1;
}

CMD:motd(playerid, params[])
{
	if(!isnull(gServerMOTD))
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** MOTD: %s", gServerMOTD);
	}
	if(!isnull(adminMOTD) && PlayerInfo[playerid][pAdmin] > 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Admin MOTD: %s", adminMOTD);
	}
	if(!isnull(helperMOTD) && (PlayerInfo[playerid][pHelper] > 0 || PlayerInfo[playerid][pAdmin] > 0))
	{
		SendClientMessageEx(playerid, COLOR_AQUA, "** Helper MOTD: %s", helperMOTD);
	}
	if(PlayerInfo[playerid][pGang] >= 0 && strcmp(GangInfo[PlayerInfo[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** Gang MOTD: %s", GangInfo[PlayerInfo[playerid][pGang]][gMOTD]);
	}
	if(PlayerInfo[playerid][pFaction] >= 0 && strcmp(FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD], "None", true) != 0)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** Faction MOTD: %s", FactionInfo[PlayerInfo[playerid][pFaction]][fMOTD]);
	}

	return 1;
} // LEONE - ERROR ALERT, STILL WORKING ON THIS.
CMD:createlocation(playerid, params[])
{
    new name[32], Float:x, Float:y, Float:z;
    if(!PlayerInfo[playerid][pDynamicAdmin])
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    }
    if(sscanf(params, "s[32]", name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createlocation [name]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The location will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your virtual world & interior must be 0!");
	}
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i < MAX_LOCATIONS; i ++)
	{
		if(!LocationInfo[i][locExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO locations VALUES(null, '%e', '%f', '%f', '%f')", name, x, y, z);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocation", "iisfff", playerid, i, name, x, y, z);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Location slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:createatm(playerid, params[])
{
    new Float:x, Float:y, Float:z, Float:a;
    if(!PlayerInfo[playerid][pDynamicAdmin])
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    }
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createatm [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The ATM will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your virtual world & interior must be 0!");
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_ATMS; i ++)
	{
		if(!AtmInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO atms VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateAtm", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "ATM slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removeatm(playerid, params[])
{
	new loc;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeatm [atmid] (/nearest)");
	}
	if(!(0 <= loc < MAX_ATMS) || !AtmInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid ATM or Static.");
	}
    DestroyDynamic3DTextLabel(AtmInfo[loc][aText]);
    DestroyDynamicObject(AtmInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM atms WHERE id = %i", AtmInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	AtmInfo[loc][aExists] = false;
	AtmInfo[loc][aID] = 0;

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed ATM %i.", loc);
	return 1;
}
CMD:removelocation(playerid, params[])
{
	new loc;

	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelocation [locationid]");
	}
	if(!(0 <= loc < MAX_LOCATIONS) || !LocationInfo[loc][locExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid location.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM locations WHERE id = %i", LocationInfo[loc][locID]);
	mysql_tquery(connectionID, queryBuffer);
	LocationInfo[loc][locName][0] = EOS;
	LocationInfo[loc][locExists] = false;
	LocationInfo[loc][locID] = 0;

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed location %i.", loc);
	return 1;
}

CMD:createlocker(playerid, params[])
{
	new factionid, Float:x, Float:y, Float:z;

    if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createlocker [factionid]");
	}
    if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid faction.");
	}

    GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(!LockerInfo[i][lExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionlockers (factionid, pos_x, pos_y, pos_z, interior, world) VALUES(%i, '%f', '%f', '%f', %i, %i)", factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocker", "iiifffii", playerid, i, factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Locker slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:editland(playerid, params[])
{
	new landid, option[32], param[32];
	if(!PlayerInfo[playerid][pDynamicAdmin])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]S()[32]", landid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editland [landid] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Price, Level, Height, Owner");
		return 1;
	}
    if(!strcmp(option, "price", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [value]", landid, option);
		}
		if(!(1<= value <= 100000000))
		{
		    return SendClientMessageEx(playerid, COLOR_SYNTAX, "Value cannot be less than 1 or more than 100M");
		}
	    LandInfo[landid][lPrice] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET price = %i WHERE id = %i", value, LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You set land %i's price to %i.", landid, value);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "level", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [value]", landid, option);
		}
		if(!(1 <= value <= 3))
		{
		    return SendClientMessage(playerid, COLOR_SYNTAX, "Land levels cannot be below 0 or more than 3");
		}
	    LandInfo[landid][lLevel] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET level = %i WHERE id = %i", value, LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You set land %i's price to %i.", landid, value);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "height", true))
	{
	    if(sscanf(param, "s", "confirm"))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [confirm]", landid, option);
		}
        new Float:zCoord[2];
		GetPlayerPos(playerid, zCoord[0], zCoord[0], zCoord[1]);
	    LandInfo[landid][lHeight] = zCoord[1] + 1.0;
	  //  LandInfo[landid][lPickup] = zCoord[1]; We need this, land pickup, when you create a land at height it will create a pickup like house pickup.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET height = %f WHERE id = %i", zCoord[1], LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
		SendClientMessageEx(playerid, COLOR_AQUA, "** You have land %i's Z (height) pos to your current Z (height) Pos (%f).", landid, zCoord[1]);
		ReloadLand(landid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;
		if(sscanf(param, "u", targetid))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editland [%i] [%s] [value]", landid, option);
		}
	   	SetLandOwner(landid, targetid);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You set land %i's owner to %s.", landid, GetPlayerRPName(targetid));
		ReloadLand(landid);
	}
	return 1;
}
CMD:editlocker(playerid, params[])
{
	new lockerid, option[32], param[32];

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]S()[32]", lockerid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Position, FactionID, Icon, Label, Weapons");
		return 1;
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}
    if(!strcmp(option, "position", true))
    {
		GetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
		LockerInfo[lockerid][lInterior] = GetPlayerInterior(playerid);
		LockerInfo[lockerid][lWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = %i, world = %i WHERE id = %i", LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], LockerInfo[lockerid][lInterior], LockerInfo[lockerid][lWorld], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You have moved locker %i to your position.", lockerid);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "factionid", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SendClientMessageEx(playerid, COLOR_SYNTAX, "USAGE: /editlocker [%i] [%s] [value]", lockerid, option);
		}
	    LockerInfo[lockerid][lFaction] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET factionid = %i WHERE id = %i", LockerInfo[lockerid][lFaction], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SendClientMessageEx(playerid, COLOR_AQUA, "** You set locker %i's faction to %i.", lockerid, value);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid model ID.");
		}

		LockerInfo[lockerid][lIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET iconid = %i WHERE id = %i", LockerInfo[lockerid][lIcon], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);
	    SendClientMessageEx(playerid, COLOR_AQUA, "** You've changed the pickup icon model of locker %i to %i.", lockerid, iconid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [label] [0/1]");
		}

		LockerInfo[lockerid][lLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET label = %i WHERE id = %i", LockerInfo[lockerid][lLabel], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);

		if(status)
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've enabled the 3D text label for locker %i.", lockerid);
		else
		    SendClientMessageEx(playerid, COLOR_AQUA, "** You've disabled the 3D text label for locker %i.", lockerid);
	}
	else if(!strcmp(option, "weapons", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Weapons for hitman agency lockers cannot be edited in-game.");
	    }
	    new inputtext[24], opt2[8], amount;
	    if(sscanf(param, "s[24]s[8]i", inputtext, opt2, amount))
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [weapons] [weaponname] [option] [amount]");
            SendClientMessage(playerid, COLOR_GREEN, "Weapon Name: Kevlar, Medkit, Nitestick, Mace, Deagle, Shotgun, M4, MP5, Spas12, Sniper, Camera, FireExt, Painkillers");
			SendClientMessage(playerid, COLOR_YELLOW, "Options: Allow, Price");
			SendClientMessage(playerid, COLOR_ORANGE, "Amount: Price (amount), Allow (1 or 0)");
	        return 1;
	    }
		if(!strcmp(opt2, "allow", true))
		{
		    if(!(0 <= amount <= 1)) return SendClientMessage(playerid, COLOR_GREY, "Amount can be 1 or 0");
			if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][0] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET weapon_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][0], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			SendClientMessageEx(playerid, COLOR_GREY, "Locker %i's %s status set to %i", lockerid, inputtext, amount);
		}
		else if(!strcmp(opt2, "price", true))
		{
            if(!strcmp(inputtext, "Kevlar", true))
			{
				LockerInfo[lockerid][locKevlar][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_kevlar = %i WHERE id = %i", LockerInfo[lockerid][locKevlar], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Medkit", true))
			{
                LockerInfo[lockerid][locMedKit][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_medkit = %i WHERE id = %i", LockerInfo[lockerid][locMedKit], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Nitestick", true))
			{
                LockerInfo[lockerid][locNitestick][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_nitestick = %i WHERE id = %i", LockerInfo[lockerid][locNitestick][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Mace", true))
			{
                LockerInfo[lockerid][locMace][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mace = %i WHERE id = %i", LockerInfo[lockerid][locMace][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
            else if(!strcmp(inputtext, "Deagle", true))
			{
                LockerInfo[lockerid][locDeagle][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_deagle = %i WHERE id = %i", LockerInfo[lockerid][locDeagle][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Shotgun", true))
			{
			    LockerInfo[lockerid][locShotgun][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_shotgun = %i WHERE id = %i", LockerInfo[lockerid][locShotgun][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "MP5", true))
			{
                LockerInfo[lockerid][locMP5][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_mp5 = %i WHERE id = %i", LockerInfo[lockerid][locMP5][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "M4", true))
			{
                LockerInfo[lockerid][locM4][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_m4 = %i WHERE id = %i", LockerInfo[lockerid][locM4][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Spas12", true))
			{
                LockerInfo[lockerid][locSpas12][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_spas12 = %i WHERE id = %i", LockerInfo[lockerid][locSpas12][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Sniper", true))
			{
                LockerInfo[lockerid][locSniper][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_sniper = %i WHERE id = %i", LockerInfo[lockerid][locSniper][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Camera", true))
			{
                LockerInfo[lockerid][locCamera][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_camera = %i WHERE id = %i", LockerInfo[lockerid][locCamera][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "FireExt", true))
			{
                LockerInfo[lockerid][locFireExt][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_fire_extinguisher = %i WHERE id = %i", LockerInfo[lockerid][locFireExt][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
			else if(!strcmp(inputtext, "Painkillers", true))
			{
                LockerInfo[lockerid][locPainKillers][1] = amount;
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET price_painkillers = %i WHERE id = %i", LockerInfo[lockerid][locPainKillers][1], LockerInfo[lockerid][lID]);
	    		mysql_tquery(connectionID, queryBuffer);
			}
		    SendClientMessageEx(playerid, COLOR_GREY, "Locker %i's %s price set to %i", lockerid, inputtext, amount);
		}
	}
	return 1;
}
CMD:removelocker(playerid, params[])
{
	new lockerid;

	if(PlayerInfo[playerid][pAdmin] < 7 && !PlayerInfo[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE id = %i", LockerInfo[lockerid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LockerInfo[lockerid][lExists] = 0;
	LockerInfo[lockerid][lID] = 0;

	SendClientMessageEx(playerid, COLOR_AQUA, "** You have removed locker %i.", lockerid);
	return 1;
}

CMD:gotolocker(playerid, params[])
{
	new lockerid;

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotolocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
	SetPlayerInterior(playerid, LockerInfo[lockerid][lInterior]);
	SetPlayerVirtualWorld(playerid, LockerInfo[lockerid][lWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:namehistory(playerid, params[])
{
	new targetid;

	if(PlayerInfo[playerid][pAdmin] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /namehistory [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM log_namehistory WHERE uid = %i ORDER BY id DESC", PlayerInfo[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckNameHistory", "ii", playerid, targetid);

	return 1;
}

CMD:unmute(playerid, params[])
{
	new string[128];

	if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /unmute [newbie | report | global]");
	}

	if(!strcmp(params, "newbie", true))
	{
	    if(!PlayerInfo[playerid][pNewbieMuted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not muted from the newbie chat.");
		}
		if(PlayerInfo[playerid][pNewbieMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait at least %i minutes before requesting an unmute.", (PlayerInfo[playerid][pNewbieMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerInfo[playerid][pCash]+PlayerInfo[playerid][pBank], 5));
		ShowPlayerDialog(playerid, DIALOG_NEWBIEUNMUTE, DIALOG_STYLE_LIST, "Choose your punishment for this unmute.", string, "Select", "Cancel");
	}
	else if(!strcmp(params, "report", true))
	{
	    if(!PlayerInfo[playerid][pReportMuted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not muted from submitting reports.");
		}
		if(PlayerInfo[playerid][pReportMuted] <= 12)
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "Your report mute is not indefinite and expires in %i playing hours.", PlayerInfo[playerid][pReportMuted]);
		}
		if(PlayerInfo[playerid][pReportMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait at least %i minutes before requesting an unmute.", (PlayerInfo[playerid][pReportMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerInfo[playerid][pCash]+PlayerInfo[playerid][pBank], 5));
		ShowPlayerDialog(playerid, DIALOG_REPORTUNMUTE, DIALOG_STYLE_LIST, "Choose your punishment for this unmute.", string, "Select", "Cancel");
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!PlayerInfo[playerid][pGlobalMuted])
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "You are not muted from the global chat.");
		}
		if(PlayerInfo[playerid][pGlobalMuteTime] > gettime())
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait at least %i minutes before requesting an unmute.", (PlayerInfo[playerid][pGlobalMuteTime] - gettime()) / 60);
		}

		format(string, sizeof(string), "Fine ($%i)\n10 Minute Jail", percent(PlayerInfo[playerid][pCash]+PlayerInfo[playerid][pBank], 5));
		ShowPlayerDialog(playerid, DIALOG_GLOBALUNMUTE, DIALOG_STYLE_LIST, "Choose your punishment for this unmute.", string, "Select", "Cancel");
	}

	return 1;
}

CMD:ahide(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return 0;
	}

	if(!PlayerInfo[playerid][pAdminHide])
	{
	    PlayerInfo[playerid][pAdminHide] = 1;
	    SendClientMessage(playerid, COLOR_AQUA, "You are now hidden in /admins and your admin rank no longer shows in /a, /g or /o.");
	}
	else
	{
	    PlayerInfo[playerid][pAdminHide] = 0;
	    SendClientMessage(playerid, COLOR_AQUA, "You are no longer hidden as an administrator.");
	}

	return 1;
}

CMD:breakin(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

    if(PlayerInfo[playerid][pTazedTime] > 0 || PlayerInfo[playerid][pInjured] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerInfo[playerid][pCuffed] > 0 || PlayerInfo[playerid][pTied] > 0 || PlayerInfo[playerid][pJoinedEvent] > 0 || PlayerInfo[playerid][pPaintball] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}
	if(vehicleid == INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of any vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You may only break into a player owned vehicle.");
	}
	if(VehicleInfo[vehicleid][vLocked] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is unlocked. Therefore you can't break into it.");
	}
	if(PlayerInfo[playerid][pLockBreak] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already attempting to break into this vehicle.");
	}
	/*if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle cannot be broken into.");
	}*/
	if(IsVehicleOwner(playerid, vehicleid))
	{
	    //return SendClientMessage(playerid, COLOR_GREY, "Why would you want to break into your own vehicle?");
	}
	if(IsVehicleBeingPicked(vehicleid))
	{
 		return SendClientMessage(playerid, COLOR_GREY, "This vehicle is already being broken into by someone else.");
	}

	PlayerInfo[playerid][pLockBreak] = vehicleid;
	PlayerInfo[playerid][pLockHealth] = 1000.0;

	SendClientMessage(playerid, COLOR_AQUA, "You have started the {FF6347}break-in{33CCFF} process. Start hitting the driver or passenger side door to break it down.");
	SendClientMessage(playerid, COLOR_AQUA, "You can use your fists for this job, however melee weapons are preferred and gets the job done faster.");
	return 1;
}

CMD:dropcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!PlayerHasJob(playerid, JOB_THIEF))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Thief.");
	}
	if(PlayerInfo[playerid][pThiefCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before dropping off another car.", PlayerInfo[playerid][pThiefCooldown]);
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(IsVehicleOwner(playerid, vehicleid) || PlayerInfo[playerid][pVehicleKeys] == vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't drop off a vehicle that belongs to you.");
	}
	if(!GetVehicleCranePrice(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't worth anything. Therefore you can't sell it.");
	}
	if(PlayerInfo[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have an active checkpoint already. /killcp to cancel it.");
	}
	if(VehicleInfo[vehicleid][vID] > 0 && IsPointInRangeOfPoint(VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], 600.0, 2695.8010, -2226.6643, 13.5501))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is parked too close to the crane.");
	}

	if(!IsPlayerInRangeOfPoint(playerid, 300.0, 2695.8010, -2226.6643, 13.5501))
	{
	    PlayerInfo[playerid][pDropTime] = gettime();
	}

	PlayerInfo[playerid][pCP] = CHECKPOINT_DROPCAR;

	SendClientMessage(playerid, COLOR_AQUA, "Navigate to the {FF6347}checkpoint{33CCFF} at the crane to drop off your vehicle.");
	SetPlayerCheckpoint(playerid, 2695.8010, -2226.6643, 13.5501, 5.0);
	return 1;
}

CMD:carvalue(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!PlayerHasJob(playerid, JOB_THIEF))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Thief.");
	}
	if(!vehicleid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be in a vehicle to use this command.");
	}
	if(IsVehicleOwner(playerid, vehicleid) || PlayerInfo[playerid][pVehicleKeys] == vehicleid)
	{
	    //return SendClientMessage(playerid, COLOR_GREY, "This vehicle belongs to you. It's not worth anything.");
	}
	if(!GetVehicleCranePrice(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't worth anything.");
	}

	SendClientMessage(playerid, COLOR_NAVYBLUE, "_____ Car Value _____");
	SendClientMessageEx(playerid, COLOR_GREY2, "Name: %s", GetVehicleName(vehicleid));

	if(GetVehicleCranePrice(vehicleid, false) == GetVehicleCranePrice(vehicleid))
	{
		SendClientMessageEx(playerid, COLOR_GREY2, "Value: {00AA00}$%i", GetVehicleCranePrice(vehicleid));
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "Value: {00AA00}$%i", GetVehicleCranePrice(vehicleid, false));

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	 	{
	 	    if(VehicleInfo[vehicleid][vNeon] != 0)
	 	    {
	 	        SendClientMessage(playerid, COLOR_GREY2, "Neon: {00AA00}+$1000");
			}
	 	    if(VehicleInfo[vehicleid][vAlarm] != 0)
	 	    {
	 	        SendClientMessageEx(playerid, COLOR_GREY2, "Alarm: {00AA00}+$%i", VehicleInfo[vehicleid][vAlarm] * 500);
			}
	 	    if(VehicleInfo[vehicleid][vTrunk] != 0)
	 	    {
			 	SendClientMessageEx(playerid, COLOR_GREY2, "Trunk: {00AA00}+$%i", VehicleInfo[vehicleid][vTrunk] * 250);
			}
			if(strcmp(VehicleInfo[vehicleid][vPlate], "None") != 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY2, "Plate: {00AA00}+$750");
			}
		}

	    SendClientMessageEx(playerid, COLOR_GREY2, "Total Value: {00AA00}$%i", GetVehicleCranePrice(vehicleid));
	}

	return 1;
}

CMD:cracktrunk(playerid, params[])
{
	new vehicleid = GetNearbyVehicle(playerid);

	if(!PlayerHasJob(playerid, JOB_THIEF))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command unless you're a Thief.");
	}
	if(PlayerInfo[playerid][pCocaineCooldown] > 0)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You need to wait %i more seconds before cracking into another trunk.", PlayerInfo[playerid][pCocaineCooldown]);
	}
	if(vehicleid == INVALID_VEHICLE_ID || !IsPlayerInRangeOfBoot(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be close to a vehicle's trunk.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from inside the vehicle.");
	}
	if(IsVehicleOwner(playerid, vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't crack the trunk on your own vehicle.");
	}
	if(VehicleInfo[vehicleid][vOwnerID] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only crack into a player owned vehicle's trunk.");
	}
	if(VehicleInfo[vehicleid][vLocked])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle is locked. /breakin to attempt to unlock it.");
	}
	if(PlayerInfo[playerid][pCocaineTrunk] != INVALID_VEHICLE_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are already cracking a trunk at the moment. Leave the area to cancel.");
	}

	switch(GetJobLevel(playerid, JOB_THIEF))
	{
	    case 1: PlayerInfo[playerid][pCocaineTime] = 60;
	    case 2: PlayerInfo[playerid][pCocaineTime] = 50;
	    case 3: PlayerInfo[playerid][pCocaineTime] = 40;
	    case 4: PlayerInfo[playerid][pCocaineTime] = 30;
	    case 5: PlayerInfo[playerid][pCocaineTime] = 20;
	}

	PlayerInfo[playerid][pCocaineTrunk] = vehicleid;

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins to pry open the trunk of the %s.", GetPlayerRPName(playerid), GetVehicleName(vehicleid));
	SendClientMessageEx(playerid, COLOR_WHITE, "** This will take about %i seconds. Do not move during the process.", PlayerInfo[playerid][pCocaineTime]);
	return 1;
}

CMD:achievements(playerid, params[])
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM achievements WHERE uid = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_ACHIEVEMENTS, playerid);
	return 1;
}

CMD:buyinsurance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -28.2710, 151.3092, 999.0621))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in any of the hospitals.");
	}
	if(PlayerInfo[playerid][pCash] < 2000)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford insurance.");
	}

	switch(GetPlayerVirtualWorld(playerid))
	{
	    case HOSPITAL_COUNTY:
	    {
	        if(PlayerInfo[playerid][pInsurance] == HOSPITAL_COUNTY)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -2000);
	        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
	        SendClientMessage(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}County General{33CCFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerInfo[playerid][pInsurance] = HOSPITAL_COUNTY;
	    }
	    case HOSPITAL_ALLSAINTS:
	    {
	        if(PlayerInfo[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -2000);
	        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
	        SendClientMessage(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}All Saints Hospital{33CCFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, PlayerInfo[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        PlayerInfo[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
	    }
	}

	return 1;
}

CMD:tie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /tie [playerid]");
	}
	if(PlayerInfo[playerid][pRope] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any ropes left.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected, or is not in your vehicle.");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie up the driver.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie yourself.");
	}
	if(PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already tied. /untie to free them.");
	}
	if(PlayerInfo[targetid][pAcceptedHelp])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie a helper who is assisting someone.");
	}
	if(PlayerInfo[targetid][pAdminDuty])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't tie an on duty administrator.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to tie anyone. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}

	PlayerInfo[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", PlayerInfo[playerid][pRope], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Tied", 3000, 3);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s ties %s with a rope.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	PlayerInfo[targetid][pTied] = 1;
	return 1;
}

CMD:untie(playerid, params[])
{
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /untie [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't untie yourself.");
	}
	if(!PlayerInfo[targetid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is not tied.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be in that player's vehicle in order to untie them.");
	}
	if(PlayerInfo[playerid][pHurt])
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You're too hurt to untie anyone. Please wait %i seconds before trying again.", PlayerInfo[playerid][pHurt]);
	}

	GameTextForPlayer(targetid, "~g~Untied", 3000, 3);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s unties the rope from %s.", GetPlayerRPName(playerid), GetPlayerRPName(targetid));

	TogglePlayerControllable(targetid, 1);
	PlayerInfo[targetid][pTied] = 0;
	return 1;
}

CMD:repaircar(playerid, params[])
{
	new entranceid = GetNearbyEntrance(playerid);

	if(entranceid == -1 || EntranceInfo[entranceid][eType] != 2)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't nearby any repairshops.");
	}
	if(EntranceInfo[entranceid][eAdminLevel] && PlayerInfo[playerid][pAdmin] < EntranceInfo[entranceid][eAdminLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your administrator level is too low to repair here.");
	}
	if(EntranceInfo[entranceid][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[entranceid][eFactionType])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific faction type.");
	}
	if(EntranceInfo[entranceid][eGang] >= 0 && EntranceInfo[entranceid][eGang] != PlayerInfo[playerid][pGang])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific gang type.");
	}
	if(EntranceInfo[entranceid][eVIP] && PlayerInfo[playerid][pVIPPackage] < EntranceInfo[entranceid][eVIP])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a higher VIP level.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't driving a vehicle.");
	}
    RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, COLOR_GREY, "Your vehicle was repaired.");
	return 1;
}

CMD:offerduel(playerid, params[])
{
	new entranceid = GetInsideEntrance(playerid), targetid;

	if(entranceid == -1 || EntranceInfo[entranceid][eType] != 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not inside of a duel arena.");
	}
	if(EntranceInfo[entranceid][eAdminLevel] && PlayerInfo[playerid][pAdmin] < EntranceInfo[entranceid][eAdminLevel])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your administrator level is too low to initiate duels here.");
	}
	if(EntranceInfo[entranceid][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[entranceid][eFactionType])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific faction type.");
	}
	if(EntranceInfo[entranceid][eGang] >= 0 && EntranceInfo[entranceid][eGang] != PlayerInfo[playerid][pGang])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a specific gang type.");
	}
	if(EntranceInfo[entranceid][eVIP] && PlayerInfo[playerid][pVIPPackage] < EntranceInfo[entranceid][eVIP])
	{
    	return SendClientMessage(playerid, COLOR_GREY, "This command is restricted to a higher VIP level.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /offerduel [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't offer to duel with yourself.");
	}
	if(PlayerInfo[targetid][pDueling] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already in a duel.");
	}

	PlayerInfo[targetid][pDuelOffer] = playerid;

	SendClientMessageEx(targetid, COLOR_AQUA, "** %s has offered you to duel with them. (/accept duel)", GetPlayerRPName(playerid));
	SendClientMessageEx(playerid, COLOR_AQUA, "** You have sent %s a duel offer.", GetPlayerRPName(targetid));
	return 1;
}

CMD:gbackup(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any gang at the moment.");
	}
	if(PlayerInfo[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot call for backup when you are dead.");
	}
	if(PlayerInfo[playerid][pCuffed])
	{
 		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}
	if(PlayerInfo[playerid][pTied])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(!PlayerInfo[playerid][pBackup])
	{
        PlayerInfo[playerid][pBackup] = 1;
	}
	else
	{
	    PlayerInfo[playerid][pBackup] = 0;
	}

	foreach(new i : Player)
	{
        if(PlayerInfo[i][pGang] == PlayerInfo[playerid][pGang])
        {
    	    if(PlayerInfo[playerid][pBackup])
    	    {
    	        SendClientMessageEx(i, COLOR_AQUA, "** %s %s is requesting backup in %s (marked on map). **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, (GangInfo[PlayerInfo[playerid][pGang]][gColor] & ~0xff) + 0xFF);
			}
			else
			{
    	        SendClientMessageEx(i, COLOR_AQUA, "** %s %s has cancelled their backup request. **", GangRanks[PlayerInfo[playerid][pGang]][PlayerInfo[playerid][pGangRank]], GetPlayerRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}
	}

	return 1;
}

CMD:confirmupgrade(playerid, params[])
{
	new houseid = PlayerInfo[playerid][pPreviewHouse], type = PlayerInfo[playerid][pPreviewType];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't previewing a house interior. '/upgradehouse interior' to begin.");
	}
	if(PlayerInfo[playerid][pCash] < houseInteriors[type][intPrice])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to upgrade to this interior.");
	}

	foreach(new i : Player)
	{
	    if(GetInsideHouse(i) == houseid)
	    {
	        SetPlayerPos(i, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	        SetPlayerFacingAngle(i, houseInteriors[type][intA]);
	        SetPlayerInterior(i, houseInteriors[type][intID]);
	        SetCameraBehindPlayer(i);
	    }
	}

	GivePlayerCash(playerid, -houseInteriors[type][intPrice]);

    HouseInfo[houseid][hType] = type;
    HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

    PlayerInfo[playerid][pPreviewHouse] = -1;
    PlayerInfo[playerid][pPreviewType] = 0;
    PlayerInfo[playerid][pPreviewTime] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, price = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hPrice], HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SendClientMessageEx(playerid, COLOR_GREEN, "You have upgraded your house to this interior for $%i.", houseInteriors[type][intPrice]);
    Log_Write("log_property", "%s (uid: %i) upgraded their house interior (id: %i) to interior %i for $%i.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pID], HouseInfo[houseid][hID], type, houseInteriors[type][intPrice]);
	return 1;
}

CMD:cancelupgrade(playerid, params[])
{
	new houseid = PlayerInfo[playerid][pPreviewHouse];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You aren't previewing a house interior at the moment.");
	}

	SetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hInterior]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hWorld]);
	SetCameraBehindPlayer(playerid);

	PlayerInfo[playerid][pPreviewHouse] = -1;
    PlayerInfo[playerid][pPreviewType] = 0;
    PlayerInfo[playerid][pPreviewTime] = 0;

    SendClientMessage(playerid, COLOR_WHITE, "You have cancelled your interior upgrade. You were returned back to your old one.");
    return 1;
}

CMD:giveachievement(playerid, params[])
{
	new targetid, name[32];

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
    if(sscanf(params, "us[32]", targetid, name))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /giveachievement [playerid] [name]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}
	if(!PlayerInfo[targetid][pLogged])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player hasn't logged in yet.");
	}

	if(!AwardAchievement(targetid, name))
	{
	    SendClientMessage(playerid, COLOR_GREY, "Invalid achievement.");
	}
	else
	{
	    SendClientMessageEx(targetid, COLOR_AQUA, "%s has awarded you with the {FF6347}%s{33CCFF} achievement.", GetPlayerRPName(playerid), name);
	    SendClientMessageEx(playerid, COLOR_AQUA, "You have awarded %s with the {FF6347}%s{33CCFF} achievement.", GetPlayerRPName(targetid), name);
	}

	return 1;
}

CMD:vipmusic(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You must be a donator to use this command!");
	}
	if(isnull(params))
	{
	 	return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /vipmusic [songname.mp3]");
	}
	if(gettime() - gLastMusic < 300)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Music can only be played globally every 5 minutes.");
	}
	new url[144];
	format(url, sizeof(url), "http://%s/%i/%s", VIP_MUSIC_URL, PlayerInfo[playerid][pID], params);
	foreach(new i : Player)
	{
 		if(!PlayerInfo[i][pToggleMusic] && PlayerInfo[i][pStreamType] == MUSIC_NONE)
   		{
			PlayAudioStreamForPlayer(i, url);
		}
	}
	SendClientMessageToAllEx(COLOR_VIP, "VIP Music: %s VIP %s has started the global playback of %s from their music folder!", GetVIPRank(PlayerInfo[playerid][pVIPPackage]), GetPlayerRPName(playerid), params);
    gLastMusic = gettime();
	return 1;
}

CMD:kill(playerid, params[])
{
	new Float:health;
	GetPlayerHealth(playerid, health);

	if(PlayerInfo[playerid][pCuffed] == 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot kill yourself while cuffed!");
	}
	if(PlayerInfo[playerid][pTied] == 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot kill yourself while tied!");
	}
	if(PlayerInfo[playerid][pJailTime] > 1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot do this while in jail.");
	}
	if(PlayerInfo[playerid][pInjured] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are too injured to attempt suicide!");
	}

	if(health < 15.0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your health is currently too low to kill yourself.");
	}

    switch(GetPlayerWeapon(playerid))
	{
		case 0 .. 21:
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s reaches into their pocket, pulling out a large quantity of pills, swallowing them.", GetPlayerRPName(playerid));
		}
		case 22 .. 24:
		{
		   SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s raises their handgun to their head, pulling the trigger.", GetPlayerRPName(playerid));
		}
		case 25 .. 27:
		{
			SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s places the barrel of their shotgun into their mouth, pulling the trigger.", GetPlayerRPName(playerid));
		}
		case 28 .. 39:
  		{
		    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s places the barrel of their weapon into their mouth, pulling the trigger.", GetPlayerRPName(playerid));
		}
	}
	SetPlayerHealth(playerid, 0.0);
	return 1;
}



CMD:garbage(playerid, params[])
{
	if(!PlayerHasJob(playerid, JOB_GARBAGEMAN))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Garbage Man.");
	}
	if(!(GetVehicleModel(GetPlayerVehicleID(playerid)) == 408 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
		return SendClientMessage(playerid, COLOR_GREY, "You need to be driving a Trashmaster.");	
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1622.7959,-1825.0040,13.5293))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not at the starting point");
	}
	if(PlayerInfo[playerid][pGarbage] > 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You're already doing a garbage run!");
	}
	GameTextForPlayer(playerid, "Proceed to the~n~Checkpoint", 5000, 3);
	PlayerInfo[playerid][pGarbage] = 1;
	PlayerInfo[playerid][pCP] = CHECKPOINT_GARBAGE;
 	SetPlayerCheckpoint(playerid, 1517.4667,-1845.7744,13.5469, 5.0);
	return 1;
}

CMD:forcetut(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /forcetut [playerid]");
	}
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has forced %s to watch the server tutorial", GetPlayerRPName(playerid), GetPlayerRPName(targetid));
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "Administrator %s has forced you to rewatch the server tutorial.", GetPlayerRPName(playerid));
	PlayerInfo[targetid][pTutorial] = 1;
  	PlayerInfo[targetid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", targetid, 1);
  	return 1;
}

CMD:clearreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has cleared all active reports.", GetPlayerRPName(playerid));
	return 1;
}


CMD:endalliance(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /endalliance [confirm]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be in a gang to use this command");
	}
	if(PlayerInfo[playerid][pGangRank] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be rank 6 to use this command.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Your gang isn't currently in an alliance.");
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "You just ended your alliance with %s.", GangInfo[allyid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has ended their alliance with {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:endwar(playerid, params[])
{
	new gangid = PlayerInfo[playerid][pGang];
	new allyid = GangInfo[gangid][gWar];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /endwar [confirm]");
	}
	if(PlayerInfo[playerid][pGang] == -1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be in a gang to use this command");
	}
	if(PlayerInfo[playerid][pGangRank] < 6)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be rank 6 to use this command.");
	}
	if(GangInfo[gangid][gWar] == -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Your gang isn't currently in a war.");
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "You just ended your war with %s.", GangInfo[allyid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SendClientMessageToAllEx(COLOR_WHITE, "(( Gang News: {%06x}%s{FFFFFF} has ended their war with {%06x}%s{FFFFFF} ))", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET war = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gWar] = -1;
	GangInfo[gangid][gWar] = -1;

	return 1;
}

CMD:clothes(playerid, params[])
{
	if(PlayerInfo[playerid][pVIPPackage] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1826.3379, -1308.8324, 1131.7552))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not in range of the VIP locker.");
	}
	new skins[311], index;

	for(new i = 0; i < 312; i ++)
	{
		if(i != 74)
		{
		    skins[index++] = i;
		}
	}

    ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_VIPCLOTHES, "VIP Clothes", skins);
	return 1;
}

CMD:firstaid(playerid, params[])
{
	if(PlayerInfo[playerid][pFirstAid] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have any first aid kits.");
	}
	if(GetPlayerHealthEx(playerid) >= 100)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can only use a first aid kit if your health is below 100.");
	}
	if(PlayerInfo[playerid][pReceivingAid])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have already used a first aid kit.");
	}

	PlayerInfo[playerid][pFirstAid]--;
	PlayerInfo[playerid][pReceivingAid] = 1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstaid = %i WHERE uid = %i", PlayerInfo[playerid][pFirstAid], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s administers first aid to their self.", GetPlayerRPName(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "HINT: Your first aid kit is in effect until your health is full.");
	return 1;
}

CMD:scanner(playerid, params[])
{
	if(!PlayerInfo[playerid][pPoliceScanner])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have a police scanner.");
	}

	if(!PlayerInfo[playerid][pScannerOn])
	{
	    PlayerInfo[playerid][pScannerOn] = 1;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns on their police scanner.", GetPlayerRPName(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, "You will now hear messages from emergency and department chats.");
	}
	else
	{
	    PlayerInfo[playerid][pScannerOn] = 0;
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s turns off their police scanner.", GetPlayerRPName(playerid));
	}

	return 1;
}

CMD:bodykit(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(PlayerInfo[playerid][pBodykits] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no bodywork kits which you can use.");
	}
	if(gettime() - PlayerInfo[playerid][pLastRepair] < 60)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only repair a vehicle every 60 seconds. Please wait %i more seconds.", 60 - (gettime() - PlayerInfo[playerid][pLastRepair]));
	}

    PlayerInfo[playerid][pBodykits]--;
    PlayerInfo[playerid][pLastRepair] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bodykits = %i WHERE uid = %i", PlayerInfo[playerid][pBodykits], PlayerInfo[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s repairs the health and bodywork on their vehicle.", GetPlayerRPName(playerid));
	return 1;
}

CMD:rimkit(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not driving any vehicle.");
	}
	if(PlayerInfo[playerid][pRimkits] <= 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have no rimkits which you can use.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && PlayerInfo[playerid][pVehicleKeys] != vehicleid && !(VehicleInfo[vehicleid][vGang] >= 0 && PlayerInfo[playerid][pGang] == VehicleInfo[vehicleid][vGang]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't belong to you.");
	}
	if(!VehicleHasDoors(vehicleid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command in this type of vehicle.");
	}

	ShowPlayerDialog(playerid, DIALOG_USERIMKIT, DIALOG_STYLE_LIST, "Choose which set of rims to install.", "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Select", "Cancel");
	return 1;
}

CMD:shutdownserver(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{

		if(strcmp(params, "confirm", true))
		{
			SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /shutdown [confirm]");
 			SendClientMessage(playerid, COLOR_GREY3, "This command save all player accounts and shutsdown the server.");
  			return 1;
		}
		if(gGMX)
		{
	 	  	return SendClientMessage(playerid, COLOR_GREY, "You have already called for a server shutdown. You can't cancel it.");
		}

  		gGMX = 0;
		SetTimer("FinishServerShutdown", 5000, false);
		SendClientMessage(playerid, COLOR_GREY, "Server will shutdown in 5 seconds.");

		foreach(new i : Player)
		{
		    TogglePlayerControllable(i, 0);
			SavePlayerVariables(i);
		}
	}
	return 1;
}

CMD:showturfs(playerid, params[])
{
	if(!PlayerInfo[playerid][pShowTurfs])
	{
        	ShowTurfsOnMap(playerid, true);
        	SendClientMessage(playerid, COLOR_AQUA, "You will now see turfs on your mini-map.");
	}
	else
	{
        	ShowTurfsOnMap(playerid, false);
        	SendClientMessage(playerid, COLOR_AQUA, "You will no longer see any turfs on your mini-map.");
	}

	return 1;
}


CMD:turfs(playerid, params[])
{
	new turfid, name[32], color, timeleft[32], string[2048];
	//SendClientMessageEx(playerid, COLOR_GREEN, "---- Turfs ----");
	format(string, sizeof(string), "");
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((0 < TurfInfo[turfid][tType] < 8) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Shutdown by The Police";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_FACTIONCHAT;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d hours left", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s {FFFFFF}%i. xe| Name: %s | Owner: {%06x}%s{FFFFFF} | Claimer: %s | Perk: %s | %s \n", string, turfid, TurfInfo[turfid][tName], color >>> 8, name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
			else
			{
			    format(tsstring, sizeof(tsstring), "%s {FFFFFF}%i. | Name: %s | Owner: {%06x}%s{FFFFFF} | Claimer: %s | Perk: %s | %s \n", string, turfid, TurfInfo[turfid][tName], color >>> 8, name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
		}
	}
    ShowPlayerDialog(playerid, DIALOG_TURFLIST, DIALOG_STYLE_MSGBOX, "Turf list", string, "Next", "Cancel");
	return 1;
}
CMD:rules(playerid, params[])
{
	return ShowDialogToPlayer(playerid, DIALOG_RULES);
}

CMD:sellmybackpack(playerid, params[])
{
	new giveplayerid, string[128], amount, bpID = GetPlayerBackpackID(playerid);
	if(!PlayerHasBackpack(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, " You dont have any backpack to sell!");
	new bpstored = GetBackpackStored(playerid);
	if(bpstored == 1) return SendClientMessageEx(playerid, COLOR_GREY, " You don't have your backpack with you!You just stored it in your house.");
	else if(bpstored == 2) return SendClientMessageEx(playerid, COLOR_GREY, " You don't have your backpack with you! You just stored it in your vehicle trunk.");
	//if(PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessageEx(playerid, COLOR_GREY, "Administrators are not allowed to sell their backpack!");
	if(sscanf(params ,"ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY," USAGE: /sellmybackpack [giveplayerid] [price]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "What was that? Ofcourse you can't sell your backpack to yourself");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, " Invalid Player ID !");
	if(PlayerHasBackpack(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, " That player has already a Backpack!");
	new bpstored2 = GetBackpackStored(giveplayerid);
    if(bpstored2 == 1) return SendClientMessageEx(playerid, COLOR_GREY, "That player has already his backpack stored in his/her house!");
	else if(bpstored2 == 2) return SendClientMessageEx(playerid, COLOR_GREY, "That player has already his backpack stored in his/her vehicle trunk!");
	if(1 < amount > 10000000) return SendClientMessageEx(playerid, COLOR_GREY, "Price must not a negative value or over $10,000,000!");
	if(GetPlayerCash(giveplayerid) < amount) return SendClientMessageEx(playerid, COLOR_GREY, " That player dont have enought cash to buy your backpack!");
	if(BackpackInfo[bpID][bCash] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm") || BackpackInfo[bpID][bPot] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm") || BackpackInfo[bpID][bCrack] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm") || BackpackInfo[bpID][bMats] != 0 && !GetPVarInt(playerid, "SellBackpackConfirm"))
	{
		ShowPlayerDialog(playerid, 0 , DIALOG_STYLE_MSGBOX, "Backpack Notice", "Are you sure do you want to sell your Backpack when you still have items on it?\nIf Yes kindly re-enter the command!", "Okay", "");
		SetPVarInt(playerid, "SellBackpackConfirm", 1);
	    return 1;
	}
	DeletePVar(playerid, "SellBackpackConfirm");
	format(string ,sizeof(string), "* Player %s has offered you to buy his %s for $%s (/acceptbackpack) to buy or (/denybackpack) if not", GetPlayerNameEx(playerid) , GetPlayerStorageType(playerid), FormatNumber(amount));
	SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE , string);
	format(string ,sizeof(string) ,"* You have offered %s to buy your %s for $%s", GetPlayerNameEx(giveplayerid) ,GetPlayerStorageType(playerid) , FormatNumber(amount));
	SendClientMessageEx(playerid, COLOR_ROYALBLUE, string);
	SetPVarInt(giveplayerid, "BackpackSeller", playerid);
	SetPVarInt(giveplayerid, "BackpackPrice", amount);
	SetPVarInt(giveplayerid, "BackpackID", bpID);
	return 1;
}


CMD:backpackhelp(playerid) {
    new string[3000];
    strcat(string, "\t\t** {00AA00}Dynamic Backpack System Version 1 of EndLess Roleplay{FFFFFF} **");
    strcat(string, "\n\n{FF00FF}Information:{FFFFFF}");
    strcat(string, "\n You can now store items in your Backpack! such as Cash/Pot/Crack/Mats/Weapons check it below.");
    strcat(string, "\n And also need to play more 5 playing hours to be able to use backpacks and 10 playing hours to sell a Backpack");
    strcat(string, "\n 3 Types of Backpack: {FFFFFF}Small Backpack {FF9500}Medium Backpack {0000FF}Large Backpack");
    strcat(string, "\n\n\n~ {FFFFFF}Small Backpack LIMIT{FFFFFF} ~");
    format(string, sizeof(string), "%s\n\t\
		 -Max Cash : {FFFF00}$%s Cash{FFFFFF}\n\t\
		 -Max Pots: {FFFF00}%sg Pots{FFFFFF}\n\t\
		 -Max Cracks: {FFFF00}%sg Cracks{FFFFFF}\n\t\
		 -Max Materials: {FFFF00}%s Materials{FFFFFF}\n\t\
		 -Max Weapons: {FFFF00}2 Weapons{FFFFFF}",
		 string,
		 number_format(sbackpacklimit[LIMIT_CASH]),
		 number_format(sbackpacklimit[LIMIT_POT]),
		 number_format(sbackpacklimit[LIMIT_CRACK]),
		 number_format(sbackpacklimit[LIMIT_MATS])
	);
 	strcat(string, "\n\n\n~ {FF9500}Medium Backpack LIMIT{FFFFFF} ~");
    format(string, sizeof(string), "%s\n\t\
		 -Max Cash : {FFFF00}$%s Cash{FFFFFF}\n\t\
		 -Max Pots: {FFFF00}%sg Pots{FFFFFF}\n\t\
		 -Max Cracks: {FFFF00}%sg Cracks{FFFFFF}\n\t\
		 -Max Materials: {FFFF00}%s Materials{FFFFFF}\n\t\
		 -Max Weapons: {FFFF00}3 Weapons{FFFFFF}",
		 string,
		 number_format(mbackpacklimit[LIMIT_CASH]),
		 number_format(mbackpacklimit[LIMIT_POT]),
		 number_format(mbackpacklimit[LIMIT_CRACK]),
		 number_format(mbackpacklimit[LIMIT_MATS])
	);
	strcat(string, "\n\n\n~ {0000FF}Large Backpack LIMIT{FFFFFF} ~");
    format(string, sizeof(string), "%s\n\t\
		 -Max Cash : {FFFF00}$%s Cash{FFFFFF}\n\t\
		 -Max Pots: {FFFF00}%sg Pots{FFFFFF}\n\t\
		 -Max Cracks: {FFFF00}%sg Cracks{FFFFFF}\n\t\
		 -Max Materials: {FFFF00}%s Materials{FFFFFF}\n\t\
		 -Max Weapons: {FFFF00}5 Weapons{FFFFFF}",
		 string,
		 number_format(lbackpacklimit[LIMIT_CASH]),
		 number_format(lbackpacklimit[LIMIT_POT]),
		 number_format(lbackpacklimit[LIMIT_CRACK]),
		 number_format(lbackpacklimit[LIMIT_MATS])
	);
	strcat(string, "\n\n{9ACD32}Commands List:{FFFFFF}");
    strcat(string, "\n/backpackopen (/bpopen)\t/sellmybackpack\t/accepbackpack\t/denybackpack");
    if(PlayerInfo[playerid][pAdmin] >= 8) strcat(string, "\n{FF3080}Admin Commands List:{FFFFFF}\n/givebackpack\t/removebackpack\t/editbackpack");
    strcat(string, "\n\n\n{FFFFFF}Notice:\n\t{FF8000} This only a Version 1 so expect more changes in the System ?? Have fun enjoy the updates");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "* {007FFF}Dynamic Backpack System v1.0 of EndLess Roleplay *", string, "Like", "");
	return 1;
}

CMD:acceptbackpack(playerid, params[])
{
	if(!GetPVarType(playerid, "BackpackSeller")) return SendClientMessageEx(playerid, COLOR_GREY, "No one offerec you to buy a Backpack!");
	new sellerid = GetPVarInt(playerid, "BackpackSeller"), price = GetPVarInt(playerid, "BackpackPrice"), index = GetPVarInt(playerid, "BackpackID");
	if(PlayerHasBackpack(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You already have a Backpack!");
	if(!IsPlayerConnected(sellerid)) return SendClientMessageEx(playerid, COLOR_GREY, "The Player offered you a Backpack is isn't connected!");
	if(!PlayerHasBackpack(sellerid)) return SendClientMessageEx(playerid, COLOR_GREY, "The Seller doesn't have any Backpack to sell!");
	if(price > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You dont have enough cash to buy this Backpack");
	if(!GetPVarType(playerid, "BuyBackpackConfirm")) return SetPVarInt(playerid, "BuyBackpackConfirm", 1), ShowPlayerDialog(playerid, 0 , DIALOG_STYLE_MSGBOX, "Backpack Notice!", "Are you sure do you want to buy this backpack? If Yes kindly re-enter the command", "Okay", "");
	DeletePVar(playerid, "BuyBackpackConfirm");
	new string[128];
	format(string ,sizeof(string), "* Player %s has successfuly bought your %s for $%s", GetPlayerNameEx(playerid) , GetPlayerStorageType(sellerid), FormatNumber(price));
	SendClientMessageEx(sellerid, COLOR_ROYALBLUE, string);
	format(string, sizeof(string), "* You have successfuly bought %s's %s for $%s", GetPlayerNameEx(sellerid), GetPlayerStorageType(sellerid) , FormatNumber(price));
	SendClientMessageEx(playerid, COLOR_ROYALBLUE, string);
	GivePlayerCash(playerid, -price);
	GivePlayerCash(sellerid, price);
	BackpackInfo[index][bBackpackOwner] = GetPlayerSQLId(playerid);
	if(IsPlayerAttachedObjectSlotUsed(sellerid, 9)) RemovePlayerAttachedObject(sellerid, 9);
    if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
    switch(BackpackInfo[index][bBackpackSize]) {
        case 1: SetPlayerAttachedObject(playerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1);
	}
	backpackid[sellerid] = MAX_BACKPACKS+1;
	backpackid[playerid] = index;
	SavePlayerVariables(sellerid);
	SavePlayerVariables(playerid);
	DeletePVar(playerid, "BackpackSeller");
	DeletePVar(playerid, "BackpackPrice");
	DeletePVar(playerid, "BackpackID");
	return 1;
}
CMD:denybackpack(playerid, params[])
{
    new string[128], sellerid = GetPVarInt(playerid, "BackpackSeller"), price = GetPVarInt(playerid, "BackpackPrice");
    if(!GetPVarType(playerid, "BackpackSeller")) return SendClientMessageEx(playerid, COLOR_GREY, "No one offerec you to buy a Backpack!");
    format(string ,sizeof(string), "* Player %s has turn down your offer to buy your %s for $%s", GetPlayerNameEx(playerid) , GetPlayerStorageType(sellerid), FormatNumber(price));
	SendClientMessageEx(sellerid, COLOR_ROYALBLUE, string);
	format(string, sizeof(string), "* You have turn down the offer of %s's %s for $%s", GetPlayerNameEx(sellerid), GetPlayerStorageType(sellerid) , FormatNumber(price));
	SendClientMessageEx(playerid, COLOR_ROYALBLUE, string);
	DeletePVar(playerid, "BackpackSeller");
	DeletePVar(playerid, "BackpackPrice");
	DeletePVar(playerid, "BackpackID");
	return 1;
}
CMD:removebackpack(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
        return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
    new giveplayerid, string[128];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /removebackpack [playerid]");
	if(!PlayerHasBackpack(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That player doesn't have any Backpack!");
	format(string ,sizeof(string), "* Admin %s has removed your %s and all items except weapons has been added to your stats", GetPlayerNameEx(playerid), GetPlayerStorageType(giveplayerid));
	SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE, string);
	format(string ,sizeof(string), "* You have removed Player %s's %s and all items except gun in the Backpack has been added to their stats", GetPlayerNameEx(giveplayerid), GetPlayerStorageType(giveplayerid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	new bpID = GetPlayerBackpackID(giveplayerid);
	if(BackpackInfo[bpID][bCash] != 0) GivePlayerCash(giveplayerid, BackpackInfo[bpID][bCash]);
	if(BackpackInfo[bpID][bPot] != 0) PlayerInfo[giveplayerid][pWeed] += BackpackInfo[bpID][bPot];
	if(BackpackInfo[bpID][bCrack] != 0) PlayerInfo[giveplayerid][pCocaine] += BackpackInfo[bpID][bCrack];
	if(BackpackInfo[bpID][bMats] != 0) PlayerInfo[giveplayerid][pMaterials] += BackpackInfo[bpID][bMats];
	BackpackInfo[bpID][bCash] = 0;
	BackpackInfo[bpID][bPot] = 0;
	BackpackInfo[bpID][bCrack] = 0;
	BackpackInfo[bpID][bMats] = 0;
	BackpackInfo[bpID][bGun][0] = 0;
	BackpackInfo[bpID][bGun][1] = 0;
	BackpackInfo[bpID][bGun][2] = 0;
	BackpackInfo[bpID][bGun][3] = 0;
	BackpackInfo[bpID][bGun][4] = 0;
	BackpackInfo[bpID][bBackpackOwner] = -1;
	SavePlayerVariables(giveplayerid);
	if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 9)) RemovePlayerAttachedObject(giveplayerid, 9);
	backpackid[giveplayerid] = MAX_BACKPACKS+1;
	return 1;
}

CMD:bpopen(playerid) return callcmd::backpackopen(playerid);
CMD:backpackopen(playerid) {
	if(!PlayerHasBackpack(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You dont have any Backpack");
	new bpstored = GetBackpackStored(playerid);
	if(bpstored == 1) return SendClientMessageEx(playerid, COLOR_GREY, " You don't have your backpack with you! You just stored in your house safe!");
	else if(bpstored == 2) return SendClientMessageEx(playerid, COLOR_GREY, " You don't have your backpack with you! You just stored in your vehicle trunk!");
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lays their backpack on the ground-.. as he open it.", GetPlayerRPName(playerid));
	ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
 	ShowPlayerBackpack(playerid);
 	return 1;
}
CMD:editbackpack(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 8)
        return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editbackpack [playerid]");
 	if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't connected");
 	if(!PlayerHasBackpack(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That player doesn't have any backpack!");
 	new bpID = GetPlayerBackpackID(giveplayerid);
 	new bpstored = GetBackpackStored(giveplayerid);
 	if(bpstored == 1) SendClientMessageEx(playerid, COLOR_WHITE, "NOTE: That player has their backpack stored in their house safe");
	else if(bpstored == 2) SendClientMessageEx(playerid, COLOR_WHITE, "NOTE: That player has their backpack stored in their vehicle trunk");
 	SetPVarInt(playerid, "GetPlayerID", giveplayerid);
 	ShowEditBackpackDialog(playerid, bpID);
	return 1;
}
CMD:givebackpack(playerid, params[])
{
 	if(PlayerInfo[playerid][pAdmin] < 8)
        return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
    new giveplayerid, bsize, bpsize[32], string[128];
    if(sscanf(params,"ud", giveplayerid, bsize))
    {
		 SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givebackpack [playerid] [backpacksize]");
		 SendClientMessageEx(playerid, COLOR_GREY, "Available Size: ( 1 - Small Backpack | 2 - Medium Backpack | 3 - Large Backpack )");
		 return 1;
	}
	if(bsize < 1 || bsize > 3) return SendClientMessageEx(playerid, COLOR_GREY, "Invalid Backpack Size!");
	if(IsPlayerConnected(giveplayerid))
	{
		printf("Step 1");
	    switch(bsize)
	    {
		    case 1: format(bpsize,sizeof(bpsize), "Small Backpack");
		    case 2: format(bpsize,sizeof(bpsize), "Medium Backpack");
		    case 3: format(bpsize,sizeof(bpsize), "Large Backpack");
		}
	    new bpID = GetPlayerBackpackID(giveplayerid);
		if(PlayerHasBackpack(giveplayerid) && BackpackInfo[bpID][bBackpackSize] == bsize)
		{
			format(string,sizeof(string), "Player %s has already a %s!",GetPlayerNameEx(giveplayerid), GetPlayerStorageType(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GREY, string);
			//printf("Step 1.1");
			return 1;
		}
		else if(PlayerHasBackpack(giveplayerid) && BackpackInfo[bpID][bBackpackSize] != bsize)
		{
		    new bpstored = GetBackpackStored(giveplayerid);
		    format(string, sizeof(string), "* You have setted %s's %s to %s", GetPlayerNameEx(giveplayerid) ,GetPlayerStorageType(giveplayerid),bpsize);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    if(bpstored == 1 || bpstored == 2) SendClientMessageEx(playerid, COLOR_GREY, "NOTE: That player has already their backpack stored in house either vehicle trunk!");
			format(string,sizeof(string), "* Admin %s has setted your %s to %s", GetPlayerNameEx(playerid), GetPlayerStorageType(giveplayerid), bpsize);
			SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE, string);
			BackpackInfo[bpID][bBackpackSize] = bsize;
		    SaveBackpack(bpID);
		    LoadPlayerBackpack(giveplayerid);
		    return 1;
		}
		else if(!PlayerHasBackpack(giveplayerid))
		{
			printf("Step 1.3");
			new query[230];
			for(new index = 0; index<MAX_BACKPACKS; index++)
			{
			    if(BackpackInfo[index][bBackpackOwner] == -1)
			    {
			        BackpackInfo[index][bBackpackOwner] = GetPlayerSQLId(giveplayerid);
			        BackpackInfo[index][bBackpackSize] = bsize;
			        if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 9)) RemovePlayerAttachedObject(giveplayerid, 9);
                    switch(BackpackInfo[index][bBackpackSize])
					{
                        case 1: SetPlayerAttachedObject(giveplayerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1, 0x00AA00FF);
                    	case 2: SetPlayerAttachedObject(giveplayerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1, 0xFFFF9500);
                     	case 3: SetPlayerAttachedObject(giveplayerid, 9, 3026, 1, -0.15, -0.1, 0, 0, 0, 0, 1, 1, 1, 0xFFFF00EA);
                	}
 					printf("Step 1.4");
					backpackid[giveplayerid] = index;
					mysql_format(connectionID, query, sizeof(query), "INSERT INTO `playerbackpack` (`BackpackOwner`) VALUES ('%d')", GetPlayerSQLId(giveplayerid));
					mysql_tquery(connectionID, query);
					printf("Step 1.5");
					format(string, sizeof(string), "* You have setted %s's %s to %s", GetPlayerNameEx(giveplayerid) ,GetPlayerStorageType(giveplayerid),bpsize);
		    		SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string,sizeof(string), "* Admin %s has given you a %s ", GetPlayerNameEx(playerid), GetPlayerStorageType(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_ROYALBLUE, string);
					index = MAX_BACKPACKS;
				}
			}
			printf("Step 2");
		}
		printf("Step 3");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Invalid Player ID!");
	return 1;
}

//-----------------[PM system by Riggie]----------------
CMD:pm(playerid, params[])
{
    new targetid, msg[128];
    if(IsPlayerConnected(playerid))    	
	{
		if(isPMOff[playerid])
			return SendClientMessage(playerid, COLOR_GREY, "You have your PM togged off. /togpm to enable it");

	    if(sscanf(params, "us[128]", targetid, msg)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pm <playerid> <message>");
		{
		    if(targetid == playerid)
	        {
	            return SendClientMessage(playerid, COLOR_GREY, "You can't pm yourself.");
	        }

	        if(isPMOff[targetid])
	        	return SendClientMessage(playerid, COLOR_GREY, "That player has their PM togged off.");

			if(IsPlayerConnected(targetid))
			{
			    new targetname[125];
				targetname = GetPlayerNameEx(targetid);
				SendClientMessageEx(targetid, COLOR_NAVYBLUE, "(( PM from %s: %s ))", GetPlayerRPName(playerid), msg);
	            SendClientMessageEx(playerid, COLOR_NAVYBLUE, "(( PM to %s: %s ))", GetPlayerRPName(targetid), msg);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_GREY, "The target player is offline!");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You must login before using this command!");
}

CMD:togpm(playerid){

	if(isPMOff[playerid]){
		isPMOff[playerid] = false;
		return SendClientMessage(playerid, COLOR_SYNTAX, "You have toggled on your PM.");
	}
	else{
		isPMOff[playerid] = true;
		return SendClientMessage(playerid, COLOR_SYNTAX, "You have toggled off your PM.");
	}
}

CMD:getpositioninfo(playerid){

	if(PlayerInfo[playerid][pAdmin] < 2 && !PlayerInfo[playerid][pDeveloper])
		return SendClientMessage(playerid, COLOR_SYNTAX, "You are not authorized to use this command!");

	if(!PlayerInfo[playerid][pAdminDuty] && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid, COLOR_SYNTAX, "You need to be on admin duty to be able to use this command.");

	new
		Float:tempPos[3],
		interior, world;

	GetPlayerPos(playerid, tempPos[0], tempPos[1], tempPos[2]);
	GetPlayerInterior(interior);
	GetPlayerVirtualWorld(world);

	SendClientMessageEx(playerid, COLOR_SYNTAX, "X: %f Y: %f Z: %f | Int: %d | World: %d", tempPos[0], tempPos[1], tempPos[2], interior, world);

	return 1;
}

CMD:windows(playerid, params[])
{
	new str[128];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You must be inside of a vehicle to use this.");
	if(!VehicleHasWindows(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't have windows.");
	if(PlayerInfo[playerid][pCuffed]) return SendClientMessage(playerid, COLOR_GREY, "You can't use this whilst cuffed.");
	if(VehicleInfo[GetPlayerVehicleID(playerid)][vWindowsOpen] == false)
	{
		VehicleInfo[GetPlayerVehicleID(playerid)][vWindowsOpen] = true;
		format(str, sizeof(str), "* %s winds down the vehicles windows.", GetPlayerRPName(playerid));
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, str);
		SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 0, 0, 0, 0);
	}
	else
	{
		VehicleInfo[GetPlayerVehicleID(playerid)][vWindowsOpen] = false;
		format(str, sizeof(str), "* %s winds up the vehicles windows.", GetPlayerRPName(playerid));
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, str);
		SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), 1, 1, 1, 1);
	}
	return 1;
}

CMD:version(playerid, params[]){

	new str[500];

	format(str, sizeof(str), 
		"* Added /windows command\n\
		* Players can no longer use /stuck if frozen by an admin\n\
		* New speed-o-meter ~credits to ConnorW\n\
		* Fixed \"DEDICATION\" achievement\n\
		* Fixed spamming if windows are up\n\
		* Fixed text not showing if windows are down");

	ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, SERVER_REVISION, str, "Ok", "");

	return 1;
}
